add_hpelinux_compute.dita:            can find detailed descriptions of these fields <xref keyref="configobj_servers"
add_hpelinux_compute.dita:              keyref="configobj_controlplane">Input Model - Control Plane</xref> for more
add_hpelinux_compute.dita:              keyref="persisteddata/persistedserverallocations">Input Model</xref> for information
adding_moonshot_nodes.dita:    <p>The HPE Moonshot Servers are now verified hardware to run <keyword keyref="kw-hos"/>. The
adding_moonshot_nodes.dita:              section in the <keyword keyref="kw-hos"/> input model should not be present for
add_osd_node.dita:          <p>You can find detailed descriptions of these fields <xref keyref="configobj_servers"
add_osd_node.dita:          Step 5.<p>See <xref keyref="configobj_controlplane">Input Model - Control Plane</xref> for
add_osd_node.dita:            Allocations section in <xref keyref="persisteddata/persistedserverallocations"><keyword
add_osd_node.dita:                keyref="kw-hos-phrase"/> Input Model</xref> for information on how this
add_rados_gateway.dita:                Ceph model in <keyword keyref="kw-hos-phrase"/> has been extended to include support
add_rados_gateway.dita:                component to a pre-deployed <keyword keyref="kw-hos"/> cloud that is not running
add_rados_gateway.dita:                    has changed in <keyword keyref="kw-hos-phrase"/>. Previously, a Ceph deployment
add_rados_gateway.dita:                    used a single network where the default <keyword keyref="kw-hos-phrase"/>
add_rados_gateway.dita:                    monitoring). The upgrade to <keyword keyref="kw-hos-phrase"/> might lead to
add_rhel_compute.dita:              can find detailed descriptions of these fields <xref keyref="configobj_servers"
add_rhel_compute.dita:                <xref keyref="configobj_controlplane">Input Model - Control Plane</xref> for more
add_rhel_compute.dita:                keyref="persisteddata/persistedserverallocations">Input Model</xref> for information
add_rhel_compute.dita:            <li>Mount the <keyword keyref="kw-hos-phrase"/> iso to
add_rhel_compute.dita:            <p>You can find detailed descriptions of these fields <xref keyref="configobj_servers"
add_rhel_compute.dita:                <xref keyref="configobj_controlplane">Input Model - Control Plane</xref> for more
add_rhel_compute.dita:                keyref="persisteddata/persistedserverallocations">Input Model</xref> for information
admin_role_segregation.dita:        keyref="kw-hos-phrase"/>. These roles serve as a way to group common administrative needs at
alarm_resolutions.dita:  <abstract><shortdesc><keyword keyref="kw-hos"/> provides a monitoring solution based on
alarm_resolutions.dita:      components, as well as much of the underlying system. By default, <keyword keyref="kw-hos"/>
alternative_configurations.dita:        <p>In <keyword keyref="kw-hos-phrase"/> there are alternative configurations that we
alternative_configurations.dita:                <li><xref keyref="entryscale_kvm_ceph_onenetwork">Entry-scale KVM with Ceph Model
alternative_configurations.dita:                <li><xref keyref="entryscale_kvm_ceph_twonetwork">Entry-scale KVM with Ceph Model
alternative_configurations.dita:                <li><xref keyref="standalone_deployer">Using a Standalone Lifecycle-Manager
alternative_configurations.dita:                <li><xref keyref="without_dvr">Configuring <keyword keyref="kw-hos"/> without
alternative_configurations.dita:                <li><xref keyref="without_l3agent">Configuring <keyword keyref="kw-hos"/> with
alternative_configurations.dita:                <li><xref keyref="twosystems">Considerations When Installing Two Systems on One
api_verification.dita:      <p><keyword keyref="kw-hos-phrase"/> provides a tool, Tempest, that you can use to verify that
api_verification.dita:      <note type="note">In <keyword keyref="kw-hos-phrase"/>, the EXT_NET_CIDR setting for the
api_verification.dita:          keyref="configobj_neutron_external_networks"
api_verification.dita:      In <keyword keyref="kw-hos-phrase"/>,  Tempest has been modelled as a service and this gives you the ability to 
api_verification.dita:          <keyword keyref="kw-hos"/> lifecycle manager node. For details on what Tempest is testing,
arcsight.dita:        <p><keyword keyref="kw-hos"/>, through its centralized logging infrastructure (Logstash),
arcsight.dita:          correlate <keyword keyref="kw-hos"/> logs through HPE ArcSight Logger and ESM and supports
arcsight.dita:          continuous security monitoring of the entire <keyword keyref="kw-hos"/> infrastructure.
arcsight.dita:          time from this Logstash configuration inside an <keyword keyref="kw-hos"/> environment,
arcsight.dita:            <keyword keyref="kw-hos"/> logs through HPE ArcSight Logger and ESM. It supports
arcsight.dita:          security monitoring for continuous compliance across an <keyword keyref="kw-hos"/>
arcsight.dita:            <li><keyword keyref="kw-hos"/> infrastructure </li>
arcsight.dita:            <li><keyword keyref="kw-hos"/> services </li>
arcsight.dita:          infrastructure by monitoring their entire <keyword keyref="kw-hos"/> cloud in addition to
arcsight.dita:        format="html" scope="external">Monitoring <keyword keyref="kw-hos"/> with HPE ArcSight</xref>.</p>
audit_logs_overview.dita:      regional policies, <keyword keyref="kw-hos"/> provides auditing support as a basic security
audit_logs_overview.dita:    <p>The <keyword keyref="kw-hos"/> audit logging feature uses Audit Middleware for Python
audit_logs_overview.dita:      on the lifecycle manager and it can only be enabled after <keyword keyref="kw-hos"/>
audit_logs_overview.dita:      environment. <keyword keyref="kw-hos"/> provides audit logging for the following services:</p>
backup_limitations.dita:          backup and restore service in <keyword keyref="kw-hos"/>: <p>
barbican.dita:          when upgrading</xref> from previous versions of <keyword keyref="kw-hos"/> (separate
barbican.dita:            keyref="kw-hos-phrase"/>, Cinder uses Barbican as its key manager when Barbican is
barbican.dita:          disk. There are three options available in <keyword keyref="kw-hos"/>
barbican.dita:          keyref="kw-hos-phrase"/> from 2.x versions, you need follow these steps after upgrading
barbican.dita:      <p>New installations of <keyword keyref="kw-hos-phrase"/>:</p><ol>
barbican.dita:            keyref="kw-hos-phrase"/>, nothing else needs to be done in those files.</li>
barbican.dita:            keyref="kw-hos-phrase"/>, you will need to redeploy the service. Please refer to <xref
barbican.dita:        currently not tested or supported by <keyword keyref="kw-hos"/>. </p><p>In <keyword keyref="kw-hos"/>,
barbican.dita:        format. The <keyword keyref="kw-hos"/> input model has a mechanism to enable / disable auditing on
blockstorage_index.dita:    environment.</shortdesc>This section contains operations tasks for your <keyword keyref="kw-hos-phrase-30"/>
blockstorage_overview.dita:      <p><keyword keyref="kw-hos"/> Block Storage volume operations use the OpenStack Cinder service
blockstorage_overview.dita:      <p><keyword keyref="kw-hos-phrase"/> supports the following storage back ends for block
blockstorage_overview.dita:              keyref="prepare_deploy_esx_computes_ovsvapp/modify-volume-config"
blockstorage_overview.dita:      <p><keyword keyref="kw-hos"/> supports setting up multiple block storage backends and multiple
boeing.dita:      <p>This document outlines the procedure to deploy <keyword keyref="kw-hos-version-30"/> ESX
boeing.dita:          keyref="kw-hos-phrase"/>.</p>
boeing.dita:      <p>Perform the following steps to bring up <keyword keyref="kw-hos-version-30"/> ESX cloud
boeing.dita:          <li>Upgrade to <keyword keyref="kw-hos-phrase"/>.<p>After upgrading the ESX cloud, you can
bonddata.dita:                            <uicontrol>nic-mapping</uicontrol> (see <xref keyref="concept_nicmapping">NIC
bonddata.dita:                            provider options are described in the <xref keyref="configobj_bonddataoptionslinux"
bonddata.dita:                            <xref keyref="configobj_bonddataoptionsopenvswitch">Bond configuration options for the "openvswitch" provider</xref>.
bonddataoptionslinux.dita:    <p>Options used in the <keyword keyref="kw-hos"/> examples are:</p>
central_log_access_data.dita:      <p>All logging data in <keyword keyref="kw-hos"/> is managed by the Centralized Logging
central_log_access_data.dita:        provided with <keyword keyref="kw-hos"/> to search or create a report from log data.
central_log_access_data.dita:        other <keyword keyref="kw-hos"/> resources in your deployment. To use Operations Console you
central_log_access_data.dita:      <note type="important">In <keyword keyref="kw-hos"/>, Kibana usually runs on a different
central_log_access_data.dita:          <keyword keyref="kw-hos"/> in the cloud log files.</p>
central_log_configure_manage.dita:      <p><b>NEW in 4.0</b>: In <keyword keyref="kw-hos-phrase"/> the logging-ansible restart
central_log_configure_manage.dita:          <note type="attention">These playbooks must be run from the <keyword keyref="kw-hos"/>
central_log_configure_manage.dita:        <li>To find the <keyword keyref="kw-hos"/> file to edit, run:
central_log_configure_services.dita:      <p>As you use <keyword keyref="kw-hos"/>, you might find a need to redefine which log files
central_log_configure_services.dita:      <p><keyword keyref="kw-hos"/> uses the logrotate service to provide rotation, compression, and
central_log_configure_services.dita:          keyref="kw-hos"/> uses these options in Elasticsearch to prioritize indexing speed over
central_log_configure_services.dita:        search speed. <keyword keyref="kw-hos"/> also configures Elasticsearch for optimal
central_log_configure_services.dita:        performance in low RAM environments. The options that <keyword keyref="kw-hos"/> modifies
central_log_GS.dita:      <title>New in <keyword keyref="kw-hos-phrase"/></title>
central_log_GS.dita:      <p>In <keyword keyref="kw-hos-phrase"/> the logging-ansible restart
central_log_understanding.dita:            <keyword keyref="kw-hos"/> distributed cloud environment from a single location.</li>
central_log_understanding.dita:        <li><b><keyword keyref="kw-hos"/>:</b> provides public, private, and managed cloud solutions
central_log_understanding.dita:        <li><b>Kafka:</b> a messaging broker used for collection of <keyword keyref="kw-hos"/>
central_log_understanding.dita:          <keyword keyref="kw-hos"/> API provides a standard REST interface to store logs. It uses
central_log_understanding.dita:        node of a <keyword keyref="kw-hos"/> cloud, and there could be hundreds of nodes, all of
central_log_understanding.dita:          <dd>The audit logs are configured to be backed up by the <keyword keyref="kw-hos"/>
central_log_understanding.dita:            Freezer product. For more information about Freezer, read the <keyword keyref="kw-hos"/>
central_log_understanding.dita:      <p><keyword keyref="kw-hos"/> uses a tool called curator that is developed by the
central_log_understanding.dita:        Elasticsearch community to handle these situations. <keyword keyref="kw-hos"/> installs and
central_log_understanding.dita:        hour. To avoid this <keyword keyref="kw-hos"/> uses a shell script called
central_log_understanding.dita:      <p><keyword keyref="kw-hos"/> uses the cron process which in turn calls Logrotate to provide
central_log_understanding.dita:        partition, <keyword keyref="kw-hos"/> allows you to choose an approach that works best for
ceph_twonetworks_config.dita:      <p><keyword keyref="kw-hos"/> Ceph is a unified storage system for various storage use cases
ceph_twonetworks_config.dita:      with the <keyword keyref="kw-hos"/> distro. You will need to make the changes outlined below
change_service_passwords.dita:  <abstract><shortdesc outputclass="hdphidden"><keyword keyref="kw-hos-phrase"/> provides a process
change_service_passwords.dita:      want to do for security or other purposes.</shortdesc><keyword keyref="kw-hos-phrase"/>
change_service_passwords.dita:      <p>In <keyword keyref="kw-hos-phrase"/>, the configuration processor will produce metadata
change_service_passwords.dita:      following are immutable in <keyword keyref="kw-hos-phrase"/>:<ul>
cloudadmin_cli.dita:      <p>With <keyword keyref="kw-hos-phrase-20"/> and above, service policy files can be modified
cloud.dita:        some global values for the <keyword keyref="kw-hos"/> Cloud, as described in the table below.</p>
cloud.dita:                        keyref="namegeneration">Name Generation</xref>) <p>Consists of two
clusters.dita:                            is used to persist server allocations (see <xref keyref="persisteddata"
clusters.dita:                            keyref="namegeneration">Name Generation</xref>). If not supplied then
clusters.dita:                            allocated to this cluster. (see <xref keyref="concept_serverroles">Server
clusters.dita:                                keyref="concept_servergroups_failurezones">Server Groups and Failure
concepts.dita:    <p>An <keyword keyref="kw-hos-phrase"/> cloud is defined by a declarative model that is described in a
concepts.dita:        significance to <keyword keyref="kw-hos"/>, rather it is the relationships between them that
concepts.dita:        discussed above, combines it with the service definitions provided by <keyword keyref="kw-hos"/>
concepts.dita:    <p>The relationship between the file systems on the <keyword keyref="kw-hos"/> deployment server and
concepts.dita:        directories that are maintained by <keyword keyref="kw-hos"/>.</p>
concepts_networkgroups.dita:        are used when defining <uicontrol>control-planes</uicontrol>. <keyword keyref="kw-hos"/> also
concepts_networkgroups.dita:        in the service definition files provided by <keyword keyref="kw-hos"/>.</p>
concepts_networkgroups.dita:        consideration. In <keyword keyref="kw-hos"/>, routing is controlled at the
concepts_networkgroups.dita:    <p>As part of the <keyword keyref="kw-hos"/> deployment, networks are configured to act as the
concepts_networkgroups.dita:    <p>Note that <keyword keyref="kw-hos"/> will configure the routing rules on the servers it deploys
concepts_networkgroups.dita:        <xref keyref="networkroutevalidation">Network Route
concepts_networktags.dita:    <p>Network tags are defined by some <keyword keyref="kw-hos"/>
concepts_networktags.dita:    <p>See <xref keyref="configobj_networktags">Network Tags</xref> for more information on
concepts_servergroups.dita:    <p>In the <keyword keyref="kw-hos"/> model we support this configuration by allowing you to define a
concepts_servers.dita:        your cloud. In addition, in this definition file you can either provide <keyword keyref="kw-hos"/>
concepts_servers.dita:    <p>The address specified for the server will be the one used by <keyword keyref="kw-hos"/> for
concepts_servers.dita:        using <keyword keyref="kw-hos"/> to install the operating system this network must be an untagged
concepts_servers.dita:        VLAN. The first server must be installed manually from the <keyword keyref="kw-hos"/> ISO and this
configneutronprovidervlans.dita:        physical network infrastructure is outside the scope of the <keyword keyref="kw-hos-phrase"/>
configneutronprovidervlans.dita:    <p><keyword keyref="kw-hos-phrase"/> automates the server networking configuration and the Neutron
configneutronprovidervlans.dita:            keyref="configobj_networktags/neutron.networks.vlan">Network Groups</xref> section. For example (some
configneutronprovidervlans.dita:            keyref="configobj_interfacemodels">Interface Models</xref> section. For example (some
configneutronprovidervlans.dita:        <keyword keyref="kw-hos"/> <uicontrol>network</uicontrol>, because that VLAN must span all compute
configneutronprovidervlans.dita:        <keyword keyref="kw-hos"/> <uicontrol>network</uicontrol> must be defined with <codeph>tagged-vlan:
configneutronprovidervlans.dita:    <p>When the cloud is deployed, <keyword keyref="kw-hos-phrase"/> will create the appropriate bridges on
configurationdata.dita:                           <p>Starting in <keyword keyref="kw-hos-phrase"/>, network tags may be defined as part of a 
configure_3par.dita:            <keyword keyref="kw-hos"/> releases, we left the names as-is in the release and provided
configure_3par.dita:              override the [DEFAULT]/host value which <keyword keyref="kw-hos-phrase"/> is dependent
configure_3par.dita:                  will override the [DEFAULT]/host value which <keyword keyref="kw-hos-phrase"/> is
configure_ceph_rgw.dita:        <p>The <keyword keyref="kw-hos-tm"/> Entry-scale KVM Ceph input model cloud <xref
configure_ceph_rgw.dita:        <p>An <keyword keyref="kw-hos-tm"/> cloud can be deployed with Ceph RADOS Gateway as a
configure_dashboard.dita:    <p>Horizon is the OpenStack service that serves as the basis for the <keyword keyref="kw-hos"/>
configure_dashboard.dita:    <p>The dashboards provide a web-based user interface to <keyword keyref="kw-hos"/> services including
configure_dashboard.dita:      <title>Dashboard Service and TLS in <keyword keyref="kw-hos-phrase"/></title>
configure_firewall.dita:        <keyword keyref="kw-hos"/> firewall that is configured in front of the control services. This
configure_firewall.dita:          keyref="configobj_firewallrules">here</xref>.</p>
configure_firewall.dita:        that enables the ability for <keyword keyref="kw-hos"/> tenants to create north-south,
configure_glance.dita:        <p>In <keyword keyref="kw-hos-phrase"/>, by default, the Glance image caching option is not
configure_identity.dita:        <keyword keyref="kw-hos"/> Identity service, based on the OpenStack Keystone API, provides
configure_identity.dita:          Keystone, it has not yet been certified by the <keyword keyref="kw-hos"/> engineering team
configure_identity.dita:          and is an experimental feature in <keyword keyref="kw-hos"/>.</note></p>
configure_identity.dita:        Kilo release but not yet validated for <keyword keyref="kw-hos"/>.--></p>
configure_identity.dita:        not yet been certified or documented for <keyword keyref="kw-hos"/>.</p></section>
configure_identity.dita:              <entry>The "superuser" role. Provides full access to all <keyword keyref="kw-hos"/> services
configure_monitoring.dita:      provided with the product.</shortdesc>In <keyword keyref="kw-hos-phrase"/> you have the option
configure_mtu.dita:      <b><keyword keyref="kw-hos"/>-managed physical interfaces </b><p><keyword keyref="kw-hos"
configure_mtu.dita:        In <keyword keyref="kw-hos-phrase"/>, the DHCP server advertises to all VMS a 1400
configure_mtu.dita:          This will set the physical interface managed by <keyword keyref="kw-hos-phrase"/> that has the
configure_mtu.dita:        <li>If <keyword keyref="kw-hos"/> has not been deployed yet, do normal deployment and skip to step 8.</li>
configure_mtu.dita:          <li>If <keyword keyref="kw-hos"/> has already been deployed, follow the remaining steps,
configure_vsa.dita:          <li>Your <keyword keyref="kw-hos"/> cloud must be fully deployed using the a KVM cloud
configure_vsa.dita:              keyref="kw-hos"/> and comes with a free trial which allows a maximum limit of 50 TB
configure_vsa.dita:          keyref="kw-hos"/> releases, we left the names as-is in the release and provided a mapping
configure_vsa.dita:      <p>The process for configuring HPE StoreVirtual VSA for <keyword keyref="kw-hos"/> involves
configure_vsa.dita:          keyref="kw-hos-phrase"/>. Clusters created using CMC manually cannot be reconfigured using
configure_vsa.dita:        <p>In <keyword keyref="kw-hos"/>, cluster creation using HPE StoreVirtual Centralized
configure_vsa.dita:              is not supported in <keyword keyref="kw-hos"/>. Instead, you must manually add each
configure_vsa.dita:              <p>[OPTIONAL] <keyword keyref="kw-hos-phrase"/> supports VSA deployment for KVM
configure_vsa.dita:            override the [DEFAULT]/host value which <keyword keyref="kw-hos-phrase"/> is dependent
controlplane.dita:                            allocations (see <xref keyref="persisteddata">Persisted Data</xref>)
controlplane.dita:                            keyref="namegeneration">Name Generation</xref>). If not specified,
controlplane.dita:                            of a network group (compatibility with <keyword keyref="kw-hos-phrase-30"/>)</p>
controlplane.dita:                            (see <xref keyref="concept_servergroups_failurezones">Server Groups and Failure
controlplane.dita:                             control plane (see <xref keyref="concept_configuration_data">Configuration Data</xref>)</entry>
controlplane.dita:                            keyref="configobj_clusters">Clusters</xref>).</entry>
controlplane.dita:                            keyref="configobj_resources">Resources</xref>).</entry>
contacting_support.dita:      <p>The public knowledge base for <keyword keyref="kw-hos-phrase"/> can be reached at <xref
controlplanes.dita:        <keyword keyref="kw-hos-phrase"/> only supports a single control-plane). -->
controlplanes.dita:        <ph audience="INTERNAL">(Note that support for multiple control-planes is a non-core feature in <keyword keyref="kw-hos-phrase"/> 
controlplanes_regions.dita:        Equally in <keyword keyref="kw-hos"/>, Mysql and RabbitMQ cannot be shared by more than one 
cpinfofiles.dita:                    <entry><xref keyref="address_info_yml">address_info.yml</xref></entry>
cpinfofiles.dita:                    <entry><xref keyref="firewall_info_yml">firewall_info.yml</xref> </entry>
cpinfofiles.dita:                    <entry><xref keyref="net_info_yml">net_info.yml</xref> </entry>
cpinfofiles.dita:                    <entry><xref keyref="route_info_yml">route_info.yml</xref> </entry>
cpinfofiles.dita:                    <entry><xref keyref="server_info_yml">server_info.yml</xref></entry>
cpinfofiles.dita:                    <entry><xref keyref="service_info_yml">service_info.yml</xref></entry>
cpinfofiles.dita:                    <entry><xref keyref="control_plane_topology_yml">control_plane_topoloy.yml</xref></entry>
cpinfofiles.dita:                    <entry><xref keyref="network_topology_yml">network_topology.yml</xref></entry>
cpinfofiles.dita:                    <entry><xref keyref="region_topology_yml">region_topoloy.yml</xref></entry>
cpinfofiles.dita:                    <entry><xref keyref="service_topology_yml">service_topology.yml</xref></entry>
cpinfofiles.dita:                    <entry><xref keyref="private_data_metadata_yml">private_data_metadata.yml</xref></entry>
cpinfofiles.dita:                    <entry><xref keyref="password_change_yml">password_change.yml</xref></entry>
cpinfofiles.dita:                    <entry><xref keyref="explain_txt">explain.txt</xref> </entry>
cpinfofiles.dita:                    <entry><xref keyref="clouddiagram_txt">CloudDiagram.txt</xref></entry>
cpu_assignments.dita:            <entry>A list of CPU usage objects (see <xref keyref="configobj_cpu_usage">below</xref>).</entry>
cpumodels.dita:            <entry>A list of CPU assignments (see <xref keyref="configobj_cpu_assignments">below</xref>).</entry>
create_extnet.dita:        provide two of them here. The <keyword keyref="kw-hos"/> installer provides an Ansible
create_ha_router.dita:        technologies which can be used to provide routing processes in <keyword keyref="kw-hos-phrase"/>.
create_hdp_servicenet.dita:        VLAN-encapsulated provider network which is fully routable to the <keyword keyref="kw-hos"/>
create_image.dita:        will be compatible with your <keyword keyref="kw-hos"/> cloud:</p>
create_image.dita:          2008 R2 image for deployment within <keyword keyref="kw-hos"/>. The Microsoft Windows
create_multiple_vsa_clusters.dita:    <p>The <keyword keyref="kw-hos-phrase"/> input model comes with one cluster and three VSA nodes.
create_multiple_vsa_clusters.dita:              keyref="kw-hos-phrase"/> input model you will find only a
create_multiple_vsa_clusters.dita:              keyref="configure_vsa_ao/deploy-vsa-with-ao-without-ao"/>.</note></li>
customizing_inputmodel.dita:                    keyref="configure_vsa_ao/deploy-vsa-with-ao-without-ao">VSA with
dar.dita:    <section> The data at rest encryption features in <keyword keyref="kw-hos-phrase"/> include
dar.dita:          keyref="kw-hos-phrase"/> supports two types of back ends for safely storing encryption
dar.dita:        <li>Native database: This is the default configuration in <keyword keyref="kw-hos-phrase"/>. </li>
dar.dita:    <section>The data-at-rest encryption model in <keyword keyref="kw-hos-phrase"/> provides support
dcn_core.dita:      <title>Bringing up a <keyword keyref="kw-hos"/> cloud with the DCN core plugin</title>
dcn_core.dita:      <p>Bringing up a <keyword keyref="kw-hos"/> cloud with the DCN core plugin is identical to
dcn_core.dita:          <xref href="DCN_ml2.dita#DCN_ml2">bringing up a <keyword keyref="kw-hos"/> cloud with the
deploy_monitor_standalone_node.dita:        <p>In the <keyword keyref="kw-hos-phrase"/> example configurations, the Ceph monitor service
deploy_monitor_standalone_node.dita:                    <keyword keyref="kw-hos-phrase"/> does not support deployment transition. Once
designate_initialconfig.dita:      <p>After the <keyword keyref="kw-hos"/>  installation has been completed, Designate 
designate_monitor_support.dita:        <keyword keyref="kw-hos"/>.
designate_overview.dita:      <p><keyword keyref="kw-hos"/> DNS Service provides multi-tenant Domain Name Service with REST
diskmodel.dita:        specify. The <keyword keyref="kw-hos"/> examples provide some typical configurations. As this is
diskmodels.dita:    <p>If the operating system has been installed by the <keyword keyref="kw-hos"/> installation process
documentation_updates.dita:      <p>The <keyword keyref="kw-hos"/> documentation team continuously updates the documents in
dpdk_componentoptions.dita:      See the section for <xref keyref="configobj_cpumodels">CPU Models</xref>.</p>
dpdkdevices_devices.dita:              The device names must be the logical-name specified by the nic-mapping (see <xref keyref="configobj_nicmappings">NIC Mappings</xref>).</entry>            
dpdkdevices.dita:            <entry>A list of network devices to be configured for DPDK.  See <xref keyref="configobj_dpdkdevices_devices">dpdk-devices devices</xref>.</entry>            
dpdkdevices.dita:                and so should not be specified here.  See the section for  <xref keyref="configobj_cpumodels">CPU Models</xref>.</p>
enable_barbican_for_upgrade.dita:    <section><title>Enabling Barbican in previous versions of <keyword keyref="kw-hos"/></title>
enable_barbican_for_upgrade.dita:      Barbican was added in <keyword keyref="kw-hos-phrase-30"/> and is not available in 2.x
enable_barbican_for_upgrade.dita:        <li>For <keyword keyref="kw-hos"/> upgrades to <keyword keyref="kw-hos-phrase"/>:<ul
enable_barbican_for_upgrade.dita:            <li>If you had already added Barbican in your <keyword keyref="kw-hos-phrase-30"/>
enable_barbican_for_upgrade.dita:                keyref="kw-hos-phrase-30"/> installation, follow the process outlined here to add
enable_barbican_for_upgrade.dita:              Barbican after you have upgraded your cloud to <keyword keyref="kw-hos-phrase"/>.</li>
enable_barbican_for_upgrade.dita:      </ul>If you are upgrading to <keyword keyref="kw-hos-phrase"/> with your existing input model
enable_barbican_for_upgrade.dita:    <section id="tls"><title>TLS configuration </title>In <keyword keyref="kw-hos-phrase"/> internal
enable_barbican_for_upgrade.dita:        <keyword keyref="kw-hos-phrase-30"/> to the Barbican API node/host. Therefore, you will need
encrypted_storage.dita:    <p> In <keyword keyref="kw-hos-phrase"/>, sensitive connection data is encrypted. The passwords
endpoints.dita:      endpoint. <keyword keyref="kw-hos"/> services are configured to only connect to other services via
endpoints.dita:      public and internal access, <keyword keyref="kw-hos"/> will not allow a single
endpoints.dita:      the cloud. Within the cloud, <keyword keyref="kw-hos"/> services are configured to use the
entryscale_esx_kvm_vsa.dita:        <p>This example shows how to integrate <keyword keyref="kw-hos"/> with ESX, KVM with VSA in
entryscale_esx_kvm_vsa.dita:                <keyword keyref="kw-hos"/> as part of activating the vCenter cluster, and are
entryscale_kvm_ceph.dita:        which is included with the <keyword keyref="kw-hos"/> distro. You will need to make the
entryscale_kvm_ceph_twonetwork.dita:        <p><keyword keyref="kw-hos"/> Ceph is a unified storage system for various storage use cases
entryscale_kvm_ceph_twonetwork.dita:            included with the <keyword keyref="kw-hos"/> distro. You will need to make the changes
entryscale_kvm_vsa.dita:        <p>If you are using <keyword keyref="kw-hos"/> to install the operating system, then an
entryscale_kvm_vsa.dita:                keyref="modify_entryscale_kvm_vsa">Modifying the Entry-scale KVM with VSA model for
entryscale_swift.dita:    <p>This example shows how <keyword keyref="kw-hos"/> can be configured to provide a Swift-only
entryscale_swift.dita:    <p>If you are using <keyword keyref="kw-hos"/> to install the operating system, then an
eon_service.dita:    <p>The <keyword keyref="kw-hos-phrase"/> EON (ESX on boarding) service is an inventory service, which
eon_service.dita:      a particular cluster to be a compute resource in <keyword keyref="kw-hos-phrase"/>, EON provisions the
eon_service.dita:    <p>The integration of EON with <keyword keyref="kw-hos-phrase"/> automates the steps for moving/adding a
esx_troubleshooting.dita:            <p>This section contains troubleshooting tasks for your <keyword keyref="kw-hos-tm"/>
esx_troubleshooting.dita:                <keyword keyref="kw-hos-version"/> for ESX.</p>
eula_30.dita:            <keyword keyref="kw-hos-tm"/> Software ("Software"), unless it is subject to a separate
eula_30.dita:      <title>Part 2: Additional License Authorizations for <keyword keyref="kw-hos"/>
eula_30.dita:        <b>Management Software</b> - means an <keyword keyref="kw-hos"/> management software running
eula_30.dita:              operate your <keyword keyref="kw-hos"/> based Cloud Fabric. The right to Use the
example_config_changes.dita:        keyref="kw-hos-phrase"/> and the impact these changes have on a fresh install of <keyword keyref="kw-hos-version-40"/> as
example_config_changes.dita:        well as the implications for upgrade from <keyword keyref="kw-hos-phrase-30"/>.</p>
example_config_changes.dita:      <p> Alternatively, you can also re-use your existing <keyword keyref="kw-hos-phrase-30"/> configurations for a fresh
example_config_changes.dita:        installation of <keyword keyref="kw-hos-phrase"/> - this will create a cloud based on the
example_config_changes.dita:        new <keyword keyref="kw-hos-version-40"/> codebase, but missing new services that have been added and maintaining old services
example_config_changes.dita:        that have been either deprecated or removed. For more information on re-using version <keyword keyref="kw-hos-version-30"/>
example_config_changes.dita:        configuration files with a fresh <keyword keyref="kw-hos-version-40"/> installation, see the article <!-- TODO --> <!--<xref
example_config_changes.dita:          keyref="existing_v2_input_model">Re-Using Existing Configuration Files</xref>--> in the
example_config_changes.dita:<!--      <p>The structure of the example configurations provided in <keyword keyref="kw-hos-phrase"/>
example_config_changes.dita:        see the article <xref keyref="configure_lbaas">Configuring Load Balancer as a
example_config_changes.dita:        in <xref keyref="changes_entryscale_kvm_vsa/control_plane"
example_config_changes.dita:        examples. See <xref keyref="changes_entryscale_kvm_vsa/octavia"
example_config_changes.dita:          keyref="changes_entryscale_kvm_vsa/neutron"
example_config_changes.dita:      <p>If you are upgrading from <keyword keyref="kw-hos-phrase-21"/> and want to enable support
example_config_changes.dita:        Input Model and then follow the installation instructions for <xref keyref="configure_lbaas"
example_config_changes.dita:        in <xref keyref="changes_entryscale_kvm_vsa/control_plane"
example_config_changes.dita:      <p>If you are upgrading from <keyword keyref="kw-hos-phrase-21"/> and want to enable support
example_config_changes.dita:          keyref="enable_barbican_for_upgrade">here</xref>. </p>
example_config_changes.dita:        in <xref keyref="changes_entryscale_kvm_vsa/control_plane"
example_config_changes.dita:      <p>If you are upgrading from <keyword keyref="kw-hos-phrase-21"/> and want to enable support
example_config_changes.dita:        for Designate, you will need to follow the instructions <xref keyref="upgrade_designate"
example_config_changes.dita:          services have been changed as shown <xref keyref="changes_entryscale_kvm_vsa"
example_config_changes.dita:          have been changed as shown <xref keyref="changes_entryscale_kvm_vsa">here</xref></li>
example_config_changes.dita:      <p>If you are upgrading from <keyword keyref="kw-hos-phrase-21"/> and want to migrate to the
example_config_changes.dita:        Upgrade section <xref keyref="update_disk_models">here</xref>.</p>
example_config_changes.dita:      <p>See <xref keyref="upgrade_ceph_model">Upgrade Ceph Model from Single Network to Three
example_config_changes.dita:      <p>See <xref keyref="add_rados_gateway">Adding the Rados Gateway to Existing Cloud</xref> for
example_config_changes.dita:      <p id="esx_summary">The Entry-Scale ESX model has changed in <keyword keyref="kw-hos-phrase"/>
example_config_changes.dita:          keyref="entryscale_esx_kvm_vsa">Entry-scale ESX, KVM and VSA model</xref>.</p>
example_config_changes.dita:      <p>If you are upgrading from <keyword keyref="kw-hos-phrase-21"/> and want to migrate to a
example_config_changes.dita:          keyref="kw-hos-phrase"/> with a dedicated cluster for Metering, Monitoring and Logging.
example_config_changes.dita:        For more information, see <xref keyref="entryscale_esx_kvm_vsa_mml">Entry-scale ESX, KVM and
example_config_changes.dita:      <p>As this is a new model, there is no upgrade path from <keyword keyref="kw-hos-phrase-21"
example_config_changes.dita:      <p id="glance_summary">Glance Image Caching has been added in <keyword keyref="kw-hos-phrase"
example_config_changes.dita:          keyref="changes_entryscale_kvm_vsa/glance">here</xref> for an example.</p>
example_config_changes.dita:      <p>To add a disk as an image cache, follow the procedure for <xref keyref="configure_glance"
example_config_changes.dita:      <p>If you are upgrading from <keyword keyref="kw-hos-phrase-21"/> and want to enable image
example_config_changes.dita:        the procedure for <xref keyref="configure_glance">Configuring the Image Service</xref>.</p>
example_config_changes.dita:      <p>The L2 gateway is not part of the example configurations in <keyword keyref="kw-hos-phrase"
example_config_changes.dita:          keyref="install_l2_gateway">Installing the L2 Gateway Agent for the Networking
example_config_changes.dita:          keyref="kw-hos-phrase"/> using the <codeph>audit-settings</codeph> stanza in
example_config_changes.dita:          keyref="changes_entryscale_kvm_vsa/cloudConfig">here</xref>. If you want to enable
example_config_changes.dita:        auditing, follow the instructions in the <xref keyref="audit_logs_overview">Audit Logging
example_config_changes.dita:          <codeph>swift-rings</codeph> as seen <xref keyref="changes_entryscale_kvm_vsa/swift_rings"
example_config_changes.dita:          >here</xref> in the example configurations in <keyword keyref="kw-hos-phrase"/>.
example_config_changes.dita:        Information on using Swift zones is available <xref keyref="swift_zones">here</xref>. </p>
example_config_changes.dita:      coding is available in <xref keyref="ring_specifications"/> and <xref
example_config_changes.dita:        keyref="storage_policies"/>. </section>
example_config_changes.dita:          keyref="changes_entryscale_kvm_vsa/tls-component-endpoints">network_groups.yml</xref>.</p>
example_config_changes.dita:      <p>If you are upgrading from <keyword keyref="kw-hos-phrase-21"/> and want to enable TLS for
example_config_changes.dita:        Internal API Endpoints, follow the instructions for <xref keyref="tls_config">TLS
example_config_changes.dita:        for <keyword keyref="kw-hos-phrase"/>. If you want to enable this functionality, you need to
example_config_changes.dita:        follow the instructions for <xref keyref="using_ipam">Using IPAM Drivers in the Networking
example_config_changes.dita:          keyref="changes_entryscale_kvm_vsa/neutron"
example_config_changes.dita:      <p>For more information, see <xref keyref="neutron_provider_networks">Neutron Provider
example_configurations.dita:    <p>The <keyword keyref="kw-hos-phrase"/> system ships with a collection of pre-qualified example
example_configurations.dita:    <p>The <keyword keyref="kw-hos"/> input model allows a wide variety of configuration parameters
example_configurations.dita:    <section id="example_configs"><title><keyword keyref="kw-hos"/> Example Configurations</title>
example_configurations.dita:      <!--<p><keyword keyref="kw-hos-phrase"/> ships with two classes of sample cloud models: examples
example_configurations.dita:      <p>The following pre-qualified examples are shipped with <keyword keyref="kw-hos-phrase"
example_configurations.dita:              <entry><xref keyref="entryscale_kvm_vsa">Entry-scale KVM with VSA model</xref></entry>
example_configurations.dita:              <entry><xref keyref="entryscale_kvm_dedicated">Entry-scale KVM with VSA model with Dedicated Cluster for Metering, Monitoring, and
example_configurations.dita:              <entry><xref keyref="entryscale_kvm_ceph">Entry-scale KVM with Ceph model</xref></entry>
example_configurations.dita:              <entry><xref keyref="midscale_kvm_vsa">Mid-scale KVM with VSA model</xref></entry>
example_configurations.dita:              <entry><xref keyref="entryscale_esx_kvm_vsa">Entry-scale ESX, KVM and VSA model</xref></entry>
example_configurations.dita:              <entry><xref keyref="entryscale_esx_kvm_vsa_mml">Entry-scale ESX, KVM and VSA model  with Dedicated Cluster for Metering, Monitoring, and
example_configurations.dita:              <entry><xref keyref="entryscale_swift">Entry-scale Swift-only model</xref></entry>
example_configurations.dita:              <entry><xref keyref="entryscale_ironic">Entry-scale Cloud with Ironic Flat Network</xref></entry>
example_configurations.dita:              <entry><xref keyref="entryscale_ironic_multi_tenancy">Entry-scale Cloud with Ironic Multi-Tenancy</xref></entry>
example_configurations.dita:          keyref="kw-hos"/> model.</p>
example_configurations.dita:        <li><xref keyref="localizing_inputmodel">Localizing the Input Model</xref></li>
example_configurations.dita:        <li><xref keyref="customizing_inputmodel">Customizing the Input Model</xref></li>
example_configurations.dita:      <p>In <keyword keyref="kw-hos-phrase"/> there are alternative configurations that we recommend
example_configurations.dita:        <li><xref keyref="entryscale_kvm_ceph_onenetwork">Entry-scale KVM with Ceph Model with One Network</xref></li>
example_configurations.dita:        <li><xref keyref="entryscale_kvm_ceph_twonetwork">Entry-scale KVM with Ceph Model with Two Networks</xref></li>
example_configurations.dita:        <li><xref keyref="standalone_deployer">Using a Standalone Lifecycle-Manager Node</xref></li>
example_configurations.dita:        <li><xref keyref="without_dvr">Configuring <keyword keyref="kw-hos"/> without DVR</xref></li>
example_configurations.dita:        <li><xref keyref="without_l3agent">Configuring <keyword keyref="kw-hos"/> with Provider VLANs and Physical Routers
example_configurations.dita:        <li><xref keyref="twosystems">Considerations When Installing Two Systems on One Subnet</xref></li>            
existing_v2_input_model.dita:                    keyref="kw-hos-phrase"/> compared to those in version 2.x. Many new services
existing_v2_input_model.dita:                install of <keyword keyref="kw-hos-phrase"/>, it may be easier to start with the new
existing_v2_input_model.dita:                example files and then <xref keyref="localizing_inputmodel">localize</xref> and
existing_v2_input_model.dita:                    <xref keyref="customizing_inputmodel">customize</xref> them to suit your setup. </p>
existing_v2_input_model.dita:                clean <keyword keyref="kw-hos-phrase"/> installation, making some minor changes as
existing_v2_input_model.dita:                    <keyword keyref="kw-hos-phrase"/>. You can see how to add these services in the
existing_v2_input_model.dita:                installation documentation <xref keyref="installation_overview">here</xref> and the
existing_v2_input_model.dita:                upgrade documentation <xref keyref="upgrade_toc">here</xref>. </p>
existing_v2_input_model.dita:            <p>When <keyword keyref="kw-hos-phrase"/> installs, it will automatically uninstall
existing_v2_input_model.dita:                    keyref="kw-hos-phrase-30"/> installation. Refer to the <xref
existing_v2_input_model.dita:                    keyref="designate_install_overview/DesignateInstallOverview"/> for instructions
existing_v2_input_model.dita:                Upgrade section <xref keyref="update_disk_models">here</xref>.</p>
existing_v2_input_model.dita:                    keyref="kw-hos-phrase"/> to use a three network model by default. If you choose
existing_v2_input_model.dita:                    <keyword keyref="kw-hos-phrase"/>. If you choose to re-use your existing
existing_v2_input_model.dita:                    keyref="configure_glance">Configuring the Image Service</xref>.</p>
existing_v2_input_model.dita:                Information on using Swift zones is available <xref keyref="swift_zones"
existing_v2_input_model.dita:            coding is available in <xref keyref="ring_specifications"/> and <xref
existing_v2_input_model.dita:                keyref="storage_policies"/>. </section>
existing_v2_input_model.dita:                Endpoints, follow the instructions for <xref keyref="tls_config">TLS
existing_v2_input_model.dita:                    keyref="neutron_provider_networks">Neutron Provider Networks</xref></p>. </section>
F5BIG_IP.dita:          keyref="kw-hos-phrase"/> deployment by configuring an F5 BIG-IP device to run as a load
F5BIG_IP.dita:        private network from the <keyword keyref="kw-hos"/> cloud to the F5 BIG-IP appliance.</p>
F5BIG_IP.dita:      <note type="important"><keyword keyref="kw-hos-phrase"/> must be deployed before the F5
F5BIG_IP.dita:          <keyword keyref="kw-hos"/> by default, and because the F5 installation depends on the
F5BIG_IP.dita:        existence of <keyword keyref="kw-hos"/> Neutron environment.</note>
F5BIG_IP_install.dita:            type="important">If you need to redeploy <keyword keyref="kw-hos"/> in the future, you
F5BIG_IP_install.dita:        driver and the F5 OpenStack agent to the three <keyword keyref="kw-hos"/> controller
F5BIG_IP_preinst.dita:      <p>Before integrating the F5-BIG-IP driver into a <keyword keyref="kw-hos"/> deployment, the
F5BIG_IP_preinst.dita:      <note type="important"><keyword keyref="kw-hos"/> must be deployed before the F5 installation
F5BIG_IP_preinst.dita:          keyref="kw-hos"/> by default, and because the F5 installation depends on the existence of
F5BIG_IP_preinst.dita:          <keyword keyref="kw-hos"/> Neutron environment.</note>
F5BIG_IP_preinst.dita:      <p><keyword keyref="kw-hos"/> supports the F5 hardware configurations listed in the <xref
F5BIG_IP_preinst.dita:        BIG-IP device with <keyword keyref="kw-hos"/>:</p>
F5BIG_IP_preinst.dita:      <note type="important"><keyword keyref="kw-hos"/> must be deployed before the F5 installation
F5BIG_IP_preinst.dita:          keyref="kw-hos"/> by default, and because the F5 installation depends on the existence of
F5BIG_IP_preinst.dita:          <keyword keyref="kw-hos"/> Neutron environment.</note>
F5BIG_IP_preinst.dita:      <p>The Helion team integrated F5 Networks BIG-IP into an <keyword keyref="kw-hos"/> deployment
F5BIG_IP_preinst.dita:              keyref="kw-hos"/></xref></li>
F5BIG_IP_preinst.dita:      <p>The recommended configuration is to have both the <keyword keyref="kw-hos"/> controller
F5BIG_IP_preinst.dita:        during the <keyword keyref="kw-hos"/> installation process. The Management network is the
F5BIG_IP_preinst.dita:        backbone for the majority of <keyword keyref="kw-hos"/> management communications. Control
F5BIG_IP_preinst.dita:          VLAN from the <keyword keyref="kw-hos"/> Management network. You can use any network as
F5BIG_IP_preinst.dita:        virtual machines. In the sample <keyword keyref="kw-hos"/> definition, the network group is
F5BIG_IP_preinst.dita:              <entry><b>Add the F5 appliance to your <keyword keyref="kw-hos"/>
faqs.dita:            <entry>How do I take advantage of <keyword keyref="kw-hos"/> Failure Zones in Ceph OSD
faqs.dita:            <entry>Hardware load balancers are not part of <keyword keyref="kw-hos"/></entry>
faqs.dita:            <entry>Are Jumbo frames supported for <keyword keyref="kw-hos"/> networking?</entry>
faqs.dita:            <entry>Can I get finer grained security with <keyword keyref="kw-hos"/>? In other clouds
faqs.dita:            <entry>What tools / examples are available in <keyword keyref="kw-hos"/> for setting up
faqs.dita:            <entry>How do I gracefully bring down the entire <keyword keyref="kw-hos"/> cloud
faqs.dita:            <entry>How do I upgrade/update <keyword keyref="kw-hos"/> without disrupting my
faqs.dita:            <entry>How do I bring up the entire <keyword keyref="kw-hos"/> cloud after a power
faqs.dita:            <entry>How do I achieve control plane HA with <keyword keyref="kw-hos"/>? (How should I
faqs.dita:            <entry>What auditing features are available in <keyword keyref="kw-hos"/>? My company
faqs.dita:            <entry>Does <keyword keyref="kw-hos"/> support the concept of OpenStack Cells?</entry>
faqs.dita:              recommendations and <keyword keyref="kw-hos"/> supported configurations.</entry>
faqs.dita:            <entry>Does <keyword keyref="kw-hos"/> support Tricircle?</entry>
faqs.dita:              recommendations and <keyword keyref="kw-hos"/> supported configurations.</entry>
faqs.dita:            <entry>How can I install <keyword keyref="kw-hos"/> on a single machine?</entry>
faqs.dita:            <entry>Patches are included in each <keyword keyref="kw-hos"/> distribution. They are
faqs.dita:            <entry>Why is <keyword keyref="kw-hos"/> better than straight OpenStack? </entry>
faqs.dita:                keyref="kw-hos"/>?</entry>
faqs.dita:              Does <keyword keyref="kw-hos"/>'s Keystone identity service support fernet?</entry>
faqs.dita:            <entry><keyword keyref="kw-hos"/>/ESX Which version of Distributed vSwitches does EON
faqs.dita:            <entry><keyword keyref="kw-hos"/>/ESX My ESX servers do not connect to the required
faqs.dita:            <entry><keyword keyref="kw-hos"/>/ESX Can I use advanced features of dvSwtches v6.0 such
faqs.dita:            <entry><keyword keyref="kw-hos"/>/ESX How do I add a server in a cluster which was
faqs.dita:            <entry><keyword keyref="kw-hos"/>/ESX How do I configure tenant VLANs rather than
faqs.dita:            <entry><keyword keyref="kw-hos"/>/ESX Can I use dvSwitches v 6.0.0 when running ESX 6
faqs.dita:            <entry><keyword keyref="kw-hos"/>/ESX Can I have the service console vmkernel interface
faqs.dita:            <entry><keyword keyref="kw-hos"/>/ESX Can I have dedicated NICs for carrying the tenant
faqs.dita:            <entry>Cinder availability zones are not supported even in <keyword keyref="kw-hos"/>
faqs.dita:            <entry>How do take the advantage of <keyword keyref="kw-hos"/> Failures Zones in Ceph
faqs.dita:            <entry>Erasure coding is a non-core feature in <keyword keyref="kw-hos"/> 3.0 which is
faqs.dita:              in <keyword keyref="kw-hos"/> 3.0. Upstream Ceph documention has steps on how to
faqs.dita:            <entry><keyword keyref="kw-hos"/> 2.1 - <xref href="bura/restore_previous_backup.dita"
faqs.dita:              there tools in <keyword keyref="kw-hos"/> to check the state of those storage
faqs.dita:                <keyword keyref="kw-hos-version-30"/>?). The same tool is used by Swift for doing
faqs.dita:            <entry>In <keyword keyref="kw-hos"/> 3.0, default Ceph CRUSH map does not aware about
faqs.dita:                <keyword keyref="kw-hos"/> failure zones. One need to edit the default CRUSH map to
faqs.dita:            <entry>This is currently not supported in <keyword keyref="kw-hos"/> 3.0. There is a
faqs.dita:            <entry>Is Jumbo frames supported for <keyword keyref="kw-hos"/> networking?</entry>
faqs.dita:            <entry>Yes, but <keyword keyref="kw-hos"/> default CRUSH map does not do this. You need
faqs.dita:              command works in <keyword keyref="kw-hos"/> 2.1 as well.</entry>
fcoeinterfaces.dita:                <xref keyref="configobj_nicmappings">NIC Mappings</xref>).</p>
fwaas.dita:      <p><keyword keyref="kw-hos"/> must be installed. </p>
fwaas.dita:      <title><keyword keyref="kw-hos-phrase"/> FWaaS Configuration</title>
general_upgrade.dita:    <p>The following steps are the general steps applying to <keyword keyref="kw-hos"/> services
gui_installer.dita:    <section><keyword keyref="kw-hos-phrase"/> comes with a UI installer for installing your cloud
gui_installer.dita:      installation of <keyword keyref="kw-hos"/> are run for you behind the scenes. </section>
gui_installer.dita:        <li>Choose your <xref keyref="example_configurations">cloud model/example</xref> template.
gui_installer.dita:            included in the <keyword keyref="kw-hos-phrase"/> package. You may find the instructions
gui_installer.dita:            <li><xref keyref="install_entryscale_kvm">Operating system install help
gui_installer.dita:            <li><xref keyref="installing_esx_kvm_vsa">Operating system install help
gui_installer.dita:            keyref="install_entryscale_esx_kvm_vsa/optional-eon">Step 4
gui_installer.dita:          <li><xref keyref="input_model"><keyword keyref="kw-hos-phrase"/> Input
header_poisoning.dita:    <section> Depending on the environment and context of your <keyword keyref="kw-hos"/> deployment, it
high_availability.dita:      <p>By design, <keyword keyref="kw-hos"/> strives to create a system architecture resilient to
high_availability.dita:        <p><keyword keyref="kw-hos"/> Compute hypervisors do not support transparent high
high_availability.dita:      <p>The <keyword keyref="kw-hos"/> installer deploys highly available configurations of
high_availability.dita:            id="image_hrh_tvf_4w" height="700"/><p>The <keyword keyref="kw-hos"/> installer deploys
high_availability.dita:      <sectiondiv outputclass="HAsliderText">The <keyword keyref="kw-hos"/> installer deploys highly
high_availability.dita:      <p>In <keyword keyref="kw-hos"/>, the primary and secondary L3 agents run continuously, and
high_availability.dita:          <keyword keyref="kw-hos-phrase-30"/> uses keepalived package of the pacemaker resource
high_availability.dita:      <p><keyword keyref="kw-hos"/> offers APIs, CLIs and Horizon UIs for the administrator to
high_availability.dita:      <note>By default, <keyword keyref="kw-hos"/> is deployed in a single availability zone upon
high_availability.dita:                  HA Proxy type load balancer in your application VMs until <keyword keyref="kw-hos"
high_availability.dita:            <keyword keyref="kw-hos"/> platform services such as Designate, the DNS service. </li>
high_availability.dita:        <p>The lifecycle manager in <keyword keyref="kw-hos"/> is not highly-available. The
horizon_ssl_auth.dita:                for accessing the Horizon dashboard in <keyword keyref="kw-hos-phrase"/>. This
horizon_ssl_auth.dita:                    in <keyword keyref="kw-hos-phrase"/>. More information on core and non-core
horizon_ssl_auth.dita:                        <li>User directs a web browser to the <keyword keyref="kw-hos"/> Horizon login landing
hw_support_matrix.dita:        <keyword keyref="kw-hos-phrase"/>.</shortdesc></abstract>
hw_support_matrix.dita:          keyref="kw-hos-phrase"/></p>
identity_admin.dita:        lifecycle manager. Also, <keyword keyref="kw-hos"/> installs convenient *.osrc files
identity_benchmark.dita:      provide a reference for <keyword keyref="kw-hos"/> Keystone users to know how the system
identity_benchmark.dita:            <li><keyword keyref="kw-hos"/> 2.0</li>
identity_benchmark.dita:            <li><keyword keyref="kw-hos"/> 1.1.1</li>
identity_benchmark.dita:      is above the configurable subsystems (e.g. token, identity, etc). <keyword keyref="kw-hos"/>
identity_benchmark.dita:        <keyword keyref="kw-hos-phrase-20"/> with domain-specific LDAP back end</title>
identity_benchmark.dita:      <p><b>LDAP user lookup performance - <keyword keyref="kw-hos-phrase-20"/> Keystone user lookup
identity_benchmark.dita:      LDAP user lookup by name for <keyword keyref="kw-hos"/>. The study of Keystone-LDAP query
identity_benchmark.dita:            keyref="kw-hos-phrase-20"/> is much flatter than for <keyword keyref="kw-hos"/>
identity_benchmark.dita:          <keyword keyref="kw-hos-phrase-20"/> behaves between 10 and several thousand times better
identity_benchmark.dita:          than <keyword keyref="kw-hos-phrase-111"/> for LDAP user lookup operations, especially for
identity_benchmark.dita:      <p><b>LDAP user lookup performance - concurrency impact on <keyword keyref="kw-hos-phrase-20"
identity_benchmark.dita:          /> Keystone</b></p> Figures 3.a and 3.b represent <keyword keyref="kw-hos-phrase-20"/>
identity_benchmark.dita:      <p>Figure 3.a LDAP User lookup by name for <keyword keyref="kw-hos-phrase-20"/> under
identity_benchmark.dita:      <p>Figure 3.b LDAP User lookup by name for <keyword keyref="kw-hos-phrase-20"/> under
identity_benchmark.dita:            <keyword keyref="kw-hos"/> versions and cached conditions. </li>
identity_benchmark.dita:            keyref="kw-hos-phrase-20"/> performs slightly better than <keyword keyref="kw-hos"/>
identity_benchmark.dita:          especially for <keyword keyref="kw-hos-phrase-20"/> (see further detail in Figure 6.b).
identity_benchmark.dita:          vary for <keyword keyref="kw-hos"/> versions and cached conditions. </li>
identity_benchmark.dita:            keyref="kw-hos-phrase-20"/> performs slightly better than <keyword keyref="kw-hos"/>
identity_benchmark.dita:          improvement by cache for <keyword keyref="kw-hos-phrase-20"/> is even larger than for
identity_benchmark.dita:            <keyword keyref="kw-hos"/> 1.1.1 (see further detail in Figure 6.b and percentage Figure
identity_benchmark.dita:        <li>The improvement for non-concurrent <keyword keyref="kw-hos-phrase-20"/> project-scoped
identity_benchmark.dita:            keyref="kw-hos-phrase-20"/> about 40%. The improvement percentages stay stable for cases
identity_benchmark.dita:        <li>The improvement for non-concurrent <keyword keyref="kw-hos"/> 1.1.1 project-scoped token
identity_benchmark.dita:            keyref="kw-hos"/> 1.1.1 it is approximately 20%-28%. The improvement decreases with
identity_benchmark.dita:      <p><b>Concurrency impact on <keyword keyref="kw-hos-phrase-20"/> Keystone</b></p>
identity_benchmark.dita:          keyref="kw-hos-phrase-20"/> performance for project-scoped token creation.</p>
identity_benchmark.dita:        <li>The improvement by cache for <keyword keyref="kw-hos-phrase-20"/> project-scoped token
identity_benchmark.dita:          <keyword keyref="kw-hos-phrase-20"/> behaves between 10 and several thousand times better
identity_benchmark.dita:          than <keyword keyref="kw-hos-phrase-111"/> for LDAP user lookup operations, The greatest
identity_benchmark.dita:          number of domain users in LDAP, but response time slopes vary for <keyword keyref="kw-hos"
identity_benchmark.dita:        <li><keyword keyref="kw-hos-phrase-20"/> performs slightly better than <keyword
identity_benchmark.dita:            keyref="kw-hos"/> 1.1.1, within 5% for project-scoped token creation. </li>
identity_benchmark.dita:            <li>The improvement for non-concurrent <keyword keyref="kw-hos-phrase-20"/>
identity_benchmark.dita:            <li>The improvement for non-concurrent <keyword keyref="kw-hos"/> 1.1.1 project-scoped
identity_benchmark.dita:            <li>The improvement by cache for <keyword keyref="kw-hos-phrase-20"/> project-scoped
identity_limitations.dita:        <li><keyword keyref="kw-hos"/> MFA support is a custom configuration requiring HPE
identity_limitations.dita:        <li>MFA drivers are not included with <keyword keyref="kw-hos"/> and need to be provided by
identity_limitations.dita:          functional. It is a non-core function in <keyword keyref="kw-hos"/> and is not ready for either
identity_limitations.dita:      <p>Keystone in OpenStack Mitaka (on which <keyword keyref="kw-hos-phrase"/> is based) is known
identity_limitations.dita:        many additional database queries per token operation. In <keyword keyref="kw-hos-phrase"/>,
identity_limitations.dita:                <entry>In  <keyword keyref="kw-hos-phrase"/>  (secs/request)</entry>
identity_limitations.dita:                <entry>In  <keyword keyref="kw-hos-phrase-30"/> (secs/request)</entry>
identity_overview.dita:      <p>The <keyword keyref="kw-hos"/> Identity service, based on the OpenStack Keystone API, is
identity_overview.dita:          Keystone, it has not yet been certified by the <keyword keyref="kw-hos"/> engineering team
identity_overview.dita:          and is an experimental feature in <keyword keyref="kw-hos"/>.</note></p>
identity_overview.dita:        Kilo release but not yet validated for <keyword keyref="kw-hos"/>.--></p>
identity_overview.dita:        has not yet been certified or documented for <keyword keyref="kw-hos"/>.</p></section>
identity_reconfigure.dita:        configuration options for the Identity service. </p><keyword keyref="kw-hos"/> lets you
identity_reconfigure.dita:            <p><keyword keyref="kw-hos-phrase"/> has the following token expiration setting , which
identity_reconfigure.dita:      <p><keyword keyref="kw-hos-phrase"/> supports UUID tokens by default. Fernet tokens are
identity_reconfigure.dita:      <note>Tempest doesn't work with Fernet tokens in <keyword keyref="kw-hos-phrase"/>. If Fernet
input_model_change_existing_rings.dita:                <p>In <keyword keyref="kw-hos-phrase"/>, when you remove servers from the input
input_model_changes40.dita:    <p>The following is a list of links to all the changes in the Input Model for <keyword keyref="kw-hos-phrase-40"/>.</p>
input_model_changes40.dita:          <li><xref keyref="concept_memorymodel">Memory Model</xref></li>
input_model_changes40.dita:          <li><xref keyref="concept_cpumodel">CPU Model</xref></li>
input_model_changes40.dita:              <li><xref keyref="concept_virtual_machines_as_servers">Virtual Machines as Servers</xref></li>
input_model_changes40.dita:              <li><xref keyref="configobj_cloud/audit-settings">audit-settings</xref></li>
input_model_changes40.dita:              <li audience="INTERNAL"><xref keyref="configobj_multiple_control_planes">Multiple Control Planes</xref></li>
input_model_changes40.dita:              <li><xref keyref="configobj_load_balancer_definitions">Load Balancer Definitions in Control Planes</xref></li>
input_model_changes40.dita:          <li><xref keyref="configobj_load_balancers">Load Balancers</xref></li>
input_model_changes40.dita:          <li audience="INTERNAL"><xref keyref="configobj_regions">Regions</xref></li>
input_model_changes40.dita:              <li><xref keyref="configobj_serverroles/memory-model">memory-model</xref></li>
input_model_changes40.dita:              <li><xref keyref="configobj_serverroles/cpu-model">cpu-model</xref></li>
input_model_changes40.dita:              <li><xref keyref="configobj_disk_sizing_vms">Disk Sizing for Virtual Machine Servers</xref></li>
input_model_changes40.dita:          <li><xref keyref="configobj_memorymodels">Memory Models</xref>
input_model_changes40.dita:              <li><xref keyref="configobj_huge_pages">Huge Pages</xref></li>
input_model_changes40.dita:              <li audience="INTERNAL"><xref keyref="configobj_memory_sizing_vms">Memory Sizing for Virtual Machine Servers</xref></li>
input_model_changes40.dita:          <li><xref keyref="configobj_cpumodels">CPU Models</xref>
input_model_changes40.dita:              <li><xref keyref="configobj_cpu_assignments">CPU Assignments</xref></li>
input_model_changes40.dita:              <li><xref keyref="configobj_cpu_usage">CPU Usage</xref></li>
input_model_changes40.dita:              <li><xref keyref="configobj_cpu_components_roles">Components and Roles in the CPU Model</xref></li>    
input_model_changes40.dita:              <li audience="INTERNAL"><xref keyref="configobj_cpu_sizing_vms">CPU sizing for virtual machine servers</xref></li>  
input_model_changes40.dita:          <li><xref keyref="configobj_interfacemodels">Interface Models</xref>
input_model_changes40.dita:              <li><xref keyref="configobj_network_interfaces">network-interfaces</xref>
input_model_changes40.dita:                  <li><xref keyref="configobj_network_interfaces_device">network-interfaces device</xref>             
input_model_changes40.dita:              <li><xref keyref="configobj_bonddata">Bonding</xref>
input_model_changes40.dita:                  <li><xref keyref="configobj_bonddataoptionsopenvswitch">Bond Data Options for the "openvswitch" Provider</xref> 
input_model_changes40.dita:                  <li audience="INTERNAL"><xref keyref="configobj_bonddataoptionswindows">Bond Data Options for the "windows" Provider</xref> 
input_model_changes40.dita:              <li><xref keyref="configobj_dpdkdevices">dpdk-devices</xref>
input_model_changes40.dita:                  <li><xref keyref="configobj_dpdkdevices_devices">dpdk-devices devices</xref>             
input_model_changes40.dita:                  <li><xref keyref="configobj_dpdk_componentoptions">DPDK component-options for the openvswitch component</xref>             
input_model_changes40.dita:              <li><xref keyref="configobj_nicmappings/nic-device-type">nic-device-type</xref>             
input_model_changes40.dita:              <li audience="INTERNAL"><xref keyref="configobj_nicmappings_vms">NIC Mappings for Virtual Machine Servers</xref></li>
input_model_changes40.dita:             <li><xref keyref="configobj_lb_defs_networkgroups">Load Balancer Definitions in Network Groups</xref></li>
input_model_changes40.dita:          <li><xref keyref="configobj_neutron_network_tags">Neutron network-tags</xref></li>
input_model_changes40.dita:              <li><xref keyref="configobj_neutron_external_networks">neutron-external-networks</xref>             
input_model_changes40.dita:          <li><xref keyref="configobj_configurationdata_swift">Swift Configuration Data</xref></li>
input_model_changes40.dita:          <li><xref keyref="services_components">Services and Service Components</xref></li>
input_model_changes40.dita:          <li><xref keyref="service_info_yml">service_info.yml</xref></li>
input_model_changes40.dita:          <li><xref keyref="control_plane_topology_yml">control_plane_topology.yml</xref></li>
input_model_changes40.dita:          <li><xref keyref="network_topology_yml">network_topology.yml</xref></li>
input_model_changes40.dita:          <li><xref keyref="region_topology_yml">region_topology.yml</xref></li>
input_model_changes40.dita:          <li><xref keyref="service_topology_yml">service_topology.yml</xref></li>
input_model_changes40.dita:          <li><xref keyref="html_representation">HTML Representation</xref></li>
input_model.dita:                <li><xref keyref="input_model_introduction">Introduction to the Input Model</xref></li>
input_model.dita:                <li><xref keyref="concepts"><keyword keyref="kw-hos-phrase"/> Concepts</xref>
input_model.dita:                        <li><xref keyref="concept_cloud">Cloud</xref></li>
input_model.dita:                        <li><xref keyref="concept_controlplanes">Control Planes</xref>
input_model.dita:                                <li><xref keyref="concept_controlplanes_regions">Control Planes and
input_model.dita:                        <li><xref keyref="concept_services">Services</xref></li>
input_model.dita:                        <li><xref keyref="concept_serverroles">Server Roles</xref></li>
input_model.dita:                        <li><xref keyref="concept_diskmodel">Disk Model</xref></li>       
input_model.dita:                        <li><xref keyref="concept_memorymodel">Memory Model</xref></li>
input_model.dita:                        <li><xref keyref="concept_cpumodel">CPU Model</xref></li>
input_model.dita:                        <li><xref keyref="concept_servers">Servers</xref>
input_model.dita:                             <li><xref keyref="concept_virtual_machines_as_servers">Virtual Machines as Servers</xref></li>
input_model.dita:                        <li><xref keyref="concept_servergroups">Server Groups</xref>
input_model.dita:                                <li><xref keyref="concept_servergroups_failurezones">Server Groups and Failure
input_model.dita:                                <li><xref keyref="concept_servergroups_networks">Server Groups and
input_model.dita:                        <li><xref keyref="concept_networking">Networking</xref>
input_model.dita:                                <li><xref keyref="concept_networkgroups">Network Groups</xref>
input_model.dita:                                        <li><xref keyref="concept_loadbalancers">Load Balancers</xref></li>
input_model.dita:                                        <li><xref keyref="concept_networktags">Network Tags</xref></li>
input_model.dita:                                <li><xref keyref="concept_networks">Networks</xref></li>
input_model.dita:                                <li><xref keyref="concept_interfacemodel">Interface Model</xref></li>
input_model.dita:                                <li><xref keyref="concept_nicmapping">NIC Mapping</xref></li>
input_model.dita:                                <li><xref keyref="concept_firewallconfiguration">Firewall
input_model.dita:                <li><xref keyref="configurationobjects"><keyword keyref="kw-hos-phrase"/> Configuration
input_model.dita:                        <li><xref keyref="configobj_cloud">Cloud</xref></li>
input_model.dita:                        <li><xref keyref="configobj_controlplane">Control Plane</xref>
input_model.dita:                                <li><xref keyref="configobj_clusters">Clusters</xref></li>
input_model.dita:                                <li><xref keyref="configobj_resources">Resources</xref></li>
input_model.dita:                                <li audience="INTERNAL"><xref keyref="configobj_multiple_control_planes">Multiple Control Planes</xref></li>
input_model.dita:                                <li><xref keyref="configobj_load_balancer_definitions">Load Balancer Definitions in Control Planes</xref></li>
input_model.dita:                        <li><xref keyref="configobj_load_balancers">Load Balancers</xref></li>
input_model.dita:                        <li audience="INTERNAL"><xref keyref="configobj_regions">Regions</xref></li>
input_model.dita:                        <li><xref keyref="configobj_servers">Servers</xref></li>
input_model.dita:                        <li><xref keyref="configobj_servergroups">Server Groups</xref></li>
input_model.dita:                        <li><xref keyref="configobj_serverroles">Server Roles</xref>
input_model.dita:                              <li><xref keyref="configobj_serverroles/memory-model">memory-model</xref></li>
input_model.dita:                              <li><xref keyref="configobj_serverroles/cpu-model">cpu-model</xref></li>
input_model.dita:                        <li><xref keyref="configobj_diskmodels">Disk Models</xref>
input_model.dita:                                <li><xref keyref="configobj_volumegroups">Volume Groups</xref></li>
input_model.dita:                                <li><xref keyref="configobj_devicegroups">Device Groups</xref></li>
input_model.dita:                                <li audience="INTERNAL"><xref keyref="configobj_disk_sizing_vms">Disk Sizing for Virtual Machine Servers</xref></li>
input_model.dita:                        <li><xref keyref="configobj_memorymodels">Memory Models</xref>
input_model.dita:                              <li><xref keyref="configobj_huge_pages">Huge Pages</xref></li>
input_model.dita:                              <li audience="INTERNAL"><xref keyref="configobj_memory_sizing_vms">Memory Sizing for Virtual Machine Servers</xref></li>
input_model.dita:                        <li><xref keyref="configobj_cpumodels">CPU Models</xref>
input_model.dita:                              <li><xref keyref="configobj_cpu_assignments">CPU Assignments</xref></li>
input_model.dita:                              <li><xref keyref="configobj_cpu_usage">CPU Usage</xref></li>
input_model.dita:                              <li><xref keyref="configobj_cpu_components_roles">Components and Roles in the CPU Model</xref></li>    
input_model.dita:                              <li audience="INTERNAL"><xref keyref="configobj_cpu_sizing_vms">CPU sizing for virtual machine servers</xref></li>  
input_model.dita:                        <li><xref keyref="configobj_interfacemodels">Interface Models</xref>
input_model.dita:                              <li><xref keyref="configobj_network_interfaces">network-interfaces</xref>
input_model.dita:                                  <li><xref keyref="configobj_network_interfaces_device">network-interfaces device</xref>             
input_model.dita:                                <li><xref keyref="configobj_bonddata">Bonding</xref>
input_model.dita:                                        <li><xref keyref="configobj_bonddataoptionslinux">Bond configuration options for the &quot;linux&quot; provider</xref> 
input_model.dita:                                        <li><xref keyref="configobj_bonddataoptionsopenvswitch">Bond Data Options for the "openvswitch" Provider</xref> 
input_model.dita:                                         <li audience="INTERNAL"><xref keyref="configobj_bonddataoptionswindows">Bond Data Options for the "windows" Provider</xref> 
input_model.dita:                                <li><xref keyref="configobj_dpdkdevices">dpdk-devices</xref>
input_model.dita:                                        <li><xref keyref="configobj_dpdkdevices_devices">dpdk-devices devices</xref>             
input_model.dita:                                        <li><xref keyref="configobj_dpdk_componentoptions">DPDK component-options for the openvswitch component</xref>             
input_model.dita:                        <li><xref keyref="configobj_nicmappings">NIC Mappings</xref>
input_model.dita:                              <li><xref keyref="configobj_nicmappings/nic-device-type">nic-device-type</xref>             
input_model.dita:                              <li audience="INTERNAL"><xref keyref="configobj_nicmappings_vms">NIC Mappings for Virtual Machine Servers</xref></li>
input_model.dita:                        <li><xref keyref="configobj_networkgroups">Network Groups</xref>
input_model.dita:                                <li><xref keyref="configobj_lb_defs_networkgroups">Load Balancer Definitions in Network Groups</xref></li>
input_model.dita:                                <li><xref keyref="configobj_networktags">Network Tags</xref></li>
input_model.dita:                                <li><xref keyref="configobj_mtu">MTU</xref></li>
input_model.dita:                        <li><xref keyref="configobj_networks">Networks</xref></li>
input_model.dita:                        <li><xref keyref="configobj_firewallrules">Firewall Rules</xref>
input_model.dita:                                <li><xref keyref="configobj_rule">Rule</xref></li>
input_model.dita:                        <li><xref keyref="passthrough">Passthrough</xref></li>
input_model.dita:                         <li><xref keyref="configobj_configurationdata">Configuration Data</xref>
input_model.dita:                                  <li><xref keyref="configobj_neutron_network_tags">Neutron network-tags</xref></li>
input_model.dita:                                  <li><xref keyref="configobj_configurationdata_neutron">Neutron Configuration Data</xref> 
input_model.dita:                                      <li><xref keyref="configobj_neutron_external_networks">neutron-external-networks</xref>             
input_model.dita:                                 <li><xref keyref="configobj_configurationdata_octavia">Octavia Configuration Data</xref></li>
input_model.dita:                                   <li><xref keyref="configobj_configurationdata_ironic">Ironic Configuration Data</xref></li> 
input_model.dita:                                  <li><xref keyref="configobj_configurationdata_swift">Swift Configuration Data</xref></li>                 
input_model.dita:                <li><xref keyref="othertopics">Other Topics</xref>
input_model.dita:                        <li><xref keyref="services_components">Services and Service Components</xref></li>
input_model.dita:                        <li><xref keyref="namegeneration">Name Generation</xref>
input_model.dita:                                <li><xref keyref="namegeneration/o_clusters"> Clusters</xref></li>
input_model.dita:                                <li><xref keyref="namegeneration/o_resourcenodes">Resource Nodes</xref></li>
input_model.dita:                        <li><xref keyref="persisteddata">Persisted Data</xref>
input_model.dita:                                <li><xref keyref="persisteddata/persistedserverallocations">Persisted Server
input_model.dita:                                <li><xref keyref="persisteddata/persistedaddressallocations">Persisted Address
input_model.dita:                        <li><xref keyref="serverallocation">Server Allocation</xref></li>
input_model.dita:                        <li><xref keyref="servernetworkselection">Server Network
input_model.dita:                        <li><xref keyref="networkroutevalidation">Network Route
input_model.dita:                        <li><xref keyref="configneutronprovidervlans">Configuring Neutron Provider
input_model.dita:                <li><xref keyref="cpinfofiles">Configuration Processor Information Files</xref>
input_model.dita:                        <li><xref keyref="address_info_yml">address_info.yml</xref></li>
input_model.dita:                        <li><xref keyref="firewall_info_yml">firewall_info.yml</xref></li>
input_model.dita:                        <li><xref keyref="net_info_yml">net_info.yml</xref></li>
input_model.dita:                        <li><xref keyref="route_info_yml">route_info.yml</xref></li>
input_model.dita:                        <li><xref keyref="server_info_yml">server_info.yml</xref></li>
input_model.dita:                        <li><xref keyref="service_info_yml">service_info.yml</xref></li>
input_model.dita:                        <li><xref keyref="control_plane_topology_yml">control_plane_topology.yml</xref></li>
input_model.dita:                        <li><xref keyref="network_topology_yml">network_topology.yml</xref></li>
input_model.dita:                        <li><xref keyref="region_topology_yml">region_topology.yml</xref></li>
input_model.dita:                        <li><xref keyref="service_topology_yml">service_topology.yml</xref></li>
input_model.dita:                        <li><xref keyref="private_data_metadata_yml">private_data_metadata.yml</xref></li>
input_model.dita:                        <li><xref keyref="password_change_yml">password_change.yml</xref></li>
input_model.dita:                        <li><xref keyref="explain_txt">explain.txt</xref></li>
input_model.dita:                        <li><xref keyref="clouddiagram_txt">CloudDiagram.txt</xref></li>
input_model.dita:                        <li><xref keyref="html_representation">HTML Representation</xref></li>
input_model_introduction.dita:    <p>This document describes how the <keyword keyref="kw-hos"/> input model can be used to define and
input_model_introduction.dita:    <p><keyword keyref="kw-hos"/> ships with a set of example input models that can be used as starting
input_model_introduction.dita:            approach used in <keyword keyref="kw-hos-phrase"/> and the core concepts used in describing that
input_model_introduction.dita:        <title>New in <keyword keyref="kw-hos-phrase"/></title>
input_model_introduction.dita:        <keyword keyref="kw-hos-phrase"/> introduces the following additions to the cloud model:
installation_overview.dita:          <xref keyref="example_configurations">Example Configurations</xref> documentation to
installation_overview.dita:        get an overview of the sample configurations <keyword keyref="kw-hos-phrase"/> offers. We
installation_overview.dita:        <li><xref keyref="entryscale_kvm_vsa">Entry-scale KVM with VSA model</xref></li>
installation_overview.dita:        <li><xref keyref="entryscale_esx_kvm_vsa">Entry-scale ESX, KVM, and VSA model</xref></li>
installation_overview.dita:        <li><xref keyref="entryscale_swift">Entry-scale Swift model</xref></li>
installation_overview.dita:        <li><xref keyref="entryscale_kvm_ceph">Entry-scale KVM with Ceph model</xref></li>
installation_overview.dita:        <li><xref keyref="midscale_kvm_vsa">Mid-scale KVM with VSA model</xref></li>
installation_overview.dita:          model. See the <xref keyref="input_model">Input Model page</xref> for
installation_overview.dita:        <li><xref keyref="installing_esx_kvm_vsa">Installing ESX, KVM with VSA
installation_troubleshooting.dita:          keyref="kw-hos"/> ISO, then you should be able to remove all of your nodes from Cobbler
installation_troubleshooting.dita:        reserved for another purpose outside of your <keyword keyref="kw-hos"/> deployment then you
installation_verification.dita:      <p><keyword keyref="kw-hos-phrase"/> provides a tool, Tempest, that you can use to verify that
installation_verification.dita:          <keyword keyref="kw-hos"/> lifecycle manager node.</p>
install_designate_Akamai.dita:      <p><keyword keyref="kw-hos"/>DNS Service can be installed to use the <b>Akamai's FastDNS</b>
install_designate_DynECT.dita:      <p><keyword keyref="kw-hos"/>DNS Service can be installed to use the <b>DynECT</b> backend
install_designate_InfoBlox.dita:      <p><keyword keyref="kw-hos"/> DNS Service can be installed with the <b>InfoBlox</b> backend
install_designate_InfoBlox.dita:          server will be deployed onto the <keyword keyref="kw-hos"/> nodes. Instead, zones will be
install_designate_InfoBlox.dita:          keyref="kw-hos"/> 3.x. To use InfoBlox with version [4.x / 5.x] we recommend that you
install_entryscale_kvm_overview.dita:            <keyword keyref="kw-hos"/> Entry-scale cloud models that utilize the KVM hypervisor on the
installing_esx_kvm_vsa.dita:        <li><xref keyref="esx_prerequisite">Prerequisite</xref></li>       
installing_esx_kvm_vsa.dita:        <li><xref keyref="deploy_esx_cloud">Deploy ESX Cloud with OVSvAPP</xref></li>
installing_esx_kvm_vsa.dita:        <li><xref keyref="procedure_deploy_esx_cloud">Procedure to Deploy ESX
installing_esx_kvm_vsa.dita:        <li><xref keyref="prepare_deploy_esx_computes_ovsvapp">Prepare and Deploy ESX
installing_kvm.dita:          can be found on the <xref keyref="example_configurations">Example Configuration</xref>
installing_kvm.dita:              keyref="kw-hos-tm"/>
installing_kvm.dita:            <keyword keyref="kw-hos-version"
installing_kvm.dita:            <p>Example for <keyword keyref="kw-hos-phrase"/>
installing_kvm.dita:              keyref="kw-hos-tm"/>
installing_kvm.dita:            <keyword keyref="kw-hos-version"
installing_kvm.dita:          keyref="example_configurations">Example Configurations</xref> documentation for detailed
installing_kvm.dita:                  keyref="modify_entryscale_kvm_vsa">Modifying the Entry-scale KVM with VSA model
installing_kvm.dita:        operating system installation process provided by <keyword keyref="kw-hos"/> or you can use
installing_kvm.dita:          <keyword keyref="kw-hos-version"/> then the requirements that have to be met using the
installing_kvm.dita:        <li>The operating system must be installed via the HPE Linux for <keyword keyref="kw-hos"/>
installing_kvm.dita:          <keyword keyref="kw-hos-version"/> then complete all of the steps below.</p>
installing_kvm.dita:      <p><b>Using the Automated Operating System Installation Provided by <keyword keyref="kw-hos"
installing_kvm.dita:          keyref="kw-hos"/> installation.</note>
installing_kvm.dita:      <p><keyword keyref="kw-hos"/> supports VSA, 3PAR, and Ceph as block storage backend options.
installing_swift_object_storage.dita:                do this can be found here: <xref keyref="input_model"><keyword
installing_swift_object_storage.dita:                    keyref="kw-hos-phrase"/> Input Model</xref>.</p><p>In many cases, the example
install_l2_gateway.dita:        keyref="kw-hos-phrase"/>, is a plug-in to the Neutron networking service that allows two L2
install_l2_gateway.dita:        agent either during installation of <keyword keyref="kw-hos-phrase"/>, while performing an
install_l2_gateway.dita:        upgrade to <keyword keyref="kw-hos-phrase"/>, or later by running neutron reconfigure on any
install_l2_gateway.dita:        existing <keyword keyref="kw-hos-phrase"/> installation.</p>L2 Gateway agent installation
install_l2_gateway.dita:      <title>Perform standard <keyword keyref="kw-hos"/> installation steps</title></section>
install_rhel_ceph.dita:      <p id="install_rhel_ceph_summary"><keyword keyref="kw-hos-phrase"/> supports the use of a RHEL compute node (specifically
install_rhel_ceph.dita:          keyref="kw-hos-phrase"/>. So, you will need to provide the necessary rpm packages on the
install_rhel_ceph.dita:        <keyword keyref="kw-hos"/> lifecycle manager node. This document describes the steps to achieve this.
install_rhel_ceph.dita:          <li><b>Upgrade: </b> If you are upgrading your <keyword keyref="kw-hos"/> cloud to <keyword keyref="kw-hos-version"/>, you should execute the steps 
install_rhel_ceph.dita:          <li><b>New Install: </b> If you are deploying a new <keyword keyref="kw-hos-phrase"/> cloud, you should execute the steps 
install_rhel_ceph.dita:          <li><b>Existing <keyword keyref="kw-hos-version"/> Cloud: </b> If you alrady have a <keyword keyref="kw-hos-phrase"/> cloud, you should execute the steps 
install_rhel.dita:                nodes as described in the topic for <xref keyref="install_entryscale_kvm"
install_rhel.dita:                        the Input Model for RHEL, see <xref keyref="rhel_compute_model"> RHEL
install_rhel.dita:                <p><keyword keyref="kw-hos-phrase-30"/> required a manual procedure if you wanted to
install_rhel.dita:                    automated in the <keyword keyref="kw-hos-phrase"/> lifecycle manager in
install_rhel.dita:                                instructions at <xref keyref="rhel_compute_model"> RHEL Compute
install_rhel_uefi.dita:                <p><keyword keyref="kw-hos-phrase-30"/> required a manual procedure if you wanted to use the lifecycle manager
install_rhel_uefi.dita:                This procedure has been automated in the <keyword keyref="kw-hos-phrase"/> lifecycle manager. 
install_rhel_uefi.dita:                <xref href="../../newfeatures40.dita#new_features_hlm/DOCS-3759"><keyword keyref="kw-hos-phrase"/> New Features</xref> article.</p>   
integrating_logstash_splunk.dita:            <p>The <keyword keyref="kw-hos-phrase"/> logging solution provides a flexible and
integrating_logstash_splunk.dita:                The <keyword keyref="kw-hos-phrase"/> logging solution uses the ELK stack
integrating_logstash_splunk.dita:            <p>This tutorial demonstrates how to integrate the <keyword keyref="kw-hos-phrase"/>
integrating_logstash_splunk.dita:            <title>Configuring Splunk to receive log messages from <keyword keyref="kw-hos-phrase"
integrating_logstash_splunk.dita:            <title>Forwarding log messages from <keyword keyref="kw-hos-phrase"/> centralized
integrating_logstash_splunk.dita:                steps to configure the <keyword keyref="kw-hos-phrase"/> Logstash service to ship
integrating_splunk.dita:      integration between the <keyword keyref="kw-hos-phrase"/> centralized logging solution and
integrating_splunk.dita:      <p>The <keyword keyref="kw-hos-phrase"/> logging solution provides a flexible and extensible
integrating_splunk.dita:          keyref="kw-hos-phrase"/> logging solution uses the ELK stack (Elasticsearch, Logstash and
integrating_splunk.dita:          keyref="kw-hos-phrase"/> centralized logging solution and Splunk including the steps to
integrating_splunk.dita:      <title>Configuring Splunk to receive log messages from <keyword keyref="kw-hos-phrase"
integrating_splunk.dita:      <title>Forwarding log messages from <keyword keyref="kw-hos-phrase"/> Centralized Logging to
integrating_splunk.dita:        configure <keyword keyref="kw-hos-phrase"/> to forward the logs to Splunk. These steps will
interfacemodels.dita:            keyref="concept_nicmapping">NIC Mapping</xref>).</p>
interfacemodels.dita:                         <entry id="fcoe_interfaces"><xref keyref="configobj_fcoeinterfaces/table_fcoe_interfaces">fcoe-interfaces (optional)</xref></entry>
introduction.dita:        <p>This section provides general information on the <keyword keyref="kw-hos-phrase"/> release.</p>
ironic_configuration.dita:            <p>The information in this section is taken from the <xref keyref="input_model">Input Model</xref>, 
ironic_configuration.dita:                <xref keyref="example_configurations">Example Configurations</xref> and 
ironic_configuration.dita:                <xref keyref="hardware">Hardware and Software Support Matrix</xref> documents.</p>
ironic_configuration.dita:            <p><image keyref="ironic_entry_scale_network_model"/></p>    
ironic_configuration.dita:            <p><xref keyref="ironic_entry_scale_network_model_lg">Download a high-resolution version</xref></p>
ironic_multi_control_plane.dita:        <p><keyword keyref="kw-hos-phrase"/> introduces the concept of multiple control planes and multiple regions - see the 
ironic_multi_control_plane.dita:          Input Model documentation for the relevant <xref keyref="concept_controlplanes_regions">concepts</xref> and 
ironic_multi_control_plane.dita:        <xref keyref="configobj_multiple_control_planes">configuration objects</xref>. 
ironic_multi_control_plane.dita:          This document covers the use of an Ironic region in a multiple control plane cloud model in <keyword keyref="kw-hos"/>.                                  
ironic_multi_control_plane.dita:    <p>Swift is very resource-intensive and as a result, it is now optional in the <keyword keyref="kw-hos"/> control plane. 
ironic_oneview.dita:          <title>Enabling IRONIC Oneview driver in <keyword keyref="kw-hos"/></title>
ironic_oneview.dita:            This will enable the OneView driver for Ironic in <keyword keyref="kw-hos"/>.
ironic_oneview.dita:        <p>For more informations, see the documentation for <xref keyref="encrypted_storage">Encrypted Storage</xref>.</p>
isolated_metadata.dita:    <p>In <keyword keyref="kw-hos"/> Neutron we currently set <codeph>enable_isolated_metadata =
keystone_federation.dita:      <p>Identity federation lets you configure <keyword keyref="kw-hos"/> using existing identity
keystone_federation.dita:        resources in multiple, separate <keyword keyref="kw-hos"/> clouds. You can configure each cloud to
keystone_federation.dita:      <p>The <keyword keyref="kw-hos"/> cloud that provides the initial user authentication is called the
keystone_federation.dita:        which are used to automatically authenticate users with other <keyword keyref="kw-hos"/>
keystone_federation.dita:      <p>An <keyword keyref="kw-hos"/> cloud that provides resources is called a service provider (SP). A
keystone_federation.dita:          keyref="kw-hos-phrase-30"/> using configuration parameters in specific Ansible files.
keystone_ldap_integration.dita:    <title>Integrating <keyword keyref="kw-hos"/> with an LDAP System</title>
keystone_ldap_integration.dita:            <p>You can configure your <keyword keyref="kw-hos"/> cloud to work with an outside user
keystone_ldap_integration.dita:                permissions in <keyword keyref="kw-hos"/>. </p>
keystone_ldap_integration.dita:            <p>To configure your <keyword keyref="kw-hos"/> cloud to use an outside user-management
keystone_ldap_integration.dita:                            integrate your <keyword keyref="kw-hos"/> cloud with multiple domains,
keystone_ldap_integration.dita:                authentication requests from the other <keyword keyref="kw-hos"/> services:</p>
keystone_token_validation.dita:      <keyword keyref="kw-hos"/> services and the Identity service. It shows how Keystone issues and
lbaas_admin.dita:    <p><b><keyword keyref="kw-hos-phrase"/> LBaaS Configuration</b></p>
lbaas_admin.dita:    <p><keyword keyref="kw-hos-phrase"/> can support either LBaaS v1 or LBaaS v2 to allow for wide
lbaas_admin.dita:      Octavia is the default load balancing provider in <keyword keyref="kw-hos-phrase-30"/> for
lbaas_admin.dita:    <note type="warning">If you are planning to upgrade from <keyword keyref="kw-hos-phrase-30"/> or <keyword keyref="kw-hos-phrase-40"/>,
lbaas_admin.dita:      failure of your cloud deployment. The last tested versions are 8.0.8 for <keyword keyref="kw-hos"/> 3.x and 9.0.3
lbaas_admin.dita:      for <keyword keyref="kw-hos"/> 4.x . More information is expected in 4th quarter 2017, including the correct
lbaas_admin.dita:      drivers for <keyword keyref="kw-hos"/> 5.x.</note>
lbaas_admin.dita:      v2 is installed by default with <keyword keyref="kw-hos"/> and requires minimal configuration
lbaas_admin.dita:      <p><b><keyword keyref="kw-hos"/> LBaaS v1</b></p>
lbaas_admin.dita:        installation preparations during <keyword keyref="kw-hos"/> installation since LBaaS v2 is
lbaas_admin.dita:            <keyword keyref="kw-hos-phrase"/>: Using Git for Configuration Management</xref> to
lbaas_admin.dita:      <p><b><keyword keyref="kw-hos"/> LBaaS v2</b></p>
lbaas_admin.dita:        <li><keyword keyref="kw-hos"/> must be installed for LBaaS v2.</li>
lbaas_dashboard.dita:      <p>In <keyword keyref="kw-hos-phrase"/> you can create a Load Balancer with the Load
lbaas.dita:    <p><b><keyword keyref="kw-hos-phrase"/> LBaaS Configuration</b></p>
lbaas.dita:      a Horizon web interface in a future <keyword keyref="kw-hos"/> release. This document
lbaas.dita:    <p>You can create TLS enabled Load Balancers in <keyword keyref="kw-hos-phrase"/> by following
lbaas.dita:    <p><keyword keyref="kw-hos-phrase"/> can support either LBaaS v1 or LBaaS v2 to allow for wide
lbaas.dita:      <p><keyword keyref="kw-hos-phrase"/> LBaaS Configuration</p>
lbaas_heat.dita:      <p>In <keyword keyref="kw-hos-phrase-30"/>, the Orchestration Service provides support for
lbaas_heat.dita:      <p>For more information on configuring and using the <keyword keyref="kw-hos"/> Load Balancing
lb_defs_networkgroups.dita:        as shown in the examples above.  See section <xref keyref="configobj_load_balancers">Load Balancers</xref> for a 
lb_defs_networkgroups.dita:      <p>Starting in <keyword keyref="kw-hos-phrase"/>, a <codeph>load-balancer</codeph> may be defined within a <codeph>control-plane</codeph> 
lb_defs_networkgroups.dita:        See section <xref keyref="configobj_load_balancers">Load Balancer</xref> definitions in control planes. </p>
live_migration.dita:      <p><keyword keyref="kw-hos"/> Nova offers a set of commands that allow you to move compute
load_balancer_definitions.dita:      <p> Starting in <keyword keyref="kw-hos-phrase"/>, a load-balancer may be defined within a
loadbalancers.dita:        <keyword keyref="kw-hos"/> supplied service definition files.</p>
loadbalancers.dita:            the external name and security certificate.   To accommodate this in <keyword keyref="kw-hos-phrase"/>, 
localizing_inputmodel.dita:                instructions, see <xref keyref="create_extnet"/>.) You will only specify
localizing_inputmodel.dita:                from PCI bus address to a user specified name. <keyword keyref="kw-hos"/> uses the prefix
localizing_inputmodel.dita:                <li><b>Logical name</b> - <keyword keyref="kw-hos"/> uses the form
localizing_inputmodel.dita:                <li><b>Type</b> - Only simple-port types are supported in <keyword keyref="kw-hos-phrase"
localizing_inputmodel.dita:                    keyref="input_model"><keyword keyref="kw-hos-phrase"/> Input Model</xref>.</p>
localizing_inputmodel.dita:                <xref keyref="input_model"><keyword keyref="kw-hos-phrase"/> Input Model</xref>.</p>
localizing_inputmodel.dita:                see <xref keyref="localizing_inputmodel/nicmappings"
manage_compute_instances.dita:            accomplish these tasks, in previous versions of <keyword keyref="kw-hos"/> you had to
manage_logs.dita:            <p><keyword keyref="kw-hos"/> uses the ELK (Elasticsearch, Logstash, Kibana) stack for
managing_blockstorage_ceph.dita:            <p>The <keyword keyref="kw-hos-phrase"/> Ceph storage solution provides an unified,
managing_blockstorage_ceph.dita:                    keyref="kw-hos"/> volume storage (Cinder persistent volumes) service. </p>
managing_blockstorage_ceph.dita:                    <keyword keyref="kw-hos-phrase"/> and Ceph Firefly 0.80.7 running on the hlinux
managing_blockstorage_ceph.dita:                    keyref="kw-hos-phrase"/>, the supported version of Ceph is Firefly 0.80.7. In
managing_blockstorage_ceph.dita:                upcoming <keyword keyref="kw-hos"/> releases, new versions of Ceph will be supported
managing_telemetry.dita:    sections to help you monitor your <keyword keyref="kw-hos-phrase"/> cloud.</abstract>
metering_apis.dita:      <keyword keyref="kw-hos"/> uses the Apache2 Web Server to provide API access. It is possible
metering_apis.dita:        keyref="kw-hos-phrase"/> and it requires a separate pipeline.yml for Ceilometer.
metering_bestpractice.dita:                    keyref="kw-hos"/> uses Apache2 Web Server to provide the API access. This topic
metering_failover_ha.dita:    <section> In the <keyword keyref="kw-hos"/> environment, the Ceilometer metering service
metering_metertypes.dita:      <title><keyword keyref="kw-hos"/> Default Meters</title>
metering_metertypes.dita:      <p>These meters are installed and enabled by default during an <keyword keyref="kw-hos"/>
metering_newfunctions.dita:      <title>New Metering Functionality in <keyword keyref="kw-hos-phrase"/></title>
metering_newfunctions.dita:          overall <keyword keyref="kw-hos"/> performance prior to deploying any Ceilometer
metering_newfunctions.dita:        <li>The Ceilometer Alarms API is disabled by default. <keyword keyref="kw-hos-phrase"/>
metering_reconfig.dita:      <p><keyword keyref="kw-hos-phrase"/> automatically deploys Ceilometer to use the Monasca database.
metering_reconfig.dita:        For Ceilometer, the playbook included with <keyword keyref="kw-hos"/> is
metering_reconfig.dita:        basic usage data and information.<keyword keyref="kw-hos"/> uses Apache2 Web Server to
midscale_kvm_vsa.dita:                keyref="kw-hos"/> for increased scale. The controller services are distributed
mitaka_features.dita:      <title><keyword keyref="kw-hos-phrase"/> Mitaka Features</title>
mitaka_features.dita:        identified below) are enabled in the <keyword keyref="kw-hos-phrase"/> standard settings and
modify_entryscale_kvm_vsa.dita:        <li><b><xref keyref="localizing_inputmodel">Localizations</xref></b> - These are the minimum set of changes that you need to make to
modify_entryscale_kvm_vsa.dita:        <li><b><xref keyref="customizing_inputmodel">Customizations</xref></b> - These describe more general changes that you can make to your
modify_swift_service_config_files.dita:      <p><keyword keyref="kw-hos-phrase"/> enables you to modify various Swift service configuration
modify_swift_service_config_files.dita:            Service</xref>-->  <xref keyref="centralized_logging">Centralized Logging Service</xref>.</p>
monitoring.dita:  <abstract><shortdesc>The <keyword keyref="kw-hos"/> Monitoring service leverages OpenStack
multipath_boot_from_san.dita:                       Boot from SAN support using QLogic-based FlexFabric adapters is latent in <keyword keyref="kw-hos-phrase"/> but 
multipath_boot_from_san.dita:                       <keyword keyref="kw-hos-phrase"/> customers to not use that configuration. The aim is to fix this outstanding 
multipath_boot_from_san.dita:                       issue in a patch to <keyword keyref="kw-hos-phrase"/> in the near future. This issue also affects the use of QLogic 
multipath_boot_from_san.dita:                       <xref keyref="configure_3par/multipath">3PAR Configuration - Multipath</xref>.</p>
multipath_boot_from_san.dita:                   In order to allow <keyword keyref="kw-hos-phrase"/> use volumes from a SAN,
multipath_boot_from_san.dita:        <title>Installing the <keyword keyref="kw-hos-phrase"/> iso for nodes that support Boot from SAN</title>
multipath_boot_from_san.dita:                <image keyref="uefi_installer_menu"/>
multipath_boot_from_san.dita:                <image keyref="uefi_edit_selection"/>
multipath_boot_from_san.dita:                <image keyref="uefi_multipath_true"/>  
multipath_boot_from_san.dita:                     <image keyref="uefi_multipath_install_edit_argument"/>
multipath_boot_from_san.dita:                <image keyref="installer_boot_options"/>
multipath_boot_from_san.dita:               <image keyref="installer_advanced_options"/>
multipath_boot_from_san.dita:                <image keyref="installer_boot_options"/>
multipath_boot_from_san.dita:               <image keyref="installer_advanced_options"/>
multipath_boot_from_san.dita:               <image keyref="multipath_install_edit"/>
multipath_boot_from_san.dita:           <image keyref="multipath_install_edit_argument"/>
multiple_control_planes.dita:        defined as part of the service definitions provide by <keyword keyref="kw-hos"/>, the control-planes define how
namegeneration.dita:            keyref="configobj_nicmappings">NIC Mappings</xref>). Names are generated from data
namegeneration.dita:                        (see <xref keyref="configobj_cloud">Cloud</xref>)</entry>
namegeneration.dita:                        keyref="configobj_controlplane">Control Plane</xref>)</entry>
namegeneration.dita:                        keyref="configobj_clusters">Clusters</xref>)</entry>
namegeneration.dita:                        (see <xref keyref="configobj_cloud">Cloud</xref>)</entry>
namegeneration.dita:                        which the network belongs (see <xref keyref="configobj_nicmappings">NIC
namegeneration.dita:                        (see <xref keyref="configobj_cloud">Cloud</xref>).</entry>
namegeneration.dita:                        keyref="configobj_controlplane">Control Plane</xref>).</entry>
namegeneration.dita:                        keyref="configobj_resources">Resources</xref>).</entry>
namegeneration.dita:                        which the network belongs to (see <xref keyref="configobj_nicmappings">NIC
networkgroups.dita:                            keyref="namegeneration">Name Generation</xref>). If not specified,
networkgroups.dita:                        <p>Starting in <keyword keyref="kw-hos-phrase"/>, a load balancer may be defined within a 
networkgroups.dita:                            See <xref keyref="configobj_lb_defs_networkgroups">Load balancer definitions</xref> in control planes.</p>
networkgroups.dita:                                (see <xref keyref="configobj_neutron_provider_networks/neutron_name">here</xref>)
networkgroups.dita:                        <p>Starting in <keyword keyref="kw-hos-phrase"/>, network tags may be defined as part of a Neutron <codeph>configuration-data</codeph> 
networkgroups.dita:                            <xref keyref="configobj_configurationdata_neutron">Configuration Data</xref>).</p>
networkgroups.dita:                            <p>See notes <xref keyref="configobj_mtu">here</xref> on how MTU settings are applied to interfaces when 
networkgroups.dita:                                keyref="concept_loadbalancers">Load Balancers</xref> for an example of how
networkgroups.dita:                            balancer provides TLS-terminated virtual IP addresses for. In <keyword keyref="kw-hos-phrase-30"/>,
networking_overview.dita:    <p><keyword keyref="kw-hos"/> Networking is a virtual networking service that leverages the OpenStack
networking_overview.dita:      Neutron service to provide network connectivity and addressing to <keyword keyref="kw-hos"/> Compute
networking_overview.dita:          <keyword keyref="kw-hos"/> Dashboard</xref> to work with the Networking service.</p>
networking_overview.dita:        OpenStack Cloud is put together. However, <keyword keyref="kw-hos"/> takes care of these
network_interfaces.dita:                                server) and associated properties (see <xref keyref="configobj_network_interfaces_device">network-interfaces device</xref> for details).</p>
network_interfaces.dita:                                the <uicontrol>nic-mapping</uicontrol> (see <xref keyref="concept_nicmapping"
network_interfaces.dita:                        <entry>Used to define a bond. See <xref keyref="configobj_bonddata"
network_interfaces.dita:                            keyref="configobj_networkgroups">Network Groups</xref>) containing
network_interfaces.dita:                            <uicontrol>networks</uicontrol> (see <xref keyref="configobj_networks"
network_interfaces.dita:                            keyref="configobj_networkgroups">Network Groups</xref>) containing
network_interfaces.dita:                            <uicontrol>networks</uicontrol> (see <xref keyref="configobj_networks">Networks</xref>) 
network_interfaces.dita:                        <entry>A list of one or more network-groups (see <xref keyref="configobj_networkgroups">Network Groups</xref>) 
network_interfaces.dita:                          containing networks (see <xref keyref="configobj_networks">Networks</xref>) that can 
networkroutevalidation.dita:        <keyword keyref="kw-hos"/> release.</p>
networkroutevalidation.dita:        server (see <xref keyref="servernetworkselection">Server Network
networks.dita:                            server-group definition (see <xref keyref="configobj_servergroups">Server
networktags.dita:    <p><keyword keyref="kw-hos"/> supports a small number of network tags which may be used to convey
neutron_configuration_data.dita:        In <keyword keyref="kw-hos-phrase"/>, the <xref keyref="configobj_configurationdata_neutron">Neutron Configuration Data</xref> 
neutron_configuration_data.dita:        section of the <xref keyref="input_model">Input Model</xref> has been extended to include information on the Neutron external network 
neutron_configuration_data.dita:        setup - see <xref keyref="configobj_neutron_external_networks">neutron-external-networks</xref>.                
neutron_configuration_data.dita:        In <keyword keyref="kw-hos-phrase-30"/>, this configuration was typically set using the <codeph>neutron-cloud-configure.yml</codeph> playbook:
neutron_configuration_data.dita:      <p>After upgrading to <keyword keyref="kw-hos-phrase"/>, we recommend that you add the configuration information to the Input Model:</p>
neutron-external-networks.dita:                when the <keyword keyref="kw-hos"/> cloud model configures the external network with the 
neutron-provider-networks.dita:          <keyword keyref="kw-hos"/> cloud that is consumed by Helion services. The distinctive
neutron-provider-networks.dita:      <p>A provider network is created by adding the specification to the <keyword keyref="kw-hos"/>
neutron-provider-networks.dita:      <title><keyword keyref="kw-hos"/> input model</title>
neutron-provider-networks.dita:          keyref="kw-hos-phrase"/> software.</p>
neutron-provider-networks.dita:      <p><keyword keyref="kw-hos-phrase"/> automates the server networking configuration and the
neutron-provider-networks.dita:      <p>A network group used for provider VLANs may contain only a single <keyword keyref="kw-hos"
neutron-provider-networks.dita:        nodes/controllers (i.e. it is a single L2 segment). The <keyword keyref="kw-hos"/> network
neutron-provider-networks.dita:      <p>When the cloud is deployed, <keyword keyref="kw-hos-phrase"/> will create the appropriate
nicmapping.dita:            or PCI Passthrough.   Each <keyword keyref="kw-hos"/> release includes the data for the supported device types.</p>
nicmappings.dita:                keyref="configobj_servers">Servers</xref>). Devices should be named
nicmappings.dita:                <keyword keyref="kw-hos"/>, ensuring that all devices on a baremetal machine are
nicmappings.dita:                            server definition (see <xref keyref="configobj_servers">Servers</xref>) to
nicmappings.dita:                                keyref="configobj_interfacemodels">Interface Models</xref>)</entry>
nicmappings.dita:                        <entry>The type of port. <keyword keyref="kw-hos-phrase"/> supports "simple-port" and
objectstorage_index.dita:    <p>This section contains operations tasks for your <keyword keyref="kw-hos-phrase"/> Object Storage service.</p>
objectstorage_overview.dita:      <p>The <keyword keyref="kw-hos"/> Object Storage using Swift service leverages <tm
objectstorage_overview.dita:      <p><keyword keyref="kw-hos"/> Object Storage using Swift provides a highly-available,
objectstorage_overview.dita:        architecture, with no single point of failure. In addition, <keyword keyref="kw-hos"/>
objectstorage_overview.dita:        exists in the example cloud models distributed in <keyword keyref="kw-hos"/>:</p><p>
octavia_admin.dita:      <note type="warning">Changes might be lost during <keyword keyref="kw-hos"/> upgrades.</note>
octavia_admin.dita:      <p>Reasons to enable a load balancing spare pool in <keyword keyref="kw-hos"/>
octavia_admin.dita:      <note type="important">In <keyword keyref="kw-hos-phrase-30"/> the spare pool can’t be used to
octavia_admin.dita:        speed up fail overs. If a load balancer fails in <keyword keyref="kw-hos"/>, Octavia will
octavia_admin.dita:          <keyword keyref="kw-hos-phrase-30"/>.</p>
operations_index.dita:          keyref="kw-hos-phrase"/> cloud.  The audience is the admin-level operator of the
operations_overview.dita:      operating a <keyword keyref="kw-hos-phrase"/> cloud.</shortdesc></abstract>
operations_overview.dita:        and responsibilities we are referring to. <keyword keyref="kw-hos"/> defines a cloud
operations_overview.dita:      <p><keyword keyref="kw-hos"/> provides the following tools which are available to operate your
operations_overview.dita:        is operating correctly. By logging on to the console, <keyword keyref="kw-hos"/>
operations_overview.dita:      <p>Each service within <keyword keyref="kw-hos"/> provides a command-line client, such as the
operations_overview.dita:        <li><b>Ensure your cloud is running correctly</b>: <keyword keyref="kw-hos"/> is deployed as
operations_overview.dita:          to address issues before they affect the broader system. <keyword keyref="kw-hos"/>
operations_overview.dita:          initial deployment’s capacity. You can expand <keyword keyref="kw-hos"/> in a variety of
operations_overview.dita:      <p><b>How do I determine if my cloud is operating correctly now?</b>: <keyword keyref="kw-hos"
operations_overview.dita:        underlying system. By default, <keyword keyref="kw-hos"/> comes with a set of alarms that
opsconsole_overview.dita:        keyref="kw-hos-phrase"/> to view data about your Helion cloud infrastructure in a web-based
opsconsole_overview.dita:      the console, <keyword keyref="kw-hos"/> administrators can manage data in the following ways:
opsconsole_overview.dita:          <li><keyword keyref="kw-hos-phrase"/> no longer supports DBaaS and MSGaaS panels in the
ops_dashboard_overview.dita:    <p>Horizon is the OpenStack service that serves as the basis for the <keyword keyref="kw-hos"/>
ops_dashboard_overview.dita:    <p>The dashboards provide a web-based user interface to <keyword keyref="kw-hos"/> services
overview.dita:  <abstract><shortdesc outputclass="hdphidden"><keyword keyref="kw-hos-phrase"/> is the latest OpenStack-based
overview.dita:    <p><keyword keyref="kw-hos-phrase"/> is the latest OpenStack-based infrastructure-as-a-service 
overview.dita:      <p>With the release of <keyword keyref="kw-hos-phrase"/> comes an easy installation and
overview.dita:        install and configure them individually. Instead, in <keyword keyref="kw-hos-phrase"/>,
overview.dita:      <p>These files allow customization, and <keyword keyref="kw-hos-phrase"/> ships with complete
overview.dita:      <p>This installation and configuration is made possible by <keyword keyref="kw-hos-phrase"/>,
overview.dita:      <p>As you will read in the <keyword keyref="kw-hos-phrase"/>
overview.dita:        <xref keyref="input_model">Input Model</xref> topic, the configuration processor reads and
overview.dita:        service definitions provided by <keyword keyref="kw-hos"/> and any persisted state
overview.dita:          <keyword keyref="kw-hos-phrase"/> allows you to deploy and manage your cloud via this
overview.dita:      <p>The example configurations that ship with <keyword keyref="kw-hos-phrase"/> are described
overview.dita:        in <xref keyref="example_configurations"><keyword keyref="kw-hos-phrase"/>: Example
overview.dita:          <li><xref keyref="entryscale_kvm_vsa">Entry-scale KVM with VSA model</xref></li>
overview.dita:          <li><xref keyref="entryscale_esx">Entry-scale ESX model</xref></li>
overview.dita:          <li><xref keyref="entryscale_swift">Entry-scale Swift model</xref></li>
overview.dita:          <li><xref keyref="entryscale_ceph">Entry-scale KVM with Ceph model</xref></li>
overview.dita:          <li><xref keyref="midscale_kvm_vsa">Mid-scale KVM with VSA model</xref></li>
overview.dita:          keyref="kw-hos-phrase"/> documentation to refer to the features described in this
overview.dita:      <p>In <keyword keyref="kw-hos-phrase"/>, the YAML files that define your cloud configuration
password_change_yml.dita:            <keyword keyref="kw-hos"/> documentation</p>
pdf30.dita:    <p>A PDF version of the <keyword keyref="kw-hos"/> documentation can be downloaded here. Be
persisteddata.dita:        <keyword keyref="kw-hos"/> will only persist data when the administrator confirms that they are about to
persisteddata.dita:    <p>Imagine you have completed your <keyword keyref="kw-hos"/> deployment with servers A, B, and C
persisteddata.dita:        keyref="configobj_servers">Servers</xref>), and include the control plane,
persisteddata.dita:        <xref keyref="namegeneration">Name Generation</xref> for how names are
postinstall_tasks.dita:      <p>The home directory of the user that owns the <keyword keyref="kw-hos-phrase"/> scripts 
preinstall_checklist.dita:      <p>Before installing <keyword keyref="kw-hos"/>, the following networks must be provisioned
preinstall_checklist.dita:        manage the networks as documented in the <xref keyref="example_configurations">Example
preinstall_checklist.dita:        with a clean install of <keyword keyref="kw-hos-phrase"/> can you specify a different IPAM
preinstall_checklist.dita:      <p>The IP router used with <keyword keyref="kw-hos"/> must support the updated of its ARP
preinstall_checklist.dita:      <p>The management network is the backbone used for the majority of <keyword keyref="kw-hos"/>
preinstall_checklist.dita:      <p>This server contains the <keyword keyref="kw-hos"/> installer, which is based on Git,
preinstall_checklist.dita:        core <keyword keyref="kw-hos"/> services including Nova, Keystone, Glance, Cinder, Heat,
preinstall_config.dita:    <title><keyword keyref="kw-hos-version-30"/>Pre-installation Service and Feature Configuration</title>
preinstall_overview.dita:        <section><title><keyword keyref="kw-hos-phrase"/> Installation</title>
preinstall_overview.dita:                full power and flexibility of <keyword keyref="kw-hos-phrase"/>.</p>
provisioning_rhel.dita:                it can be added to a new or existing <keyword keyref="kw-hos-phrase"/> cloud.</p>
provisioning_rhel.dita:            <p>You need to set up a yum repository, either external or local, containing a <keyword keyref="kw-hos"/>
provisioning_rhel.dita:            <p>As documented in the <xref keyref="install_entryscale_kvm/thirdparty">Using 3rd Party
provisioning_rhel.dita:                    Baremetal Installers</xref> section of <xref keyref="install_entryscale_kvm"
qemu_save_folder_move.dita:            <p>In <keyword keyref="kw-hos-phrase-21"/>, the folder used for saving suspended instances,
qemu_save_folder_move.dita:                limited capacity. To overcome this issue, <keyword keyref="kw-hos-phrase"/> uses a symbolic link  to a 
qemu_save_folder_move.dita:                If a compute node has a lot of suspended instances, the upgrade process from <keyword keyref="kw-hos-phrase-21"/> to 
qemu_save_folder_move.dita:                <keyword keyref="kw-hos-phrase"/> could take a long time as all the images for the suspended instances need to be 
quickstart_guide.dita:                installing and setting up a <keyword keyref="kw-hos"/> cloud. Use this quickstart
quickstart_guide.dita:                fully functioning <keyword keyref="kw-hos"/> demo environment.</p>
quickstart_guide.dita:            <p>The following are short descriptions of the components that <keyword keyref="kw-hos"
quickstart_guide.dita:                        <keyword keyref="kw-hos"/> to manage nearly all aspects of your cloud
quickstart_guide.dita:            <p>Successfully deploying a <keyword keyref="kw-hos"/> cloud environment is a large but
quickstart_guide.dita:                    keyref="kw-hos"/> cloud requires the proper network infrastrucure. Because
quickstart_guide.dita:                    <keyword keyref="kw-hos"/> segregates the network traffic of many of its
quickstart_guide.dita:                    a copy of the <keyword keyref="kw-hos"/> installation
quickstart_guide.dita:                        <li>Using the URL that you obtained the <keyword keyref="kw-hos"/>
quickstart_guide.dita:                            server:<codeblock>wget &lt;URL for <keyword keyref="kw-hos"/> installation ISO></codeblock></li>
quickstart_guide.dita:                                        playbook, your <keyword keyref="kw-hos"/> cloud will be in
rbac.dita:      <p>Previously in <keyword keyref="kw-hos"/>, a network object was either private to a project or
rebalanced_explained.dita:        <li>Not all devices are of the same size. <keyword keyref="kw-hos-phrase"/> automatically
reboot_cloud_down.dita:        <li>Continue checking the status of your <keyword keyref="kw-hos-phrase"/> cloud services
recommended_hardware_minimums.dita:      <p>These recommended minimums are based on the included <xref keyref="example_configurations"
recommended_hardware_minimums.dita:          keyref="example_configurations"/>.</p>
recommended_hardware_minimums.dita:      <p>These recommended minimums are based on the included <xref keyref="example_configurations"
recommended_hardware_minimums.dita:        keyref="example_configurations"/>.</p>
recommended_hardware_minimums.dita:      <p>These recommended minimums are based on the included <xref keyref="example_configurations"
recommended_hardware_minimums.dita:      <p><keyword keyref="kw-hos-phrase"/> currently supports the following ESXi versions:</p>
recommended_hardware_minimums.dita:      <p>These recommended minimums are based on the included <xref keyref="example_configurations"
recommended_hardware_minimums.dita:      <p><keyword keyref="kw-hos-phrase"/> currently supports the following ESXi versions:</p>
recommended_hardware_minimums.dita:          keyref="example_configurations">example configurations</xref> included with the base
recommended_hardware_minimums.dita:          keyref="example_configurations"/>.</p>
recommended_hardware_minimums.dita:      <p>These recommended minimums are based on the included <xref keyref="example_configurations"
recommended-hardware-minimums.dita:      <p>Before performing any installation or upgrade of a <keyword keyref="kw-hos"/> release on
recommended-hardware-minimums.dita:      <p>These recommended minimums are based on the included <xref keyref="example_configurations"
recommended-hardware-minimums.dita:        keyref="example_configurations"/>.</p>
reconfigure_vsa_verb_add_extra_disk.dita:      <p>The <keyword keyref="kw-hos-phrase"/> allows you to add new disk(s) to the deployed VSA
recover_vertica.dita:  <abstract><shortdesc outputclass="hdphidden">In <keyword keyref="kw-hos-phrase"/>, the monitoring
recover_vertica.dita:    <p>In <keyword keyref="kw-hos-phrase"/>, the monitoring service uses Vertica as its database. If
releasenotes50.dita:    <title><keyword keyref="kw-hos-tm"/>
releasenotes50.dita:        <keyword keyref="kw-hos-version-50"/>: Release Notes</title>
releasenotes50.dita:                <keyword keyref="kw-hos-phrase"/>, including known issues and workarounds for this
releasenotes50.dita:                keyref="kw-hos-phrase"/>, including known issues and workarounds for this
remove_compute_node.dita:          nodes you are using. <p>See <xref keyref="configobj_controlplane">Input Model - Control
remove_compute_node.dita:            the configuration processor. See <xref keyref="persisteddata">Persisted Data</xref> for
removing_esx_host_from_cluster.dita:              keyref="persisteddata">Persisted Data</xref> for more
removing_swift_node.dita:          IDs are already listed in that file. See <xref keyref="passthrough">Input Model -
removing_swift_node.dita:              running the configuration processor. See <xref keyref="persisteddata">Persisted
replace_ceph_monitor_node.dita:    <p><keyword keyref="kw-hos-phrase"/> supports hosting the Ceph monitor service in the following
replace_controller.dita:    <p>For <keyword keyref="kw-hos-phrase"/> versions, you must have three controller nodes.
replace_osd_journaldisk.dita:      <p><keyword keyref="kw-hos-phrase"/> supports a Ceph environment with the following OSD node
resources.dita:                            server allocations (see <xref keyref="persisteddata">Persisted
resources.dita:                            keyref="namegeneration">Name Generation</xref>)</entry>
resources.dita:                            allocated to this resource group. (see <xref keyref="concept_serverroles"
resources.dita:                                keyref="concept_servergroups_failurezones">Server Groups and Failure
retrieve_adminpassword.dita:      tools and API.</shortdesc><p>In a default <keyword keyref="kw-hos-phrase"/> installation there is a
rhel_overview.dita:                <p><keyword keyref="kw-hos-phrase"/> supports RHEL compute nodes, specifically RHEL 7.2. 
rhel_overview.dita:                    HPE does not ship a RedHat iso with <keyword keyref="kw-hos"/> so you will need to 
rhel_overview.dita:                <p>There are two approaches for deploying RHEL compute nodes in <keyword keyref="kw-hos"/>:
rhel_preinstall.dita:                <keyword keyref="kw-hos-phrase"/> uses iptables to secure access to lifecycle manager network interfaces and on 
rhel_preinstall.dita:                This sample configuration is inappropriate for <keyword keyref="kw-hos"/> operation and the node will not be able to run HOS 
rhel_preinstall.dita:                <keyword keyref="kw-hos-phrase"/> install will prevent the installation of the sample files.                
rhel_preinstall.dita:                However, if these files do exist, there are a number of steps that you must follow before you install <keyword keyref="kw-hos-phrase"/>.
rhel_preinstall.dita:                <keyword keyref="kw-hos"/> components and OpenStack components manage <i>interface specific</i> rules.
rhel_preinstall.dita:                <li>Ensure that any remaining rules are limited to interfaces not used by <keyword keyref="kw-hos"/>.  <!--To delete
rhel_preinstall.dita:                    interfaces not used by <keyword keyref="kw-hos"/>), you will need to reboot the system to activate the new settings.
rhel_support.dita:                tested and qualified by HPE to run on <keyword keyref="kw-hos"/>. Refer to the
rhel_support.dita:                published compatibility matrix for your version of <keyword keyref="kw-hos"/> at the
rhel_support.dita:                        <p>HPE customers who have purchased both <keyword keyref="kw-hos"/> and RHEL
rhel_support.dita:                            specialists in <keyword keyref="kw-hos"/> and RedHat technologies. If
rhel_support.dita:                            level. If <keyword keyref="kw-hos"/> software is excluded as the cause
ring_management.dita:      provided during setup of the <keyword keyref="kw-hos"/> Input Model. (For more information,
ring_specifications.dita:        data required to build future rings. In <keyword keyref="kw-hos-phrase"/>, you will use the
ring_specifications.dita:      <p><b>Ring Specifications in <keyword keyref="kw-hos"/> 2.x and 3.x</b></p>
ring_specifications.dita:        In <keyword keyref="kw-hos"/> 2.x and 3.x, ring specifications were mentioned in the 
ring_specifications.dita:        <keyword keyref="kw-hos"/> 4.x continues to support ring specifications in that file. 
ring_specifications.dita:        If you upgrade to <keyword keyref="kw-hos"/> 4.x, you do not need to make any changes.
ring_specifications.dita:        <p>In <keyword keyref="kw-hos-phrase"/>, Swift supports erasure coded object rings as well
ring_specifications.dita:                ec_types in <keyword keyref="kw-hos-phrase"/> are: <ul>
rn_content-jira_1688.dita:      included in <keyword keyref="kw-hos"/> and their status. Only official upstream OpenStack
rn_content-jira_1688.dita:        service is not listed in the table then it is not present in <keyword keyref="kw-hos"
rn_content-jira_1688.dita:          <stentry>Status in <keyword keyref="kw-hos-phrase-20"/></stentry>
rn_content-jira_1688.dita:      <title>Relation of <keyword keyref="kw-hos"/> Services with OpenStack stable/kilo</title>
rn_content-jira_1688.dita:      <p>The general policy for <keyword keyref="kw-hos-version-20"/> is that each service is kept
rn_content-jira_1688.dita:        <keyword keyref="kw-hos-version-20"/> build is summarised here. This is automated output
rn_content-jira_1688.dita:      from all the OpenStack repos included in the <keyword keyref="kw-hos"/> daily builds. </p>
rn_content-jira_1688.dita:      of OpenStack Kilo will <keyword keyref="kw-hos-version-20"/> ship with?As per above, <keyword
rn_content-jira_1688.dita:        keyref="kw-hos-version-20"/> is built from code which is sync'd nightly with upstream
rn_content-jira_1688.dita:      OpenStack stable/kilo. <keyword keyref="kw-hos-version-20"/> will therefore ship with the
rn_content-jira_1688.dita:      latest Kilo patches as of the final build of <keyword keyref="kw-hos-version-20"/>. In other
rn_content-jira_1688.dita:      words, the <keyword keyref="kw-hos-version-20"/> plan is that it will be more up to date than
route_info_yml.dita:        data; this file shows which routes will actually be used. <keyword keyref="kw-hos"/> will
security_overview.dita:        <p>The <keyword keyref="kw-hos-phrase"/> Security topics include:</p>
servergroups.dita:            keyref="concept_servergroups">Server Groups</xref>).</p>
servergroups.dita:                                keyref="configobj_controlplane">Control Plane</xref>)</entry>
servergroups.dita:                        <entry>A list of network names (see <xref keyref="concept_networks"
servergroups.dita:                            >Networks</xref>). See <xref keyref="concept_servergroups_networks">Server
servergroups_networks.dita:        <keyword keyref="kw-hos"/> model via <uicontrol>server-groups</uicontrol>, each group lists zero or more
servernetworkselection.dita:            <xref keyref="concept_servergroups_networks">Server Groups and Networks</xref>) to
serverroles.dita:            <li>Disk model (see <xref keyref="configobj_diskmodels">Disk Models</xref>)</li>
serverroles.dita:            <li>Interface model (see <xref keyref="configobj_interfacemodels">Interface
serverroles.dita:        <li>Memory model (see <xref keyref="configobj_memorymodels">Memory Models</xref>)</li>
serverroles.dita:            <li>CPU model (see <xref keyref="configobj_cpumodels">CPU Models</xref>)</li>
serverroles.dita:        <p>Server roles are referenced in the servers (see <xref keyref="configobj_servers"
servers.dita:                            are used to track server allocations. (see <xref keyref="persisteddata"
servers.dita:                            keyref="concept_serverroles">Server Roles</xref> for a description of server
servers.dita:                            server. (see <xref keyref="configobj_nicmappings">NIC Mappings</xref>)</entry>
servers.dita:                            belongs to. (see <xref keyref="concept_servergroups">Server
services.dita:        <keyword keyref="kw-hos"/>.</p>
services.dita:    <p>When specifying your <keyword keyref="kw-hos"/> cloud you have to decide where components will
services.dita:        services? The <keyword keyref="kw-hos"/> supplied examples provide solutions for some typical
shared_node_recovery.dita:      in this case) in <keyword keyref="kw-hos"/>, excute the following steps. <ol>
standalone_deployer.dita:                configuration, see <xref keyref="localizing_inputmodel/netinterfaces"
standalone_deployer.dita:                running on, i.e., the node where you have installed the <keyword keyref="kw-hos"/>
start_stop_services.dita:      <p><keyword keyref="kw-hos"/> provides an ansible playbook that can stop or start all Nova
swift_container_sync.dita:          keyref="kw-hos-version-30"/> system. If you are synchronizing with another Swift system
swift_container_sync.dita:          <keyword keyref="kw-hos-version-30"/> terminology.</p>
swift_dispersion_report.dita:      <p>Once a Swift system has been fully deployed in <keyword keyref="kw-hos-phrase"/>, you can
swift_weight_attribute.dita:        keyref="kw-hos-phrase"/> does this by limiting the weights of the new drives to a smaller
swift_weight_attribute.dita:        keyref="kw-hos-phrase"/> will increase the weight and rebuild rings to trigger another round
swift_weight_attribute.dita:    <p>In <keyword keyref="kw-hos"/>, the weight-step attribute is set in the ring specification of
system_maintenance.dita:      keyref="kw-hos-phrase"/> cloud.</abstract>
test.dita:      <p><image keyref=""/></p>
thirdparty_driver_support.dita:  <abstract><shortdesc outputclass="hdphidden"><keyword keyref="kw-hos-phrase"/> comes with a
thirdparty_driver_support.dita:      overview of deployer-side additions to a <keyword keyref="kw-hos"/>
thirdparty_driver_support.dita:      <p><keyword keyref="kw-hos-phrase"/> comes with a selection of built-in plugins and drivers
thirdparty_driver_support.dita:        additions to a <keyword keyref="kw-hos"/> deployment.</p>
thirdparty_driver_support.dita:          <keyword keyref="kw-hos"/> environment. The second will be from the perspective of a
thirdparty_driver_support.dita:        developer who wants to package their driver for use on <keyword keyref="kw-hos"/>.</p>
thirdparty_driver_support.dita:                    third-party drivers forward with new <keyword keyref="kw-hos"/>
thirdparty_driver_support.dita:          keyref="kw-hos"/> versions</title>
third_party_service_integration.dita:<abstract><shortdesc outputclass="hdphidden">This documentation details the support <keyword keyref="kw-hos-phrase"/>
third_party_service_integration.dita:        provides for the integration of 3rd-party components with a <keyword keyref="kw-hos"/>
third_party_service_integration.dita:        existing service in the <keyword keyref="kw-hos"/> stack. The 3rd-party mechanism supports the integration of a
third_party_service_integration.dita:      <p><keyword keyref="kw-hos"/> provides great  flexibility when deploying your cloud, including:
third_party_service_integration.dita:        <keyword keyref="kw-hos-phrase"/>
third_party_service_integration.dita:        extends this flexibility by supporting the integration of 3rd-party components with a <keyword keyref="kw-hos"/>
third_party_service_integration.dita:        existing service in the <keyword keyref="kw-hos"/> stack. The 3rd-party mechanism supports the integration of a
third_party_service_integration.dita:          <b>Packages:</b> Addition of 3rd-party packages not available in <keyword keyref="kw-hos"/> repos onto a separate
third_party_service_integration.dita:          <keyword keyref="kw-hos"/> services are deployed as separate python virtual environments
third_party_service_integration.dita:            <li> The patching of an existing <keyword keyref="kw-hos"/> venv, e.g. adding a plugin
third_party_service_integration.dita:              to the <keyword keyref="kw-hos"/> neutron venv.</li>
third_party_service_integration.dita:                <keyword keyref="kw-hos"/> venv. </li>
third_party_service_integration.dita:          <b>Service Definitions:</b> <keyword keyref="kw-hos"/> services and service components are defined in a series of
third_party_service_integration.dita:          relationships between each other and with <keyword keyref="kw-hos"/>-supplied services can be defined. These
third_party_service_integration.dita:          service definitions will be processed along with the set of <keyword keyref="kw-hos"/> service definitions to
third_party_service_integration.dita:            plugin to be patched in an existing <keyword keyref="kw-hos"/> service venv or python code for a new venv. Helion lifecycle manager
third_party_service_integration.dita:          centralised logging service provided by <keyword keyref="kw-hos"/>. This service also manages the logrorate
third_party_service_integration.dita:          <b><keyword keyref="kw-hos"/> service configuration:</b> Some <keyword keyref="kw-hos"/> services (currently, just Neutron) provide an
third_party_service_integration.dita:        <keyword keyref="kw-hos"/> platform in advance of a deployment. In the general use case, the 3rd-party content is
third_party_service_integration.dita:              populated with <keyword keyref="kw-hos"/> extensions content shipped with <keyword
third_party_service_integration.dita:                keyref="kw-hos"/>, e.g. for a <keyword keyref="kw-hos"/>-DCN deployment: <codeblock>cplion/hos_extensions/dcn ~/third-party/</codeblock>
third_party_service_integration.dita:                keyref="kw-hos"/> extensions) must be added to the third-party area for a <keyword
third_party_service_integration.dita:                keyref="kw-hos"/>-DCN deployment. <!--Full details on how to set up
third_party_service_integration.dita:              <keyword keyref="kw-hos"/> with DCN see – TODO REF):-->
third_party_service_integration.dita:                keyref="kw-hos"/> provides a different set of service venvs for hlinux and RHEL) are
third_party_service_integration.dita:          <image keyref="debian_rhel_import"/>
third_party_service_integration.dita:          and populate the 3rd-party apt repo (separate to the base <keyword keyref="kw-hos"/> apt repo) with deb packages
third_party_service_integration.dita:          and populate the 3rd-party yum repo (separate to the <keyword keyref="kw-hos"/> yum repo, if present) with rpm
third_party_service_integration.dita:        <p>The third-party import mechanism supports both the patching of existing <keyword keyref="kw-hos"/> venvs and
third_party_service_integration.dita:          the creation of new venvs. An example of the patching of an existing <keyword keyref="kw-hos"/> neutron venv is
third_party_service_integration.dita:          <image keyref="hos_neutron_venv"/>
third_party_service_integration.dita:        <p>A sample directory layout for the patching of an existing <keyword keyref="kw-hos"/> venv with plugin code and
third_party_service_integration.dita:          which must be present. To patch an existing <keyword keyref="kw-hos"/> venv, such as neutron, the services.yml is
third_party_service_integration.dita:          the original venv supplied with <keyword keyref="kw-hos"/>.</p>
third_party_service_integration.dita:          <keyword keyref="kw-hos"/> nova-client venv. This additionally has content installed into it from the debs, src
third_party_service_integration.dita:          the input model can be found <xref keyref="input_model">here</xref>). The input model refers to a
third_party_service_integration.dita:          readability and organisation, but this is not strictly required); the full set of <keyword keyref="kw-hos"/>
third_party_service_integration.dita:          service and its constituent service-components (in <keyword keyref="kw-hos-phrase"/>) is as follows: </p>
third_party_service_integration.dita:          <image keyref="import_mechanisms"/>
third_party_service_integration.dita:          definitions will have been added to the existing set of <keyword keyref="kw-hos"/> services under
third_party_service_integration.dita:          <image keyref="ansible_playbook_roles"/>
third_party_service_integration.dita:              <b>service: </b>Refers to the name of a <keyword keyref="kw-hos"/> service as per its naming in the Helion lifecycle manager
third_party_service_integration.dita:          <p>In deploying <keyword keyref="kw-hos"/>, customers may want to modify some of the configuration files supplied
third_party_service_integration.dita:            by <keyword keyref="kw-hos"/>. To facilitate this, the <codeph>~/helion/my_cloud/config</codeph> area on the lifecycle
third_party_service_integration.dita:            services in <keyword keyref="kw-hos"/>. To customise, the customer edits these files directly and commits to
third_party_service_integration.dita:            git (see <xref keyref="using_git">Using GIT</xref> ) and those
third_party_service_integration.dita:            <image keyref="other_application_content"/>
third_party_service_integration.dita:        <p><keyword keyref="kw-hos"/> provides a centralised logging service, which collects log files for all <keyword keyref="kw-hos"/> services
third_party_service_integration.dita:          profile and general info on the centralized logging service, please see the documentation <xref keyref="centralized_logging">here</xref>.
third_party_service_integration.dita:      <title><keyword keyref="kw-hos"/> Service Configuration</title>
third_party_service_integration.dita:          <ph>Some <keyword keyref="kw-hos"/> services provide an interface for injecting third-party customizations of the
third_party_service_integration.dita:            service/service-component. Currently, only the <keyword keyref="kw-hos"/> neutron service provides such an
third_party_service_integration.dita:      <p>After deploying <keyword keyref="kw-hos"/> integrated with a third-party service, there are two main upgrade
third_party_service_integration.dita:        <li> <keyword keyref="kw-hos"/> upgrade (major, minor, patch or hotfix) </li>
third_party_service_integration.dita:        <li>Upgrade of third-party content independent of a <keyword keyref="kw-hos"/> upgrade.</li>
third_party_service_integration.dita:      <title><keyword keyref="kw-hos"/> Upgrade</title>
third_party_service_integration.dita:          <ph>After deploying <keyword keyref="kw-hos"/> integrated with a third-party service, the </ph>following steps
third_party_service_integration.dita:          must be carried for any upgrade of <keyword keyref="kw-hos"/> (major, minor, patch, hotfix): </p>
third_party_service_integration.dita:            to the latest <keyword keyref="kw-hos"/> Neutron venv supplied in the upgrade kit. </li>
third_party_service_integration.dita:          patched and deployed venv with the latest one supplied in the <keyword keyref="kw-hos"/> upgrade kit. For this
third_party_service_integration.dita:        <p>It is also possible to update third-party content independently of a <keyword keyref="kw-hos"/> upgrade, e.g.
third_party_service_integration.dita:          update the plugin used to patch the <keyword keyref="kw-hos"/> Neutron venv. To update third-party content, the
third_party_service_integration.dita:            If the third-party update involves the change of a Neutron plugin, the latest <keyword keyref="kw-hos"/>
tls_configCONTENT_DO_NOT_DELETE.dita:    <section><title/>In <keyword keyref="kw-hos-phrase-30"/>, you can provide your own certificate
tls_configCONTENT_DO_NOT_DELETE.dita:        service has a different domain name in <keyword keyref="kw-hos-phrase-30"/>. So it is
tls_configCONTENT_DO_NOT_DELETE.dita:      <p>All of the <keyword keyref="kw-hos-phrase"/> example cloud models ship with TLS enabled on
tls_config.dita:    <section><title/>In <keyword keyref="kw-hos-phrase"/>, you can provide your own certificate
tls_config.dita:        keyref="kw-hos"/> are useful for testing and setup, but you should always install your own
tls_config.dita:        service has a different domain name in <keyword keyref="kw-hos-phrase"/>. So it is
tls_config.dita:        <p>All of the <keyword keyref="kw-hos-phrase"/> example cloud models ship with TLS enabled on
tls_config.dita:          keyref="kw-hos-phrase"/>. Let's also assume that for the internal VIP you will use the
tls_config.dita:      <p><keyword keyref="kw-hos"/> generates its own internal certificates but is designed to allow
tls_config.dita:          for the CA certificate to be processed by <keyword keyref="kw-hos"/>. Detailed steps are
tls_overview.dita:        user communications to and between the <keyword keyref="kw-hos"/> services from internal and
tls_overview.dita:      <p>In  <keyword keyref="kw-hos-phrase"/>, the following are enabled for TLS</p>
tls_overview.dita:            keyref="kw-hos-phrase-30"/>. The external name in the input model files (in
tls_overview.dita:    <section><title> <keyword keyref="kw-hos-phrase"/> clean install vs. upgrade</title> <p>Clean install: all
troubleshooting_issues.dita:      <keyword keyref="kw-hos-phrase"/> cloud.</abstract>
troubleshooting_sosreport.dita:    debugging issues in your <keyword keyref="kw-hos"/> environment you can run an ansible playbook
troubleshooting_tls.dita:      while <keyword keyref="kw-hos-phrase"/> allows you to add new trust chains, it would be
troubleshooting_tls.dita:        keyref="kw-hos-phrase"/> due to the following. <ul>
ts_ceph.dita:          <p>In <keyword keyref="kw-hos"/>, OSD disks are referred to by UUID instead of by block
ts_ceph.dita:          <p>If you were using a previous version of <keyword keyref="kw-hos"/> and then upgraded,
ts_ceph.dita:              keyref="kw-hos"/> then your UUIDs will be auto-populated during installation.</p>
ts_ceph.dita:          <note type="attention">This is applicable only for <keyword keyref="kw-hos-version-30"
ts_compute.dita:        initial install or upgrade to <keyword keyref="kw-hos-phrase-30"/>, and you have run the
tutorials.dita:    <keyword keyref="kw-hos-phrase"/> cloud.</abstract>
twosystems.dita:    <p>If you wish to install two separate <keyword keyref="kw-hos-phrase"/> systems
twosystems.dita:        <p>To resolve this issue, our recommendation is to install your separate <keyword keyref="kw-hos-phrase"/> systems with VRRP traffic on different
twosystems.dita:        <p>If this is not possible, you may also assign a unique routerid to your separate <keyword keyref="kw-hos-phrase"/> system by changing the
understanding_identity.dita:      <keyword keyref="kw-hos-phrase"/> identity service uses OpenStack Keystone and the concepts of
understanding_identity.dita:            <keyword keyref="kw-hos"/> keystone installation after the Keystone service has been
understanding_identity.dita:        <li>The "default" domain is created automatically during the <keyword keyref="kw-hos"/>
understanding_identity.dita:          the <keyword keyref="kw-hos"/> keystone installation process.</li>
understanding_identity.dita:        <keyword keyref="kw-hos-phrase-20"/> and above, service policy files can be modified and deployed
understanding_identity.dita:      <codeph>project_observer</codeph> is explicitly created in <keyword keyref="kw-hos-phrase"/>. Any user who is
update_disk_models.dita:                <p>In a <keyword keyref="kw-hos-phrase"/> cloud, the controller and compute nodes have volume groups setup based
update_disk_models.dita:                    configurations. In <keyword keyref="kw-hos-phrase"/>, new services have been added and some existing services 
update_disk_models.dita:                    for the various volumes have changed. The disk templates in the examples folder for <keyword keyref="kw-hos-phrase"/> 
update_disk_models.dita:            <p>This means that after upgrade to <keyword keyref="kw-hos-phrase"/>, your existing disks and volume allocations that originated in 
update_disk_models.dita:                <keyword keyref="kw-hos-phrase-21"/> will now be incompatible with the recommended values for a 
update_disk_models.dita:                cloud now running <keyword keyref="kw-hos-phrase"/> services.
update_disk_models.dita:            <p>If you are planning on upgrading from <keyword keyref="kw-hos-phrase-21"/> to <keyword keyref="kw-hos-phrase"/>, this document
update_disk_models.dita:            <p>For an introduction to using the online Disk sizing tool, see <xref keyref="hardware/disk_calc">Disk Calculator for Compute-Centric Deployments</xref>.
update_disk_models.dita:                will need after upgrade to <keyword keyref="kw-hos-phrase"/>.
update_disk_models.dita:            <image keyref="upgrade_disc_calc_inputs"/>
update_disk_models.dita:                present in <keyword keyref="kw-hos-phrase-21"/>: </p>
update_disk_models.dita:            <image keyref="upgrade_disc_calc_output_entry_scale"/>
upgrade_ceph_model.dita:            <p id="ceph_upgrade_summary">New <keyword keyref="kw-hos-phrase"/> clouds use the three
upgrade_ceph_model.dita:                    keyref="entryscale_kvm_ceph">here</xref>. If you are upgrading an existing Ceph
upgrade_ceph-rados.dita:      <title>Upgrade from <keyword keyref="kw-hos"/>
upgrade_ceph-rados.dita:        <keyword keyref="kw-hos-version-20-21"/></title>
upgrade_ceph-rados.dita:      <p>It is not possible to upgrade your <keyword keyref="kw-hos"/>
upgrade_ceph-rados.dita:        <keyword keyref="kw-hos-version-20-21"/> VPNaaS objects to <keyword
upgrade_ceph-rados.dita:          keyref="kw-hos-phrase-30"/> automatically. This is because the <keyword keyref="kw-hos"/>
upgrade_ceph-rados.dita:        <keyword keyref="kw-hos-version-20-21"/> VPNaaS uses OpenSwan and the <keyword
upgrade_ceph-rados.dita:          keyref="kw-hos-phrase-30"/> VPNaaS uses StrongSwan and currently there isn't a clean
upgrade_ceph-rados.dita:          <li>Delete all <keyword keyref="kw-hos"/>
upgrade_ceph-rados.dita:            <keyword keyref="kw-hos-version-20-21"/> VPNaaS IPSec site connection and VPN service
upgrade_ceph-rados.dita:          <li>Perform the <keyword keyref="kw-hos-phrase-30"/> upgrade.</li>
upgrade_ceph-rados.dita:          <li>Recreate the <keyword keyref="kw-hos-phrase-30"/> VPNaaS VPN service and IPSec site
upgrade_ceph-rados.dita:      <p>Recreate the <keyword keyref="kw-hos-phrase-30"/> VPNaaS VPN service and IPSec site
upgrade_delete_alarms.dita:         <p>A number of alarms that were supported in <keyword keyref="kw-hos-phrase-21"/> 
upgrade_delete_alarms.dita:            have been removed in <keyword keyref="kw-hos-phrase-30"/>. After a successful upgrade, these
upgrade_delete_alarms.dita:           by following the appropriate procedure on the <xref keyref="alarm_resolutions">Alarm Resolutions</xref> page.-->
upgrade_delete_alarms.dita:            <p>Note that the components in question are still being monitored in <keyword keyref="kw-hos-phrase-30"/>, 
upgrade_deltas.dita:            <p>A full <keyword keyref="kw-hos"/> kit contains the following elements:</p>
upgrade_deltas.dita:                <li> A set of input model yaml files, which contains both <keyword keyref="kw-hos"/>
upgrade_deprecated.dita:        <xref keyref="configobj_networks/start_address">start-address</xref>  and   
upgrade_deprecated.dita:        <xref keyref="configobj_networks/end_address">end-address</xref> have been deprecated in
upgrade_deprecated.dita:        favour of <xref keyref="configobj_networks/addresses">addresses</xref> in the Input Model.
upgrade_deprecated.dita:    <p>An example showing how to use the <codeph>addresses</codeph> parameter is available <xref keyref="configobj_networks/example_addresses">here</xref>.</p>
upgrade_designate.dita:      <p><keyword keyref="kw-hos"/>DNS Service can be upgraded to 3.0 by following the steps
upgrade_designate.dita:        <keyword keyref="kw-hos-phrase-30"/> release. Please consider other backend server options 
upgrade_designate.dita:      <title>Step 1: Upgrade <keyword keyref="kw-hos"></keyword></title>
upgrade_designate.dita:      <note>This assumes you are connected to the <keyword keyref="kw-hos"/> lifecycle manager and have 
upgrade_designate.dita:        The end location is required to be in <codeph>/home/stack/ </codeph>on the <keyword keyref="kw-hos"/>
upgrade_designate.dita:      <keyword keyref="kw-hos"/> lifecycle manager node.
upgrade_fail_alarms.dita:          <p>If you experience a failure during upgrade from <keyword keyref="kw-hos-phrase-30"/> to <keyword keyref="kw-hos-version-40"/> 
upgrade_git_merge.dita:            <p>When you perform an upgrade, <keyword keyref="kw-hos"/> 
upgrade_git_merge.dita:            certain changes to your environment,  <keyword keyref="kw-hos"/>
upgrade_git_merge.dita:            <p>For a general overview of how <keyword keyref="kw-hos"/> uses Git, see the 
upgrade_git_merge.dita:            introductory article in the Installation section <xref keyref="using_git">here</xref>.
upgrade_git_merge.dita:            <p>This indicates that <keyword keyref="kw-hos-phrase-30"/> is trying to set the value of
upgrade_git_merge.dita:                from <keyword keyref="kw-hos-phrase"/>
upgrade_git_merge.dita:                <keyword keyref="kw-hos-phrase"/> wants to set.
upgrade_git_merge.dita:                from <keyword keyref="kw-hos-phrase"/> with the previous upstream version from
upgrade_git_merge.dita:                <keyword keyref="kw-hos-phrase"/> wants to set and the previous upstream value
upgrade_install_clients.dita:        keyref="kw-hos-phrase"/>. If you have a standalone deployer,  you may need to follow the procedure <xref
upgrade_install_clients.dita:          keyref="install_openstack_clients">here</xref> to add the OpenStack
upgrade_ironic.dita:      <p>If you have Ironic nodes in your existing  <keyword keyref="kw-hos-phrase-30"/> cloud, with perhaps some
upgrade_ironic.dita:        information after upgrade to <keyword keyref="kw-hos-phrase"/> to point at  new deploy images.
upgrade_ironic.dita:      <p>If you have  provisioned a node in <keyword keyref="kw-hos"/> <keyword keyref="kw-hos-version-302"/> and you try to delete the node after upgrade
upgrade_ironic.dita:        to <keyword keyref="kw-hos-version-40"/>, 
upgrade_ironic.dita:      <p>After upgrade from <keyword keyref="kw-hos"/> <keyword keyref="kw-hos-version-302"/>, if you have a node enrolled with agent based drivers and
upgrade_ironic.dita:      and try to spawn an instance with user images uploaded in <keyword keyref="kw-hos-version-302"/>, instance creation will fail with the message 
upgrade_ironic.dita:      <p>You will need to re-upload any user images that were uploaded in <keyword keyref="kw-hos-version-302"/>, so that the images are uploaded to a new glance container.
upgrade_nova_resize_migrate.dita:    <p>If you had enabled the Nova Resize or the Nova Migrate feature in your <keyword keyref="kw-hos-phrase-21"/> cloud,
upgrade_nova_resize_migrate.dita:        features by following the steps <xref keyref="enabling_resize">here</xref>.
upgrade_overview.dita:            <title>Reasons to Upgrade to <keyword keyref="kw-hos-phrase"/></title>       
upgrade_overview.dita:                <li><xref keyref="newton_features">OpenStack Newton Features</xref>.</li>
upgrade_overview.dita:                <li><xref keyref="newfeatures50">New Features</xref> in <keyword keyref="kw-hos-phrase-50"/>.
upgrade_overview.dita:                <li><xref keyref="fixedissues50">Fixes</xref> for issues that were present in previous releases.</li>
upgrade_overview.dita:                <li>Read the <xref keyref="releasenotes50">Release Notes</xref>, especially the <xref keyref="knownissues50">Known Issues</xref> for the new version.</li>
upgrade_overview.dita:                <li>Ensure you have a Backup strategy in place - see <xref keyref="bura_overview"/></li>
upgrade_overview.dita:                <li>Ensure you have a known starting state by <xref keyref="alarm_resolutions">resolving any unexpected alarms</xref>.</li>
upgrade_overview.dita:                <li>Determine if you will need to follow the procedure to <xref keyref="upgradeto50/rebooting_general">reboot your cloud</xref> after 
upgrade_overview.dita:                is only needed if the HPE Linux kernel has changed between versions. In the case of upgrade to <keyword keyref="kw-hos-version"/>, the kernel has changed
upgrade_overview.dita:                        keyref="designate_cfg_dns_ns"/> document.</li>
upgrade_overview.dita:                    <li>Read about the changes in the <xref keyref="input_model_changes40">Input Model</xref>. </li>
upgrade_overview.dita:                <li>Learn about <xref keyref="upgrade_deltas">Delta Upgrades</xref> and when you can  use them.</li>
upgrade_overview.dita:                <li>Perform any <xref keyref="upgrade_preupgrade_tasks">pre-upgrade</xref> tasks you deem necessary, such as:
upgrade_overview.dita:                        <li>Handle <xref keyref="upgrade_preupgrade_tasks">Using RHEL as a Ceph Client</xref></li>                        
upgrade_overview.dita:                        <li><xref keyref="upgradeto50">Upgrade your Cloud</xref>.</li>                       
upgrade_overview.dita:                        <li><xref keyref="upgradeto50/rebooting_general">Reboot your Cloud.</xref></li>   
upgrade_overview.dita:                        <li><xref keyref="upgrade_tempest">Upgrade Tempest as Service</xref></li>
upgrade_overview.dita:                        <li><xref keyref="upgrade_git_merge">Resolve any Merge Conflicts.</xref></li>   
upgrade_overview.dita:                        <li><xref keyref="upgrade_recover_rabbit">Recover RabbitMQ after Failure during Upgrade</xref></li>
upgrade_overview.dita:                        <li><xref keyref="upgrade_fail_alarms">Handle Upgrade Failure while Creating or Removing Alarms</xref></li>
upgrade_overview.dita:                <li>Perform any <xref keyref="upgrade_postupgrade_tasks">post-upgrade</xref> tasks you deem necessary , such as: 
upgrade_overview.dita:                        <li><xref keyref="upgrade_install_clients">Installing OpenStack Clients after Upgrade</xref></li>
upgrade_overview.dita:                        <li><xref keyref="neutron_configuration_data">Update Neutron Configration Data</xref></li>
upgrade_overview.dita:                        <li><xref keyref="enable_barbican_for_upgrade">Enabling Barbican Support When Upgrading</xref></li>
upgrade_overview.dita:                        <li><xref keyref="upgrade_ironic">Ironic Post-Upgrade Procedures</xref></li>
upgrade_preupgrade_tasks.dita:            in the article <xref keyref="install_rhel_ceph/yum_repo_steps">here</xref> <b>before</b> executing the <codeph>hlm-upgrade.yml</codeph> playbook 
upgrade_tempest.dita:          <p>In <keyword keyref="kw-hos-phrase"/>,  Tempest has been modelled as a service and this gives you the ability to 
upgrade_tempest.dita:          <p>When you are upgrading from <keyword keyref="kw-hos-phrase-30"/>, you must add <codeph>tempest</codeph> as a service in you cloud definition 
upgrade_toc.dita:        <!--question: Where will customers learn of updates?tware updates are part of the <keyword keyref="kw-hos"/> distribution. For more information, contact ???."-->
upgrade_vpnaas.dita:      <title>Upgrade from <keyword keyref="kw-hos"/>
upgrade_vpnaas.dita:        <keyword keyref="kw-hos-version-20-21"/></title>
upgrade_vpnaas.dita:      <p>It is not possible to upgrade your <keyword keyref="kw-hos"/>
upgrade_vpnaas.dita:        <keyword keyref="kw-hos-version-20-21"/> VPNaaS objects to <keyword
upgrade_vpnaas.dita:          keyref="kw-hos-phrase-30"/> automatically. This is because the <keyword keyref="kw-hos"/>
upgrade_vpnaas.dita:        <keyword keyref="kw-hos-version-20-21"/> VPNaaS uses OpenSwan and the <keyword
upgrade_vpnaas.dita:          keyref="kw-hos-phrase-30"/> VPNaaS uses StrongSwan and currently there isn't a clean
upgrade_vpnaas.dita:          <li>Delete all <keyword keyref="kw-hos"/>
upgrade_vpnaas.dita:            <keyword keyref="kw-hos-version-20-21"/> VPNaaS IPSec site connection and VPN service
upgrade_vpnaas.dita:          <li>Perform the <keyword keyref="kw-hos-phrase-30"/> upgrade.</li>
upgrade_vpnaas.dita:          <li>Recreate the <keyword keyref="kw-hos-phrase-30"/> VPNaaS VPN service and IPSec site
upgrade_vpnaas.dita:      <p>Recreate the <keyword keyref="kw-hos-phrase-30"/> VPNaaS VPN service and IPSec site
upload_image.dita:          keyref="kw-hos"/> lifecycle manager provides an Ansible playbook that will download a
user_dashboard_overview.dita:    <p>Horizon is the OpenStack service that serves as the basis for the <keyword keyref="kw-hos"/>
user_dashboard_overview.dita:    <p>The dashboards provide a web-based user interface to <keyword keyref="kw-hos"/> services
user_dashboard_overview.dita:      <p>As a Cloud or Domain admin of the <keyword keyref="kw-hos"/> dashboard, you should 
user_dashboard_overview.dita:          <p><keyword keyref="kw-hos"/> provides five VNIC types to use when creating network
userguide_index.dita:    <p>This section contains user tasks for your <keyword keyref="kw-hos-phrase"/> cloud.</p>
using_apparmor.dita:    <section id="apparmor_helion"><title>AppArmor in <keyword keyref="kw-hos-phrase"/></title>
using_apparmor.dita:      <p> AppArmor in <keyword keyref="kw-hos-phrase"/> is installed and enabled on the KVM compute nodes by
using_container_as_a_service.dita:    <p>The <keyword keyref="kw-hos"/> Magnum Service provides 
using_container_as_a_service.dita:      as first class resources.  <keyword keyref="kw-hos"/> Magnum uses Heat to orchestrate an OS image which
using_git.dita:    <p>In <keyword keyref="kw-hos-phrase"/>, a local git repository is used to track configuration
using_git.dita:      <p>On a system new to <keyword keyref="kw-hos-phrase"/>, the lifecycle manager will prepare a
using_ipam.dita:            keyref="kw-hos-phrase-20"/>. This option continues to be available in <keyword
using_ipam.dita:            keyref="kw-hos-phrase"/> and is the default when the ipam_driver parameter is not
using_ipam.dita:            <keyword keyref="kw-hos-phrase"/> (OpenStack Liberty). It is a refactoring of the Kilo
using_ipam.dita:      follow the steps to deploy <keyword keyref="kw-hos"/> in the <xref
using_ipam.dita:          reconfiguration of <keyword keyref="kw-hos-phrase"/>from using the default non-pluggable
using_ipam.dita:          IPAM configuration to <keyword keyref="kw-hos-phrase"/> using a pluggable IPAM driver is
using_ipam.dita:        <li>Upgrade from previous versions of <keyword keyref="kw-hos"/> to <keyword
using_ipam.dita:            keyref="kw-hos-phrase"/> to use a pluggable IPAM driver is not supported.</li>
validating_swift_recon.dita:      <note type="warning"><keyword keyref="kw-hos"/> does not support ec_type <codeph>isa_l_rs_vandnfiguration. This particular policy is known to harm data
virtual_machines_as_servers.dita:      <p>Starting in <keyword keyref="kw-hos-phrase"/>, servers can be configured as hypervisors which host 
virtual_machines_as_servers.dita:        <keyword keyref="kw-hos"/> services.  Both the hypervisors and the VMs are treated as “servers” 
virtual_machines_as_servers.dita:      <p>Given the above information, <keyword keyref="kw-hos"/> will configure the hypervisors 
virtual_machines_as_servers.dita:        of the virtual machine’s operating system, and installation and configuration of <keyword keyref="kw-hos"/> 
virtual_machines_as_servers.dita:      <p>Note that a hypervisor can still be used to run <keyword keyref="kw-hos"/>  services, so for example 
volumegroups.dita:    <p>The <keyword keyref="kw-hos"/> operating system installation automatically creates a volume-group
volumegroups.dita:                            by the <keyword keyref="kw-hos"/> operating system install process, the volume group
vpnaas.dita:    <p><b><keyword keyref="kw-hos-phrase"/> VPNaaS Configuration</b></p>
vpnaas.dita:        keyref="kw-hos-phrase"/> Virtual Private Network (VPN) as a Service module.</p>
vpnaas.dita:        <li><keyword keyref="kw-hos"/> must be installed. </li>
vpnaas.dita:          extend access between private networks across two different <keyword keyref="kw-hos"/>
vpnaas.dita:          clouds or between a <keyword keyref="kw-hos"/> cloud and a non-cloud network. VPNaaS is
websso.dita:        dashboard in <keyword keyref="kw-hos-phrase-30"/> . If users have not yet authenticated with
websso.dita:        <li>The <keyword keyref="kw-hos"/> WebSSO function was tested with Microsoft Active Directory
websso.dita:            keyref="kw-hos-phrase-30"/> . OpenID-based federation is not currently supported. </li>
websso.dita:      <keyword keyref="kw-hos-phrase-30"/> now provides WebSSO support for the Horizon web
add_monitor_node.dita:              keyref="persisteddata/persistedserverallocations"><keyword keyref="kw-hos-phrase"/>
add_sles_compute.dita:              can find detailed descriptions of these fields <xref keyref="configobj_servers"
add_sles_compute.dita:                <xref keyref="configobj_controlplane">Input Model - Control Plane</xref> for more
add_sles_compute.dita:                keyref="persisteddata/persistedserverallocations">Input Model</xref> for information
add_sles_compute.dita:            <li>Mount the <keyword keyref="kw-hos-phrase"/> iso to
add_sles_compute.dita:            <p>You can find detailed descriptions of these fields <xref keyref="configobj_servers"
add_sles_compute.dita:                <xref keyref="configobj_controlplane">Input Model - Control Plane</xref> for more
add_sles_compute.dita:                keyref="persisteddata/persistedserverallocations">Input Model</xref> for information
add_vsa_node.dita:            can find detailed descriptions of these fields <xref keyref="configobj_servers"
add_vsa_node.dita:              keyref="configobj_controlplane">Input Model - Control Plane</xref> for more
add_vsa_node.dita:              <xref keyref="persisteddata/persistedserverallocations"><keyword
add_vsa_node.dita:                keyref="kw-hos-phrase"/> Input Model</xref> for information on how this
alarms_monitoring.dita:    <p><keyword keyref="kw-hos"/> comes with some predefined monitoring alarms for the services
alternative_supported_choice.dita:                        keyref="kw-hos-phrase"/> does not support deployment transition. After Ceph
alternative_supported_choice.dita:                </title><keyword keyref="kw-hos-tm"/>
alternative_supported_choice.dita:            <keyword keyref="kw-hos-version"/> supports the deployment of control plane elements on
alternative_supported_choice.dita:                                keyref="kw-hos-tm"/> .</p></li>
barbican_features.dita:      <p>Barbican is all new for the <keyword keyref="kw-hos"/> Mitaka release.</p>
barbican_new_features.dita:    <section> This topic explains the Barbican service in <keyword keyref="kw-hos-phrase"/>. </section>
barbican_new_features.dita:      <p><b>DAR Policy</b></p>In <keyword keyref="kw-hos-phrase"/>, DAR policy has been enhanced
brocade_zone_manager.dita:    <p><keyword keyref="kw-hos-phrase"/> supports Brocade FC Zone Manager. Block Storage (Cinder)
brocade_zone_manager.dita:        <li>If <keyword keyref="kw-hos-tm"/> is configured to boot from SAN over Fibre Channel, all
brocade_zone_manager.dita:          <li><keyword keyref="kw-hos-tm"/> Cloud must be successfully deployed. </li>
bura_overview.dita:    <p><keyword keyref="kw-hos-phrase"/> supports backup and restore of control plane services. It
central_log_configure_CL.dita:      <p>The log files that are centrally collected in <keyword keyref="kw-hos"/> are stored by
central_log_configure_CL.dita:          keyref="kw-hos-phrase"/> and used the older versions of Elasticsearch, then this data will
central_log_configure_CL.dita:          <li>Deploy a separate distinct Elasticsearch instance version matching the version in <keyword keyref="kw-hos-phrase"/>.</li>
central_log_configure_CL.dita:            to the ElasticSearch instance matching the version in <keyword keyref="kw-hos-phrase"/>.</li>
central_log_configure_CL.dita:        <note>We do not recommend restoring to the original <keyword keyref="kw-hos"/> Centralized
central_log_configure_CL.dita:      <p>When centralized logging is installed in <keyword keyref="kw-hos"/>, parameters 
ceph_deployment.dita:      <keyword keyref="kw-hos-tm"/>  <keyword keyref="kw-hos-version"/> Ceph deployment leverages the cloud lifecycle operations
ceph_deployment.dita:      <p>Before you start deploying the <keyword keyref="kw-hos-tm"/> cloud with Ceph, you must
ceph_deployment.dita:                Disk</b></p><p><keyword keyref="kw-hos-tm"/>
ceph_deployment.dita:              <keyword keyref="kw-hos-version"/> recommends storing the Ceph OSD journal on an SSD
ceph_deployment.dita:              5120 MB (5 GB) in <keyword keyref="kw-hos-tm"/>
ceph_deployment.dita:              <keyword keyref="kw-hos-version"/>. This value can be changed, but it does not apply
ceph_deployment.dita:                      keyref="kw-hos-tm"/> makes it easy to configure service parameters. All common
ceph_deployment.dita:                            from <keyword keyref="kw-hos-tm"/> 3.0 to <keyword keyref="kw-hos-tm"/>
ceph_deployment.dita:                            <keyword keyref="kw-hos-version"/>, you are strongly advice not to
ceph_deployment.dita:      <p>To deploy a new <keyword keyref="kw-hos-tm"/> Ceph cloud using the default
ceph_overview.dita:        <shortdesc outputclass="hdphidden"><keyword keyref="kw-hos-tm"/>
ceph_overview.dita:            <keyword keyref="kw-hos-version"/> supports the Hammer version of Ceph cluster. Ceph
ceph_overview.dita:            <p><keyword keyref="kw-hos-tm"/>
ceph_overview.dita:                <keyword keyref="kw-hos-version"/> supports the Hammer version of Ceph cluster. Ceph
ceph_overview.dita:                                    activity.<p><!--The default <keyword keyref="kw-hos-tm"/>configuration makes three c your data (but it can be adjusted).--></p></entry>
ceph_overview.dita:                <li>The HAProxy on the <keyword keyref="kw-hos-tm"/> controller node acts as a load
ceph_overview.dita:                <li>The default <keyword keyref="kw-hos-tm"/> configuration installs RADOS Gateway
ceph_overview.dita:            </p><p><keyword keyref="kw-hos-tm"/> Ceph software offers significant flexibility when
ceph_overview.dita:        <section><b>Alternative supported architecture</b><p><keyword keyref="kw-hos-tm"/>
ceph_overview.dita:                <keyword keyref="kw-hos-version"/> also supports an alternate deployment
ceph_overview.dita:                                keyref="kw-hos-tm"/>
ceph_overview.dita:                            <keyword keyref="kw-hos-version"/> is as follows.<ul>
ceph_overview.dita:                                <keyword keyref="kw-hos-tm"/> services as follows.</p><p>
change_default_backup_jobs.dita:  <title><keyword keyref="kw-hos-tm"/>
change_default_backup_jobs.dita:    <keyword keyref="kw-hos-version-30"/>: Changing Default Jobs</title>
change_default_backup_jobs.dita:    <section> The procedure to make changes to jobs created by default in <keyword keyref="kw-hos"/> is to
change_keystone_credential.dita:        <shortdesc outputclass="hdphidden">RADOS Gateway (RGW) in <keyword keyref="kw-hos-tm"/>
change_keystone_credential.dita:            <keyword keyref="kw-hos-version"/> authenticates with keystone by passing the service
change_keystone_credential.dita:            name and password whereas in  <keyword keyref="kw-hos-phrase-30"/> , it was using admin
change_keystone_credential.dita:        <p> RADOS Gateway (RGW) in <keyword keyref="kw-hos-tm"/>
change_keystone_credential.dita:            <keyword keyref="kw-hos-version"/> authenticates with keystone by passing the service
change_keystone_credential.dita:            name and password whereas in <keyword keyref="kw-hos-phrase-30"/> it was using admin
cinder_backend_config.dita:      <p>Before <keyword keyref="kw-hos-phrase"/> there was no way to express the cinder back-end storage configuration for a
cinder_backend_config.dita:        cloud deployment. Instead, after <keyword keyref="kw-hos"/> had completed the deployment of a cloud, the operator
cinder_backend_config.dita:      <p>In <keyword keyref="kw-hos-phrase"/> and later, when an operator is defining a cloud in the cloud definition
cinder_backend_config.dita:        managed by <keyword keyref="kw-hos"/>, for example ceph or VSA. The data added to the yaml files corresponds
cinder_backend_config.dita:      <p>The cinder ansible playbooks in <keyword keyref="kw-hos-phrase"/> will support back-end configuration using either
cinder_backend_config.dita:          <codeph>enabled_backends=</codeph>. In <keyword keyref="kw-hos-phrase"/> the playbooks check for the line
cinder_backend_config.dita:        back-end devices that are not managed by <keyword keyref="kw-hos"/>. The next section describes how to configure
cinder_backend_config.dita:        back-ends that are managed by <keyword keyref="kw-hos"/>, at the moment these are VSA and ceph.</p>
cinder_backend_config.dita:      <title>Configuring back-ends not managed by <keyword keyref="kw-hos"/></title>
cinder_backend_config.dita:        <note type="note"><keyword keyref="kw-hos"/> Availablity Zones <p>Currently all cinder volumes are assigned to a
cinder_backend_config.dita:          <p>In <keyword keyref="kw-hos"/> an availability zone, or 'Failure Zone' is implemented as a server group.
cinder_backend_config.dita:          <p>If the block storage back-end is deployed and managed by <keyword keyref="kw-hos"/>, then the
cinder_backend_config.dita:            back-ends, like 3PAR, that are not managed by <keyword keyref="kw-hos"/>, there is no way of knowing which
cinder_backend_config.dita:      <title>Configuring Back-ends Managed by <keyword keyref="kw-hos"/></title>
cinder_backend_config.dita:        <p>If the back-end being configured is managed by <keyword keyref="kw-hos"/> then the configuration data for the
cinder_backend_config.dita:        <p>The <keyword keyref="kw-hos"/> Cinder playbook automatically generates some configuration variable values so you
cinder_backend_config.dita:                <entry>Normally set to True for <keyword keyref="kw-hos"/></entry>
cinder_backend_config.dita:          described <xref keyref="encrypted_storage"><keyword keyref="kw-hos"/>
cleanupErrorInstances.dita:  <title><keyword keyref="kw-hos-tm"/>
cleanupErrorInstances.dita:    <keyword keyref="kw-hos-phrase"/>: Deleting Load Balancer Instances Stuck in Pending_delete or Error State</title> 
cloud_control_plane_backup.dita:    <section><title>Default Backup and Restore</title><p>As part of the installation procedure in <keyword keyref="kw-hos-phrase"/>, automatic
cloud_control_plane_backup.dita:      <p>By default, during <keyword keyref="kw-hos-phrase"/> deployment, backup jobs
cloud_control_plane_backup.dita:      firewalling deployed with <keyword keyref="kw-hos"/>. If you use a non-standard SSH port, you may need to
cloud_control_plane_backup.dita:      <li>Firewall SSH traffic to ensure it comes from the <keyword keyref="kw-hos"/> address range</li>
cloudinstallation_overview.dita:                <xref keyref="example_configurations">Example Configurations</xref> documentation to
cloudinstallation_overview.dita:                get an overview of the sample configurations <keyword keyref="kw-hos-phrase"/> offers. We
cloudinstallation_overview.dita:                <li><xref keyref="entryscale_kvm_vsa">Entry-scale KVM with VSA model</xref></li>
cloudinstallation_overview.dita:                <li><xref keyref="entryscale_esx">Entry-scale ESX model</xref></li>
cloudinstallation_overview.dita:                <li><xref keyref="entryscale_swift">Entry-scale Swift model</xref></li>
cloudinstallation_overview.dita:                <li><xref keyref="entryscale_ceph">Entry-scale KVM with Ceph model</xref></li>
cloudinstallation_overview.dita:                <li><xref keyref="midscale_kvm_vsa">Mid-scale KVM with VSA model</xref></li>
cloudinstallation_overview.dita:                    model. See the <xref keyref="input_model">Input Model page</xref> for
cloudinstallation_overview.dita:                <li><xref keyref="install_entryscale_kvm">Installing Mid-scale and Entry-scale KVM</xref></li>
cloudinstallation_overview.dita:                <li><xref keyref="installing_esx_kvm_vsa/">Installing Entry-scale ESX, KVM and VSA
config_mon_database.dita:      provided with the product.</shortdesc>In <keyword keyref="kw-hos-phrase"/> you have the option
config_mon_database.dita:        <!--(please see eula )-->. Vertica is the recommended database for <keyword keyref="kw-hos"
config_mon_notemail.dita:    trigger.</shortdesc>In <keyword keyref="kw-hos-phrase"/> you have the option to specify a SMTP
config_mon_notemail.dita:      email server is not provided by <keyword keyref="kw-hos"/>, but must be specified in the
config_mon_notemail.dita:        configured <keyword keyref="kw-hos"/> domain names before sending the notification over
configure_lbaas.dita:  <abstract><shortdesc outputclass="hdphidden">The <keyword keyref="kw-hos"/> Neutron LBaaS service
configure_lbaas.dita:      <note type="warning">If you are planning to upgrade from <keyword keyref="kw-hos-phrase-30"/> or <keyword keyref="kw-hos-phrase-40"/>,
configure_lbaas.dita:        failure of your cloud deployment. The last tested versions are 8.0.8 for <keyword keyref="kw-hos"/> 3.x and 9.0.3
configure_lbaas.dita:        for <keyword keyref="kw-hos"/> 4.x . More information is expected in 4th quarter 2017, including the correct
configure_lbaas.dita:        drivers for <keyword keyref="kw-hos"/> 5.x.</note>
configure_lbaas.dita:      <p>The <keyword keyref="kw-hos"/> Neutron LBaaS service supports several load balancing
configure_lbaas.dita:          keyref="kw-hos"/>.</p>
configure_lbaas.dita:          keyref="kw-hos-phrase-30"/>. Also note that the Octavia load balancer provider is listed
configure_lbaas.dita:          keyref="kw-hos-phrase"/> is an operator grade load balancer for OpenStack. It is based
configure_lbaas.dita:        Certificate Authority (CA) certificates included with <keyword keyref="kw-hos-phrase"/>
configuring_check_plugins.dita:        <p><b>Using Ansible modules to configure plugins in <keyword keyref="kw-hos-phrase"
configuring_tls.dita:        <keyword keyref="kw-hos-phrase"/> and additional configuration options are available to
configuring_tls.dita:      <keyword keyref="kw-hos-phrase"/> and additional configuration options are available to
configuring_tls.dita:      should be .crt or it will not be processed by <keyword keyref="kw-hos"/>.</section>
configuring_tls.dita:      <p><keyword keyref="kw-hos"/> generates its own internal certificates but is designed to allow
configuring_tls.dita:            keyref="kw-hos"/>. </li>
create_magnum_cluster_dashboard.dita:          <li>Magnum must be installed before proceeding. Refer to <xref keyref="install_magnum"
create_magnum_cluster_dashboard.dita:          keyref="cloudadmin_dashboard"/> for more information.
create_magnum_cluster.dita:            keyref="install_magnum"/></li>
create_magnum_cluster.dita:            keyref="user_dashboard_overview"/></li>
create_magnum_cluster.dita:        running on Fedora Atomic guest OS on <keyword keyref="kw-hos"/> VMs.</p>
create_magnum_cluster.dita:                <li>Use your organization's DNS server. If the <keyword keyref="kw-hos"/> public
create_magnum_cluster.dita:                    keyref="kw-hos"/> public endpoint: <ol>
create_magnum_cluster.dita:          <keyword keyref="kw-hos"/> public endpoint and issued by a well known Certificate
create_magnum_cluster.dita:          keyref="kw-hos"/> public endpoint refer to <xref
create_magnum_cluster.dita:          <keyword keyref="kw-hos"/> public endpoint is configured correctly. </p>
create_magnum_cluster.dita:          certificate at <keyword keyref="kw-hos"/> public endpoint.</li>
crt_adding_transform_spark.dita:  <title>Adding Monasca Transform and Spark to <keyword keyref="kw-hos-phrase"/> Deployment</title>
crt_adding_transform_spark.dita:        <keyword keyref="kw-hos-phrase"/> install. The following instructions 
crt_adding_transform_spark.dita:        existing <keyword keyref="kw-hos-phrase"/> deployment.
crt_aggregated_metrics.dita:      <p>Following is the list of aggregated metrics produced by monasca transform in <keyword keyref="kw-hos-phrase"/>
crt_change_compute_host.dita:      <note type="warning">Please note that in <keyword keyref="kw-hos-phrase"/> 
crt_features.dita:          <li>Capacity reporting is a new feature in <keyword keyref="kw-hos-phrase"/> which will provides cloud operators an
crt_features.dita:          <li>A list of aggregated metrics is provided <xref keyref="crt_aggregated_metrics">here</xref></li>
crt_overview.dita:      <p>Capacity reporting is a new feature in <keyword keyref="kw-hos-phrase"/> which will 
crt_upgrade.dita:        <keyword keyref="kw-hos-phrase"/> deploy the upgrade process is straightforward and falls 
dcn_integration.dita:  <title><keyword keyref="kw-hos-version-402"/>DCN Integration</title>
dcn_integration.dita:      <p>The VSD portion of your DCN integration will be a virtual machine. Thi address on the same subnet as your <keyword keyref="kw-hos"/> control plane.</p>
DCN_integration.dita:      <title>HPE Distributed Cloud Networking (DCN) capabilities in <keyword keyref="kw-hos-phrase"
DCN_integration.dita:        <keyword keyref="kw-hos-phrase"/> allows you to use DCN as your networking.
DCN_integration.dita:          <keyword keyref="kw-hos-phrase"/> if you choose to use DCN.</p>
DCN_integration.dita:          <keyword keyref="kw-hos"/> to <keyword keyref="kw-hos-phrase"/> with DCN. The network
DCN_integration.dita:          <keyword keyref="kw-hos-phrase"/> as a new deployment, and follow the steps outlined in
DCN_integration.dita:        when DCN is running in <keyword keyref="kw-hos"/>, these features are not deployed:</p>
DCN_integration.dita:      <title>Notes about deploying DCN in <keyword keyref="kw-hos"/></title>
DCN_integration.dita:          download will need to be "staged" for deployment into <keyword keyref="kw-hos"/> using the
DCN_integration.dita:        <li>After running the third-party import playbook, <keyword keyref="kw-hos"/> needs to be
DCN_integration.dita:        <li>Run the standard <keyword keyref="kw-hos"/> steps to deploy. 
DCN_ml2.dita:      <p><b>Upgrading DCN without upgrading <keyword keyref="kw-hos"/></b></p>
DCN_ml2.dita:      <p><b>Upgrading <keyword keyref="kw-hos"/> with or without upgrading DCN</b></p>
DCN_ml2.dita:          files are identical on all <keyword keyref="kw-hos"/> nodes. So the cms_id 
DCN_ml2.dita:      <!--<p><image keyref=""/></p>-->
ded_lifecyclemanager_recovery.dita:    <p>Ensuring that you use the same version of <keyword keyref="kw-hos"/> that you previously had
deploying_apache_mesos_ubuntu.dita:            keyref="install_magnum"/></li>
deploying_apache_mesos_ubuntu.dita:        running on Fedora Atomic guest OS on <keyword keyref="kw-hos"/> VMs.</p>
deploying_apache_mesos_ubuntu.dita:                <li>Use your organization's DNS server. If the <keyword keyref="kw-hos"/> public
deploying_apache_mesos_ubuntu.dita:          <li>If LBaaS v2 is enabled in <keyword keyref="kw-hos"/> environment, a new load balancer
deploying_apache_mesos_ubuntu.dita:              <xref keyref="configure_lbaas"/>for more information on LBaaS v2 support.</li>
deploying_docker_fedora_atomic.dita:            keyref="install_magnum"/></li>
deploying_docker_fedora_atomic.dita:        running on Fedora Atomic guest OS on <keyword keyref="kw-hos"/> VMs.</p>
deploying_docker_fedora_atomic.dita:                <li>Use your organization's DNS server. If the <keyword keyref="kw-hos"/> public
deploying_docker_fedora_atomic.dita:          <li>If LBaaS v2 is enabled in your <keyword keyref="kw-hos"/> environment, a new load
deploying_docker_fedora_atomic.dita:            refer to <xref keyref="configure_lbaas"/>for more information on LBaaS v2 support.</li>
deploying_kubernetes_coreos.dita:            keyref="install_magnum"/></li>
deploying_kubernetes_coreos.dita:        running on CoreOS guest OS on <keyword keyref="kw-hos"/> VMs.</p>
deploying_kubernetes_coreos.dita:                <li>Use your organization's DNS server. If the <keyword keyref="kw-hos"/> public
deploying_kubernetes_coreos.dita:          <li>Install kubectl onto your <keyword keyref="kw-hos"/> lifecycle manager.
deploying_kubernetes_coreos.dita:          <li>If LBaaS v2 is enabled in <keyword keyref="kw-hos"/> environment, and your cluster was
deploying_kubernetes_coreos.dita:            request rotation between several masters. Please refer to <xref keyref="configure_lbaas"
deploying_kubernetes_fedora_atomic.dita:            keyref="install_magnum"/></li>
deploying_kubernetes_fedora_atomic.dita:        running on Fedora Atomic guest OS on <keyword keyref="kw-hos"/> VMs.</p>
deploying_kubernetes_fedora_atomic.dita:                <li>Use your organization's DNS server. If the <keyword keyref="kw-hos"/> public
deploying_kubernetes_fedora_atomic.dita:          <li>Install kubectl onto your <keyword keyref="kw-hos"/> lifecycle manager.
deploying_kubernetes_fedora_atomic.dita:            <li>If LBaaS v2 is enabled in <keyword keyref="kw-hos"/> environment, and your cluster
deploying_kubernetes_fedora_atomic.dita:                keyref="configure_lbaas"/>for more information on LBaaS v2 support.</li>
deploy_kubernetes_app.dita:    <note type="important"><keyword keyref="kw-hos"/> monitors Magnum processes and examines Magnum
deploy_kubernetes_app.dita:          <li>Install kubectl onto your <keyword keyref="kw-hos"/> lifecycle manager.
deploy_kubernetes_app.dita:          <li>If LBaaS v2 is enabled in <keyword keyref="kw-hos"/> environment, and your cluster was
deploy_kubernetes_app.dita:            request rotation between several masters. Please refer to <xref keyref="configure_lbaas"
deploy_vsa_virtual_control_plane.dita:        <shortdesc outputclass="hdphidden"><keyword keyref="kw-hos-tm"/>
deploy_vsa_virtual_control_plane.dita:            <keyword keyref="kw-hos-version"/> supports deployment of control plane elements on the
deploy_vsa_virtual_control_plane.dita:        <p><keyword keyref="kw-hos-tm"/>
deploy_vsa_virtual_control_plane.dita:            <keyword keyref="kw-hos-version"/> supports deployment of control plane elements on the
deploy_vsa_virtual_control_plane.dita:            that is used for the deployment of ceph cluster using <keyword keyref="kw-hos-tm"/>.</p>
designate_cfg_dns_ns.dita:        <note>In an <xref keyref="entryscale_kvm_vsa">entry-scale model</xref>, you will have 3
designate_cfg_dns_ns.dita:            keyref="midscale_kvm_vsa">mid-scale model</xref> or <xref
designate_cfg_dns_ns.dita:            keyref="entryscale_kvm_dedicated">dedicated metering, monitoring and logging
designate_install_overview.dita:      <p>The <keyword keyref="kw-hos"/> DNS Service supports several different backends for domain
designate_install_overview.dita:          <keyword keyref="kw-hos"/> install is completed.  </p>
designate_install_overview.dita:                <keyword keyref="kw-hos"/> install.</entry>
designate_install_overview.dita:              <entry>The authoritative DNS server itself is external to <keyword keyref="kw-hos"/>.
designate_install_overview.dita:              <entry>The authoritative DNS server itself is external to <keyword keyref="kw-hos"/>,
dpdk_ovs.dita:        <keyword keyref="kw-hos-phrase"/> uses an updated Open vSwitch (OVS) that is built with the
dpdk_setup.dita:        <li>Applies to <keyword keyref="kw-hos-phrase"/> only. </li>
enable_mon_console.dita:        <p>The RabbitMQ Admin Console is off by default in <keyword keyref="kw-hos-phrase"/>.  
enhancements_to_openstack.dita:    <section><title>How does <keyword keyref="kw-hos"/> differ from a pure OpenStack cloud
enhancements_to_openstack.dita:        implementation?</title>There are a number of enhancements in <keyword keyref="kw-hos"/> that
enhancements_to_openstack.dita:    <section>During installation of <keyword keyref="kw-hos"/>, the core OpenStack services, such as
enhancements_to_openstack.dita:        keyref="kw-hos"/> lifecycle manager, a collection of Ansible playbooks, script together
enhancements_to_openstack.dita:          keyref="kw-hos"/> input model</xref> are pre-populated as your starting point for a
enhancements_to_openstack.dita:    <section><keyword keyref="kw-hos"/> lifecyle manager responsibilities go beyond installation and
enhancements_to_openstack.dita:        keyref="kw-hos"/> as well using Monasca integration.</section>
enhancements_to_openstack.dita:    <section>Additionally, the following security features are built into <keyword keyref="kw-hos"
fixedissues50.dita:                configuration steps, see: <xref keyref="configure_3par"/></p>
forcing_overcommit.dita:    <p><keyword keyref="kw-hos"/> supports overcommitting of CPU and RAM resources on compute nodes.
freezer_agent.dita:                backup (or do a restore) because all <keyword keyref="kw-hos"/> nodes have the
freezer_agent.dita:            <p>For <keyword keyref="kw-hos-phrase"/>,
freezer_agent.dita:                </ul></p>For <keyword keyref="kw-hos-phrase"/>, you can create a backup using only
freezer_agent.dita:        <section><title>Restoring your Data</title><p> For <keyword keyref="kw-hos-phrase"/>, 
freezer_faq.dita:    <section>I did not set up SSH backups before installing <keyword keyref="kw-hos"/>. How can I set it
freezer_features.dita:      <p>Freezer is all new for the <keyword keyref="kw-hos"/> Mitaka release.</p>
freezer_scheduler.dita:            keyref="kw-hos-phrase"/>, Freezer Scheduler is automatically installed on the
freezer_ui.dita:      <title>Limitations</title> The following limitations apply to Freezer backups in <keyword keyref="kw-hos"/>: <p>
index.dita:  <title><keyword keyref="kw-hos"/>
index.dita:    <keyword keyref="kw-hos-version-50"/>
index.dita:    <searchtitle><keyword keyref="kw-hos-phrase"/>: Documentation Home</searchtitle>
index.dita:    <p><keyword keyref="kw-hos"/> is a commercial-grade distribution of <tm tmtype="reg"
index.dita:      clouds on a resilient, maintainable platform. <keyword keyref="kw-hos"/> enables
index.dita:      <title>Get Started with <keyword keyref="kw-hos"/></title>
index.dita:          keyref="kw-hos-phrase"/> cloud.</p>
index.dita:        <li><xref href="overview.dita"><keyword keyref="kw-hos-phrase"/> Overview</xref></li>
index.dita:        <li><xref keyref="input_model">Input Model</xref></li>
index.dita:        <li><xref keyref="example_configurations">Example Configurations</xref></li>
hugepages.dita:        performance enhancements, new in <keyword keyref="kw-hos-phrase"/>, you must first enable
hw_support_diskcalc.dita:        compute-centric <keyword keyref="kw-hos"/> deployment. To accurately estimate the disk space
hw_support_diskcalc.dita:      <p><keyword keyref="kw-hos"/> provides entry scale and scale-out models for deployment. This
hw_support_hardwareconfig.dita:      <p><keyword keyref="kw-hos-phrase"/> supports the following hardware configurations for a
hw_support_hardwareconfig.dita:        <p><keyword keyref="kw-hos-phrase"/> supports Fibre Channel and FCoE boot from SAN in
hw_support_hardware.dita:      <p>For information about hardware supported in <keyword keyref="kw-hos-phrase"/>, see <xref
hw_support_ironicguestos.dita:        bare metal instance on <keyword keyref="kw-hos-phrase"/>.</p>
hw_support_ironicguestos.dita:        vendor as a bare metal instance on <keyword keyref="kw-hos-phrase"/>.</p>
hw_support_kvmguestos.dita:        Nova compute virtual machine on <keyword keyref="kw-hos-phrase"/>.</p>
hw_support_kvmguestos.dita:        vendor as a Nova compute virtual machine on <keyword keyref="kw-hos-phrase"/>.</p>
hw_support_openstackvers.dita:    <p><keyword keyref="kw-hos-phrase"/> services have been updated to the <xref
hw_support_scaling.dita:      <p>In <keyword keyref="kw-hos-phrase"/> a total of 200 total compute nodes in a single region
hw_support_scaling.dita:      <p><keyword keyref="kw-hos-phrase"/> supports a total of 8000 virtual machines across a total
hw_support_scaling.dita:      <p><keyword keyref="kw-hos-phrase"/> supports 100 baremetal Ironic nodes in a single
hw_support_software.dita:      <p><keyword keyref="kw-hos-phrase"/> currently supports the following ESXi versions:</p>
identity_ldap.dita:      </ul><p><keyword keyref="kw-hos"/> can support multiple domains for deployments that support
identity_ldap.dita:            keyref="kw-hos-phrase-30"/>.</li>
identity_ldap.dita:        <keyword keyref="kw-hos-phrase"/> domain-specific configuration: <ul>
identity_ldap.dita:          <li>The <keyword keyref="kw-hos"/> 'default' domain is pre-configured to store service
identity_ldap.dita:        <keyword keyref="kw-hos-phrase"/> API-based domain-specific configuration management <ul>
identity_ldap.dita:              <keyword keyref="kw-hos-phrase"/>. </li>
install_designate_BIND.dita:      <p><keyword keyref="kw-hos"/> DNS Service and BIND can be installed together instead of the
install_designate_PowerDNS.dita:      <p><keyword keyref="kw-hos"/> DNS Service defaults to the PowerDNS Backend if another backend
install_openstack_clients.dita:      <p>The way OpenStack clients are installed changed in <keyword keyref="kw-hos-phrase-40"/>.
install_sles_ceph.dita:        Ceph Jewel release. <keyword keyref="kw-hos-phrase"/> Ceph server is based on the Ceph
install_sles_ceph.dita:          keyref="kw-hos-phrase"/> system.
install_sles.dita:                nodes as described in the topic for <xref keyref="install_entryscale_kvm"
install_sles.dita:                        the Input Model for SLES, see <xref keyref="sles_compute_model"> SLES
install_sles.dita:                    <li><keyword keyref="kw-hos"/> playbooks currently do not take care of the SDK,
install_sles.dita:                            is no need to add OS repo as in case of <xref keyref="provisioning_sles"
install_sles.dita:                <p><keyword keyref="kw-hos-phrase-30"/> required a manual procedure if you wanted to
install_sles.dita:                    automated in the <keyword keyref="kw-hos-phrase"/> lifecycle manager. </p>
install_sles.dita:                                instructions at <xref keyref="sles_compute_model"> SLES Compute
install_sles_uefi.dita:                <p><keyword keyref="kw-hos-phrase-30"/> required a manual procedure if you wanted to use the lifecycle manager
install_sles_uefi.dita:                This procedure has been automated in the <keyword keyref="kw-hos-phrase"/> lifecycle manager. 
install_sles_uefi.dita:                <xref href="../../newfeatures40.dita#new_features_hlm/DOCS-3759"><keyword keyref="kw-hos-phrase"/> New Features</xref> article.</p>   
install_vcp.dita:        related functionality of <keyword keyref="kw-hos-phrase"/>. This comprises model changes
install_vcp.dita:              set-aside in the <keyword keyref="kw-hos"/> input model for gluster.
install_vcp.dita:      <p>Start with one baremetal node and install it directly from the <keyword keyref="kw-hos-phrase"/> iso e.g. through
install_vcp.dita:        virtual media on its iLO. Follow the usual install instructions e.g. <xref keyref="install_entryscale_kvm"/>
install_vcp.dita:      <title>Installing a fully input model managed Virtual Control Plane based <keyword keyref="kw-hos"/> Cloud</title>
install_vcp.dita:          deploy the <keyword keyref="kw-hos"/> Cloud.</p>
install_vcp.dita:          You can confirm that your <keyword keyref="kw-hos"/> build has the necessary patches by grepping
install_vcp.dita:        <p>If your <keyword keyref="kw-hos"/> Cloud installation requires that you perform additional actions between the
install_vcp.dita:          You can confirm that your <keyword keyref="kw-hos"/> build has the necessary patches by check for the
install_vcp.dita:              vm-factories instead; your <keyword keyref="kw-hos"/> build may have been cut during the interim period
install_vcp.dita:              run <codeph>site.yml</codeph> to complete the installation of the <keyword keyref="kw-hos"/> Cloud.</p>
install_vcp.dita:            <p>If you <keyword keyref="kw-hos"/> build is too old, i.e. the <codeph>hlm-hypervisor-*.yml</codeph> playbooks
install_vcp.dita:      <title>Deploying the Hypervisor nodes and VCP VMs using older <keyword keyref="kw-hos"/> build</title>
install_vcp.dita:          won't work - the default <keyword keyref="kw-hos"/> firewall rules disallow it.</p>
install_vcp.dita:        <codeph>The following text, should be used as the basis for a <keyword keyref="kw-hos"/> V4.0 documentation update
install_vcp.dita:      <p>Rebooting  a HLM-Hypervisor node follows the standard procedure in the <keyword keyref="kw-hos"/> documentation <xref keyref="reboot_cloud_rolling"/>.
install_vcp.dita:      <p>The sequence here is to target the <keyword keyref="kw-hos"/> vms first then the host itself - then shutdown the
install_vcp.dita:      <p>Once this is done we then would need to deploy the <keyword keyref="kw-hos"/> vms - this can be done with
install_vcp.dita:                <image keyref="check"/>
install_vcp.dita:                <image keyref="check"/>
install_vcp.dita:                <image keyref="check"/>
install_vcp.dita:                <image keyref="check"/>
install_vcp.dita:                <image keyref="check"/>
install_vcp.dita:                <image keyref="check"/>
install_vcp.dita:                <image keyref="check"/>
install_vcp.dita:                <image keyref="check"/>
install_vcp.dita:                <image keyref="check"/>
install_vcp.dita:                <image keyref="check"/>
install_vcp.dita:                <image keyref="check"/>
install_vcp.dita:                <image keyref="check"/>
install_vcp.dita:                <image keyref="check"/>
install_vcp.dita:                <image keyref="check"/>
install_vcp.dita:                <image keyref="check"/>
install_vcp.dita:      <p>In addition, if these nodes are being used in scenarios where there are no <keyword keyref="kw-hos"/> servers to
integrating_hpeopsbridge.dita:      integration between the <keyword keyref="kw-hos-phrase"/> monitoring solution and HPE
integrating_hpeopsbridge.dita:    <p><keyword keyref="kw-hos"/> Monasca can easily be integrated with your existing monitoring
integrating_nagios.dita:      integration between the <keyword keyref="kw-hos-phrase"/> centralized logging solution and
integrating_nagios.dita:      <p><keyword keyref="kw-hos"/> cloud operators that are using Nagios or Icinga-based monitoring
integrating_nagios.dita:      <title><keyword keyref="kw-hos"/> monitoring and reporting</title>
integrating_nagios.dita:      <p><keyword keyref="kw-hos"/> comes with a monitoring engine (Monasca) and a separate
integrating_nagios.dita:      <p>A key benefit of Nagios style monitoring is that it allows for <keyword keyref="kw-hos"/>
integrating_nagios.dita:        <p>The Monasca agent is installed on all <keyword keyref="kw-hos"/> servers and includes the
integrating_nagios.dita:        <p>In the subsequent section, the physical servers making up the <keyword keyref="kw-hos"/>
integrating_nagios.dita:          <li>Multiple clouds, integrating <keyword keyref="kw-hos"/> monitoring with existing
integrating_nagios.dita:              keyref="kw-hos"/> services.</li>
integrating_nagios.dita:          <li>If you have multiple <keyword keyref="kw-hos"/> clusters it allows all of their alarms
integrating_nagios.dita:        <p><b><keyword keyref="kw-hos"/>-specific Nagios Plugins</b></p>
integration_of_plugins_with_monasca-agent.dita:                keyref="kw-hos-phrase"/> system using the steps outlined in the <b>Writing Custom
integration_of_plugins_with_monasca-agent.dita:                <keyword keyref="kw-hos-phrase"/>, the third party can remove the custom plugin
ironic_oneview_integration.dita:      <p><keyword keyref="kw-hos-phrase"/> supports integration of Ironic (Baremetal) service with HPE OneView using
ironic_oneview_integration.dita:          <li>Installed <keyword keyref="kw-hos-phrase"/> with entry-scale-ironic-flat-network or
ironic_oneview_integration.dita:                program. This program is shipped as part of <keyword keyref="kw-hos"/> and can be
ironic_oneview_integration.dita:                model. Please refer to <xref keyref="ironic_examples">Ironic Examples</xref> for
ironic_provisioning.dita:            <note type="important">The steps outlined in <xref keyref="ironic-tls"/>
ironic_provisioning.dita:                    <keyword keyref="kw-hos"/> has been tested with the following drivers: <ul>
ironic_provisioning.dita:                            keyref="kw-hos-phrase"/>. </li>
ironic_provisioning.dita:            <image keyref="ilo_boot_order_legacy_bios"/>
ironic_provisioning.dita:            <image keyref="hLinux_login"/>
ironic_provisioning.dita:            <image keyref="ubuntu_login"/>
ironic_provisioning_multi_tenancy.dita:                            <note>Deployed images are already populated by <keyword keyref="kw-hos"
ironic_tls.dita:        <p>As part of <keyword keyref="kw-hos-phrase"/>, Ironic Python Agent, better known as IPA in the OpenStack community, 
ironic_tls.dita:            remote node, and ensure that the TLS endpoints being connected to in <keyword keyref="kw-hos"/> can be trusted.  This 
keystone_features.dita:                    keyref="kw-hos-phrase"/></title>
keystone_features.dita:                    keyref="kw-hos-phrase"/> release.</p>
keystone_features.dita:                    keyref="kw-hos-phrase"/></title>
keystone_features.dita:                    keyref="kw-hos-phrase"/> release, but are disabled by default. Customers can run
keystone_features.dita:            <title><b>OpenStack upstream features that have been specifically disabled in <keyword keyref="kw-hos-phrase"/></b></title>
keystone_features.dita:                    <keyword keyref="kw-hos-phrase"/>, according to Keystone policy.</p>
knownissues50.dita:      <title>Upgrading from <keyword keyref="kw-hos-phrase-404"/></title>
knownissues50.dita:      <note type="warning">If system is currently on version <keyword keyref="kw-hos-phrase-404"/> the correct upgrade path is to <keyword keyref="kw-hos-phrase-501"/></note>
knownissues50.dita:          keyref="kw-hos"/> service affected by this issue. The error conditions which cause this
knownissues50.dita:      <title><keyword keyref="kw-hos"/> Directory Umask</title>
knownissues50.dita:      <p><keyword keyref="kw-hos"/> directory umask is 0022. Changing this value may cause unstable
knownissues50.dita:        internal communication in the <keyword keyref="kw-hos"/> product and will negatively affect upgrade.</p>
knownissues50.dita:      <p>In <keyword keyref="kw-hos-phrase"/> and earlier ( with designate V2.0.1 ) when using
knownissues50.dita:        After upgrading to <keyword keyref="kw-hos-phrase"/> from <keyword keyref="kw-hos-phrase-40"/>
knownissues50.dita:      <p>You can now create a new flavors in <keyword keyref="kw-hos-phrase"/>. </p>
knownissues50.dita:          <keyword keyref="kw-hos"/> versions. </p>
knownissues50.dita:      <p>In <keyword keyref="kw-hos-phrase"/> Transparent VLAN is not supported.</p>
knownissues50.dita:      <p>In <keyword keyref="kw-hos-phrase"/> the ILO Firmware version needs to be minimum 2.30 for
knownissues50.dita:          keyref="kw-hos-phrase"/>. An existing Ironic flat environment to multi-tenancy environment
knownissues50.dita:      <p>If you are planning to upgrade from <keyword keyref="kw-hos-phrase-30"/> or <keyword keyref="kw-hos-phrase-40"/>,
knownissues50.dita:        failure of your cloud deployment. The last tested versions are 8.0.8 for <keyword keyref="kw-hos"/> 3.x and 9.0.3
knownissues50.dita:        for <keyword keyref="kw-hos"/> 4.x . More information is expected in 4th quarter 2017, including the correct
knownissues50.dita:        drivers for <keyword keyref="kw-hos"/> 5.x.</p>
licensing_50.dita:      <p>Additional license authorizations for <keyword keyref="kw-hos"/> are available at: <xref
lifecyclemanager_recovery.dita:    <p>Ensuring that you use the same version of <keyword keyref="kw-hos"/> that you previously had
magnum_architecture.dita:      <p>Magnum API anmd Magnum Conductor are run on the <keyword keyref="kw-hos"/> controllers (or core nodes
magnum_install.dita:          keyref="kw-hos-phrase"/> environment or can be added to an existing <keyword
magnum_install.dita:          keyref="kw-hos-phrase"/> environment. Both installations require container management
magnum_install.dita:        (public) <keyword keyref="kw-hos"/> endpoints. <table frame="all" rowsep="1" colsep="1"
magnum_install.dita:      <title>Installing Magnum as part of new <keyword keyref="kw-hos-phrase"/> environment</title>
magnum_install.dita:      <p>Magnum components are already included in example <keyword keyref="kw-hos"/> models based
magnum_install.dita:        guide: <xref keyref="install_entryscale_kvm"/>
magnum_install.dita:                <codeph>external-name</codeph>. In test installations, the <keyword keyref="kw-hos"
magnum_install.dita:                keyref="configure_lbaas"/>.</li>
magnum_install.dita:      <title>Adding Magnum to existing <keyword keyref="kw-hos-phrase"/> environment</title>
magnum_install.dita:      <p>Adding Magnum to an already deployed <keyword keyref="kw-hos-phrase"/> installation or
magnum_install.dita:            described in <xref keyref="using_git"/> for your Installation. <ul>
magnum_install.dita:              <keyword keyref="kw-hos"/> installer will use an IP address as public endpoint
magnum_install.dita:            keyref="configure_lbaas"/> for more information.
magnum_install.dita:      <note type="warning">By default <keyword keyref="kw-hos"/> stores the private key used by
magnum_integrate_dns.dita:              keyref="kw-hos"/> frontend certificate is issued for this hostname.</li>
magnum_overview.dita:      <p>The <keyword keyref="kw-hos"/> Magnum Service provides 
magnum_overview.dita:        as first class resources.  <keyword keyref="kw-hos"/> Magnum uses Heat to orchestrate an OS image which
metric_performance_considerations.dita:                keyref="kw-hos-phrase"/> supports 200 compute nodes, with up to 40 VMs each. If your
middleware_auditing.dita:      this need, <keyword keyref="kw-hos"/> supports CADF (Cloud Auditing Data Federation)-compliant
middleware_auditing.dita:      of auditing support in <keyword keyref="kw-hos-phrase"/>: <ul>
middleware_auditing.dita:        <li>Auditing is disabled by default and can be enabled only after <keyword keyref="kw-hos"/>
middleware_auditing.dita:        <li>Auditing support has been added to eight <keyword keyref="kw-hos"/> services (Nova,
middleware_auditing.dita:      In <keyword keyref="kw-hos"/>, all auditing
monasca_agent.dita:            <li><keyword keyref="kw-hos-phrase"/>-specific component metrics, such as apache, mysql, rabbitmq,
monasca_hipchat_plugin.dita:                    notifications from your <keyword keyref="kw-hos-phrase"/> cloud.</li>
monasca_integration_overview.dita:        <p>Monasca, the <keyword keyref="kw-hos-phrase"/> monitoring service, collects information
monasca_jira_plugin.dita:            type are not yet included in <keyword keyref="kw-hos-phrase"/>, you must perform the
monasca_plugins_overview.dita:        <p>Monasca, the <keyword keyref="kw-hos-phrase"/> monitoring and notification service,
monasca_plugins_overview.dita:            plugins. This guide also assumes that your <keyword keyref="kw-hos-phrase"/> cloud is
monitoring_overview.dita:      <p>The monitoring service is automatically installed as part of the <keyword keyref="kw-hos"/>
monitoring_overview.dita:    <section id="differences"><title>Differences Between Upstream and <keyword keyref="kw-hos"/>
monitoring_overview.dita:      <p>In the <keyword keyref="kw-hos-phrase"/> release, the OpenStack monitoring service,
monitoring_overview.dita:      <note>Icinga was supported in previous <keyword keyref="kw-hos"/> versions but it has been
monitoring_overview.dita:        deprecated in <keyword keyref="kw-hos-phrase"/>.</note>
monitoring_service.dita:    use the <keyword keyref="kw-hos"/> Monitoring service to monitor the health of your cloud and,
moving_from_dvr_deployments.dita:            <p>If you have an older deployment of <keyword keyref="kw-hos"/> which is using DVR as a
neutron_external_networks.dita:      <p><keyword keyref="kw-hos"/> provides the ability to have multiple external networks, 
neutron_external_networks.dita:        You can configure <keyword keyref="kw-hos"/> to allow the use of provider VLANs as 
newfeatures50.dita:            <p><keyword keyref="kw-hos-phrase"/> now supports SUSE Linux Enterprise Server compute
newfeatures50.dita:                nodes see the document, <xref keyref="install_sles_compute"/>.</p>
newfeatures50.dita:            <p>New in <keyword keyref="kw-hos-phrase"/> is the Magnum OpenStack service. Magnum is a
newfeatures50.dita:                    keyref="install_magnum"/>.</p>
newton_features.dita:      <title><keyword keyref="kw-hos-phrase"/> Newton Features</title>
newton_features.dita:        identified below) are enabled in the <keyword keyref="kw-hos-phrase"/> standard settings and
onetwo_controller_recovery.dita:              keyref="persisteddata/persistedserverallocations">Input Model</xref> for information
pcipt_sriov_config.dita:    <p><keyword keyref="kw-hos-phrase"/> supports both single-root I/O virtualization (SR-IOV) and
pcipt_sriov_config.dita:      <p>If you plan to take advantage of SR-IOV support in <keyword keyref="kw-hos"/> you will need
pcipt_sriov_config.dita:      <p><keyword keyref="kw-hos-phrase"/> provides various options for the user to configure the
percona_partitioning_check.dita:  <title><keyword keyref="kw-hos-tm"/>
percona_partitioning_check.dita:    <keyword keyref="kw-hos-version-301"/>: Checking for Percona Cluster Partitioning</title>
prerequisite.dita:                                keyref="kw-hos-tm"/>  management network</li>
prerequisite.dita:                    logs are not automatically included in <keyword keyref="kw-hos-tm"/> centralized
prerequisite.dita:                    password for the <keyword keyref="kw-hos-tm"/>  message queue.</li>
prerequisite.dita:                        keyref="kw-hos-tm"/> configuration as part of Nova and Cinder volume
prerequisite.dita:            <li>Since the file containing the <keyword keyref="kw-hos-tm"/>  message queue password
provisioning_sles.dita:                it can be added to a new or existing <keyword keyref="kw-hos-phrase"/> cloud.</p>
provisioning_sles.dita:            <p>As documented in the <xref keyref="install_entryscale_kvm/thirdparty">Using 3rd Party
provisioning_sles.dita:                    Baremetal Installers</xref> section of <xref keyref="install_entryscale_kvm"
rec_min_entryscale_esx_kvm_vsa.dita:      <p>These recommended minimums are based on the included <xref keyref="example_configurations"
rec_min_entryscale_esx_kvm_vsa.dita:      <p><keyword keyref="kw-hos-phrase"/> currently supports the following ESXi versions:</p>
rec_min_entryscale_esx_kvm_vsa_mml.dita:    <p>These recommended minimums are based on the included <xref keyref="example_configurations"
rec_min_entryscale_esx_kvm_vsa_mml.dita:    <p><keyword keyref="kw-hos-phrase"/> currently supports the following ESXi versions:</p>
rec_min_entryscale_kvm.dita:    <p>These recommended minimums are based on the included <xref keyref="example_configurations"
rec_min_entryscale_kvm.dita:        keyref="example_configurations"/>.</p>
rec_min_entryscale_kvm_vsa.dita:    <p>These recommended minimums are based on the included <xref keyref="example_configurations"
rec_min_entryscale_kvm_vsa.dita:        keyref="example_configurations"/>.</p>
rec_min_ironic.dita:        keyref="example_configurations">example configurations</xref> included with the base
rec_min_ironic.dita:        keyref="example_configurations"/>.</p>
rec_min_swift.dita:    <p>These recommended minimums are based on the included <xref keyref="example_configurations"
recover_rabbit.dita:        <keyword keyref="kw-hos-phrase"/> cloud environment. It is important for cloud operators to
recover_rabbit.dita:        brokers communication between multiple services in your <keyword keyref="kw-hos-phrase"/>
recover_rabbit.dita:      <p>There are two types of upgrades within <keyword keyref="kw-hos"/> -- major and minor. The
recover_rabbit.dita:        as the upgrade from <keyword keyref="kw-hos-phrase-20"/> (RabbitMQ version 3.4.3) to 3.0
recover_rabbit.dita:        keyref="kw-hos-phrase"/> is likely to recover automatically without any further action
releasenotes501.dita:  <title><keyword keyref="kw-hos-tm"/>
releasenotes501.dita:    <keyword keyref="kw-hos-version-501"/>: Release Notes</title>
releasenotes501.dita:        keyref="kw-hos-version-501"/>, including known issues and workarounds for this
releasenotes501.dita:      <p id="SCRD-1262"><b><keyword keyref="kw-hos-phrase-501"/> supports SLES12 SP3 for Compute Nodes</b></p>
releasenotes501.dita:      <p>SLES12 SP2 is supported for compute nodes in <keyword keyref="kw-hos-phrase-50"/>. <keyword
releasenotes501.dita:          keyref="kw-hos-phrase-501"/> includes support for the more recently released SLES12 SP3.
releasenotes501.dita:          <note type="important"><keyword keyref="kw-hos-phrase-501"/> does not support SLES12 SP2
releasenotes501.dita:          compute nodes. If you intend to upgrade to <keyword keyref="kw-hos-phrase-501"/> you will
releasenotes501.dita:          <keyword keyref="kw-hos"/> Entry-scale KVM Cloud</xref>. 
releasenotes501.dita:          <li><keyword keyref="kw-hos"/> playbooks currently do not take care of SDK, so it needs to
releasenotes501.dita:      <p id="BUGZILLA-1065762"><b>Upgrading <keyword keyref="kw-hos-phrase"/> with SLES Compute SP2 to SP3</b></p>
releasenotes501.dita:          <li>You must be running <keyword keyref="kw-hos-phrase"/> with SLES12 SP2 Compute</li>
releasenotes501.dita:      <p id="SCRD-1362"><b>Magnum Fedora Atomic for <keyword keyref="kw-hos-phrase"/> must use version fedora-25</b></p>
releasenotes501.dita:          keyref="deploying_kubernetes_fedora_atomic"/>
releasenotes501.dita:              keyref="adding_compute_nodes"/> in the <keyword
releasenotes501.dita:              keyref="kw-hos-phrase"/> documentation.</li>
releasenotes502.dita:  <title><keyword keyref="kw-hos-tm"/>
releasenotes502.dita:    <keyword keyref="kw-hos-version-502"/>: Release Notes</title>
releasenotes502.dita:        keyref="kw-hos-version-502"/>, including known issues and workarounds for this
releasenotes502.dita:      <p id="SCRD-1851"><b><keyword keyref="kw-hos-phrase-502"/> supports RHEL 7.3 Compute Nodes</b></p>
releasenotes502.dita:      <p><keyword keyref="kw-hos-phrase-502"/> introduces support for RHEL 7.3 compute nodes. 
releasenotes502.dita:        python-freezerclient which has been added to <keyword keyref="kw-hos-phrase-502"/> is the
replace_shared_lm.dita:      <li>Ensuring that you use the same version of <keyword keyref="kw-hos"/> that you previously
restore_shared_controller.chagedExthide.dita:        <li>Ensuring that you use the same version of <keyword keyref="kw-hos"/> that you previously
security_features.dita:    <section id="overview"><title>Security features in <keyword keyref="kw-hos-phrase"/></title>
security_features.dita:          keyref="kw-hos-phrase"/> provides capabilities that help you to protect your data at rest
security_features.dita:        PCI-DSS.</p><p>In <keyword keyref="kw-hos-phrase"/>, a number of security enhancements are
security_features.dita:        <keyword keyref="kw-hos"/> deployment, promoting better compliance with your organization’s
security_features.dita:      <p id="tls_internal">With <keyword keyref="kw-hos-phrase"/>, data transmission between
security_features.dita:          keyref="kw-hos-phrase"/>.
security_features.dita:      <keyword keyref="kw-hos-phrase"/> is PCI (Payment Card Industry) ready, enabling retail
security_features.dita:      standards document. Since <keyword keyref="kw-hos"/> satisfies the requirements that fall
security_features.dita:      confidence and peace of mind that <keyword keyref="kw-hos"/> will not be a blocker.</section>
shared_lifecyclemanager_recovery.dita:      <li>Ensuring that you use the same version of <keyword keyref="kw-hos"/> that you previously
sles_overview.dita:                <p><keyword keyref="kw-hos-phrase"/> supports SLES compute nodes, specifically SLES
sles_overview.dita:                    12 SP2. HPE does not ship a SLES ISO with <keyword keyref="kw-hos"/> so you will
sles_overview.dita:                        keyref="kw-hos"/>: </p>
sles_overview.dita:                        keyref="register_suse_overview"/> for more information. </p>
sles_preinstall.dita:                <keyword keyref="kw-hos-phrase"/> uses iptables to secure access to lifecycle manager network interfaces and on 
sles_preinstall.dita:                This sample configuration is inappropriate for <keyword keyref="kw-hos"/> operation and the node will not be able to run HOS 
sles_preinstall.dita:                <keyword keyref="kw-hos-phrase"/> install will prevent the installation of the sample files.                
sles_preinstall.dita:                However, if these files do exist, there are a number of steps that you must follow before you install <keyword keyref="kw-hos-phrase"/>.
sles_preinstall.dita:                <keyword keyref="kw-hos"/> components and OpenStack components manage <i>interface specific</i> rules.
sles_preinstall.dita:                <li>Ensure that any remaining rules are limited to interfaces not used by <keyword keyref="kw-hos"/>.  
sles_preinstall.dita:                    interfaces not used by <keyword keyref="kw-hos"/>), you will need to reboot the system to activate the new settings.
sles_support.dita:                been tested and qualified by HPE to run on <keyword keyref="kw-hos"/>. Refer to the
sles_support.dita:                published compatibility matrix for your version of <keyword keyref="kw-hos"/> at the
sles_support.dita:                        <p>HPE customers who have purchased both <keyword keyref="kw-hos"/> and SLES
sles_support.dita:                            specialists in <keyword keyref="kw-hos"/> and SUSE technologies. If the
sles_support.dita:                            level. If <keyword keyref="kw-hos"/> software is excluded as the cause
supported_services.dita:      backup and restore service in <keyword keyref="kw-hos"/>: <p>
tech_overview_hlm.dita:        and often error prone. To help with this process, <keyword keyref="kw-hos-phrase"/> provides lifecycle 
tech_overview_hlm.dita:        configure, maintain and update <keyword keyref="kw-hos-phrase"/>. These playbooks are collectively 
tech_overview_hlm.dita:      <p>During installation of <keyword keyref="kw-hos-phrase"/>, the core OpenStack services, 
tech_overview_hlm.dita:        the <keyword keyref="kw-hos"/> lifecycle manager provides scripts that perform the integrations for you.</p>
tech_overview_hlm.dita:      <p><keyword keyref="kw-hos-phrase"/> clouds are defined through a set of configuration files 
tech_overview_hlm.dita:        <keyword keyref="kw-hos"/> input model. Rather than needing to define a cloud from scratch every time,
tech_overview_hlm.dita:        <keyword keyref="kw-hos-phrase"/> includes a series of starting point examples that reflect 
tech_overview_hlm.dita:        <keyword keyref="kw-hos-phrase"/> cloud, you can choose to start with one of the supplied examples 
tech_overview_hlm.dita:        <keyword keyref="kw-hos"/> lifecycle manager utilizes Cobbler as an included and optional baremetal deployer.</p>
tech_overview_hlm.dita:        combines this information with the service definitions provided by <keyword keyref="kw-hos"/> and any 
tech_overview_hlm.dita:      <p><keyword keyref="kw-hos"/> uses Helion Lifecycle Manager for hotfixes, patches, updates and upgrades.
tech_overview_linux.dita:      <p><keyword keyref="kw-hos"/> is OpenStack technology coupled with HPE Linux for HPE Helion</p>
tech_overview_newimproved.dita:      keyref="kw-hos-phrase"/></title>
tech_overview_openstack.dita:        <keyword keyref="kw-hos"/>  is based on the OpenStack offering which brings many benefits:
tech_overview_openstack.dita:      <p>The following table provides a brief summary of the OpenStack services on which <keyword keyref="kw-hos"/>
tech_overview_valueadd.dita:      <p><keyword keyref="kw-hos-phrase"/> offers a number of value-added
tech_overview_valueadd.dita:      <note><keyword keyref="kw-hos-phrase"/> is the last supported release for HPE Linux, it is
thirdparty_integrations.dita:    <!--<p>We have the following documentation showing how to integrate <keyword keyref="kw-hos-phrase"
thirdparty_overview.dita:      integrate <keyword keyref="kw-hos-phrase"/> with third party solutions.</shortdesc></abstract>
thirdparty_overview.dita:    <p>We have the following documentation showing how to integrate <keyword keyref="kw-hos-phrase"
thirdparty_overview.dita:        <p><keyword keyref="kw-hos-phrase"/>
thirdparty_overview.dita:        supports the integration of 3rd-party components with a <keyword keyref="kw-hos"/>
thirdparty_overview.dita:        existing service in the <keyword keyref="kw-hos"/> stack. The 3rd-party mechanism supports the integration of a
thirdparty_overview.dita:            keyref="kw-hos-phrase"/> centralized logging solution and Splunk including the steps to
tls_mysql.dita:    <p>Since <keyword keyref="kw-hos-phrase-40"/> MySQL traffic can be encrypted using TLS. For
tls_mysql.dita:      completely new <keyword keyref="kw-hos-phrase"/> deployments using the supplied input model
tls_rabbit_mq.dita:      <p>Since <keyword keyref="kw-hos-phrase-40"/> RabbitMQ traffic can be encrypted using TLS. To enable it, you will have to add
unsupported_features.dita:            Ceph Jewel is not supported in <keyword keyref="kw-hos-phrase"/>, the current supported version is Ceph Hammer.
update_vertica_license.dita:      <p>A Vertica license is included in <keyword keyref="kw-hos"/> for you to use. If you have
usage_ceph_storage_helion.dita:            using multiple protocols. Ceph is closely integrated with <keyword keyref="kw-hos-tm"/>
usage_ceph_storage_helion.dita:            cinder-volume and glance data store. <keyword keyref="kw-hos-tm"/> further simplifies
usage_ceph_storage_helion.dita:                            user model provided with <keyword keyref="kw-hos-tm"/> is mentioned
usage_ceph_storage_helion.dita:                                                <keyword keyref="kw-hos-tm"/> . It just means that
usage_ceph_storage_helion.dita:                                        setting that <keyword keyref="kw-hos"/> supports.</stentry>
usage_ceph_storage_helion.dita:                            [DEFAULT]/host value which <keyword keyref="kw-hos-phrase"/> is
usage_ceph_storage_helion.dita:                in <keyword keyref="kw-hos-tm"/>
usage_ceph_storage_helion.dita:                <keyword keyref="kw-hos-version"/> enables 1.a, 2.a, and 2.b only. </p>
using_flavor_metadata.dita:      <p>In <keyword keyref="kw-hos"/> Nova, the <codeph>ComputeCapabilitiesFilter</codeph>
vlan-aware_vm.dita:            apparent that this step disables Neutron security groups completely. The default <keyword keyref="kw-hos"/>
vlan-aware_vm.dita:            which does not implement security groups for trunk ports. Optionally, the <keyword keyref="kw-hos"/> default
vlan-aware_vm.dita:    <section id="firewall"><title>Firewall issues</title> The <keyword keyref="kw-hos"/> default
vlan_transparency.dita:      <p>VLAN transparent networks in <keyword keyref="kw-hos-phrase"/> allow for support of
without_dvr.dita:            <title>Configuring <keyword keyref="kw-hos"/> without DVR</title>
working_monitoring.dita:    <p>For a full list of packaged plugins that are included <keyword keyref="kw-hos"/>, see <xref
