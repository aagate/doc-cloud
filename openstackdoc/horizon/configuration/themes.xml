<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/horizon/doc/source/configuration/themes.rst">
    <section ids="themes" names="themes">
        <title>Themes</title>
        <paragraph>As of the Kilo release, styling for the OpenStack Dashboard can be altered
            through the use of a theme. A theme is a directory containing a
            <literal>_variables.scss</literal> file to override the color codes used throughout the SCSS
            and a <literal>_styles.scss</literal> file with additional styles to load after dashboard
            styles have loaded.</paragraph>
        <paragraph>As of the Mitaka release, Horizon can be configured to run with multiple
            themes available at run time.  It uses a browser cookie to allow users to
            toggle between the configured themes.  By default, Horizon is configured
            with the two standard themes available: ‘default’ and ‘material’.</paragraph>
        <paragraph>To configure or alter the available themes, set <literal>AVAILABLE_THEMES</literal> in
            <literal>local_settings.py</literal> to a list of tuples, such that
            <literal>('name', 'label', 'path')</literal></paragraph>
        <definition_list>
            <definition_list_item>
                <term><literal>name</literal></term>
                <definition>
                    <paragraph>The key by which the theme value is stored within the cookie</paragraph>
                </definition>
            </definition_list_item>
            <definition_list_item>
                <term><literal>label</literal></term>
                <definition>
                    <paragraph>The label shown in the theme toggle under the User Menu</paragraph>
                </definition>
            </definition_list_item>
            <definition_list_item>
                <term><literal>path</literal></term>
                <definition>
                    <paragraph>The directory location for the theme. The path must be relative to the
                        <literal>openstack_dashboard</literal> directory or an absolute path to an accessible
                        location on the file system</paragraph>
                </definition>
            </definition_list_item>
        </definition_list>
        <paragraph>To use a custom theme, set <literal>AVAILABLE_THEMES</literal> in <literal>local_settings.py</literal> to
            a list of themes.  If you wish to run in a mode similar to legacy Horizon,
            set <literal>AVAILABLE_THEMES</literal> with a single tuple, and the theme toggle will not
            be available at all through the application to allow user configuration themes.</paragraph>
        <paragraph>For example, a configuration with multiple themes:</paragraph>
        <literal_block xml:space="preserve">AVAILABLE_THEMES = [
    ('default', 'Default', 'themes/default'),
    ('material', 'Material', 'themes/material'),
]</literal_block>
        <paragraph>A configuration with a single theme:</paragraph>
        <literal_block xml:space="preserve">AVAILABLE_THEMES = [
    ('default', 'Default', 'themes/default'),
]</literal_block>
        <paragraph>Both the Dashboard custom variables and Bootstrap variables can be overridden.
            For a full list of the Dashboard SCSS variables that can be changed,
            see the variables file at
            <literal>openstack_dashboard/static/dashboard/scss/_variables.scss</literal>.</paragraph>
        <paragraph>In order to build a custom theme, both <literal>_variables.scss</literal> and <literal>_styles.scss</literal>
            are required and <literal>_variables.scss</literal> must provide all the default Bootstrap
            variables.</paragraph>
        <section ids="inherit-from-an-existing-theme" names="inherit\ from\ an\ existing\ theme">
            <title>Inherit from an Existing Theme</title>
            <paragraph>Custom themes must implement all of the Bootstrap variables required by
                Horizon in <literal>_variables.scss</literal> and <literal>_styles.scss</literal>. To make this easier, you
                can inherit the variables needed in the default theme and only override those
                that you need to customize. To inherit from the default theme, put this in your
                theme’s <literal>_variables.scss</literal>:</paragraph>
            <literal_block xml:space="preserve">@import "/themes/default/variables";</literal_block>
            <definition_list>
                <definition_list_item>
                    <term>Once you have made your changes you must re-generate the static files with</term>
                    <definition>
                        <paragraph><literal>tox -e manage -- collectstatic</literal>.</paragraph>
                    </definition>
                </definition_list_item>
            </definition_list>
            <paragraph>By default, all of the themes configured by <literal>AVAILABLE_THEMES</literal> setting are
                collected by horizon during the <title_reference>collectstatic</title_reference> process. By default, the themes
                are collected into the dynamic <title_reference>static/themes</title_reference> directory, but this location can
                be customized via the <literal>local_settings.py</literal> variable: <literal>THEME_COLLECTION_DIR</literal></paragraph>
            <paragraph>Once collected, any theme configured via <literal>AVAILABLE_THEMES</literal> is available to
                inherit from by importing its variables and styles from its collection
                directory.  The following is an example of inheriting from the material theme:</paragraph>
            <literal_block xml:space="preserve">@import "/themes/material/variables";
@import "/themes/material/styles";</literal_block>
            <paragraph>All themes will need to be configured in <literal>AVAILABLE_THEMES</literal> to allow
                inheritance.  If you wish to inherit from a theme, but not show that theme
                as a selectable option in the theme picker widget, then simply configure the
                <literal>SELECTABLE_THEMES</literal> to exclude the parent theme.  <literal>SELECTABLE_THEMES</literal> must
                be of the same format as <literal>AVAILABLE_THEMES</literal>.  It defaults to
                <literal>AVAILABLE_THEMES</literal> if it is not set explicitly.</paragraph>
            <section ids="bootswatch" names="bootswatch">
                <title>Bootswatch</title>
                <paragraph>Horizon packages the Bootswatch SCSS files for use with its <literal>material</literal> theme.
                    Because of this, it is simple to use an existing Bootswatch theme as a base.
                    This is due to the fact that Bootswatch is loaded as a 3rd party static asset,
                    and therefore is automatically collected into the <title_reference>static</title_reference> directory in
                    <title_reference>/horizon/lib/</title_reference>.  The following is an example of how to inherit from
                    Bootswatch’s <literal>darkly</literal> theme:</paragraph>
                <literal_block xml:space="preserve">@import "/horizon/lib/bootswatch/darkly/variables";
@import "/horizon/lib/bootswatch/darkly/bootswatch";</literal_block>
            </section>
        </section>
        <section ids="organizing-your-theme-directory" names="organizing\ your\ theme\ directory">
            <title>Organizing Your Theme Directory</title>
            <paragraph>A custom theme directory can be organized differently, depending on the
                level of customization that is desired, as it can include static files
                as well as Django templates.  It can include special subdirectories that will
                be used differently: <literal>static</literal>, <literal>templates</literal> and <literal>img</literal>.</paragraph>
            <section ids="the-static-folder" names="the\ static\ folder">
                <title>The <literal>static</literal> Folder</title>
                <paragraph>If the theme folder contains a sub-folder called <literal>static</literal>, then that sub
                    folder will be used as the <strong>static root of the theme</strong>.  I.e., Horizon will
                    look in that sub-folder for the _variables.scss and _styles.scss files.
                    The contents of this folder will also be served up at <literal>/static/custom</literal>.</paragraph>
            </section>
            <section ids="the-templates-folder" names="the\ templates\ folder">
                <title>The <literal>templates</literal> Folder</title>
                <paragraph>If the theme folder contains a sub-folder <literal>templates</literal>, then the path
                    to that sub-folder will be prepended to the <literal>TEMPLATE_DIRS</literal> tuple to
                    allow for theme specific template customizations.</paragraph>
            </section>
            <section ids="using-the-templates-folder" names="using\ the\ templates\ folder">
                <title>Using the <literal>templates</literal> Folder</title>
                <paragraph>Any Django template that is used in Horizon can be overridden through a theme.
                    This allows highly customized user experiences to exist within the scope of
                    different themes.  Any template that is overridden must adhere to the same
                    directory structure that the extending template expects.</paragraph>
                <paragraph>For example, if you wish to customize the sidebar, Horizon expects the template
                    to live at <literal>horizon/_sidebar.html</literal>.  You would need to duplicate that
                    directory structure under your templates directory, such that your override
                    would live at <literal>{ theme_path }/templates/horizon/_sidebar.html</literal>.</paragraph>
            </section>
            <section ids="the-img-folder" names="the\ img\ folder">
                <title>The <literal>img</literal> Folder</title>
                <paragraph>If the static root of the theme folder contains an <literal>img</literal> directory,
                    then all images that make use of the {% themable_asset %} templatetag
                    can be overridden.</paragraph>
                <paragraph>These assets include logo.svg, splash-logo.svg and favicon.ico, however
                    overriding the SVG/GIF assets used by Heat within the <title_reference>dashboard/img</title_reference> folder
                    is not currently supported.</paragraph>
            </section>
        </section>
        <section ids="customizing-the-logo" names="customizing\ the\ logo">
            <title>Customizing the Logo</title>
            <section ids="simple" names="simple">
                <title>Simple</title>
                <paragraph>If you wish to customize the logo that is used on the splash screen or in the
                    top navigation bar, then you need to create an <literal>img</literal> directory under your
                    theme’s static root directory and place your custom <literal>logo.svg</literal> or
                    <literal>logo-splash.svg</literal> within it.</paragraph>
                <paragraph>If you wish to override the <literal>logo.svg</literal> using the previous method, and if the
                    image used is larger than the height of the top navigation, then the image will
                    be constrained to fit within the height of nav.  You can customize the height
                    of the top navigation bar by customizing the SCSS variable: <literal>$navbar-height</literal>.
                    If the image’s height is smaller than the navbar height, then the image
                    will retain its original resolution and size, and simply be centered
                    vertically in the available space.</paragraph>
                <paragraph>Prior to the Kilo release the images files inside of Horizon needed to be
                    replaced by your images files or the Horizon stylesheets needed to be altered
                    to point to the location of your image.</paragraph>
            </section>
            <section ids="advanced" names="advanced">
                <title>Advanced</title>
                <paragraph>If you need to do more to customize the logo than simply replacing the existing
                    PNG, then you can also override the _brand.html through a custom theme.  To use
                    this technique, simply add a <literal>templates/header/_brand.html</literal> to the root of
                    your custom theme, and add markup directly to the file.  For an example of how
                    to do this, see
                    <literal>openstack_dashboard/themes/material/templates/header/_brand.html</literal>.</paragraph>
                <paragraph>The splash / login panel can also be customized by adding
                    <literal>templates/auth/_splash.html</literal>.  See
                    <literal>openstack_dashboard/themes/material/templates/auth/_splash.html</literal> for an
                    example.</paragraph>
            </section>
        </section>
    </section>
</document>
