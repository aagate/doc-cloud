<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/horizon/doc/source/install/from-source.rst">
    <section ids="manual-installation" names="manual\ installation">
        <title>Manual installation</title>
        <paragraph>This page covers the basic installation of horizon in a production
            environment. If you are looking for a developer environment, see
            <reference internal="True" refuri="../contributor/quickstart#quickstart"><inline classes="std std-ref">Quickstart</inline></reference>.</paragraph>
        <target refid="system-requirements-label"></target>
        <section ids="system-requirements system-requirements-label" names="system\ requirements system-requirements-label">
            <title>System Requirements</title>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Python 2.7</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Django 1.8</paragraph>
                </list_item>
                <list_item>
                    <paragraph>An accessible <reference name="keystone" refuri="https://docs.openstack.org/keystone/latest/">keystone</reference><target ids="keystone" names="keystone" refuri="https://docs.openstack.org/keystone/latest/"></target> endpoint</paragraph>
                </list_item>
                <list_item>
                    <paragraph>All other services are optional.
                        Horizon supports the following services as of the Pike release.
                        If the keystone endpoint for a service is configured,
                        horizon detects it and enables its support automatically.</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph><reference name="cinder" refuri="https://docs.openstack.org/cinder/latest/">cinder</reference><target ids="cinder" names="cinder" refuri="https://docs.openstack.org/cinder/latest/"></target>: Block Storage</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference name="glance" refuri="https://docs.openstack.org/glance/latest/">glance</reference><target ids="glance" names="glance" refuri="https://docs.openstack.org/glance/latest/"></target>: Image Management</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference name="heat" refuri="https://docs.openstack.org/heat/latest/">heat</reference><target ids="heat" names="heat" refuri="https://docs.openstack.org/heat/latest/"></target>: Orchestration</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference name="neutron" refuri="https://docs.openstack.org/neutron/latest/">neutron</reference><target ids="neutron" names="neutron" refuri="https://docs.openstack.org/neutron/latest/"></target>: Networking</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference name="nova" refuri="https://docs.openstack.org/nova/latest/">nova</reference><target ids="nova" names="nova" refuri="https://docs.openstack.org/nova/latest/"></target>: Compute</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference name="swift" refuri="https://docs.openstack.org/swift/latest/">swift</reference><target ids="swift" names="swift" refuri="https://docs.openstack.org/swift/latest/"></target>: Object Storage</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Horizon also supports many other OpenStack services via plugins. For more
                                information, see the <reference internal="True" refuri="plugin-registry#install-plugin-registry"><inline classes="std std-ref">Plugin Registry</inline></reference>.</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
            </bullet_list>
        </section>
        <section ids="installation" names="installation">
            <title>Installation</title>
            <note>
                <paragraph>In the commands below, substitute “&lt;release&gt;” for your version of choice,
                    such as “ocata” or “pike”.</paragraph>
            </note>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>Clone Horizon</paragraph>
                    <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ git clone https://git.openstack.org/openstack/horizon -b stable/&lt;release&gt; --depth=1
$ cd horizon</literal_block>
                </list_item>
                <list_item>
                    <paragraph>Install the horizon python module into your system</paragraph>
                    <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ sudo pip install -c http://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt?h=stable/&lt;release&gt; .</literal_block>
                </list_item>
            </enumerated_list>
        </section>
        <section ids="configuration" names="configuration">
            <title>Configuration</title>
            <paragraph>This section contains a small summary of the critical settings required to run
                horizon. For more details, please refer to <reference internal="True" refuri="../configuration/settings#install-settings"><inline classes="std std-ref">Settings Reference</inline></reference>.</paragraph>
            <section ids="settings" names="settings">
                <title>Settings</title>
                <paragraph>Create <literal>openstack_dashboard/local/local_settings.py</literal>. It is usually a good
                    idea to copy <literal>openstack_dashboard/local/local_settings.py.example</literal> and
                    edit it. As a minimum, the follow settings will need to be modified:</paragraph>
                <definition_list>
                    <definition_list_item>
                        <term><literal>DEBUG</literal></term>
                        <definition>
                            <paragraph>Set to <literal>False</literal></paragraph>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term><literal>ALLOWED_HOSTS</literal></term>
                        <definition>
                            <paragraph>Set to your domain name(s)</paragraph>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term><literal>OPENSTACK_HOST</literal></term>
                        <definition>
                            <paragraph>Set to the IP of your Keystone endpoint. You may also
                                need to alter <literal>OPENSTACK_KEYSTONE_URL</literal></paragraph>
                        </definition>
                    </definition_list_item>
                </definition_list>
                <note>
                    <paragraph>The following steps in the “Configuration” section are optional, but highly
                        recommended in production.</paragraph>
                </note>
            </section>
            <section ids="translations" names="translations">
                <title>Translations</title>
                <paragraph>Compile translation message catalogs for internationalization. This step is
                    not required if you do not need to support languages other than US English.
                    GNU <literal>gettext</literal> tool is required to compile message catalogs.</paragraph>
                <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ sudo apt-get install gettext
$ ./manage.py compilemessages</literal_block>
            </section>
            <section ids="static-assets" names="static\ assets">
                <title>Static Assets</title>
                <paragraph>Compress your static files by adding <literal>COMPRESS_OFFLINE = True</literal> to your
                    <literal>local_settings.py</literal>, then run the following commands</paragraph>
                <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ ./manage.py collectstatic
$ ./manage.py compress</literal_block>
            </section>
            <section ids="logging" names="logging">
                <title>Logging</title>
                <paragraph>Horizons uses Django’s logging configuration mechanism, which can be customized
                    by altering the <literal>LOGGING</literal> dictionary in <literal>local_settings.py</literal>. By default,
                    Horizon’s logging example sets the log level to <literal>INFO</literal>.</paragraph>
                <paragraph>Horizon also uses a number of 3rd-party clients which log separately. The
                    log level for these can still be controlled through Horizon’s <literal>LOGGING</literal>
                    config, however behaviors may vary beyond Horizon’s control.</paragraph>
                <paragraph>For more information regarding configuring logging in Horizon, please
                    read the <reference name="Django logging directive" refuri="https://docs.djangoproject.com/en/dev/topics/logging">Django logging directive</reference> and the <reference name="Python logging directive" refuri="http://docs.python.org/2/library/logging.html">Python logging directive</reference>
                    documentation. Horizon is built on Python and Django.</paragraph>
                <target ids="django-logging-directive" names="django\ logging\ directive" refuri="https://docs.djangoproject.com/en/dev/topics/logging"></target>
                <target ids="python-logging-directive" names="python\ logging\ directive" refuri="http://docs.python.org/2/library/logging.html"></target>
            </section>
            <section ids="session-storage" names="session\ storage">
                <title>Session Storage</title>
                <paragraph>Horizon uses <reference name="Django's sessions framework" refuri="https://docs.djangoproject.com/en/dev/topics/http/sessions/">Django’s sessions framework</reference> for handling session data. There
                    are numerous session backends available, which are selected through the
                    <literal>SESSION_ENGINE</literal> setting in your <literal>local_settings.py</literal> file.</paragraph>
                <target ids="django-s-sessions-framework" names="django's\ sessions\ framework" refuri="https://docs.djangoproject.com/en/dev/topics/http/sessions/"></target>
                <section ids="memcached" names="memcached">
                    <title>Memcached</title>
                    <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
CACHES = {
    'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache'
    'LOCATION': 'my_memcached_host:11211',
}</literal_block>
                    <paragraph>External caching using an application such as memcached offers persistence
                        and shared storage, and can be very useful for small-scale deployment and/or
                        development. However, for distributed and high-availability scenarios
                        memcached has inherent problems which are beyond the scope of this
                        documentation.</paragraph>
                    <paragraph>Requirements:</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>Memcached service running and accessible</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Python memcached module installed</paragraph>
                        </list_item>
                    </bullet_list>
                </section>
                <section ids="database" names="database">
                    <title>Database</title>
                    <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">SESSION_ENGINE = 'django.core.cache.backends.db.DatabaseCache'
DATABASES = {
    'default': {
        # Database configuration here
    }
}</literal_block>
                    <paragraph>Database-backed sessions are scalable (using an appropriate database strategy),
                        persistent, and can be made high-concurrency and highly-available.</paragraph>
                    <paragraph>The downside to this approach is that database-backed sessions are one of the
                        slower session storages, and incur a high overhead under heavy usage. Proper
                        configuration of your database deployment can also be a substantial
                        undertaking and is far beyond the scope of this documentation.</paragraph>
                </section>
                <section ids="cached-database" names="cached\ database">
                    <title>Cached Database</title>
                    <paragraph>To mitigate the performance issues of database queries, you can also consider
                        using Django’s <literal>cached_db</literal> session backend which utilizes both your database
                        and caching infrastructure to perform write-through caching and efficient
                        retrieval. You can enable this hybrid setting by configuring both your database
                        and cache as discussed above and then using</paragraph>
                    <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"</literal_block>
                </section>
            </section>
        </section>
        <section ids="deployment" names="deployment">
            <title>Deployment</title>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>Set up a web server with WSGI support. For example, install Apache web
                        server on Ubuntu</paragraph>
                    <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ sudo apt-get install apache2 libapache2-mod-wsgi</literal_block>
                    <paragraph>You can either use the provided <literal>openstack_dashboard/wsgi/django.wsgi</literal> or
                        generate a <literal>openstack_dashboard/wsgi/horizon.wsgi</literal> file with the following
                        command (which detects if you use a virtual environment or not to
                        automatically build an adapted WSGI file)</paragraph>
                    <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ ./manage.py make_web_conf --wsgi</literal_block>
                    <paragraph>Then configure the web server to host OpenStack dashboard via WSGI.
                        For apache2 web server, you may need to create
                        <literal>/etc/apache2/sites-available/horizon.conf</literal>.
                        The template in DevStack is a good example of the file.
                        <reference refuri="http://git.openstack.org/cgit/openstack-dev/devstack/tree/files/apache-horizon.template">http://git.openstack.org/cgit/openstack-dev/devstack/tree/files/apache-horizon.template</reference>
                        Or, if you previously generated an <literal>openstack_dashboard/wsgi/horizon.wsgi</literal>
                        you can automatically generate an apache configuration file</paragraph>
                    <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ ./manage.py make_web_conf --apache &gt; /etc/apache2/sites-available/horizon.conf</literal_block>
                    <paragraph>Same as above but if you want SSL support</paragraph>
                    <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ ./manage.py make_web_conf --apache --ssl --sslkey=/path/to/ssl/key --sslcert=/path/to/ssl/cert &gt; /etc/apache2/sites-available/horizon.conf</literal_block>
                    <paragraph>By default the apache configuration will launch a number of apache processes
                        equal to the number of CPUs + 1 of the machine on which you launch the
                        <literal>make_web_conf</literal> command. If the target machine is not the same or if you
                        want to specify the number of processes, add the <literal>--processes</literal> option</paragraph>
                    <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ ./manage.py make_web_conf --apache --processes 10 &gt; /etc/apache2/sites-available/horizon.conf</literal_block>
                </list_item>
                <list_item>
                    <paragraph>Enable the above configuration and restart the web server</paragraph>
                    <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ sudo a2ensite horizon
$ sudo service apache2 restart</literal_block>
                </list_item>
            </enumerated_list>
        </section>
        <section ids="next-steps" names="next\ steps">
            <title>Next Steps</title>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph><reference internal="True" refuri="../configuration/settings#install-settings"><inline classes="std std-ref">Settings Reference</inline></reference> lists the available settings for horizon.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../configuration/customizing#install-customizing"><inline classes="std std-ref">Customizing Horizon</inline></reference> describes how to customize horizon.</paragraph>
                </list_item>
            </bullet_list>
        </section>
    </section>
</document>
