<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/horizon/doc/source/contributor/ref/decorators.rst">
    <section ids="module-horizon.decorators horizon-decorators" names="horizon\ decorators">
        <title>Horizon Decorators</title>
        <index entries="['single',\ 'horizon.decorators\ (module)',\ 'module-horizon.decorators',\ '',\ None]"></index>
        <paragraph>General-purpose decorators for use with Horizon.</paragraph>
        <index entries="['single',\ 'require_auth()\ (in\ module\ horizon.decorators)',\ 'horizon.decorators.require_auth',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="require_auth" ids="horizon.decorators.require_auth" module="horizon.decorators" names="horizon.decorators.require_auth"><desc_addname xml:space="preserve">horizon.decorators.</desc_addname><desc_name xml:space="preserve">require_auth</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">view_func</desc_parameter></desc_parameterlist><comment xml:space="preserve"></comment></desc_signature>
            <desc_content>
                <paragraph>Performs user authentication check.</paragraph>
                <paragraph>Similar to Django’s <title_reference>login_required</title_reference> decorator, except that this throws
                    <reference internal="True" reftitle="horizon.exceptions.NotAuthenticated" refuri="exceptions#horizon.exceptions.NotAuthenticated"><literal classes="xref py py-exc">NotAuthenticated</literal></reference> exception if the user is not
                    signed-in.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'require_component_access()\ (in\ module\ horizon.decorators)',\ 'horizon.decorators.require_component_access',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="require_component_access" ids="horizon.decorators.require_component_access" module="horizon.decorators" names="horizon.decorators.require_component_access"><desc_addname xml:space="preserve">horizon.decorators.</desc_addname><desc_name xml:space="preserve">require_component_access</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">view_func</desc_parameter><desc_parameter xml:space="preserve">component</desc_parameter></desc_parameterlist><comment xml:space="preserve"></comment></desc_signature>
            <desc_content>
                <paragraph>Perform component can_access check to access the view.</paragraph>
                <paragraph>:param component containing the view (panel or dashboard).</paragraph>
                <paragraph>Raises a <reference internal="True" reftitle="horizon.exceptions.NotAuthorized" refuri="exceptions#horizon.exceptions.NotAuthorized"><literal classes="xref py py-exc">NotAuthorized</literal></reference> exception if the
                    user cannot access the component containing the view.
                    By example the check of component policy rules will be applied to its
                    views.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'require_perms()\ (in\ module\ horizon.decorators)',\ 'horizon.decorators.require_perms',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="require_perms" ids="horizon.decorators.require_perms" module="horizon.decorators" names="horizon.decorators.require_perms"><desc_addname xml:space="preserve">horizon.decorators.</desc_addname><desc_name xml:space="preserve">require_perms</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">view_func</desc_parameter><desc_parameter xml:space="preserve">required</desc_parameter></desc_parameterlist><comment xml:space="preserve"></comment></desc_signature>
            <desc_content>
                <paragraph>Enforces permission-based access controls.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">required</literal_strong> (<literal_emphasis>list</literal_emphasis>) – A tuple of permission names, all of which the request
                                user must possess in order access the decorated view.</paragraph>
                        </field_body>
                    </field>
                </field_list>
                <paragraph>Example usage:</paragraph>
                <literal_block xml:space="preserve">from horizon.decorators import require_perms


@require_perms(['foo.admin', 'foo.member'])
def my_view(request):
    ...</literal_block>
                <paragraph>Raises a <reference internal="True" reftitle="horizon.exceptions.NotAuthorized" refuri="exceptions#horizon.exceptions.NotAuthorized"><literal classes="xref py py-exc">NotAuthorized</literal></reference> exception if the
                    requirements are not met.</paragraph>
            </desc_content>
        </desc>
    </section>
</document>
