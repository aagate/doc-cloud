<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/horizon/doc/source/contributor/contributing.rst">
    <section ids="contributing-guide" names="contributing\ guide">
        <title>Contributing Guide</title>
        <paragraph>First and foremost, thank you for wanting to contribute! It’s the only way
            open source works!</paragraph>
        <paragraph>Before you dive into writing patches, here are some of the basics:</paragraph>
        <bullet_list bullet="*">
            <list_item>
                <paragraph>Project page: <reference refuri="http://launchpad.net/horizon">http://launchpad.net/horizon</reference></paragraph>
            </list_item>
            <list_item>
                <paragraph>Bug tracker: <reference refuri="https://bugs.launchpad.net/horizon">https://bugs.launchpad.net/horizon</reference></paragraph>
            </list_item>
            <list_item>
                <paragraph>Source code: <reference refuri="https://github.com/openstack/horizon">https://github.com/openstack/horizon</reference></paragraph>
            </list_item>
            <list_item>
                <paragraph>Code review: <reference refuri="https://review.openstack.org/#q,status:open+project:openstack/horizon,n,z">https://review.openstack.org/#q,status:open+project:openstack/horizon,n,z</reference></paragraph>
            </list_item>
            <list_item>
                <paragraph>Continuous integration:
                    * Jenkins: <reference refuri="https://jenkins.openstack.org">https://jenkins.openstack.org</reference>
                    * Zuul: <reference refuri="http://status.openstack.org/zuul">http://status.openstack.org/zuul</reference></paragraph>
            </list_item>
            <list_item>
                <paragraph>IRC Channel: #openstack-horizon on Freenode.</paragraph>
            </list_item>
        </bullet_list>
        <section ids="making-contributions" names="making\ contributions">
            <title>Making Contributions</title>
            <section ids="getting-started" names="getting\ started">
                <title>Getting Started</title>
                <paragraph>We’ll start by assuming you’ve got a working checkout of the repository (if
                    not then please see the <reference internal="True" refuri="quickstart#quickstart"><inline classes="std std-ref">Quickstart</inline></reference>).</paragraph>
                <paragraph>Second, you’ll need to take care of a couple administrative tasks:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Create an account on Launchpad.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Sign the <reference name="OpenStack Contributor License Agreement" refuri="http://wiki.openstack.org/CLA">OpenStack Contributor License Agreement</reference> and follow the associated
                            instructions to verify your signature.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Join the <reference name="Horizon Developers" refuri="https://launchpad.net/~horizon">Horizon Developers</reference> team on Launchpad.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Follow the <reference name="instructions for setting up git-review" refuri="https://docs.openstack.org/infra/manual/developers.html#development-workflow">instructions for setting up git-review</reference> in your
                            development environment.</paragraph>
                    </list_item>
                </enumerated_list>
                <paragraph>Whew! Got all that? Okay! You’re good to go.</paragraph>
                <target ids="openstack-contributor-license-agreement" names="openstack\ contributor\ license\ agreement" refuri="http://wiki.openstack.org/CLA"></target>
                <target ids="horizon-developers" names="horizon\ developers" refuri="https://launchpad.net/~horizon"></target>
                <target ids="instructions-for-setting-up-git-review" names="instructions\ for\ setting\ up\ git-review" refuri="https://docs.openstack.org/infra/manual/developers.html#development-workflow"></target>
            </section>
            <section ids="ways-to-contribute" names="ways\ to\ contribute">
                <title>Ways To Contribute</title>
                <paragraph>The easiest way to get started with Horizon’s code is to pick a bug on
                    Launchpad that interests you, and start working on that. Bugs tagged as
                    <literal>low-hanging-fruit</literal> are a good place to start. Alternatively, if there’s an
                    OpenStack API feature you would like to see implemented in Horizon feel free
                    to try building it.</paragraph>
                <paragraph>If those are too big, there are lots of great ways to get involved without
                    plunging in head-first:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Report bugs, triage new tickets, and review old tickets on
                            the <reference name="bug tracker" refuri="https://bugs.launchpad.net/horizon">bug tracker</reference>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Propose ideas for improvements via <reference name="Launchpad Blueprints" refuri="https://blueprints.launchpad.net/horizon">Launchpad Blueprints</reference>, via the
                            mailing list on the project page, or on IRC.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Write documentation!</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Write unit tests for untested code!</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Help improve the <reference name="User Experience Design" refuri="https://wiki.openstack.org/wiki/UX#Getting_Started">User Experience Design</reference> or contribute to the
                            <reference name="Persona Working Group" refuri="https://wiki.openstack.org/wiki/Personas">Persona Working Group</reference>.</paragraph>
                    </list_item>
                </bullet_list>
                <target ids="bug-tracker" names="bug\ tracker" refuri="https://bugs.launchpad.net/horizon"></target>
                <target ids="launchpad-blueprints" names="launchpad\ blueprints" refuri="https://blueprints.launchpad.net/horizon"></target>
                <target ids="user-experience-design" names="user\ experience\ design" refuri="https://wiki.openstack.org/wiki/UX#Getting_Started"></target>
                <target ids="persona-working-group" names="persona\ working\ group" refuri="https://wiki.openstack.org/wiki/Personas"></target>
            </section>
            <section ids="choosing-issues-to-work-on" names="choosing\ issues\ to\ work\ on">
                <title>Choosing Issues To Work On</title>
                <paragraph>In general, if you want to write code, there are three cases for issues
                    you might want to work on:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Confirmed bugs</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Approved blueprints (features)</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>New bugs you’ve discovered</paragraph>
                    </list_item>
                </enumerated_list>
                <paragraph>If you have an idea for a new feature that isn’t in a blueprint yet, it’s
                    a good idea to write the blueprint first, so you don’t end up writing a bunch
                    of code that may not go in the direction the community wants.</paragraph>
                <paragraph>For bugs, open the bug first, but if you can reproduce the bug reliably and
                    identify its cause then it’s usually safe to start working on it. However,
                    getting independent confirmation (and verifying that it’s not a duplicate)
                    is always a good idea if you can be patient.</paragraph>
            </section>
            <section ids="after-you-write-your-patch" names="after\ you\ write\ your\ patch">
                <title>After You Write Your Patch</title>
                <paragraph>Once you’ve made your changes, there are a few things to do:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Make sure the unit tests and linting tasks pass by running <literal>tox</literal></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Take a look at your patch in API profiler, i.e. how it impacts the
                            performance. See <reference name="Profiling Pages" refid="profiling-pages">Profiling Pages</reference>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Make sure your code is ready for translation: See <reference internal="True" refuri="topics/translation#pseudo-translation"><inline classes="std std-ref">Pseudo translation tool</inline></reference>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Make sure your code is up-to-date with the latest master:
                            <literal>git pull --rebase</literal></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Finally, run <literal>git review</literal> to upload your changes to Gerrit for review.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>The Horizon core developers will be notified of the new review and will examine
                    it in a timely fashion, either offering feedback or approving it to be merged.
                    If the review is approved, it is sent to Jenkins to verify the unit tests pass
                    and it can be merged cleanly. Once Jenkins approves it, the change will be
                    merged to the master repository and it’s time to celebrate!</paragraph>
            </section>
            <section ids="profiling-pages" names="profiling\ pages">
                <title>Profiling Pages</title>
                <paragraph>In the Ocata release of Horizon a new “OpenStack Profiler” panel was
                    introduced. Once it is enabled and all prerequisites are set up, you can see
                    which API calls Horizon actually makes when rendering a specific page. To
                    re-render the page while profiling it, you’ll need to use the “Profile”
                    dropdown menu located in the top right corner of the screen. In order to
                    be able to use “Profile” menu, the following steps need to be completed:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Enable the Developer dashboard by copying <literal>_9001_developer.py</literal> from
                            <literal>openstack_dashboard/contrib/developer/enabled/</literal> to
                            <literal>openstack_dashboard/local/enabled/</literal>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Copy
                            <literal>openstack_dashboard/local/local_settings.d/_9030_profiler_settings.py.example</literal>
                            to <literal>openstack_dashboard/local/local_settings.d/_9030_profiler_settings.py</literal></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Copy <literal>openstack_dashboard/contrib/developer/enabled/_9030_profiler.py</literal> to
                            <literal>openstack_dashboard/local/enabled/_9030_profiler.py</literal>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>To support storing profiler data on server-side, MongoDB cluster needs to be
                            installed on your Devstack host (default configuration), see
                            <reference name="Installing MongoDB" refuri="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/#install-mongodb-community-edition">Installing MongoDB</reference>. Then, change the <literal>bindIp</literal> key in
                            <literal>/etc/mongod.conf</literal> to <literal>0.0.0.0</literal> and invoke
                            <literal>sudo service mongod restart</literal>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Collect and compress static assets with
                            <literal>tox -e manage -- collectstatic -c</literal> and <literal>tox -e manage -- compress</literal></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Restart the web server.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The “Profile” drop-down menu should appear in the top-right corner, you are
                            ready to profile your pages!</paragraph>
                    </list_item>
                </enumerated_list>
                <target ids="installing-mongodb" names="installing\ mongodb" refuri="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/#install-mongodb-community-edition"></target>
            </section>
        </section>
        <section ids="etiquette" names="etiquette">
            <title>Etiquette</title>
            <paragraph>The community’s guidelines for etiquette are fairly simple:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Treat everyone respectfully and professionally.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>If a bug is “in progress” in the bug tracker, don’t start working on it
                        without contacting the author. Try on IRC, or via the launchpad email
                        contact link. If you don’t get a response after a reasonable time, then go
                        ahead. Checking first avoids duplicate work and makes sure nobody’s toes
                        get stepped on.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>If a blueprint is assigned, even if it hasn’t been started, be sure you
                        contact the assignee before taking it on. These larger issues often have a
                        history of discussion or specific implementation details that the assignee
                        may be aware of that you are not.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Please don’t re-open tickets closed by a core developer. If you disagree with
                        the decision on the ticket, the appropriate solution is to take it up on
                        IRC or the mailing list.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Give credit where credit is due; if someone helps you substantially with
                        a piece of code, it’s polite (though not required) to thank them in your
                        commit message.</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="code-style" names="code\ style">
            <title>Code Style</title>
            <paragraph>As a project, Horizon adheres to code quality standards.</paragraph>
            <section ids="python" names="python">
                <title>Python</title>
                <paragraph>We follow <reference name="PEP8" refuri="http://www.python.org/dev/peps/pep-0008/">PEP8</reference> for all our Python code, and use <literal>pep8.py</literal> (available
                    via the shortcut <literal>tox -e pep8</literal>) to validate that our code
                    meets proper Python style guidelines.</paragraph>
                <target ids="pep8" names="pep8" refuri="http://www.python.org/dev/peps/pep-0008/"></target>
            </section>
            <section ids="django" names="django">
                <title>Django</title>
                <paragraph>Additionally, we follow <reference name="Django's style guide" refuri="https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/">Django’s style guide</reference> for templates, views, and
                    other miscellany.</paragraph>
                <target ids="django-s-style-guide" names="django's\ style\ guide" refuri="https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/"></target>
            </section>
            <section ids="javascript" names="javascript">
                <title>JavaScript</title>
                <paragraph>The following standards are divided into required and recommended sections.
                    Our main goal in establishing these best practices is to have code that is
                    reliable, readable, and maintainable.</paragraph>
                <section dupnames="required" ids="required">
                    <title>Required</title>
                    <paragraph><strong>Reliable</strong></paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>The code has to work on the stable and latest versions of Firefox, Chrome,
                                Safari, and Opera web browsers, and on Microsoft Internet Explorer 11 and
                                later.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>If you turned compression off during development via <literal>COMPRESS_ENABLED =
False</literal> in local_settings.py, re-enable compression and test your code
                                before submitting.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Use <literal>===</literal> as opposed to <literal>==</literal> for equality checks. The <literal>==</literal> will do a
                                type cast before comparing, which can lead to unwanted results.</paragraph>
                            <note>
                                <paragraph>If typecasting is desired, explicit casting is preferred to keep the
                                    meaning of your code clear.</paragraph>
                            </note>
                        </list_item>
                        <list_item>
                            <paragraph>Keep document reflows to a minimum. DOM manipulation is expensive, and can
                                become a performance issue. If you are accessing the DOM, make sure that you
                                are doing it in the most optimized way. One example is to build up a document
                                fragment and then append the fragment to the DOM in one pass instead of doing
                                multiple smaller DOM updates.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Use “strict”, enclosing each JavaScript file inside a self-executing
                                function. The self-executing function keeps the strict scoped to the file,
                                so its variables and methods are not exposed to other JavaScript files in
                                the product.</paragraph>
                            <note>
                                <paragraph>Using strict will throw exceptions for common coding errors, like
                                    accessing global vars, that normally are not flagged.</paragraph>
                            </note>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve">(function(){
  'use strict';
  // code...
})();</literal_block>
                        </list_item>
                        <list_item>
                            <paragraph>Use <literal>forEach</literal> | <literal>each</literal> when looping whenever possible. AngularJS and
                                jQuery both provide for each loops that provide both iteration and scope.</paragraph>
                            <paragraph>AngularJS:</paragraph>
                            <literal_block xml:space="preserve">angular.forEach(objectToIterateOver, function(value, key) {
  // loop logic
});</literal_block>
                            <paragraph>jQuery:</paragraph>
                            <literal_block xml:space="preserve">$.each(objectToIterateOver, function(key, value) {
  // loop logic
});</literal_block>
                        </list_item>
                        <list_item>
                            <paragraph>Do not put variables or functions in the global namespace. There are several
                                reasons why globals are bad, one being that all JavaScript included in an
                                application runs in the same scope. The issue with that is if another script
                                has the same method or variable names they overwrite each other.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Always put <literal>var</literal> in front of your variables. Not putting <literal>var</literal> in front
                                of a variable puts that variable into the global space, see above.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Do not use <literal>eval( )</literal>. The eval (expression) evaluates the expression
                                passed to it. This can open up your code to security vulnerabilities and
                                other issues.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Do not use ‘<literal>with</literal> object {code}’. The <literal>with</literal> statement is used to access
                                properties of an object. The issue with <literal>with</literal> is that its execution is not
                                consistent, so by reading the statement in the code it is not always clear
                                how it is being used.</paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph><strong>Readable &amp; Maintainable</strong></paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>Give meaningful names to methods and variables.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Avoid excessive nesting.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Avoid HTML and CSS in JS code. HTML and CSS belong in templates and
                                stylesheets respectively. For example:</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>In our HTML files, we should focus on layout.</paragraph>
                                    <enumerated_list enumtype="arabic" prefix="" suffix=".">
                                        <list_item>
                                            <paragraph>Reduce the small/random <literal>&lt;script&gt;</literal> and <literal>&lt;style&gt;</literal> elements in HTML.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph>Avoid in-lining styles into element in HTML. Use attributes and
                                                classes instead.</paragraph>
                                        </list_item>
                                    </enumerated_list>
                                </list_item>
                                <list_item>
                                    <paragraph>In our JS files, we should focus on logic rather than attempting to
                                        manipulate/style elements.</paragraph>
                                    <enumerated_list enumtype="arabic" prefix="" suffix=".">
                                        <list_item>
                                            <paragraph>Avoid statements such as <literal>element.css({property1,property2...})</literal> they
                                                belong in a CSS class.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph>Avoid statements such as <literal>$("&lt;div&gt;&lt;span&gt;abc&lt;/span&gt;&lt;/div&gt;")</literal> they
                                                belong in a HTML template file. Use <literal>show</literal> | <literal>hide</literal> | <literal>clone</literal>
                                                elements if dynamic content is required.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph>Avoid using classes for detection purposes only, instead, defer to
                                                attributes. For example to find a div:</paragraph>
                                            <literal_block highlight_args="{}" language="html" linenos="False" xml:space="preserve">&lt;div class="something"&gt;&lt;/div&gt;
  $(".something").html("Don't find me this way!");</literal_block>
                                            <paragraph>is better found like:</paragraph>
                                            <literal_block highlight_args="{}" language="html" linenos="False" xml:space="preserve">&lt;div data-something&gt;&lt;/div&gt;
  $("div[data-something]").html("You found me correctly!");</literal_block>
                                        </list_item>
                                    </enumerated_list>
                                </list_item>
                            </bullet_list>
                        </list_item>
                        <list_item>
                            <paragraph>Avoid commented-out code.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Avoid dead code.</paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph><strong>Performance</strong></paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>Avoid creating instances of the same object repeatedly within the same scope.
                                Instead, assign the object to a variable and re-use the existing object. For
                                example:</paragraph>
                            <literal_block xml:space="preserve">$(document).on('click', function() { /* do something. */ });
$(document).on('mouseover', function() { /* do something. */ });</literal_block>
                            <paragraph>A better approach:</paragraph>
                            <literal_block xml:space="preserve">var $document = $(document);
$document.on('click', function() { /* do something. */ });
$document.on('mouseover', function() { /* do something. */ });</literal_block>
                            <paragraph>In the first approach a jQuery object for <literal>document</literal> is created each time.
                                The second approach creates only one jQuery object and reuses it. Each object
                                needs to be created, uses memory, and needs to be garbage collected.</paragraph>
                        </list_item>
                    </bullet_list>
                </section>
                <section ids="recommended" names="recommended">
                    <title>Recommended</title>
                    <paragraph><strong>Readable &amp; Maintainable</strong></paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>Put a comment at the top of every file explaining what the purpose of this
                                file is when the naming is not obvious. This guideline also applies to
                                methods and variables.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Source-code formatting – (or “beautification”) is recommended but should be
                                used with caution. Keep in mind that if you reformat an entire file that was
                                not previously formatted the same way, it will mess up the diff during the
                                code review. It is best to use a formatter when you are working on a new file
                                by yourself, or with others who are using the same formatter. You can also
                                choose to format a selected portion of a file only. Instructions for setting
                                up ESLint for Eclipse, Sublime Text, Notepad++ and WebStorm/PyCharm are
                                <reference name="provided" refuri="https://wiki.openstack.org/wiki/Horizon/Javascript/EditorConfig">provided</reference>.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Use 2 spaces for code indentation.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Use <literal>{ }</literal> for <literal>if</literal>, <literal>for</literal>, <literal>while</literal> statements, and don’t combine them
                                on one line.</paragraph>
                            <literal_block xml:space="preserve">// Do this          //Not this          // Not this
if(x) {             if(x)               if(x) y =x;
  y=x;                y=x;
}</literal_block>
                        </list_item>
                        <list_item>
                            <paragraph>Use ESLint in your development environment.</paragraph>
                        </list_item>
                    </bullet_list>
                    <target ids="provided" names="provided" refuri="https://wiki.openstack.org/wiki/Horizon/Javascript/EditorConfig"></target>
                </section>
            </section>
            <section ids="angularjs" names="angularjs">
                <title>AngularJS</title>
                <note>
                    <paragraph>This section is intended as a quick intro to contributing with AngularJS. For
                        more detailed information, check the <reference internal="True" refuri="topics/angularjs#topics-angularjs"><inline classes="std std-ref">AngularJS Topic Guide</inline></reference>.</paragraph>
                </note>
                <section ids="john-papa-style-guide" names='"john\ papa\ style\ guide"'>
                    <title>“John Papa Style Guide”</title>
                    <paragraph>The John Papa Style Guide is the primary point of reference for Angular
                        code style. This style guide has been endorsed by the AngularJS
                        team:</paragraph>
                    <literal_block xml:space="preserve">"The most current and detailed Angular Style Guide is the
community-driven effort led by John Papa and Todd Motto."

- http://angularjs.blogspot.com/2014/02/an-angularjs-style-guide-and-best.html</literal_block>
                    <paragraph>The style guide is found at the below location:</paragraph>
                    <paragraph><reference refuri="https://github.com/johnpapa/angular-styleguide">https://github.com/johnpapa/angular-styleguide</reference></paragraph>
                    <paragraph>When reviewing / writing, please refer to the sections of this guide.
                        If an issue is encountered, note it with a comment and provide a link back
                        to the specific issue. For example, code should use named functions. A
                        review noting this should provide the following link in the comments:</paragraph>
                    <paragraph><reference refuri="https://github.com/johnpapa/angular-styleguide#style-y024">https://github.com/johnpapa/angular-styleguide#style-y024</reference></paragraph>
                    <paragraph>In addition to John Papa, the following guidelines are divided into
                        required and recommended sections.</paragraph>
                </section>
                <section dupnames="required" ids="id1">
                    <title>Required</title>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>Scope is not the model (model is your JavaScript Objects). The scope
                                references the model. Use isolate scopes wherever possible.</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph><reference refuri="https://github.com/angular/angular.js/wiki/Understanding-Scopes">https://github.com/angular/angular.js/wiki/Understanding-Scopes</reference></paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>Read-only in templates.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>Write-only in controllers.</paragraph>
                                </list_item>
                            </bullet_list>
                        </list_item>
                        <list_item>
                            <paragraph>Since Django already uses <literal>{{ }}</literal>, use <literal>{$ $}</literal> or <literal>{% verbatim %}</literal>
                                instead.</paragraph>
                        </list_item>
                    </bullet_list>
                </section>
            </section>
            <section ids="eslint" names="eslint">
                <title>ESLint</title>
                <paragraph>ESLint is a great tool to be used during your code editing to improve
                    JavaScript quality by checking your code against a configurable list of checks.
                    Therefore, JavaScript developers should configure their editors to use ESLint
                    to warn them of any such errors so they can be addressed. Since ESLint has a
                    ton of configuration options to choose from, links are provided below to the
                    options Horizon wants enforced along with the instructions for setting up
                    ESLint for Eclipse, Sublime Text, Notepad++ and WebStorm/PyCharm.</paragraph>
                <paragraph>Instructions for setting up ESLint: <reference name="ESLint setup instructions" refuri="https://wiki.openstack.org/wiki/Horizon/Javascript/EditorConfig">ESLint setup instructions</reference></paragraph>
                <note>
                    <paragraph>ESLint is part of the automated unit tests performed by Jenkins. The
                        automated test use the default configurations, which are less strict than
                        the configurations we recommended to run in your local development
                        environment.</paragraph>
                </note>
                <target ids="eslint-setup-instructions" names="eslint\ setup\ instructions" refuri="https://wiki.openstack.org/wiki/Horizon/Javascript/EditorConfig"></target>
            </section>
            <section ids="css" names="css">
                <title>CSS</title>
                <paragraph>Style guidelines for CSS are currently quite minimal. Do your best to make the
                    code readable and well-organized. Two spaces are preferred for indentation
                    so as to match both the JavaScript and HTML files.</paragraph>
            </section>
            <section ids="javascript-and-css-libraries-using-xstatic" names="javascript\ and\ css\ libraries\ using\ xstatic">
                <title>JavaScript and CSS libraries using xstatic</title>
                <paragraph>We do not bundle third-party code in Horizon’s source tree. Instead, we package
                    the required files as xstatic Python packages and add them as dependencies to
                    Horizon.</paragraph>
                <paragraph>To create a new xstatic package:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Check if the library is already packaged as xstatic on PyPi, by searching
                            for the library name. If it already is, go to step 5. If it is, but not in
                            the right version, contact the original packager to have them update it.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Package the library as an xstatic package by following the instructions in
                            xstatic <reference name="documentation" refuri="http://xstatic.rtfd.org/en/latest/packaging.html">documentation</reference>. Install the <reference name="xstatic-release" refuri="https://pypi.python.org/pypi/xstatic-release">xstatic-release</reference> script and follow
                            the instructions that come with it.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference name="Create a new repository under OpenStack" refuri="https://docs.openstack.org/infra/manual/creators.html">Create a new repository under OpenStack</reference>. Use “xstatic-core” and
                            “xstatic-ptl” groups for the ACLs. Make sure to include the
                            <literal>-pypi-wheel-upload</literal> job in the project config.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference name="Set up PyPi" refuri="https://docs.openstack.org/infra/manual/creators.html#give-openstack-permission-to-publish-releases">Set up PyPi</reference> to allow OpenStack (the “openstackci” user) to publish your
                            package.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Add the new package to <reference name="global-requirements" refuri="https://github.com/openstack/requirements/blob/master/global-requirements.txt">global-requirements</reference>.</paragraph>
                    </list_item>
                </enumerated_list>
                <paragraph>To make a new release of the package, you need to:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Ensure the version information in the
                            <title_reference>xstatic/pkg/&lt;package name&gt;/__init__.py</title_reference> file is up to date,
                            especially the <title_reference>BUILD</title_reference>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Push your updated package up for review in gerrit.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Once the review is approved and the change merged, <reference name="request a release" refuri="http://git.openstack.org/cgit/openstack/releases/tree/README.rst">request a release</reference> by
                            updating or creating the appropriate file for the xstatic package
                            in the <reference name="releases repository" refuri="http://git.openstack.org/cgit/openstack/releases">releases repository</reference> under <title_reference>deliverables/_independent</title_reference>. That
                            will cause it to be automatically packaged and released to PyPi.</paragraph>
                    </list_item>
                </enumerated_list>
                <warning>
                    <paragraph>Note that once a package is released, you can not “un-release” it. You
                        should never attempt to modify, delete or rename a released package without
                        a lot of careful planning and feedback from all projects that use it.</paragraph>
                    <paragraph>For the purpose of fixing packaging mistakes, xstatic has the build number
                        mechanism. Simply fix the error, increment the build number and release the
                        newer package.</paragraph>
                </warning>
                <target ids="documentation" names="documentation" refuri="http://xstatic.rtfd.org/en/latest/packaging.html"></target>
                <target ids="xstatic-release" names="xstatic-release" refuri="https://pypi.python.org/pypi/xstatic-release"></target>
                <target ids="create-a-new-repository-under-openstack" names="create\ a\ new\ repository\ under\ openstack" refuri="https://docs.openstack.org/infra/manual/creators.html"></target>
                <target ids="request-a-release" names="request\ a\ release" refuri="http://git.openstack.org/cgit/openstack/releases/tree/README.rst"></target>
                <target ids="releases-repository" names="releases\ repository" refuri="http://git.openstack.org/cgit/openstack/releases"></target>
                <target ids="set-up-pypi" names="set\ up\ pypi" refuri="https://docs.openstack.org/infra/manual/creators.html#give-openstack-permission-to-publish-releases"></target>
                <target ids="global-requirements" names="global-requirements" refuri="https://github.com/openstack/requirements/blob/master/global-requirements.txt"></target>
                <section ids="integrating-a-new-xstatic-package-into-horizon" names="integrating\ a\ new\ xstatic\ package\ into\ horizon">
                    <title>Integrating a new xstatic package into Horizon</title>
                    <paragraph>Having done a release of an xstatic package:</paragraph>
                    <enumerated_list enumtype="arabic" prefix="" suffix=".">
                        <list_item>
                            <paragraph>Look for the <reference name="upper-constraints.txt" refuri="https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt">upper-constraints.txt</reference> edit related to the xstatic release
                                that was just performed. One will be created automatically by the release
                                process in the <literal>openstack/requirements</literal> project with the topic
                                <reference name="new-release" refuri="https://review.openstack.org/#/q/status:open+project:openstack/requirements+branch:master+topic:new-release">new-release</reference>. You should -1 that patch until you are confident Horizon
                                does not break (or you have generated a patch to fix Horizon for that
                                release.) If no upper-constraints.txt patch is automatically generated,
                                ensure the releases yaml file created in the <reference name="releases repository" refuri="http://git.openstack.org/cgit/openstack/releases">releases repository</reference> has the
                                “include-pypi-link: yes” setting.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Pull that patch down so you have the edited upper-constraints.txt file
                                locally.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Set the environment variable <title_reference>UPPER_CONSTRAINTS_FILE</title_reference> to the edited
                                upper-constraints.txt file name and run tests or local development server
                                through tox. This will pull in the precise version of the xstatic package
                                that you need.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Move on to releasing once you’re happy the Horizon changes are stable.</paragraph>
                        </list_item>
                    </enumerated_list>
                    <paragraph>Releasing a new compatible version of Horizon to address issues in the new
                        xstatic release:</paragraph>
                    <enumerated_list enumtype="arabic" prefix="" suffix=".">
                        <list_item>
                            <paragraph>Continue to -1 the upper-constraints.txt patch above until this process is
                                complete. A +1 from a Horizon developer will indicate to the requirements
                                team that the upper-constraints.txt patch is OK to merge.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>When submitting your changes to Horizon to address issues around the new
                                xstatic release, use a Depends-On: referencing the upper-constraints.txt
                                review. This will cause the OpenStack testing infrastructure to pull in your
                                updated xstatic package as well.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Merge the upper-constraints.txt patch and the Horizon patch noting that
                                Horizon’s gate may be broken in the interim between these steps, so try to
                                minimise any delay there. With the Depends-On it’s actually safe to +W the
                                Horizon patch, which will be held up until the related upper-constraints.txt
                                patch merges.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Once the upper-constraints.txt patch merges, you should propose a patch to
                                global-requirements which bumps the minimum version of the package up to the
                                upper-constraints version so that deployers / packagers who don’t honor
                                upper-constraints still get compatible versions of the packages.</paragraph>
                        </list_item>
                    </enumerated_list>
                    <target ids="upper-constraints-txt" names="upper-constraints.txt" refuri="https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt"></target>
                    <target ids="new-release" names="new-release" refuri="https://review.openstack.org/#/q/status:open+project:openstack/requirements+branch:master+topic:new-release"></target>
                </section>
            </section>
            <section ids="html" names="html">
                <title>HTML</title>
                <paragraph>Again, readability is paramount; however be conscientious of how the browser
                    will handle whitespace when rendering the output. Two spaces is the preferred
                    indentation style to match all front-end code.</paragraph>
            </section>
            <section ids="exception-handling" names="exception\ handling">
                <title>Exception Handling</title>
                <paragraph>Avoid propogating direct exception messages thrown by OpenStack APIs to the UI.
                    It is a precaution against giving obscure or possibly sensitive data to a user.
                    These error messages from the API are also not translatable. Until there is a
                    standard error handling framework implemented by the services which presents
                    clean and translated messages, horizon catches all the exceptions thrown by the
                    API and normalizes them in <reference internal="True" reftitle="horizon.exceptions.handle" refuri="ref/exceptions#horizon.exceptions.handle"><literal classes="xref py py-func">horizon.exceptions.handle()</literal></reference>.</paragraph>
            </section>
            <section dupnames="documentation" ids="id2">
                <title>Documentation</title>
                <paragraph>Horizon’s documentation is written in reStructuredText (reST) and uses Sphinx
                    for additional parsing and functionality, and should follow standard practices
                    for writing reST. This includes:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Flow paragraphs such that lines wrap at 80 characters or less.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Use proper grammar, spelling, capitalization and punctuation at all times.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Make use of Sphinx’s autodoc feature to document modules, classes
                            and functions. This keeps the docs close to the source.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Where possible, use Sphinx’s cross-reference syntax (e.g.
                            <literal>:class:`~horizon.foo.Bar</literal>) when referring to other Horizon components.
                            The better-linked our docs are, the easier they are to use.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Be sure to generate the documentation before submitting a patch for review.
                    Unexpected warnings often appear when building the documentation, and slight
                    reST syntax errors frequently cause links or cross-references not to work
                    correctly.</paragraph>
                <paragraph>Documentation is generated with Sphinx using the tox command. To create HTML
                    docs and man pages:</paragraph>
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">$ tox -e docs</literal_block>
                <paragraph>The results are in the doc/build/html and doc/build/man directories
                    respectively.</paragraph>
            </section>
            <section ids="conventions" names="conventions">
                <title>Conventions</title>
                <paragraph>Simply by convention, we have a few rules about naming:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>The term “project” is used in place of Keystone’s “tenant” terminology
                            in all user-facing text. The term “tenant” is still used in API code to
                            make things more obvious for developers.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The term “dashboard” refers to a top-level dashboard class, and “panel” to
                            the sub-items within a dashboard. Referring to a panel as a dashboard is
                            both confusing and incorrect.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
        </section>
        <section ids="release-notes" names="release\ notes">
            <title>Release Notes</title>
            <paragraph>Release notes for a patch should be included in the patch with the
                associated changes whenever possible. This allow for simpler tracking. It also
                enables a single cherry pick to be done if the change is backported to a
                previous release. In some cases, such as a feature that is provided via
                multiple patches, release notes can be done in a follow-on review.</paragraph>
            <paragraph>If the following applies to the patch, a release note is required:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>The deployer needs to take an action when upgrading</paragraph>
                </list_item>
                <list_item>
                    <paragraph>A new feature is implemented</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Function was removed (hopefully it was deprecated)</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Current behavior is changed</paragraph>
                </list_item>
                <list_item>
                    <paragraph>A new config option is added that the deployer should consider changing from
                        the default</paragraph>
                </list_item>
                <list_item>
                    <paragraph>A security bug is fixed</paragraph>
                </list_item>
            </bullet_list>
            <note>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>A release note is suggested if a long-standing or important bug is fixed.
                            Otherwise, a release note is not required.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>It is not recommended that individual release notes use <strong>prelude</strong>
                            section as it is for release highlights.</paragraph>
                    </list_item>
                </bullet_list>
            </note>
            <warning>
                <paragraph>Avoid modifying an existing release note file even though it is related to
                    your change. If you modify a release note file of a past release, the whole
                    content will be shown in a latest release. The only allowed case is to
                    update a release note in a same release.</paragraph>
                <paragraph>If you need to update a release note of a past release, edit a corresponding
                    release note file in a stable branch directly.</paragraph>
            </warning>
            <paragraph>Horizon uses <reference name="reno" refuri="https://docs.openstack.org/reno/latest/user/usage.html">reno</reference><target ids="reno" names="reno" refuri="https://docs.openstack.org/reno/latest/user/usage.html"></target> to
                generate release notes. Please read the docs for details. In summary, use</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">$ tox -e venv -- reno new &lt;bug-,bp-,whatever&gt;</literal_block>
            <paragraph>Then edit the sample file that was created and push it with your change.</paragraph>
            <paragraph>To see the results:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">$ git commit  # Commit the change because reno scans git log.

$ tox -e releasenotes</literal_block>
            <paragraph>Then look at the generated release notes files in releasenotes/build/html in
                your favorite browser.</paragraph>
        </section>
        <section ids="core-reviewer-team" names="core\ reviewer\ team">
            <title>Core Reviewer Team</title>
            <paragraph>The Horizon Core Reviewer Team is responsible for many aspects of the
                Horizon project. These include, but are not limited to:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Mentor community contributors in solution design, testing, and the
                        review process</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Actively reviewing patch submissions, considering whether the patch:
                        - is functional
                        - fits the use-cases and vision of the project
                        - is complete in terms of testing, documentation, and release notes
                        - takes into consideration upgrade concerns from previous versions</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Assist in bug triage and delivery of bug fixes</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Curating the gate and triaging failures</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Maintaining accurate, complete, and relevant documentation</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Ensuring the level of testing is adequate and remains relevant as
                        features are added</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Answering questions and participating in mailing list discussions</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Interfacing with other OpenStack teams</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>In essence, core reviewers share the following common ideals:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>They share responsibility in the project’s success in its mission.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>They value a healthy, vibrant, and active developer and user community.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>They have made a long-term, recurring time investment to improve the project.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>They spend their time doing what needs to be done to ensure the
                        project’s success, not necessarily what is the most interesting or
                        fun.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>A core reviewer’s responsibility doesn’t end with merging code.</paragraph>
                </list_item>
            </bullet_list>
            <section ids="core-reviewer-expectations" names="core\ reviewer\ expectations">
                <title>Core Reviewer Expectations</title>
                <paragraph>Members of the core reviewer team are expected to:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Attend and participate in the weekly IRC meetings (if your timezone allows)</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Monitor and participate in-channel at #openstack-horizon</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Monitor and participate in [Horizon] discussions on the mailing list</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Participate in related design summit sessions at the OpenStack
                            Summits and Project Team Gatherings</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Review patch submissions actively and consistently</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Please note in-person attendance at design summits, mid-cycles, and
                    other code sprints is not a requirement to be a core reviewer.
                    Participation can also include contributing to the design documents
                    discussed at the design sessions.</paragraph>
                <paragraph>Active and consistent review of review activity, bug triage and other
                    activity will be performed monthly and fed back to the Core Reviewer Team
                    so everyone knows how things are progressing.</paragraph>
            </section>
            <section ids="code-merge-responsibilities" names="code\ merge\ responsibilities">
                <title>Code Merge Responsibilities</title>
                <paragraph>While everyone is encouraged to review changes, members of the core
                    reviewer team have the ability to +2/-2 and +A changes to these
                    repositories. This is an extra level of responsibility not to be taken
                    lightly. Correctly merging code requires not only understanding the
                    code itself, but also how the code affects things like documentation,
                    testing, upgrade impacts and interactions with other projects. It also
                    means you pay attention to release milestones and understand if a
                    patch you are merging is marked for the release, especially critical
                    during the feature freeze.</paragraph>
            </section>
        </section>
    </section>
</document>
