<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/horizon/doc/source/contributor/topics/javascript_testing.rst">
    <target refid="topics-javascript-testing"></target>
    <section ids="javascript-testing topics-javascript-testing" names="javascript\ testing topics-javascript-testing">
        <title>JavaScript Testing</title>
        <paragraph>There are multiple components in our JavaScript testing framework:</paragraph>
        <bullet_list bullet="*">
            <list_item>
                <paragraph><reference name="Jasmine" refuri="https://jasmine.github.io/2.3/introduction.html">Jasmine</reference> is our testing framework, so this defines the syntax and file
                    structure we use to test our JavaScript.</paragraph>
            </list_item>
            <list_item>
                <paragraph><reference name="Karma" refuri="https://karma-runner.github.io/">Karma</reference> is our test runner. Amongst other things, this lets us run the
                    tests against multiple browsers and generate test coverage reports.
                    Alternatively, tests can be run inside the browser with the Jasmine spec
                    runner.</paragraph>
            </list_item>
            <list_item>
                <paragraph><reference name="PhantomJS" refuri="http://phantomjs.org/">PhantomJS</reference> provides a headless WebKit (the browser engine). This gives us
                    native support for many web features without relying on specific browsers
                    being installed.</paragraph>
            </list_item>
            <list_item>
                <paragraph><reference name="ESLint" refuri="http://eslint.org/">ESLint</reference> is a pluggable code linting utility. This will catch small errors
                    and inconsistencies in your JS, which may lead to bigger issues later on.
                    See <reference internal="True" refuri="angularjs#js-code-style"><inline classes="std std-ref">Code Style</inline></reference> for more detail.</paragraph>
            </list_item>
        </bullet_list>
        <paragraph>Jasmine uses specs (<literal>.spec.js</literal>) which are kept with the JavaScript files
            that they are testing. See the <reference internal="True" refuri="angularjs#js-file-structure"><inline classes="std std-ref">File Structure</inline></reference> section or the
            <reference name="Examples" refid="examples">Examples</reference> below for more detail on this.</paragraph>
        <target ids="jasmine" names="jasmine" refuri="https://jasmine.github.io/2.3/introduction.html"></target>
        <target ids="karma" names="karma" refuri="https://karma-runner.github.io/"></target>
        <target ids="phantomjs" names="phantomjs" refuri="http://phantomjs.org/"></target>
        <target ids="eslint" names="eslint" refuri="http://eslint.org/"></target>
        <section ids="running-tests" names="running\ tests">
            <title>Running Tests</title>
            <paragraph>Tests can be run in two ways:</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>Open &lt;dev_server_ip:port&gt;/jasmine in a browser. The development server can be
                        run with <literal>tox -e runserver</literal> from the horizon root directory.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>tox -e npm</literal> from the horizon root directory. This runs Karma,
                        so it will run all the tests against PhantomJS and generate coverage
                        reports.</paragraph>
                </list_item>
            </enumerated_list>
            <paragraph>The code linting job can be run with <literal>tox -e npm -- lint</literal>, or
                <literal>tox -e npm -- lintq</literal> to show errors, but not warnings.</paragraph>
            <paragraph>To decipher where tests are failing it may be useful to use Jasmine in the
                browser to run individual tests to see where the tests are specifically
                breaking. To do this, navigate to your local horizon in the browser and add
                ‘/jasmine’ to the end of the url. e.g: ‘<reference refuri="http://localhost:8000/jasmine">http://localhost:8000/jasmine</reference>’. Once
                you have the jasmine report you may click on the title of an individual test to
                re-run just that test. From here, you can also use chrome dev tools or similar
                to set breakpoints in the code by accessing the ‘Sources’ tab and clicking on
                lines of code where you wish to break the code. This will then show you the
                exact places where the code breaks.</paragraph>
            <section ids="coverage-reports" names="coverage\ reports">
                <title>Coverage Reports</title>
                <paragraph>Our Karma setup includes a plugin to generate test coverage reports. When
                    developing, be sure to check the coverage reports on the master branch and
                    compare your development branch; this will help identify missing tests.</paragraph>
                <paragraph>To generate coverage reports, run <literal>tox -e npm</literal>. The coverage reports can be
                    found at <literal>cover/horizon/</literal> (framework tests) and <literal>cover/openstack_dashboard/</literal>
                    (dashboard tests). Load <literal>&lt;browser&gt;/index.html</literal> in a browser to view the
                    reports.</paragraph>
            </section>
        </section>
        <section ids="writing-tests" names="writing\ tests">
            <title>Writing Tests</title>
            <paragraph>Jasmine uses suites and specs:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Suites begin with a call to <literal>describe</literal>, which takes two parameters; a
                        string and a function. The string is a name or title for the spec suite,
                        whilst the function is a block that implements the suite.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Specs begin with a call to <literal>it</literal>, which also takes a string and a function
                        as parameters. The string is a name or title, whilst the function is a
                        block with one or more expectations (<literal>expect</literal>) that test the state of
                        the code. An expectation in Jasmine is an assertion that is either true or
                        false; every expectation in a spec must be true for the spec to pass.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><literal>.spec.js</literal> files can be handled manually or automatically. To use the
                automatic file discovery add:</paragraph>
            <literal_block xml:space="preserve">AUTO_DISCOVER_STATIC_FILES = True</literal_block>
            <paragraph>to your enabled file. JS code for testing should use the extensions
                <literal>.mock.js</literal> and <literal>.spec.js</literal>.</paragraph>
            <paragraph>You can read more about the functionality in the
                <reference internal="True" refuri="../../configuration/pluggable_panels#auto-discover-static-files"><inline classes="std std-ref">AUTO_DISCOVER_STATIC_FILES</inline></reference> section of the settings documentation.</paragraph>
            <paragraph>To manually add specs, add the following array and relevant file paths to your
                enabled file:</paragraph>
            <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">ADD_JS_SPEC_FILES = [
  ...
  'path_to/my_angular_code.spec.js',
  ...
]</literal_block>
        </section>
        <section ids="examples" names="examples">
            <title>Examples</title>
            <note>
                <paragraph>The code below is just for example purposes, and may not be current in
                    horizon. Ellipses (…) are used to represent code that has been
                    removed for the sake of brevity.</paragraph>
            </note>
            <section ids="example-1-a-reusable-component-in-the-horizon-directory" names="example\ 1\ -\ a\ reusable\ component\ in\ the\ horizon\ directory">
                <title>Example 1 - A reusable component in the <strong>horizon</strong> directory</title>
                <paragraph>File tree:</paragraph>
                <literal_block highlight_args="{}" language="none" linenos="False" xml:space="preserve">horizon/static/framework/widgets/modal
├── modal.controller.js
├── modal.module.js
├── modal.service.js
└── modal.spec.js</literal_block>
                <paragraph>Lines added to <literal>horizon/test/jasmine/jasmine_tests.py</literal>:</paragraph>
                <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">class ServicesTests(test.JasmineTests):
  sources = [
    ...
    'framework/widgets/modal/modal.module.js',
    'framework/widgets/modal/modal.controller.js',
    'framework/widgets/modal/modal.service.js',
    ...
  ]

  specs = [
    ...
    'framework/widgets/modal/modal.spec.js',
    ...
  ]</literal_block>
                <paragraph><literal>modal.spec.js</literal>:</paragraph>
                <literal_block highlight_args="{}" language="javascript" linenos="False" xml:space="preserve">...

(function() {
  "use strict";

  describe('horizon.framework.widgets.modal module', function() {

    beforeEach(module('horizon.framework'));

    describe('simpleModalCtrl', function() {
      var scope;
      var modalInstance;
      var context;
      var ctrl;

      beforeEach(inject(function($controller) {
        scope = {};
        modalInstance = {
          close: function() {},
          dismiss: function() {}
        };
        context = { what: 'is it' };
        ctrl = $controller('simpleModalCtrl', {
               $scope: scope,
               $modalInstance: modalInstance,
               context: context
        });
      }));

      it('establishes a controller', function() {
        expect(ctrl).toBeDefined();
      });

      it('sets context on the scope', function() {
        expect(scope.context).toBeDefined();
        expect(scope.context).toEqual({ what: 'is it' });
      });

      it('sets action functions', function() {
        expect(scope.submit).toBeDefined();
        expect(scope.cancel).toBeDefined();
      });

      it('makes submit close the modal instance', function() {
        expect(scope.submit).toBeDefined();
        spyOn(modalInstance, 'close');
        scope.submit();
        expect(modalInstance.close.calls.count()).toBe(1);
      });

      it('makes cancel close the modal instance', function() {
        expect(scope.cancel).toBeDefined();
        spyOn(modalInstance, 'dismiss');
        scope.cancel();
        expect(modalInstance.dismiss).toHaveBeenCalledWith('cancel');
      });
    });

    ...

  });
})();</literal_block>
            </section>
            <section ids="example-2-panel-specific-code-in-the-openstack-dashboard-directory" names="example\ 2\ -\ panel-specific\ code\ in\ the\ openstack_dashboard\ directory">
                <title>Example 2 - Panel-specific code in the <strong>openstack_dashboard</strong> directory</title>
                <paragraph>File tree:</paragraph>
                <literal_block highlight_args="{}" language="none" linenos="False" xml:space="preserve">openstack_dashboard/static/dashboard/launch-instance/network/
├── network.help.html
├── network.html
├── network.js
├── network.scss
└── network.spec.js</literal_block>
                <paragraph>Lines added to <literal>openstack_dashboard/enabled/_10_project.py</literal>:</paragraph>
                <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">LAUNCH_INST = 'dashboard/launch-instance/'

ADD_JS_FILES = [
  ...
  LAUNCH_INST + 'network/network.js',
  ...
]

ADD_JS_SPEC_FILES = [
  ...
  LAUNCH_INST + 'network/network.spec.js',
  ...
]</literal_block>
                <paragraph><literal>network.spec.js</literal>:</paragraph>
                <literal_block highlight_args="{}" language="javascript" linenos="False" xml:space="preserve">...

(function(){
  'use strict';

  describe('Launch Instance Network Step', function() {

    describe('LaunchInstanceNetworkCtrl', function() {
      var scope;
      var ctrl;

      beforeEach(module('horizon.dashboard.project.workflow.launch-instance'));

      beforeEach(inject(function($controller) {
        scope = {
          model: {
            newInstanceSpec: {networks: ['net-a']},
            networks: ['net-a', 'net-b']
          }
        };
        ctrl = $controller('LaunchInstanceNetworkCtrl', {$scope:scope});
      }));

      it('has correct network statuses', function() {
        expect(ctrl.networkStatuses).toBeDefined();
        expect(ctrl.networkStatuses.ACTIVE).toBeDefined();
        expect(ctrl.networkStatuses.DOWN).toBeDefined();
        expect(Object.keys(ctrl.networkStatuses).length).toBe(2);
      });

      it('has correct network admin states', function() {
        expect(ctrl.networkAdminStates).toBeDefined();
        expect(ctrl.networkAdminStates.UP).toBeDefined();
        expect(ctrl.networkAdminStates.DOWN).toBeDefined();
        expect(Object.keys(ctrl.networkStatuses).length).toBe(2);
      });

      it('defines a multiple-allocation table', function() {
        expect(ctrl.tableLimits).toBeDefined();
        expect(ctrl.tableLimits.maxAllocation).toBe(-1);
      });

      it('contains its own labels', function() {
        expect(ctrl.label).toBeDefined();
        expect(Object.keys(ctrl.label).length).toBeGreaterThan(0);
      });

      it('contains help text for the table', function() {
        expect(ctrl.tableHelpText).toBeDefined();
        expect(ctrl.tableHelpText.allocHelpText).toBeDefined();
        expect(ctrl.tableHelpText.availHelpText).toBeDefined();
      });

      it('uses scope to set table data', function() {
        expect(ctrl.tableDataMulti).toBeDefined();
        expect(ctrl.tableDataMulti.available).toEqual(['net-a', 'net-b']);
        expect(ctrl.tableDataMulti.allocated).toEqual(['net-a']);
        expect(ctrl.tableDataMulti.displayedAllocated).toEqual([]);
        expect(ctrl.tableDataMulti.displayedAvailable).toEqual([]);
      });
    });

    ...

  });
})();</literal_block>
            </section>
        </section>
    </section>
</document>
