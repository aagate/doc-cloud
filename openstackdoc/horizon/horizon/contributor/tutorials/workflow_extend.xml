<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/horizon/doc/source/contributor/tutorials/workflow_extend.rst">
    <section ids="extending-an-angularjs-workflow" names="extending\ an\ angularjs\ workflow">
        <title>Extending an AngularJS Workflow</title>
        <paragraph>A workflow extends the <literal>extensibleService</literal>. This means that all workflows
            inherit properties and methods provided by the <literal>extensibleService</literal>. Extending
            a workflow allows you to add your own steps, remove existing steps, and inject
            custom data handling logic. Refer to inline documentation on what those
            properties and methods are.</paragraph>
        <paragraph>We highly recommend that you complete the
            <reference internal="True" refuri="plugin#tutorials-plugin"><inline classes="std std-ref">Tutorial: Creating an Horizon Plugin</inline></reference> if you have not done so already.
            If you do not know how to package and install a plugin, the rest of this
            tutorial will not make sense! In this tutorial, we will examine an existing
            workflow and how we can extend it as a plugin.</paragraph>
        <note>
            <paragraph>Although this tutorial focuses on extending a workflow, the steps here
                can easily be adapted to extend any service that inherited the
                <literal>extensibleService</literal>. Examples of other extensible points include
                table columns and table actions.</paragraph>
        </note>
        <section ids="file-structure" names="file\ structure">
            <title>File Structure</title>
            <paragraph>Remember that the goal of this tutorial is to inject our custom step into an
                <strong>existing</strong> workflow. All of the files we are interested in reside in the
                <literal>static</literal> folder.</paragraph>
            <literal_block xml:space="preserve">myplugin
│
├── enabled
│   └── _31000_myplugin.py
│
└── static
     └── horizon
         └── app
             └── core
                 └── images
                     ├── plugins
                     │   └── myplugin.module.js
                     │
                     └── steps
                         └── mystep
                             ├── mystep.controller.js
                             ├── mystep.help.html
                             └── mystep.html</literal_block>
        </section>
        <section ids="myplugin-module-js" names="myplugin.module.js">
            <title>myplugin.module.js</title>
            <paragraph>This is the entry point into our plugin. We hook into an existing module via the
                run block which is executed after the module has been initialized. All we need
                to do is inject it as a dependency and then use the methods provided in the
                extensible service to override or modify steps. In this example, we are going to
                prepend our custom step so that it will show up as the first step in the wizard.</paragraph>
            <literal_block highlight_args="{}" language="javascript" linenos="False" xml:space="preserve">(function () {
  'use strict';

  angular
    .module('horizon.app.core.images')
    .run(myPlugin);

  myPlugin.$inject = [
    'horizon.app.core.images.basePath',
    'horizon.app.core.images.workflows.create-volume.service'
  ];

  function myPlugin(basePath, workflow) {
    var customStep = {
      id: 'mypluginstep',
      title: gettext('My Step'),
      templateUrl: basePath + 'steps/mystep/mystep.html',
      helpUrl: basePath + 'steps/mystep/mystep.help.html',
      formName: 'myStepForm'
    };
    workflow.prepend(customStep);
  }

})();</literal_block>
            <note>
                <paragraph>Replace <literal>horizon.app.core.images.workflows.create-volume.service</literal> with
                    the workflow you intend to augment.</paragraph>
            </note>
        </section>
        <section ids="mystep-controller-js" names="mystep.controller.js">
            <title>mystep.controller.js</title>
            <paragraph>It is important to note that the scope is the glue between our controllers,
                this is how we are propagating events from one controller to another. We can
                propagate events upward using the $emit method and propagate events downward
                using the $broadcast method.</paragraph>
            <paragraph>Using the $on method, we can listen to events generated within the scope. In
                this manner, actions we completed in the wizard are visually reflected in the
                table even though they are two completely different widgets. Similarly, you can
                share data between steps in your workflow as long as they share the same parent
                scope.</paragraph>
            <paragraph>In this example, we are listening for events generated by the wizard and the
                user panel. We also emit a custom event that other controllers can register to
                when favorite color changes.</paragraph>
            <literal_block highlight_args="{}" language="javascript" linenos="False" xml:space="preserve">(function() {
  'use strict';

  angular
    .module('horizon.app.core.images')
    .controller('horizon.app.core.images.steps.myStepController',
      myStepController);

  myStepController.$inject = [
    '$scope',
    'horizon.framework.widgets.wizard.events',
    'horizon.app.core.images.events'
  ];

  function myStepController($scope, wizardEvents, imageEvents) {

    var ctrl = this;
    ctrl.favoriteColor = 'red';

    ///////////////////////////

    $scope.$on(wizardEvents.ON_SWITCH, function(e, args) {
      console.info('Wizard is switching step!');
      console.info(args);
    });

    $scope.$on(wizardEvents.BEFORE_SUBMIT, function() {
      console.info('About to submit!');
    });

    $scope.$on(imageEvents.VOLUME_CHANGED, function(event, newVolume) {
      console.info(newVolume);
    });

    ///////////////////////////

    $scope.$watchCollection(getFavoriteColor, watchFavoriteColor);

    function getFavoriteColor() {
      return ctrl.favoriteColor;
    }

    function watchFavoriteColor(newColor, oldColor) {
      if (newColor != oldColor) {
        $scope.$emit('mystep.favoriteColor', newColor);
      }
    }
  }

})();</literal_block>
        </section>
        <section ids="mystep-help-html" names="mystep.help.html">
            <title>mystep.help.html</title>
            <paragraph>In this tutorial, we will leave this file blank. Include additional information
                here if your step requires it. Otherwise, remove the file and the <literal>helpUrl</literal>
                property from your step.</paragraph>
        </section>
        <section ids="mystep-html" names="mystep.html">
            <title>mystep.html</title>
            <paragraph>This file contains contents you want to display to the user. We will provide a
                simple example of a step that asks for your favorite color. The most important
                thing to note here is the reference to our controller via the <literal>ng-controller</literal>
                directive. This is essentially the link to our controller.</paragraph>
            <literal_block highlight_args="{}" language="html" linenos="False" xml:space="preserve">&lt;div ng-controller="horizon.app.core.images.steps.myStepController as ctrl"&gt;
  &lt;h1 translate&gt;Blue Plugin&lt;/h1&gt;
  &lt;div class="content"&gt;
    &lt;div class="subtitle" translate&gt;My custom step&lt;/div&gt;
    &lt;div translate style="margin-bottom:1em;"&gt;
      Place your custom content here!
    &lt;/div&gt;
    &lt;div class="selected-source clearfix"&gt;
      &lt;div class="row"&gt;
        &lt;div class="col-xs-12 col-sm-8"&gt;
          &lt;div class="form-group required"&gt;
            &lt;label class="control-label" translate&gt;Favorite color&lt;/label&gt;
            &lt;input type="text" class="form-control"
              ng-model="ctrl.favoriteColor"
              placeholder="{$ 'Enter your favorite color'|translate $}"&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;&lt;!-- row --&gt;
    &lt;/div&gt;&lt;!-- clearfix --&gt;
  &lt;/div&gt;&lt;!-- content --&gt;
&lt;/div&gt;&lt;!-- controller --&gt;</literal_block>
        </section>
        <section ids="testing" names="testing">
            <title>Testing</title>
            <paragraph>Now that we have completed our plugin, lets package it and test that it works.
                If you need a refresher, take a look at the installation section in
                <reference internal="True" refuri="plugin#tutorials-plugin"><inline classes="std std-ref">Tutorial: Creating an Horizon Plugin</inline></reference>.</paragraph>
        </section>
    </section>
</document>
