<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/horizon/doc/source/contributor/tutorials/table_actions.rst">
    <target refid="tutorials-table-actions"></target>
    <section ids="tutorial-adding-a-complex-action-to-a-table tutorials-table-actions" names="tutorial:\ adding\ a\ complex\ action\ to\ a\ table tutorials-table-actions">
        <title>Tutorial: Adding a complex action to a table</title>
        <paragraph>This tutorial covers how to add a more complex action to a table, one that
            requires an action and form definitions, as well as changes to the view, urls,
            and table.</paragraph>
        <paragraph>This tutorial assumes you have already completed
            <reference internal="True" refuri="dashboard#tutorials-dashboard"><inline classes="std std-ref">Tutorial: Building a Dashboard using Horizon</inline></reference>. If not, please do so now as we will be
            modifying the files created there.</paragraph>
        <paragraph>This action will create a snapshot of the instance. When the action is taken,
            it will display a form that will allow the user to enter a snapshot name,
            and will create that snapshot when the form is closed using the <literal>Create
snapshot</literal> button.</paragraph>
        <section ids="defining-the-view" names="defining\ the\ view">
            <title>Defining the view</title>
            <paragraph>To define the view, we must create a view class, along with the template
                (<literal>HTML</literal>) file and the form class for that view.</paragraph>
            <section ids="the-template-file" names="the\ template\ file">
                <title>The template file</title>
                <paragraph>The template file contains the HTML that will be used to show the view.</paragraph>
                <paragraph>Create a <literal>create_snapshot.html</literal> file under the <literal>mypanel/templates/mypanel</literal>
                    directory and add the following code:</paragraph>
                <literal_block xml:space="preserve">{% extends 'base.html' %}
{% load i18n %}
{% block title %}{% trans "Create Snapshot" %}{% endblock %}

{% block page_header %}
  {% include "horizon/common/_page_header.html" with title=_("Create a Snapshot") %}
{% endblock page_header %}

{% block main %}
    {% include 'mydashboard/mypanel/_create_snapshot.html' %}
{% endblock %}</literal_block>
                <paragraph>As you can see, the main body will be defined in <literal>_create_snapshot.html</literal>,
                    so we must also create that file under the <literal>mypanel/templates/mypanel</literal>
                    directory. It should contain the following code:</paragraph>
                <literal_block xml:space="preserve">{% extends "horizon/common/_modal_form.html" %}
{% load i18n %}

{% block modal-body-right %}
    &lt;h3&gt;{% trans "Description:" %}&lt;/h3&gt;
    &lt;p&gt;{% trans "Snapshots preserve the disk state of a running instance." %}&lt;/p&gt;
{% endblock %}</literal_block>
            </section>
            <section ids="the-form" names="the\ form">
                <title>The form</title>
                <paragraph>Horizon provides a <reference internal="True" reftitle="horizon.forms.base.SelfHandlingForm" refuri="../ref/forms#horizon.forms.base.SelfHandlingForm"><literal classes="xref py py-class">SelfHandlingForm</literal></reference> class which
                    simplifies some of the details involved in creating a form. Our form will
                    derive from this class, adding a character field to allow the user to specify
                    a name for the snapshot, and handling the successful closure of the form by
                    calling the nova api to create the snapshot.</paragraph>
                <paragraph>Create the <literal>forms.py</literal> file under the <literal>mypanel</literal> directory and add the
                    following:</paragraph>
                <literal_block xml:space="preserve">from django.core.urlresolvers import reverse
from django.utils.translation import ugettext_lazy as _

from horizon import exceptions
from horizon import forms

from openstack_dashboard import api


class CreateSnapshot(forms.SelfHandlingForm):
    instance_id = forms.CharField(label=_("Instance ID"),
                                  widget=forms.HiddenInput(),
                                  required=False)
    name = forms.CharField(max_length=255, label=_("Snapshot Name"))

    def handle(self, request, data):
        try:
            snapshot = api.nova.snapshot_create(request,
                                                data['instance_id'],
                                                data['name'])
            return snapshot
        except Exception:
            exceptions.handle(request,
                              _('Unable to create snapshot.'))</literal_block>
            </section>
            <section ids="the-view" names="the\ view">
                <title>The view</title>
                <paragraph>Now, the view will tie together the template and the form. Horizon provides a
                    <reference internal="True" reftitle="horizon.forms.views.ModalFormView" refuri="../ref/forms#horizon.forms.views.ModalFormView"><literal classes="xref py py-class">ModalFormView</literal></reference> class which simplifies the creation
                    of a view that will contain a modal form.</paragraph>
                <paragraph>Open the <literal>views.py</literal> file under the <literal>mypanel</literal> directory and add the code
                    for the CreateSnapshotView and the necessary imports. The complete
                    file should now look something like this:</paragraph>
                <literal_block xml:space="preserve">from django.core.urlresolvers import reverse
from django.core.urlresolvers import reverse_lazy
from django.utils.translation import ugettext_lazy as _

from horizon import tabs
from horizon import exceptions
from horizon import forms

from horizon.utils import memoized

from openstack_dashboard import api

from openstack_dashboard.dashboards.mydashboard.mypanel \
    import forms as project_forms

from openstack_dashboard.dashboards.mydashboard.mypanel \
    import tabs as mydashboard_tabs


class IndexView(tabs.TabbedTableView):
    tab_group_class = mydashboard_tabs.MypanelTabs
    # A very simple class-based view...
    template_name = 'mydashboard/mypanel/index.html'

    def get_data(self, request, context, *args, **kwargs):
        # Add data to the context here...
        return context


class CreateSnapshotView(forms.ModalFormView):
    form_class = project_forms.CreateSnapshot
    template_name = 'mydashboard/mypanel/create_snapshot.html'
    success_url = reverse_lazy("horizon:project:images:index")
    modal_id = "create_snapshot_modal"
    modal_header = _("Create Snapshot")
    submit_label = _("Create Snapshot")
    submit_url = "horizon:mydashboard:mypanel:create_snapshot"

    @memoized.memoized_method
    def get_object(self):
        try:
            return api.nova.server_get(self.request,
                                       self.kwargs["instance_id"])
        except Exception:
            exceptions.handle(self.request,
                              _("Unable to retrieve instance."))

    def get_initial(self):
        return {"instance_id": self.kwargs["instance_id"]}

    def get_context_data(self, **kwargs):
        context = super(CreateSnapshotView, self).get_context_data(**kwargs)
        instance_id = self.kwargs['instance_id']
        context['instance_id'] = instance_id
        context['instance'] = self.get_object()
        context['submit_url'] = reverse(self.submit_url, args=[instance_id])
        return context</literal_block>
            </section>
        </section>
        <section ids="adding-the-url" names="adding\ the\ url">
            <title>Adding the url</title>
            <paragraph>We must add the url for our new view.  Open the <literal>urls.py</literal> file under
                the <literal>mypanel</literal> directory and add the following as a new url pattern:</paragraph>
            <literal_block xml:space="preserve">url(r'^(?P&lt;instance_id&gt;[^/]+)/create_snapshot/$',
    views.CreateSnapshotView.as_view(),
    name='create_snapshot'),</literal_block>
            <paragraph>The complete <literal>urls.py</literal> file should look like this:</paragraph>
            <literal_block xml:space="preserve">from django.conf.urls import url

from openstack_dashboard.dashboards.mydashboard.mypanel import views


urlpatterns = [
    url(r'^$',
        views.IndexView.as_view(), name='index'),
    url(r'^(?P&lt;instance_id&gt;[^/]+)/create_snapshot/$',
        views.CreateSnapshotView.as_view(),
        name='create_snapshot'),
]</literal_block>
        </section>
        <section ids="define-the-action" names="define\ the\ action">
            <title>Define the action</title>
            <paragraph>Horizon provides a <reference internal="True" reftitle="horizon.tables.LinkAction" refuri="../ref/tables#horizon.tables.LinkAction"><literal classes="xref py py-class">LinkAction</literal></reference> class which simplifies
                adding an action which can be used to display another view.</paragraph>
            <paragraph>We will add a link action to the table that will be accessible from each row
                in the table. The action will use the view defined above to create a snapshot
                of the instance represented by the row in the table.</paragraph>
            <paragraph>To do this, we must edit the <literal>tables.py</literal> file under the <literal>mypanel</literal> directory
                and add the following:</paragraph>
            <literal_block xml:space="preserve">def is_deleting(instance):
    task_state = getattr(instance, "OS-EXT-STS:task_state", None)
    if not task_state:
        return False
    return task_state.lower() == "deleting"


class CreateSnapshotAction(tables.LinkAction):
    name = "snapshot"
    verbose_name = _("Create Snapshot")
    url = "horizon:mydashboard:mypanel:create_snapshot"
    classes = ("ajax-modal",)
    icon = "camera"

    # This action should be disabled if the instance
    # is not active, or the instance is being deleted
    def allowed(self, request, instance=None):
        return instance.status in ("ACTIVE") \
            and not is_deleting(instance)</literal_block>
            <paragraph>We must also add our new action as a row action for the table:</paragraph>
            <literal_block xml:space="preserve">row_actions = (CreateSnapshotAction,)</literal_block>
            <paragraph>The complete <literal>tables.py</literal> file should look like this:</paragraph>
            <literal_block xml:space="preserve">from django.utils.translation import ugettext_lazy as _

from horizon import tables


def is_deleting(instance):
    task_state = getattr(instance, "OS-EXT-STS:task_state", None)
    if not task_state:
        return False
    return task_state.lower() == "deleting"


class CreateSnapshotAction(tables.LinkAction):
    name = "snapshot"
    verbose_name = _("Create Snapshot")
    url = "horizon:mydashboard:mypanel:create_snapshot"
    classes = ("ajax-modal",)
    icon = "camera"

    def allowed(self, request, instance=None):
        return instance.status in ("ACTIVE") \
            and not is_deleting(instance)


class MyFilterAction(tables.FilterAction):
    name = "myfilter"


class InstancesTable(tables.DataTable):
    name = tables.Column("name", verbose_name=_("Name"))
    status = tables.Column("status", verbose_name=_("Status"))
    zone = tables.Column('availability_zone', verbose_name=_("Availability Zone"))
    image_name = tables.Column('image_name', verbose_name=_("Image Name"))

    class Meta(object):
        name = "instances"
        verbose_name = _("Instances")
        table_actions = (MyFilterAction,)
        row_actions = (CreateSnapshotAction,)</literal_block>
        </section>
        <section ids="run-and-check-the-dashboard" names="run\ and\ check\ the\ dashboard">
            <title>Run and check the dashboard</title>
            <paragraph>We must once again run horizon to verify our dashboard is working:</paragraph>
            <literal_block xml:space="preserve">$ tox -e runserver -- 0:9000</literal_block>
            <paragraph>Go to <literal>http://&lt;your server&gt;:9000</literal> using a browser. After login as an admin,
                display <literal>My Panel</literal> to see the <literal>Instances</literal> table. For every <literal>ACTIVE</literal>
                instance in the table, there will be a <literal>Create Snapshot</literal> action on the row.
                Click on <literal>Create Snapshot</literal>, enter a snapshot name in the form that is shown,
                then click to close the form. The <literal>Project Images</literal> view should be shown with
                the new snapshot added to the table.</paragraph>
        </section>
        <section ids="conclusion" names="conclusion">
            <title>Conclusion</title>
            <paragraph>What you’ve learned here is the fundamentals of how to add a table action that
                requires a form for data entry. This can easily be expanded from creating a
                snapshot to other API calls that require more complex forms to gather the
                necessary information.</paragraph>
            <paragraph>If you have feedback on how this tutorial could be improved, please feel free
                to submit a bug against <literal>Horizon</literal> in
                <reference name="launchpad" refuri="https://bugs.launchpad.net/horizon">launchpad</reference>.</paragraph>
        </section>
    </section>
</document>
