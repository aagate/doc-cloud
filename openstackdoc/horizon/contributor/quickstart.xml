<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/horizon/doc/source/contributor/quickstart.rst">
    <target refid="quickstart"></target>
    <section dupnames="quickstart" ids="quickstart id1" names="quickstart">
        <title>Quickstart</title>
        <note>
            <paragraph>This section has been tested for Horizon on Ubuntu (16.04-64) and RPM-based
                (RHEL 7.x) distributions. Feel free to add notes and any changes according
                to your experiences or operating system.</paragraph>
        </note>
        <section ids="linux-systems" names="linux\ systems">
            <title>Linux Systems</title>
            <paragraph>Install the prerequisite packages.</paragraph>
            <paragraph>On Ubuntu</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ sudo apt-get install git python-pip</literal_block>
            <paragraph>On RPM-based distributions (e.g., Fedora/RHEL/CentOS/Scientific Linux)</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ sudo yum install gcc git-core python-devel python-virtualenv openssl-devel libffi-devel which</literal_block>
            <note>
                <paragraph>Some tests rely on the Chrome web browser being installed. While the above
                    requirements will allow you to run and manually test Horizon, you will
                    need to install Chrome to run the full test suite.</paragraph>
            </note>
        </section>
        <section ids="setup" names="setup">
            <title>Setup</title>
            <paragraph>To begin setting up a Horizon development environment simply clone the Horizon
                git repository from <reference refuri="https://git.openstack.org/cgit/openstack/horizon">https://git.openstack.org/cgit/openstack/horizon</reference></paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ git clone https://git.openstack.org/openstack/horizon</literal_block>
            <paragraph>Next you will need to configure Horizon by adding a <literal>local_settings.py</literal> file.
                A good starting point is to use the example config with the following command,
                from within the <literal>horizon</literal> directory.</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ cp openstack_dashboard/local/local_settings.py.example openstack_dashboard/local/local_settings.py</literal_block>
            <paragraph>Horizon connects to the rest of OpenStack via a Keystone service catalog. By
                default Horizon looks for an endpoint at <literal>http://localhost:5000/v2.0</literal>; this
                can be customised by modifying the <literal>OPENSTACK_HOST</literal> and
                <literal>OPENSTACK_KEYSTONE_URL</literal> values in
                <literal>openstack_dashboard/local/local_settings.py</literal></paragraph>
            <note>
                <paragraph>The DevStack project (<reference refuri="http://devstack.org/">http://devstack.org/</reference>) can be used to install
                    an OpenStack development environment from scratch. For a local.conf that
                    enables most services that Horizon supports managing, see
                    <reference internal="True" refuri="ref/local_conf#local-conf"><inline classes="std std-ref">local.conf</inline></reference></paragraph>
            </note>
            <paragraph>Horizon uses <literal>tox</literal> to manage virtual environments for testing and other
                development tasks. You can install it with</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ pip install tox</literal_block>
            <paragraph>The <literal>tox</literal> environments provide wrappers around <literal>manage.py</literal>. For more
                information on <literal>manage.py</literal>, which is a Django command, see
                <reference refuri="https://docs.djangoproject.com/en/dev/ref/django-admin/">https://docs.djangoproject.com/en/dev/ref/django-admin/</reference></paragraph>
            <paragraph>To start the Horizon development server use the command below</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ tox -e runserver</literal_block>
            <note>
                <paragraph>The default port for runserver is 8000 which is already consumed by
                    heat-api-cfn in DevStack. If running in DevStack
                    <literal>tox -e runserver -- localhost:9000</literal> will start the test server at
                    <literal>http://localhost:9000</literal></paragraph>
            </note>
            <paragraph>Once the Horizon server is running, point a web browser to <literal>http://localhost</literal>
                or to the IP and port the server is listening for. Enter your Keystone
                credentials, log in and you’ll be presented with the Horizon dashboard.
                Congratulations!</paragraph>
        </section>
        <section ids="managing-settings" names="managing\ settings">
            <title>Managing Settings</title>
            <paragraph>You can save changes you made to
                <literal>openstack_dashboard/local/local_settings.py</literal> with the following command:</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ python manage.py migrate_settings --gendiff</literal_block>
            <note>
                <paragraph>This creates a <literal>local_settings.diff</literal> file which is a diff between
                    <literal>local_settings.py</literal> and <literal>local_settings.py.example</literal></paragraph>
            </note>
            <paragraph>If you upgrade Horizon, you might need to update your
                <literal>openstack_dashboard/local/local_settings.py</literal> file with new parameters from
                <literal>openstack_dashboard/local/local_settings.py.example</literal> to do so, first update
                Horizon</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ git remote update &amp;&amp; git pull --ff-only origin master</literal_block>
            <paragraph>Then update your  <literal>openstack_dashboard/local/local_settings.py</literal> file</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ mv openstack_dashboard/local/local_settings.py openstack_dashboard/local/local_settings.py.old
$ python manage.py migrate_settings</literal_block>
            <note>
                <paragraph>This applies <literal>openstack_dashboard/local/local_settings.diff</literal> on
                    <literal>openstack_dashboard/local/local_settings.py.example</literal> to regenerate an
                    <literal>openstack_dashboard/local/local_settings.py</literal> file.
                    The migration can sometimes have difficulties to migrate some settings, if
                    this happens you will be warned with a conflict message pointing to an
                    <literal>openstack_dashboard/local/local_settings.py_Some_DateTime.rej</literal> file.
                    In this file, you will see the lines which could not be automatically
                    changed and you will have to redo only these few changes manually instead
                    of modifying the full
                    <literal>openstack_dashboard/local/local_settings.py.example</literal> file.</paragraph>
            </note>
            <paragraph>When all settings have been migrated, it is safe to regenerate a clean diff in
                order to prevent Conflicts for future migrations</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ mv openstack_dashboard/local/local_settings.diff openstack_dashboard/local/local_settings.diff.old
$ python manage.py migrate_settings --gendiff</literal_block>
        </section>
        <section ids="editing-horizon-s-source" names="editing\ horizon's\ source">
            <title>Editing Horizon’s Source</title>
            <paragraph>Although DevStack installs and configures an instance of Horizon when running
                stack.sh, the preferred development setup follows the instructions above on the
                server/VM running DevStack. There are several advantages to maintaining a
                separate copy of the Horizon repo, rather than editing the DevStack installed
                copy.</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Source code changes aren’t as easily lost when running <literal>unstack.sh</literal> /
                        <literal>stack.sh</literal></paragraph>
                </list_item>
                <list_item>
                    <paragraph>The development server picks up source code changes while still running.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Log messages and print statements go directly to the console.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Debugging with <literal>pdb</literal> becomes much simpler to interact with.</paragraph>
                </list_item>
            </bullet_list>
            <note>
                <paragraph>To ensure that JS and CSS changes are picked up without a server restart, you
                    can disable compression with <literal>COMPRESS_ENABLED = False</literal> in your local
                    settings file.</paragraph>
            </note>
        </section>
        <section ids="horizon-s-structure" names="horizon's\ structure">
            <title>Horizon’s Structure</title>
            <paragraph>This project is a bit different from other OpenStack projects in that it has
                two very distinct components underneath it: <literal>horizon</literal>, and
                <literal>openstack_dashboard</literal>.</paragraph>
            <paragraph>The <literal>horizon</literal> directory holds the generic libraries and components that can
                be used in any Django project.</paragraph>
            <paragraph>The <literal>openstack_dashboard</literal> directory contains a reference Django project that
                uses <literal>horizon</literal>.</paragraph>
            <paragraph>For development, both pieces share an environment which (by default) is
                built with the <literal>tools/install_venv.py</literal> script. That script creates a
                virtualenv and installs all the necessary packages.</paragraph>
            <paragraph>If dependencies are added to either <literal>horizon</literal> or <literal>openstack_dashboard</literal>,
                they should be added to <literal>requirements.txt</literal>.</paragraph>
        </section>
        <section ids="project-structure" names="project\ structure">
            <title>Project Structure</title>
            <section ids="dashboard-configuration" names="dashboard\ configuration">
                <title>Dashboard configuration</title>
                <paragraph>To add a new dashboard to your project, you need to add a configuration file to
                    <literal>openstack_dashboard/local/enabled</literal> directory. For more information on this,
                    see <reference internal="True" refuri="../configuration/pluggable_panels#pluggable-settings-label"><inline classes="std std-ref">Pluggable Panels and Groups</inline></reference>.</paragraph>
            </section>
            <section ids="urls" names="urls">
                <title>URLs</title>
                <paragraph>Then you add a single line to your project’s <literal>urls.py</literal></paragraph>
                <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">url(r'', include(horizon.urls)),</literal_block>
                <paragraph>Those urls are automatically constructed based on the registered Horizon apps.
                    If a different URL structure is desired it can be constructed by hand.</paragraph>
            </section>
            <section ids="templates" names="templates">
                <title>Templates</title>
                <paragraph>Pre-built template tags generate navigation. In your <literal>nav.html</literal>
                    template you might have the following</paragraph>
                <literal_block highlight_args="{}" language="htmldjango" linenos="False" xml:space="preserve">{% load horizon %}

&lt;div class='nav'&gt;
  {% horizon_main_nav %}
&lt;/div&gt;</literal_block>
                <paragraph>And in your <literal>sidebar.html</literal> you might have</paragraph>
                <literal_block highlight_args="{}" language="htmldjango" linenos="False" xml:space="preserve">{% load horizon %}

&lt;div class='sidebar'&gt;
  {% horizon_dashboard_nav %}
&lt;/div&gt;</literal_block>
                <paragraph>These template tags are aware of the current “active” dashboard and panel
                    via template context variables and will render accordingly.</paragraph>
            </section>
        </section>
        <section ids="application-design" names="application\ design">
            <title>Application Design</title>
            <section ids="structure" names="structure">
                <title>Structure</title>
                <paragraph>An application would have the following structure (we’ll use project as
                    an example)</paragraph>
                <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">project/
|---__init__.py
|---dashboard.py &lt;-----Registers the app with Horizon and sets dashboard properties
|---overview/
|---images/
    |-- images
    |-- __init__.py
    |---panel.py &lt;-----Registers the panel in the app and defines panel properties
    |-- snapshots/
    |-- templates/
    |-- tests.py
    |-- urls.py
    |-- views.py
    ...
...</literal_block>
            </section>
            <section ids="dashboard-classes" names="dashboard\ classes">
                <title>Dashboard Classes</title>
                <paragraph>Inside of <literal>dashboard.py</literal> you would have a class definition and the
                    registration process</paragraph>
                <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">import horizon

....
# ObjectStorePanels is an example for a PanelGroup
# for panel classes in general, see below
class ObjectStorePanels(horizon.PanelGroup):
    slug = "object_store"
    name = _("Object Store")
    panels = ('containers',)


class Project(horizon.Dashboard):
    name = _("Project") # Appears in navigation
    slug = "project"    # Appears in URL
    # panels may be strings or refer to classes, such as
    # ObjectStorePanels
    panels = (BasePanels, NetworkPanels, ObjectStorePanels)
    default_panel = 'overview'
    ...

horizon.register(Project)</literal_block>
            </section>
            <section ids="panel-classes" names="panel\ classes">
                <title>Panel Classes</title>
                <paragraph>To connect a <reference internal="True" reftitle="horizon.Panel" refuri="ref/horizon#horizon.Panel"><literal classes="xref py py-class">Panel</literal></reference> with a <reference internal="True" reftitle="horizon.Dashboard" refuri="ref/horizon#horizon.Dashboard"><literal classes="xref py py-class">Dashboard</literal></reference> class
                    you register it in a <literal>panel.py</literal> file</paragraph>
                <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">import horizon

from openstack_dashboard.dashboards.project import dashboard


class Images(horizon.Panel):
    name = "Images"
    slug = 'images'
    permissions = ('openstack.roles.admin', 'my.openstack.permission',)
    policy_rules = (('endpoint', 'endpoint:rule'),)

# You could also register your panel with another application's dashboard
dashboard.Project.register(Images)</literal_block>
                <paragraph>By default a <reference internal="True" reftitle="horizon.Panel" refuri="ref/horizon#horizon.Panel"><literal classes="xref py py-class">Panel</literal></reference> class looks for a <literal>urls.py</literal> file in the
                    same directory as <literal>panel.py</literal> to include in the rollup of url patterns from
                    panels to dashboards to Horizon, resulting in a wholly extensible, configurable
                    URL structure.</paragraph>
            </section>
        </section>
    </section>
</document>
