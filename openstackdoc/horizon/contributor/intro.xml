<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/horizon/doc/source/contributor/intro.rst">
    <target refid="contributor-intro"></target>
    <section ids="horizon-basics contributor-intro" names="horizon\ basics contributor-intro">
        <title>Horizon Basics</title>
        <section ids="values" names="values">
            <title>Values</title>
            <block_quote>
                <paragraph>“Think simple” as my old master used to say - meaning reduce
                    the whole of its parts into the simplest terms, getting back
                    to first principles.</paragraph>
                <attribution>Frank Lloyd Wright</attribution>
            </block_quote>
            <paragraph>Horizon holds several key values at the core of its design and architecture:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Core Support: Out-of-the-box support for all core OpenStack projects.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Extensible: Anyone can add a new component as a “first-class citizen”.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Manageable: The core codebase should be simple and easy-to-navigate.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Consistent: Visual and interaction paradigms are maintained throughout.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Stable: A reliable API with an emphasis on backwards-compatibility.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Usable: Providing an <emphasis>awesome</emphasis> interface that people <emphasis>want</emphasis> to use.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>The only way to attain and uphold those ideals is to make it <emphasis>easy</emphasis> for
                developers to implement those values.</paragraph>
        </section>
        <section ids="history" names="history">
            <title>History</title>
            <paragraph>Horizon started life as a single app to manage OpenStack’s compute project.
                As such, all it needed was a set of views, templates, and API calls.</paragraph>
            <paragraph>From there it grew to support multiple OpenStack projects and APIs gradually,
                arranged rigidly into “dash” and “syspanel” groupings.</paragraph>
            <paragraph>During the “Diablo” release cycle an initial plugin system was added using
                signals to hook in additional URL patterns and add links into the “dash”
                and “syspanel” navigation.</paragraph>
            <paragraph>This incremental growth served the goal of “Core Support” phenomenally, but
                left “Extensible” and “Manageable” behind. And while the other key values took
                shape of their own accord, it was time to re-architect for an extensible,
                modular future.</paragraph>
        </section>
        <section ids="the-current-architecture-how-it-meets-our-values" names="the\ current\ architecture\ &amp;\ how\ it\ meets\ our\ values">
            <title>The Current Architecture &amp; How It Meets Our Values</title>
            <paragraph>At its core, <strong>Horizon should be a registration pattern for
                    applications to hook into</strong>. Here’s what that means and how it is
                implemented in terms of our values:</paragraph>
            <section ids="core-support" names="core\ support">
                <title>Core Support</title>
                <paragraph>Horizon ships with three central dashboards, a “User Dashboard”, a
                    “System Dashboard”, and a “Settings” dashboard. Between these three they
                    cover the core OpenStack applications and deliver on Core Support.</paragraph>
                <paragraph>The Horizon application also ships with a set of API abstractions
                    for the core OpenStack projects in order to provide a consistent, stable set
                    of reusable methods for developers. Using these abstractions, developers
                    working on Horizon don’t need to be intimately familiar with the APIs of
                    each OpenStack project.</paragraph>
            </section>
            <section ids="extensible" names="extensible">
                <title>Extensible</title>
                <paragraph>A Horizon dashboard application is based around the <reference internal="True" reftitle="horizon.Dashboard" refuri="ref/horizon#horizon.Dashboard"><literal classes="xref py py-class">Dashboard</literal></reference>
                    class that provides a consistent API and set of capabilities for both
                    core OpenStack dashboard apps shipped with Horizon and equally for third-party
                    apps. The <reference internal="True" reftitle="horizon.Dashboard" refuri="ref/horizon#horizon.Dashboard"><literal classes="xref py py-class">Dashboard</literal></reference> class is treated as a top-level
                    navigation item.</paragraph>
                <paragraph>Should a developer wish to provide functionality within an existing dashboard
                    (e.g. adding a monitoring panel to the user dashboard) the simple registration
                    pattern makes it possible to write an app which hooks into other dashboards
                    just as easily as creating a new dashboard. All you have to do is import the
                    dashboard you wish to modify.</paragraph>
            </section>
            <section ids="manageable" names="manageable">
                <title>Manageable</title>
                <paragraph>Within the application, there is a simple method for registering a
                    <reference internal="True" reftitle="horizon.Panel" refuri="ref/horizon#horizon.Panel"><literal classes="xref py py-class">Panel</literal></reference> (sub-navigation items). Each panel contains the
                    necessary logic (views, forms, tests, etc.) for that interface. This granular
                    breakdown prevents files (such as <literal>api.py</literal>) from becoming thousands of
                    lines long and makes code easy to find by correlating it directly to the
                    navigation.</paragraph>
            </section>
            <section ids="consistent" names="consistent">
                <title>Consistent</title>
                <paragraph>By providing the necessary core classes to build from, as well as a
                    solid set of reusable templates and additional tools (base form classes,
                    base widget classes, template tags, and perhaps even class-based views)
                    we can maintain consistency across applications.</paragraph>
            </section>
            <section ids="stable" names="stable">
                <title>Stable</title>
                <paragraph>By architecting around these core classes and reusable components we
                    create an implicit contract that changes to these components will be
                    made in the most backwards-compatible ways whenever possible.</paragraph>
            </section>
            <section ids="usable" names="usable">
                <title>Usable</title>
                <paragraph>Ultimately that’s up to each and every developer that touches the code,
                    but if we get all the other goals out of the way then we are free to focus
                    on the best possible experience.</paragraph>
                <seealso>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph><reference internal="True" refuri="quickstart#quickstart"><inline classes="std std-ref">Quickstart</inline></reference> A short guide to getting started with using Horizon.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" refuri="faq#faq"><inline classes="std std-ref">Frequently Asked Questions</inline></reference> Common questions and answers.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" refuri="../glossary#glossary"><inline classes="std std-ref">Glossary</inline></reference> Common terms and their definitions.</paragraph>
                        </list_item>
                    </bullet_list>
                </seealso>
            </section>
        </section>
    </section>
</document>
