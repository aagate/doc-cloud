<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/horizon/doc/source/contributor/tutorials/plugin.rst">
    <target refid="tutorials-plugin"></target>
    <section ids="tutorial-creating-an-horizon-plugin tutorials-plugin" names="tutorial:\ creating\ an\ horizon\ plugin tutorials-plugin">
        <title>Tutorial: Creating an Horizon Plugin</title>
        <section ids="why-should-i-package-my-code-as-a-plugin" names="why\ should\ i\ package\ my\ code\ as\ a\ plugin?">
            <title>Why should I package my code as a plugin?</title>
            <paragraph>We highly encourage that you write and maintain your code using our plugin
                architecture. A plugin by definition means the ability to be connected. In
                practical terms, plugins are a way to extend and add to the functionality that
                already exists. You can control its content and progress at a rate independent
                of Horizon. If you write and package your code as a plugin, it will continue to
                work in future releases.</paragraph>
            <paragraph>Writing your code as a plugin also modularizes your code making it easier to
                translate and test. This also makes it easier for deployers to consume your code
                allowing selective enablement of features. We are currently using this pattern
                internally for our dashboards.</paragraph>
        </section>
        <section ids="creating-the-plugin" names="creating\ the\ plugin">
            <title>Creating the Plugin</title>
            <paragraph>This tutorial assumes you have a basic understanding of Python, HTML,
                JavaScript. Knowledge of AngularJS is optional but recommended if you are
                attempting to create an Angular plugin.</paragraph>
            <section ids="name-of-your-repository" names="name\ of\ your\ repository">
                <title>Name of your repository</title>
                <paragraph>Needless to say, it is important to choose a meaningful repository name.</paragraph>
                <paragraph>In addition, if you plan to support translation on your dashboard plugin,
                    it is recommended to choose a name like <literal>xxxx-dashboard</literal>
                    (or <literal>xxxx-ui</literal>. <literal>xxxx-horizon</literal>). The OpenStack CI infra script
                    considers a repository with these suffixes as Django project.</paragraph>
            </section>
            <section ids="types-of-plugins-that-add-content" names="types\ of\ plugins\ that\ add\ content">
                <title>Types of Plugins that add content</title>
                <paragraph>The file structure for your plugin type will be different depending on your
                    needs. Your plugin can be categorized into two types:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Plugins that create new panels or dashboards</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Plugins that modify existing workflows, actions, etc… (Angular only)</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>We will cover the basics of working with panels for both Python and Angular.
                    If you are interested in creating a new panel, follow the steps below.</paragraph>
                <note>
                    <paragraph>This tutorial shows you how to create a new panel. If you are
                        interested in creating a new dashboard plugin, use the file
                        structure from <reference internal="True" refuri="dashboard#tutorials-dashboard"><inline classes="std std-ref">Tutorial: Building a Dashboard using Horizon</inline></reference> instead.</paragraph>
                </note>
            </section>
            <section ids="file-structure" names="file\ structure">
                <title>File Structure</title>
                <paragraph>Below is a skeleton of what your plugin should look like.:</paragraph>
                <literal_block xml:space="preserve">myplugin
│
├── myplugin
│   ├── __init__.py
│   │
│   ├── enabled
│   │   └──_31000_myplugin.py
│   │
│   ├── api
│   │   ├──__init__.py
│   │   ├── my_rest_api.py
│   │   └── myservice.py
│   │
│   ├── content
│   │   ├──__init__.py
│   │   └── mypanel
│   │       ├── __init__.py
│   │       ├── panel.py
│   │       ├── tests.py
│   │       ├── urls.py
│   │       ├── views.py
│   │       └── templates
│   │           └── mypanel
│   │               └── index.html
│   │
│   └── static
│   |   └── dashboard
│   |       └── identity
│   |           └── myplugin
│   |               └── mypanel
│   |                   ├── mypanel.html
│   |                   ├── mypanel.js
│   |                   └── mypanel.scss
│   │
│   └── locale
│       └── &lt;lang&gt;
│            └── LC_MESSAGES
│                ├── django.po
│                └── djangojs.po
│
├── setup.py
├── setup.cfg
├── LICENSE
├── MANIFEST.in
├── README.rst
├── babel-django.cfg
└── babel-djangojs.cfg</literal_block>
                <paragraph>If you are creating a Python plugin, you may ignore the <literal>static</literal> folder. Most
                    of the classes you need are provided for in Python. If you intend on adding
                    custom front-end logic, you will need to include additional JavaScript here.</paragraph>
                <paragraph>An AngularJS plugin is a collection of JavaScript files or static resources.
                    Because it runs entirely in your browser, we need to place all of our static
                    resources inside the <literal>static</literal> folder. This ensures that the Django static
                    collector picks it up and distributes it to the browser correctly.</paragraph>
            </section>
            <section ids="the-enabled-file" names="the\ enabled\ file">
                <title>The Enabled File</title>
                <paragraph>The enabled folder contains the configuration file(s) that registers your
                    plugin with Horizon. The file is prefixed with an alpha-numeric string that
                    determines the load order of your plugin. For more information on what you can
                    include in this file, see pluggable settings in <reference internal="True" refuri="../../configuration/settings#install-settings"><inline classes="std std-ref">Settings Reference</inline></reference>.</paragraph>
                <paragraph>_31000_myplugin.py:</paragraph>
                <literal_block xml:space="preserve"># The name of the panel to be added to HORIZON_CONFIG. Required.
PANEL = 'mypanel'

# The name of the dashboard the PANEL associated with. Required.
PANEL_DASHBOARD = 'identity'

# Python panel class of the PANEL to be added.
ADD_PANEL = 'myplugin.content.mypanel.panel.MyPanel'

# A list of applications to be prepended to INSTALLED_APPS
ADD_INSTALLED_APPS = ['myplugin']

# A list of AngularJS modules to be loaded when Angular bootstraps.
ADD_ANGULAR_MODULES = ['horizon.dashboard.identity.myplugin.mypanel']

# Automatically discover static resources in installed apps
AUTO_DISCOVER_STATIC_FILES = True

# A list of js files to be included in the compressed set of files
ADD_JS_FILES = []

# A list of scss files to be included in the compressed set of files
ADD_SCSS_FILES = ['dashboard/identity/myplugin/mypanel/mypanel.scss']</literal_block>
                <note>
                    <paragraph>Currently, AUTO_DISCOVER_STATIC_FILES = True will only discover JavaScript files,
                        not SCSS files.</paragraph>
                </note>
            </section>
            <section ids="my-rest-api-py" names="my_rest_api.py">
                <title>my_rest_api.py</title>
                <paragraph>This file will likely be necessary if creating a plugin using Angular. Your
                    plugin will need to communicate with a new service or require new interactions
                    with a service already supported by Horizon. In this particular example, the
                    plugin will augment the support for the already supported Identity service,
                    Keystone. This file serves to define new REST interfaces for the plugin’s
                    client-side to communicate with Horizon. Typically, the REST interfaces here
                    make calls into <literal>myservice.py</literal>.</paragraph>
                <paragraph>This file is unnecessary in a purely Django based plugin, or if your Angular
                    based plugin is relying on CORS support in the desired service. For more
                    information on CORS, see
                    <reference refuri="https://docs.openstack.org/oslo.middleware/latest/admin/cross-project-cors.html">https://docs.openstack.org/oslo.middleware/latest/admin/cross-project-cors.html</reference></paragraph>
            </section>
            <section ids="myservice-py" names="myservice.py">
                <title>myservice.py</title>
                <paragraph>This file will likely be necessary if creating a Django or Angular driven
                    plugin. This file is intended to act as a convenient location for interacting
                    with the new service this plugin is supporting. While interactions with the
                    service can be handled in the <literal>views.py</literal>, isolating the logic is an
                    established pattern in Horizon.</paragraph>
            </section>
            <section ids="panel-py" names="panel.py">
                <title>panel.py</title>
                <paragraph>We define a panel where our plugin’s content will reside in. This is currently a
                    necessity even for Angular plugins. The slug is the panel’s unique identifier
                    and is often use as part of the URL. Make sure that it matches what you have in
                    your enabled file.:</paragraph>
                <literal_block xml:space="preserve">from django.utils.translation import ugettext_lazy as _
import horizon


class MyPanel(horizon.Panel):
    name = _("My Panel")
    slug = "mypanel"</literal_block>
            </section>
            <section ids="tests-py" names="tests.py">
                <title>tests.py</title>
                <paragraph>Write some tests for the Django portion of your plugin and place them here.</paragraph>
            </section>
            <section ids="urls-py" names="urls.py">
                <title>urls.py</title>
                <paragraph>Now that we have a panel, we need to provide a URL so that users can visit our
                    new panel! This URL generally will point to a view.:</paragraph>
                <literal_block xml:space="preserve">from django.conf.urls import url

from myplugin.content.mypanel import views

urlpatterns = [
    url(r'^$', views.IndexView.as_view(), name='index'),
]</literal_block>
            </section>
            <section ids="views-py" names="views.py">
                <title>views.py</title>
                <paragraph>Because rendering is done client-side, all our view needs is to reference some
                    HTML page. If you are writing a Python plugin, this view can be much more
                    complex. Refer to the topic guides for more details.:</paragraph>
                <literal_block xml:space="preserve">from django.views import generic


class IndexView(generic.TemplateView):
    template_name = 'identity/mypanel/index.html'</literal_block>
            </section>
            <section dupnames="index.html" ids="index-html">
                <title>index.html</title>
                <paragraph>The index HTML is where rendering occurs. In this example, we are only using
                    Django. If you are interested in using Angular directives instead, read the
                    AngularJS section below.:</paragraph>
                <literal_block xml:space="preserve">{% extends 'base.html' %}
{% load i18n %}
{% block title %}{% trans "My plugin" %}{% endblock %}

{% block page_header %}
  {% include "horizon/common/_domain_page_header.html"
    with title=_("My Panel") %}
{% endblock page_header %}

{% block main %}
  Hello world!
{% endblock %}</literal_block>
                <paragraph>At this point, you have a very basic plugin. Note that new templates are
                    required to extend base.html. Including base.html is important for a number of
                    reasons. It is the template that contains all of your static resources along
                    with any functionality external to your panel (things like navigation, context
                    selection, etc…). As of this moment, this is also true for Angular plugins.</paragraph>
            </section>
            <section ids="manifest-in" names="manifest.in">
                <title>MANIFEST.in</title>
                <paragraph>This file is responsible for listing the paths you want included in your tar.:</paragraph>
                <literal_block xml:space="preserve">include setup.py

recursive-include myplugin *.js *.html *.scss</literal_block>
            </section>
            <section ids="setup-py" names="setup.py">
                <title>setup.py</title>
                <literal_block xml:space="preserve"># THIS FILE IS MANAGED BY THE GLOBAL REQUIREMENTS REPO - DO NOT EDIT
import setuptools

# In python &lt; 2.7.4, a lazy loading of package `pbr` will break
# setuptools if some other modules registered functions in `atexit`.
# solution from: http://bugs.python.org/issue15881#msg170215
try:
    import multiprocessing  # noqa
except ImportError:
    pass

setuptools.setup(
    setup_requires=['pbr&gt;=1.8'],
    pbr=True)</literal_block>
            </section>
            <section ids="setup-cfg" names="setup.cfg">
                <title>setup.cfg</title>
                <literal_block xml:space="preserve">[metadata]
name = myplugin
summary = A panel plugin for OpenStack Dashboard
description-file =
    README.rst
author = myname
author_email = myemail
home-page = https://docs.openstack.org/horizon/latest/
classifiers = [
    Environment :: OpenStack
    Framework :: Django
    Intended Audience :: Developers
    Intended Audience :: System Administrators
    License :: OSI Approved :: Apache Software License
    Operating System :: POSIX :: Linux
    Programming Language :: Python
    Programming Language :: Python :: 2
    Programming Language :: Python :: 2.7
    Programming Language :: Python :: 3.5

[files]
packages =
    myplugin</literal_block>
            </section>
        </section>
        <section ids="angularjs-plugin" names="angularjs\ plugin">
            <title>AngularJS Plugin</title>
            <paragraph>If you have no plans to add AngularJS to your plugin, you may skip this section.
                In the tutorial below, we will show you how to customize your panel using
                Angular.</paragraph>
            <section dupnames="index.html" ids="id1">
                <title>index.html</title>
                <paragraph>The index HTML is where rendering occurs and serves as an entry point for
                    Angular. This is where we start to diverge from the traditional Python plugin.
                    In this example, we use a Django template as the glue to our Angular template.
                    Why are we going through a Django template for an Angular plugin? Long story
                    short, <literal>base.html</literal> contains the navigation piece that we still need for each
                    panel.</paragraph>
                <literal_block xml:space="preserve">{% extends 'base.html' %}
{% load i18n %}
{% block title %}{% trans "My panel" %}{% endblock %}

{% block page_header %}
  &lt;hz-page-header
    header="{$ 'My panel' | translate $}"
    description="{$ 'My custom panel!' | translate $}"&gt;
  &lt;/hz-page-header&gt;
{% endblock page_header %}

{% block main %}
  &lt;ng-include
    src="'{{ STATIC_URL }}dashboard/identity/myplugin/mypanel/mypanel.html'"&gt;
  &lt;/ng-include&gt;
{% endblock %}</literal_block>
                <paragraph>This template contains both Django and AngularJS code. Angular is denoted by
                    {$..$} while Django is denoted by {{..}} and {%..%}. This template gets
                    processed twice, once by Django on the server-side and once more by Angular on
                    the client-side. This means that the expressions in {{..}} and {%..%} are
                    substituted with values by the time it reaches your Angular template.</paragraph>
                <paragraph>What you chose to include in <literal>block main</literal> is entirely up to you. Since you are
                    creating an Angular plugin, we recommend that you keep everything in this
                    section Angular. Do not mix Python code in here! If you find yourself passing in
                    Python data, do it via our REST services instead.</paragraph>
                <paragraph>Remember to always use <literal>STATIC_URL</literal> when referencing your static resources.
                    This ensures that changes to the static path in settings will continue to serve
                    your static resources properly.</paragraph>
                <note>
                    <paragraph>Angular’s directives are prefixed with ng. Similarly, Horizon’s directives
                        are prefixed with hz. You can think of them as namespaces.</paragraph>
                </note>
            </section>
            <section ids="mypanel-js" names="mypanel.js">
                <title>mypanel.js</title>
                <paragraph>Your controller is the glue between the model and the view. In this example, we
                    are going to give it some fake data to render. To load more complex data,
                    consider using the $http service.</paragraph>
                <literal_block xml:space="preserve">(function() {
  'use strict';

  angular
    .module('horizon.dashboard.identity.myplugin.mypanel', [])
    .controller('horizon.dashboard.identity.myPluginController',
      myPluginController);

  myPluginController.$inject = [ '$http' ];

  function myPluginController($http) {
    var ctrl = this;
    ctrl.items = [
      { name: 'abc', id: 123 },
      { name: 'efg', id: 345 },
      { name: 'hij', id: 678 }
    ];
  }
})();</literal_block>
                <paragraph>This is a basic example where we mocked the data. For exercise, load your data
                    using the <literal>$http</literal> service.</paragraph>
            </section>
            <section ids="mypanel-html" names="mypanel.html">
                <title>mypanel.html</title>
                <paragraph>This is our view. In this example, we are looping through the list of items
                    provided by the controller and displaying the name and id. The important thing
                    to note is the reference to our controller using the <literal>ng-controller</literal>
                    directive.</paragraph>
                <literal_block xml:space="preserve">&lt;div ng-controller="horizon.dashboard.identity.myPluginController as ctrl"&gt;
  &lt;div&gt;Loading data from your controller:&lt;/div&gt;
  &lt;ul&gt;
    &lt;li ng-repeat="item in ctrl.items"&gt;
      &lt;span class="c1"&gt;{$ item.name $}&lt;/span&gt;
      &lt;span class="c2"&gt;{$ item.id $}&lt;/span&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</literal_block>
            </section>
            <section ids="mypanel-scss" names="mypanel.scss">
                <title>mypanel.scss</title>
                <paragraph>You can choose to customize your panel by providing your own scss.
                    Be sure to include it in your enabled file via the <literal>ADD_SCSS_FILES</literal> setting.</paragraph>
            </section>
        </section>
        <section ids="translation-support" names="translation\ support">
            <title>Translation Support</title>
            <paragraph>A general instruction on how to enable translation support is described in
                the Infrastructure User Manual <footnote_reference auto="1" ids="id2" refid="id4">1</footnote_reference>.</paragraph>
            <paragraph>This section describes topics specific to Horizon plugins.</paragraph>
            <section ids="add-installed-apps" names="add_installed_apps">
                <title>ADD_INSTALLED_APPS</title>
                <paragraph>Be sure to include <literal>&lt;modulename&gt;</literal> (<literal>myplugin</literal> in this example)
                    in <literal>ADD_INSTALLED_APPS</literal> in the corresponding <literal>enabled</literal> file.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>If you are preparing a new plugin, you will use <literal>&lt;modulename&gt;</literal>
                            as <literal>INSTALLED_APPS</literal> in most cases as suggested in this tutorial.
                            This is good and there is nothing more to do.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>If for some reason your plugin needs to register other python modules
                            to <literal>ADD_INSTALLED_APPS</literal>, ensure that you include its <literal>&lt;modulename&gt;</literal>
                            additionally.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>This comes from the combination of the following two reasons.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Django looks for translation message catalogs from each path specified in
                            <literal>INSTALLED_APPS</literal> <footnote_reference auto="1" ids="id3" refid="id5">2</footnote_reference>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>OpenStack infra scripts assumes translation message catalogs are placed
                            under <literal>&lt;modulename&gt;/locale</literal> (for example <literal>myplugin/locale</literal>).</paragraph>
                    </list_item>
                </bullet_list>
                <footnote auto="1" backrefs="id2" ids="id4" names="1">
                    <label>1</label>
                    <paragraph><reference refuri="https://docs.openstack.org/infra/manual/creators.html#enabling-translation-infrastructure">https://docs.openstack.org/infra/manual/creators.html#enabling-translation-infrastructure</reference></paragraph>
                </footnote>
                <footnote auto="1" backrefs="id3" ids="id5" names="2">
                    <label>2</label>
                    <paragraph><reference refuri="https://docs.djangoproject.com/es/1.9/topics/i18n/translation/#how-django-discovers-translations">https://docs.djangoproject.com/es/1.9/topics/i18n/translation/#how-django-discovers-translations</reference></paragraph>
                </footnote>
            </section>
            <section ids="myplugin-locale" names="myplugin/locale">
                <title>myplugin/locale</title>
                <paragraph>Translated message catalog files (PO files) are placed under this
                    directory.</paragraph>
            </section>
            <section ids="babel-django-cfg-babel-djangojs-cfg" names="babel-django.cfg,\ babel-djangojs.cfg">
                <title>babel-django.cfg, babel-djangojs.cfg</title>
                <paragraph>These files are used to extract messages by <literal>pybabel</literal>:
                    <literal>babel-django.cfg</literal> for python code and template files, and
                    <literal>babel-djangojs.cfg</literal> for JavaScript files.</paragraph>
                <paragraph>They are required to enable translation support by OpenStack CI infra.
                    If they do not exist, the translation jobs will skip processing for
                    your project.</paragraph>
            </section>
        </section>
        <section ids="installing-your-plugin" names="installing\ your\ plugin">
            <title>Installing Your Plugin</title>
            <paragraph>Now that you have a complete plugin, it is time to install and test it. The
                instructions below assume that you have a working plugin.</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph><literal>plugin</literal> is the location of your plugin</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>horizon</literal> is the location of horizon</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>package</literal> is the complete name of your packaged plugin</paragraph>
                </list_item>
            </bullet_list>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>Run “cd <literal>plugin</literal> &amp; python setup.py sdist”</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Run “cp -rv enabled <literal>horizon</literal>/openstack_dashboard/local/”</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Run “<literal>horizon</literal>/tools/with_venv.sh pip install dist/<literal>package</literal>.tar.gz”</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Restart Apache or your Django test server</paragraph>
                </list_item>
            </enumerated_list>
            <note>
                <paragraph>Step 3 installs your package into the Horizon’s virtual environment. You can
                    install your plugin without using <literal>with_venv.sh</literal> and <literal>pip</literal>. The package
                    would simply be installed in the <literal>PYTHON_PATH</literal> of the system instead.</paragraph>
            </note>
            <paragraph>If you are able to hit the URL pattern in <literal>urls.py</literal> in your browser, you have
                successfully deployed your plugin! For plugins that do not have a URL, check
                that your static resources are loaded using the browser inspector.</paragraph>
            <paragraph>Assuming you implemented <literal>my_rest_api.py</literal>, you can use a REST client to hit
                the url directly and test it. There should be many REST clients available on
                your web browser.</paragraph>
            <paragraph>Note that you may need to rebuild your virtual environment if your plugin is not
                showing up properly. If your plugin does not show up properly, check your
                <literal>.venv</literal> folder to make sure the plugin’s content is as you expect.</paragraph>
            <note>
                <paragraph>To uninstall, use <literal>pip uninstall</literal>. You will also need to remove the enabled
                    file from the <literal>local/enabled</literal> folder.</paragraph>
            </note>
        </section>
    </section>
</document>
