<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/configuration/block-storage/drivers/windows-iscsi-volume-driver.rst">
    <section ids="windows-iscsi-volume-driver" names="windows\ iscsi\ volume\ driver">
        <title>Windows iSCSI volume driver</title>
        <paragraph>Windows Server 2012 and Windows Storage Server 2012 offer an integrated iSCSI
            Target service that can be used with OpenStack Block Storage in your stack.
            Being entirely a software solution, consider it in particular for mid-sized
            networks where the costs of a SAN might be excessive.</paragraph>
        <paragraph>The Windows Block Storage driver works with OpenStack Compute on any
            hypervisor. It includes snapshotting support and the <literal>boot from volume</literal>
            feature.</paragraph>
        <paragraph>This driver creates volumes backed by fixed-type VHD images on Windows Server
            2012 and dynamic-type VHDX on Windows Server 2012 R2, stored locally on a
            user-specified path. The system uses those images as iSCSI disks and exports
            them through iSCSI targets. Each volume has its own iSCSI target.</paragraph>
        <paragraph>This driver has been tested with Windows Server 2012 and Windows Server R2
            using the Server and Storage Server distributions.</paragraph>
        <paragraph>Install the <literal>cinder-volume</literal> service as well as the required Python components
            directly onto the Windows node.</paragraph>
        <paragraph>You may install and configure <literal>cinder-volume</literal> and its dependencies manually
            using the following guide or you may use the <literal>Cinder Volume Installer</literal>,
            presented below.</paragraph>
        <section ids="installing-using-the-openstack-cinder-volume-installer" names="installing\ using\ the\ openstack\ cinder\ volume\ installer">
            <title>Installing using the OpenStack cinder volume installer</title>
            <paragraph>In case you want to avoid all the manual setup, you can use Cloudbase
                Solutionsâ€™ installer. You can find it at
                <reference refuri="https://www.cloudbase.it/downloads/CinderVolumeSetup_Beta.msi">https://www.cloudbase.it/downloads/CinderVolumeSetup_Beta.msi</reference>. It installs an
                independent Python environment, in order to avoid conflicts with existing
                applications, dynamically generates a <literal>cinder.conf</literal> file based on the
                parameters provided by you.</paragraph>
            <paragraph><literal>cinder-volume</literal> will be configured to run as a Windows Service, which can
                be restarted using:</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">PS C:\&gt; net stop cinder-volume ; net start cinder-volume</literal_block>
            <paragraph>The installer can also be used in unattended mode. More details about how to
                use the installer and its features can be found at <reference refuri="https://www.cloudbase.it">https://www.cloudbase.it</reference>.</paragraph>
        </section>
        <section ids="windows-server-configuration" names="windows\ server\ configuration">
            <title>Windows Server configuration</title>
            <paragraph>The required service in order to run <literal>cinder-volume</literal> on Windows is
                <literal>wintarget</literal>. This will require the iSCSI Target Server Windows feature
                to be installed. You can install it by running the following command:</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">PS C:\&gt; Add-WindowsFeature
FS-iSCSITarget-ServerAdd-WindowsFeatureFS-iSCSITarget-Server</literal_block>
            <note>
                <paragraph>The Windows Server installation requires at least 16 GB of disk space. The
                    volumes hosted by this node need the extra space.</paragraph>
            </note>
            <paragraph>For <literal>cinder-volume</literal> to work properly, you must configure NTP as explained
                in <reference internal="True" refid="configure-ntp-windows"><inline classes="std std-ref">Configure NTP</inline></reference>.</paragraph>
            <paragraph>Next, install the requirements as described in <reference internal="True" refid="windows-requirements"><inline classes="std std-ref">Requirements</inline></reference>.</paragraph>
        </section>
        <section ids="getting-the-code" names="getting\ the\ code">
            <title>Getting the code</title>
            <paragraph>Git can be used to download the necessary source code. The installer to run Git
                on Windows can be downloaded here:</paragraph>
            <paragraph><reference refuri="https://git-for-windows.github.io/">https://git-for-windows.github.io/</reference></paragraph>
            <paragraph>Once installed, run the following to clone the OpenStack Block Storage code:</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">PS C:\&gt; git.exe clone https://git.openstack.org/openstack/cinder</literal_block>
        </section>
        <section ids="configure-cinder-volume" names="configure\ cinder-volume">
            <title>Configure cinder-volume</title>
            <paragraph>The <literal>cinder.conf</literal> file may be placed in <literal>C:\etc\cinder</literal>. Below is a
                configuration sample for using the Windows iSCSI Driver:</paragraph>
            <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[DEFAULT]
auth_strategy = keystone
volume_name_template = volume-%s
volume_driver = cinder.volume.drivers.windows.WindowsDriver
glance_api_servers = IP_ADDRESS:9292
rabbit_host = IP_ADDRESS
rabbit_port = 5672
sql_connection = mysql+pymysql://root:Passw0rd@IP_ADDRESS/cinder
windows_iscsi_lun_path = C:\iSCSIVirtualDisks
rabbit_password = Passw0rd
logdir = C:\OpenStack\Log\
image_conversion_dir = C:\ImageConversionDir
debug = True</literal_block>
            <paragraph>The following table contains a reference to the only driver specific
                option that will be used by the Block Storage Windows driver:</paragraph>
            <comment xml:space="preserve">Warning: Do not edit this file. It is automatically generated from the
software project's code and your changes will be overwritten.

The tool to generate this file lives in openstack-doc-tools repository.

Please make any changes needed in the code, then run the
autogenerate-config-doc tool from the openstack-doc-tools repository, or
ask for help on the documentation mailing list, IRC channel or meeting.</comment>
            <target refid="cinder-windows"></target>
            <table classes="config-ref-table" ids="id1 cinder-windows" names="cinder-windows">
                <title>Description of Windows configuration options</title>
                <tgroup cols="2">
                    <colspec colwidth="50"></colspec>
                    <colspec colwidth="50"></colspec>
                    <thead>
                        <row>
                            <entry>
                                <paragraph>Configuration option = Default value</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Description</paragraph>
                            </entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><strong>[DEFAULT]</strong></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>windows_iscsi_lun_path</literal> = <literal>C:\iSCSIVirtualDisks</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph>(String) Path to store VHD backed volumes</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <section ids="run-cinder-volume" names="run\ cinder-volume">
                <title>Run cinder-volume</title>
                <paragraph>After configuring <literal>cinder-volume</literal> using the <literal>cinder.conf</literal> file, you may
                    use the following commands to install and run the service (note that you
                    must replace the variables with the proper paths):</paragraph>
                <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">PS C:\&gt; python $CinderClonePath\setup.py install
PS C:\&gt; cmd /c C:\python27\python.exe c:\python27\Scripts\cinder-volume" --config-file $CinderConfPath</literal_block>
            </section>
            <section ids="reference-material" names="reference\ material">
                <title>Reference material</title>
                <target refid="configure-ntp-windows"></target>
            </section>
            <section ids="configure-ntp configure-ntp-windows" names="configure\ ntp configure-ntp-windows">
                <title>Configure NTP</title>
                <paragraph>Network time services must be configured to ensure proper operation
                    of the OpenStack nodes. To set network time on your Windows host you
                    must run the following commands:</paragraph>
                <literal_block highlight_args="{}" language="bat" linenos="False" xml:space="preserve">C:\&gt;net stop w32time
C:\&gt;w32tm /config /manualpeerlist:pool.ntp.org,0x8 /syncfromflags:MANUAL
C:\&gt;net start w32time</literal_block>
                <paragraph>Keep in mind that the node will have to be time synchronized with
                    the other nodes of your OpenStack environment, so it is important to use
                    the same NTP server. Note that in case of an Active Directory environment,
                    you may do this only for the AD Domain Controller.</paragraph>
                <target refid="windows-requirements"></target>
            </section>
        </section>
        <section ids="requirements windows-requirements" names="requirements windows-requirements">
            <title>Requirements</title>
            <section ids="python" names="python">
                <title>Python</title>
                <paragraph>Python 2.7 32bit must be installed as most of the libraries are not
                    working properly on the 64bit version.</paragraph>
                <paragraph><strong>Setting up Python prerequisites</strong></paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Download and install Python 2.7 using the MSI installer from here:</paragraph>
                        <paragraph><reference name="python-2.7.3.msi download" refuri="https://www.python.org/ftp/python/2.7.3/python-2.7.3.msi">python-2.7.3.msi download</reference><target ids="python-2-7-3-msi-download" names="python-2.7.3.msi\ download" refuri="https://www.python.org/ftp/python/2.7.3/python-2.7.3.msi"></target></paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">PS C:\&gt; $src = "https://www.python.org/ftp/python/2.7.3/python-2.7.3.msi"
PS C:\&gt; $dest = "$env:temp\python-2.7.3.msi"
PS C:\&gt; Invoke-WebRequest â€“Uri $src â€“OutFile $dest
PS C:\&gt; Unblock-File $dest
PS C:\&gt; Start-Process $dest</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Make sure that the <literal>Python</literal> and <literal>Python\Scripts</literal> paths are set up
                            in the <literal>PATH</literal> environment variable.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">PS C:\&gt; $oldPath = [System.Environment]::GetEnvironmentVariable("Path")
PS C:\&gt; $newPath = $oldPath + ";C:\python27\;C:\python27\Scripts\"
PS C:\&gt; [System.Environment]::SetEnvironmentVariable("Path", $newPath, [System.EnvironmentVariableTarget]::User</literal_block>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="python-dependencies" names="python\ dependencies">
                <title>Python dependencies</title>
                <paragraph>The following packages need to be downloaded and manually installed:</paragraph>
                <definition_list>
                    <definition_list_item>
                        <term>setuptools</term>
                        <definition>
                            <paragraph><reference refuri="https://pypi.python.org/packages/2.7/s/setuptools/setuptools-0.6c11.win32-py2.7.exe">https://pypi.python.org/packages/2.7/s/setuptools/setuptools-0.6c11.win32-py2.7.exe</reference></paragraph>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term>pip</term>
                        <definition>
                            <paragraph><reference refuri="https://pip.pypa.io/en/latest/installing/">https://pip.pypa.io/en/latest/installing/</reference></paragraph>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term>PyMySQL</term>
                        <definition>
                            <paragraph><reference refuri="http://codegood.com/download/10/">http://codegood.com/download/10/</reference></paragraph>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term>PyWin32</term>
                        <definition>
                            <paragraph><reference refuri="https://sourceforge.net/projects/pywin32/files/pywin32/Build%20217/pywin32-217.win32-py2.7.exe">https://sourceforge.net/projects/pywin32/files/pywin32/Build%20217/pywin32-217.win32-py2.7.exe</reference></paragraph>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term>Greenlet</term>
                        <definition>
                            <paragraph><reference refuri="http://www.lfd.uci.edu/~gohlke/pythonlibs/#greenlet">http://www.lfd.uci.edu/~gohlke/pythonlibs/#greenlet</reference></paragraph>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term>PyCryto</term>
                        <definition>
                            <paragraph><reference refuri="http://www.voidspace.org.uk/downloads/pycrypto26/pycrypto-2.6.win32-py2.7.exe">http://www.voidspace.org.uk/downloads/pycrypto26/pycrypto-2.6.win32-py2.7.exe</reference></paragraph>
                        </definition>
                    </definition_list_item>
                </definition_list>
                <paragraph>The following packages must be installed with pip:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>ecdsa</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>amqp</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>wmi</paragraph>
                    </list_item>
                </bullet_list>
                <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">PS C:\&gt; pip install ecdsa
PS C:\&gt; pip install amqp
PS C:\&gt; pip install wmi</literal_block>
            </section>
            <section ids="other-dependencies" names="other\ dependencies">
                <title>Other dependencies</title>
                <paragraph><literal>qemu-img</literal> is required for some of the image related operations.
                    You can get it from here: <reference refuri="http://qemu.weilnetz.de/">http://qemu.weilnetz.de/</reference>.
                    You must make sure that the <literal>qemu-img</literal> path is set in the
                    PATH environment variable.</paragraph>
                <paragraph>Some Python packages need to be compiled, so you may use MinGW or
                    Visual Studio. You can get MinGW from here:
                    <reference refuri="http://sourceforge.net/projects/mingw/">http://sourceforge.net/projects/mingw/</reference>.
                    You must configure which compiler is to be used for this purpose by using the
                    <literal>distutils.cfg</literal> file in <literal>$Python27\Lib\distutils</literal>, which can contain:</paragraph>
                <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[build]
compiler = mingw32</literal_block>
                <paragraph>As a last step for setting up MinGW, make sure that the MinGW binariesâ€™
                    directories are set up in PATH.</paragraph>
            </section>
        </section>
    </section>
</document>
