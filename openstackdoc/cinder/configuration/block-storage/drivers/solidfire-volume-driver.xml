<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/configuration/block-storage/drivers/solidfire-volume-driver.rst">
    <section ids="solidfire" names="solidfire">
        <title>SolidFire</title>
        <paragraph>The SolidFire Cluster is a high performance all SSD iSCSI storage device that
            provides massive scale out capability and extreme fault tolerance.  A key
            feature of the SolidFire cluster is the ability to set and modify during
            operation specific QoS levels on a volume for volume basis. The SolidFire
            cluster offers this along with de-duplication, compression, and an architecture
            that takes full advantage of SSDs.</paragraph>
        <paragraph>To configure the use of a SolidFire cluster with Block Storage, modify your
            <literal>cinder.conf</literal> file as follows:</paragraph>
        <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">volume_driver = cinder.volume.drivers.solidfire.SolidFireDriver
san_ip = 172.17.1.182         # the address of your MVIP
san_login = sfadmin           # your cluster admin login
san_password = sfpassword     # your cluster admin password
sf_account_prefix = ''        # prefix for tenant account creation on solidfire cluster</literal_block>
        <warning>
            <paragraph>Older versions of the SolidFire driver (prior to Icehouse) created a unique
                account prefixed with <literal>$cinder-volume-service-hostname-$tenant-id</literal> on the
                SolidFire cluster for each tenant. Unfortunately, this account formation
                resulted in issues for High Availability (HA) installations and
                installations where the <literal>cinder-volume</literal> service can move to a new node.
                The current default implementation does not experience this issue as no
                prefix is used. For installations created on a prior release, the OLD
                default behavior can be configured by using the keyword <literal>hostname</literal> in
                sf_account_prefix.</paragraph>
        </warning>
        <note>
            <paragraph>The SolidFire driver creates names for volumes on the back end using the
                format UUID-&lt;cinder-id&gt;. This works well, but there is a possibility of a
                UUID collision for customers running multiple clouds against the same
                cluster. In Mitaka the ability was added to eliminate the possibility of
                collisions by introducing the <strong>sf_volume_prefix</strong> configuration variable.
                On the SolidFire cluster each volume will be labeled with the prefix,
                providing the ability to configure unique volume names for each cloud.
                The default prefix is ‘UUID-‘.</paragraph>
            <paragraph>Changing the setting on an existing deployment will result in the existing
                volumes being inaccessible. To introduce this change to an existing
                deployment it is recommended to add the Cluster as if it were a second
                backend and disable new deployments to the current back end.</paragraph>
        </note>
        <comment xml:space="preserve">Warning: Do not edit this file. It is automatically generated from the
software project's code and your changes will be overwritten.

The tool to generate this file lives in openstack-doc-tools repository.

Please make any changes needed in the code, then run the
autogenerate-config-doc tool from the openstack-doc-tools repository, or
ask for help on the documentation mailing list, IRC channel or meeting.</comment>
        <target refid="cinder-solidfire"></target>
        <table classes="config-ref-table" ids="id1 cinder-solidfire" names="cinder-solidfire">
            <title>Description of SolidFire driver configuration options</title>
            <tgroup cols="2">
                <colspec colwidth="50"></colspec>
                <colspec colwidth="50"></colspec>
                <thead>
                    <row>
                        <entry>
                            <paragraph>Configuration option = Default value</paragraph>
                        </entry>
                        <entry>
                            <paragraph>Description</paragraph>
                        </entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>
                            <paragraph><strong>[DEFAULT]</strong></paragraph>
                        </entry>
                        <entry>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph><literal>sf_account_prefix</literal> = <literal>None</literal></paragraph>
                        </entry>
                        <entry>
                            <paragraph>(String) Create SolidFire accounts with this prefix. Any string can be used here, but the string “hostname” is special and will create a prefix using the cinder node hostname (previous default behavior). The default is NO prefix.</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph><literal>sf_allow_template_caching</literal> = <literal>True</literal></paragraph>
                        </entry>
                        <entry>
                            <paragraph>(Boolean) Create an internal cache of copy of images when a bootable volume is created to eliminate fetch from glance and qemu-conversion on subsequent calls.</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph><literal>sf_allow_tenant_qos</literal> = <literal>False</literal></paragraph>
                        </entry>
                        <entry>
                            <paragraph>(Boolean) Allow tenants to specify QOS on create</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph><literal>sf_api_port</literal> = <literal>443</literal></paragraph>
                        </entry>
                        <entry>
                            <paragraph>(Port number) SolidFire API port. Useful if the device api is behind a proxy on a different port.</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph><literal>sf_emulate_512</literal> = <literal>True</literal></paragraph>
                        </entry>
                        <entry>
                            <paragraph>(Boolean) Set 512 byte emulation on volume creation;</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph><literal>sf_enable_vag</literal> = <literal>False</literal></paragraph>
                        </entry>
                        <entry>
                            <paragraph>(Boolean) Utilize volume access groups on a per-tenant basis.</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph><literal>sf_enable_volume_mapping</literal> = <literal>True</literal></paragraph>
                        </entry>
                        <entry>
                            <paragraph>(Boolean) Create an internal mapping of volume IDs and account. Optimizes lookups and performance at the expense of memory, very large deployments may want to consider setting to False.</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph><literal>sf_svip</literal> = <literal>None</literal></paragraph>
                        </entry>
                        <entry>
                            <paragraph>(String) Overrides default cluster SVIP with the one specified. This is required or deployments that have implemented the use of VLANs for iSCSI networks in their cloud.</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph><literal>sf_template_account_name</literal> = <literal>openstack-vtemplate</literal></paragraph>
                        </entry>
                        <entry>
                            <paragraph>(String) Account name on the SolidFire Cluster to use as owner of template/cache volumes (created if does not exist).</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph><literal>sf_volume_prefix</literal> = <literal>UUID-</literal></paragraph>
                        </entry>
                        <entry>
                            <paragraph>(String) Create SolidFire volumes with this prefix. Volume names are of the form &lt;sf_volume_prefix&gt;&lt;cinder-volume-id&gt;. The default is to use a prefix of ‘UUID-‘.</paragraph>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <section ids="supported-operations" names="supported\ operations">
            <title>Supported operations</title>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Create, delete, attach, and detach volumes.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Create, list, and delete volume snapshots.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Create a volume from a snapshot.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Copy an image to a volume.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Copy a volume to an image.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Clone a volume.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Extend a volume.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Retype a volume.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Manage and unmanage a volume.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Consistency group snapshots.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>QoS support for the SolidFire drivers includes the ability to set the
                following capabilities in the OpenStack Block Storage API
                <literal>cinder.api.contrib.qos_specs_manage</literal> qos specs extension module:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph><strong>minIOPS</strong> - The minimum number of IOPS guaranteed for this volume.
                        Default = 100.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>maxIOPS</strong> - The maximum number of IOPS allowed for this volume.
                        Default = 15,000.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>burstIOPS</strong> - The maximum number of IOPS allowed over a short period of
                        time. Default = 15,000.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>scaledIOPS</strong> - The presence of this key is a flag indicating that the
                        above IOPS should be scaled by the following scale values. It is recommended
                        to set the value of scaledIOPS to True, but any value will work. The
                        absence of this key implies false.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>scaleMin</strong> - The amount to scale the minIOPS by for every 1GB of
                        additional volume size. The value must be an integer.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>scaleMax</strong> - The amount to scale the maxIOPS by for every 1GB of additional
                        volume size. The value must be an integer.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>scaleBurst</strong> - The amount to scale the burstIOPS by for every 1GB of
                        additional volume size. The value must be an integer.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>The QoS keys above no longer require to be scoped but must be created and
                associated to a volume type. For information about how to set the key-value
                pairs and associate them with a volume type, see the <reference name="volume qos" refuri="https://docs.openstack.org/developer/python-openstackclient/command-objects/volume-qos.html">volume qos</reference><target ids="volume-qos" names="volume\ qos" refuri="https://docs.openstack.org/developer/python-openstackclient/command-objects/volume-qos.html"></target>
                section in the OpenStackClient command list.</paragraph>
            <note>
                <paragraph>When using scaledIOPS, the scale values must be chosen such that the
                    constraint minIOPS &lt;= maxIOPS &lt;= burstIOPS is always true. The driver will
                    enforce this constraint.</paragraph>
            </note>
        </section>
    </section>
</document>
