<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/testing.rst">
    <section ids="testing" names="testing">
        <title>Testing</title>
        <paragraph>Cinder contains a few different test suites in the cinder/tests/ directory. The
            different test suites are Unit Tests, Functional Tests, and Tempest Tests.</paragraph>
        <section ids="test-types" names="test\ types">
            <title>Test Types</title>
            <section dupnames="unit\ tests" ids="unit-tests">
                <title>Unit Tests</title>
                <paragraph>Unit tests are tests for individual methods, with at most a small handful of
                    modules involved. Mock should be used to remove any external dependencies.</paragraph>
                <paragraph>All significant code changes should have unit test coverage validating the code
                    happy path and any failure paths.</paragraph>
                <paragraph>Any proposed code change will be automatically rejected by the OpenStack
                    Jenkins server <footnote_reference auto="1" ids="id1" refid="f1">1</footnote_reference> if the change causes unit test failures.</paragraph>
            </section>
            <section dupnames="functional\ tests" ids="functional-tests">
                <title>Functional Tests</title>
                <paragraph>Functional tests validate a code path within Cinder. These tests should
                    validate the interaction of various modules within the project to verify the
                    code is logically correct.</paragraph>
                <paragraph>Functional tests run with a database present and may start Cinder services to
                    accept requests. These tests should not need to access an other OpenStack
                    non-Cinder services.</paragraph>
            </section>
            <section dupnames="tempest\ tests" ids="tempest-tests">
                <title>Tempest Tests</title>
                <paragraph>The tempest tests in the Cinder tree validate the operational correctness
                    between Cinder and external components such as Nova, Glance, etc. These are
                    integration tests driven via public APIs to verify actual end user usage
                    scenarios.</paragraph>
            </section>
        </section>
        <section ids="running-the-tests" names="running\ the\ tests">
            <title>Running the tests</title>
            <paragraph>There are a number of ways to run tests currently, and there’s a combination of
                frameworks used depending on what commands you use. The preferred method is to
                use tox, which calls ostestr via the tox.ini file.</paragraph>
            <section dupnames="unit\ tests" ids="id2">
                <title>Unit Tests</title>
                <paragraph>To run all unit tests simply run:</paragraph>
                <literal_block xml:space="preserve">tox</literal_block>
                <paragraph>This will create a virtual environment, load all the packages from
                    test-requirements.txt and run all unit tests as well as run flake8 and hacking
                    checks against the code.</paragraph>
                <paragraph>You may run individual test targets, for example only py27 tests, by running:</paragraph>
                <literal_block xml:space="preserve">tox -e py27</literal_block>
                <paragraph>Note that you can inspect the tox.ini file to get more details on the available
                    options and what the test run does by default.</paragraph>
            </section>
            <section dupnames="functional\ tests" ids="id3">
                <title>Functional Tests</title>
                <paragraph>To run all functional tests, run:</paragraph>
                <literal_block xml:space="preserve">tox -e functional</literal_block>
            </section>
            <section dupnames="tempest\ tests" ids="id4">
                <title>Tempest Tests</title>
                <paragraph>Tempest tests in the Cinder tree are “plugged in” to the normal tempest test
                    execution. To ensure the Cinder tests are picked up when running tempest, run:</paragraph>
                <literal_block xml:space="preserve">cd /opt/stack/tempest
tox -e all-plugin</literal_block>
                <paragraph>More information about tempest can be found in the <reference name="Tempest Documentation" refuri="http://docs.openstack.org/developer/tempest/overview.html">Tempest Documentation</reference><target ids="tempest-documentation" names="tempest\ documentation" refuri="http://docs.openstack.org/developer/tempest/overview.html"></target>.</paragraph>
            </section>
            <section ids="database-setup" names="database\ setup">
                <title>Database Setup</title>
                <paragraph>Some unit and functional tests will use a local database. You can use
                    <literal>tools/test-setup.sh</literal> to set up your local system the same way as
                    it’s setup in the CI environment.</paragraph>
            </section>
        </section>
        <section ids="running-a-subset-of-tests-using-tox" names="running\ a\ subset\ of\ tests\ using\ tox">
            <title>Running a subset of tests using tox</title>
            <paragraph>One common activity is to just run a single test, you can do this with tox
                simply by specifying to just run py27 or py35 tests against a single test:</paragraph>
            <literal_block xml:space="preserve">tox -epy27 -- -n cinder.tests.unit.test_volume.AvailabilityZoneTestCase.test_list_availability_zones_cached</literal_block>
            <paragraph>Or all tests in the test_volume.py file:</paragraph>
            <literal_block xml:space="preserve">tox -epy27 -- -n cinder.tests.unit.test_volume</literal_block>
            <paragraph>You may also use regular expressions to run any matching tests:</paragraph>
            <literal_block xml:space="preserve">tox -epy27 -- -r test_volume</literal_block>
            <paragraph>For more information on these options and how to run tests, please see the
                <reference name="ostestr documentation" refuri="http://docs.openstack.org/developer/os-testr/">ostestr documentation</reference><target ids="ostestr-documentation" names="ostestr\ documentation" refuri="http://docs.openstack.org/developer/os-testr/"></target>.</paragraph>
        </section>
        <section ids="gotchas" names="gotchas">
            <title>Gotchas</title>
            <paragraph><strong>Running Tests from Shared Folders</strong></paragraph>
            <paragraph>If you are running the unit tests from a shared folder, you may see tests start
                to fail or stop completely as a result of Python lockfile issues. You
                can get around this by manually setting or updating the following line in
                <literal>cinder/tests/conf_fixture.py</literal>:</paragraph>
            <literal_block xml:space="preserve">CONF['lock_path'].SetDefault('/tmp')</literal_block>
            <paragraph>Note that you may use any location (not just <literal>/tmp</literal>!) as long as it is not
                a shared folder.</paragraph>
            <paragraph><strong>Running py35 tests</strong></paragraph>
            <paragraph>You will need to install python3-dev in order to get py35 tests to run. If you
                do not have this, you will get the following:</paragraph>
            <literal_block xml:space="preserve">netifaces.c:1:20: fatal error: Python.h: No such file or directory
    #include &lt;Python.h&gt;
            ^
    compilation terminated.
    error: command 'x86_64-linux-gnu-gcc' failed with exit status 1

    ----------------------------------------
    &lt;snip&gt;
ERROR: could not install deps [-r/opt/stack/cinder/test-requirements.txt,
    oslo.versionedobjects[fixtures]]; v = InvocationError('/opt/stack/cinder/
    .tox/py35/bin/pip install -r/opt/stack/cinder/test-requirements.txt
    oslo.versionedobjects[fixtures] (see /opt/stack/cinder/.tox/py35/log/py35-1.log)', 1)
_______________________________________________________________ summary _______________________________________________________________
ERROR:   py35: could not install deps [-r/opt/stack/cinder/test-requirements.txt,
    oslo.versionedobjects[fixtures]]; v = InvocationError('/opt/stack/cinder/
    .tox/py35/bin/pip install -r/opt/stack/cinder/test-requirements.txt
    oslo.versionedobjects[fixtures] (see /opt/stack/cinder/.tox/py35/log/py35-1.log)', 1)</literal_block>
            <paragraph>To Fix:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>On Ubuntu/Debian:</paragraph>
                    <literal_block xml:space="preserve">sudo apt-get install python3-dev</literal_block>
                </list_item>
                <list_item>
                    <paragraph>On Fedora 21/RHEL7/CentOS7:</paragraph>
                    <literal_block xml:space="preserve">sudo yum install python3-devel</literal_block>
                </list_item>
                <list_item>
                    <paragraph>On Fedora 22 and higher:</paragraph>
                    <literal_block xml:space="preserve">sudo dnf install python3-devel</literal_block>
                </list_item>
            </bullet_list>
            <rubric>Footnotes</rubric>
            <footnote auto="1" backrefs="id1" ids="f1" names="f1">
                <label>1</label>
                <paragraph>See <reference internal="True" refuri="jenkins"><inline classes="doc">Continuous Integration with Jenkins</inline></reference>.</paragraph>
            </footnote>
        </section>
    </section>
</document>
