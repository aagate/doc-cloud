<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/drivers.rst">
    <comment xml:space="preserve">Copyright (c) 2013 OpenStack Foundation
All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.</comment>
    <section ids="drivers" names="drivers">
        <title>Drivers</title>
        <paragraph>Cinder exposes an API to users to interact with different storage backend
            solutions. The following are standards across all drivers for Cinder services
            to properly interact with a driver.</paragraph>
        <section ids="basic-attributes" names="basic\ attributes">
            <title>Basic attributes</title>
            <paragraph>There are some basic attributes that all drivers classes should have:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>VERSION: Driver version in string format.  No naming convention is imposed,
                        although semantic versioning is recommended.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>CI_WIKI_NAME: Must be the exact name of the <reference name="ThirdPartySystems wiki page" refuri="https://wiki.openstack.org/wiki/ThirdPartySystems">ThirdPartySystems wiki page</reference><target ids="thirdpartysystems-wiki-page" names="thirdpartysystems\ wiki\ page" refuri="https://wiki.openstack.org/wiki/ThirdPartySystems"></target>. This is used by our
                        tooling system to associate jobs to drivers and track their CI reporting
                        status correctly.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>The tooling system will also use the name and docstring of the driver class.</paragraph>
        </section>
        <section ids="minimum-features" names="minimum\ features">
            <title>Minimum Features</title>
            <paragraph>Minimum features are enforced to avoid having a grid of what features are
                supported by which drivers and which releases. Cinder Core requires that all
                drivers implement the following minimum features.</paragraph>
        </section>
        <section ids="core-functionality" names="core\ functionality">
            <title>Core Functionality</title>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Volume Create/Delete</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Volume Attach/Detach</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Snapshot Create/Delete</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Create Volume from Snapshot</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Get Volume Stats</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Copy Image to Volume</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Copy Volume to Image</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Clone Volume</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Extend Volume</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="volume-stats" names="volume\ stats">
            <title>Volume Stats</title>
            <paragraph>Volume stats are used by the different schedulers for the drivers to provide
                a report on their current state of the backend. The following should be
                provided by a driver.</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>driver_version</paragraph>
                </list_item>
                <list_item>
                    <paragraph>free_capacity_gb</paragraph>
                </list_item>
                <list_item>
                    <paragraph>storage_protocol</paragraph>
                </list_item>
                <list_item>
                    <paragraph>total_capacity_gb</paragraph>
                </list_item>
                <list_item>
                    <paragraph>vendor_name</paragraph>
                </list_item>
                <list_item>
                    <paragraph>volume_backend_name</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>NOTE:</strong> If the driver is unable to provide a value for free_capacity_gb or
                total_capacity_gb, keywords can be provided instead. Please use ‘unknown’ if
                the backend cannot report the value or ‘infinite’ if the backend has no upper
                limit. But, it is recommended to report real values as the Cinder scheduler
                assigns lowest weight to any storage backend reporting ‘unknown’ or ‘infinite’.</paragraph>
        </section>
        <section ids="feature-enforcement" names="feature\ enforcement">
            <title>Feature Enforcement</title>
            <paragraph>All concrete driver implementations should use the
                <literal>cinder.interface.volumedriver</literal> decorator on the driver class:</paragraph>
            <literal_block xml:space="preserve">@interface.volumedriver
class LVMVolumeDriver(driver.VolumeDriver):</literal_block>
            <paragraph>This will register the driver and allow automated compliance tests to run
                against and verify the compliance of the driver against the required interface
                to support the <reference name="Core Functionality" refid="core-functionality">Core Functionality</reference> listed above.</paragraph>
            <paragraph>Running <literal>tox -e compliance</literal> will verify all registered drivers comply to
                this interface. This can be used during development to perform self checks
                along the way. Any missing method calls will be identified by the compliance
                tests.</paragraph>
            <paragraph>The details for the required volume driver interfaces can be found in the
                <literal>cinder/interface/volume_*_driver.py</literal> source.</paragraph>
        </section>
        <section ids="driver-development-documentations" names="driver\ development\ documentations">
            <title>Driver Development Documentations</title>
            <paragraph>The LVM driver is our reference for all new driver implementations. The
                information below can provide additional documentation for the methods that
                volume drivers need to implement.</paragraph>
            <section ids="base-driver-interface" names="base\ driver\ interface">
                <title>Base Driver Interface</title>
                <paragraph>The methods documented below are the minimum required interface for a volume
                    driver to support. All methods from this interface must be implemented
                    in order to be an official Cinder volume driver.</paragraph>
                <target ids="module-cinder.interface.volume_driver" ismod="True"></target>
                <index entries="['single',\ 'cinder.interface.volume_driver\ (module)',\ 'module-cinder.interface.volume_driver',\ '',\ None]"></index>
                <paragraph>Core backend volume driver interface.</paragraph>
                <paragraph>All backend drivers should support this interface as a bare minimum.</paragraph>
                <index entries="['single',\ 'VolumeDriverCore\ (class\ in\ cinder.interface.volume_driver)',\ 'cinder.interface.volume_driver.VolumeDriverCore',\ '',\ None]"></index>
                <desc desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="" first="False" fullname="VolumeDriverCore" ids="cinder.interface.volume_driver.VolumeDriverCore" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">VolumeDriverCore</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Core backend driver required interface.</paragraph>
                        <index entries="['single',\ 'attach_volume()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.attach_volume',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.attach_volume" ids="cinder.interface.volume_driver.VolumeDriverCore.attach_volume" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.attach_volume"><desc_name xml:space="preserve">attach_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">instance_uuid</desc_parameter><desc_parameter xml:space="preserve">host_name</desc_parameter><desc_parameter xml:space="preserve">mountpoint</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Lets the driver know Nova has attached the volume to an instance.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – Security/policy info for the request.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">volume</literal_strong> – Volume being attached.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">instance_uuid</literal_strong> – ID of the instance being attached to.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">host_name</literal_strong> – The host name.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">mountpoint</literal_strong> – Device mount point on the instance.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'check_for_setup_error()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.check_for_setup_error',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.check_for_setup_error" ids="cinder.interface.volume_driver.VolumeDriverCore.check_for_setup_error" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.check_for_setup_error"><desc_name xml:space="preserve">check_for_setup_error</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Validate there are no issues with the driver configuration.</paragraph>
                                <paragraph>Called after do_setup(). Driver initialization can occur there or in
                                    this call, but must be complete by the time this returns.</paragraph>
                                <paragraph>If this method raises an exception, the driver will be left in an
                                    “uninitialized” state by the volume manager, which means that it will
                                    not be sent requests for volume operations.</paragraph>
                                <paragraph>This method typically checks things like whether the configured
                                    credentials can be used to log in the storage backend, and whether any
                                    external dependencies are present and working.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Raises</field_name>
                                        <field_body>
                                            <paragraph><reference internal="True" reftitle="cinder.exception.VolumeBackendAPIException" refuri="api/cinder.exception#cinder.exception.VolumeBackendAPIException"><literal_strong>VolumeBackendAPIException</literal_strong></reference> – in case of setup error.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'clone_image()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.clone_image',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.clone_image" ids="cinder.interface.volume_driver.VolumeDriverCore.clone_image" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.clone_image"><desc_name xml:space="preserve">clone_image</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">image_location</desc_parameter><desc_parameter xml:space="preserve">image_id</desc_parameter><desc_parameter xml:space="preserve">image_metadata</desc_parameter><desc_parameter xml:space="preserve">image_service</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Clone an image to a volume.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">volume</literal_strong> – The volume to create.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">image_location</literal_strong> – Where to pull the image from.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">image_id</literal_strong> – The image identifier.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">image_metadata</literal_strong> – Information about the image.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">image_service</literal_strong> – The image service to use.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>Model updates.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'copy_image_to_volume()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.copy_image_to_volume',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.copy_image_to_volume" ids="cinder.interface.volume_driver.VolumeDriverCore.copy_image_to_volume" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.copy_image_to_volume"><desc_name xml:space="preserve">copy_image_to_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">image_service</desc_parameter><desc_parameter xml:space="preserve">image_id</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Fetch the image from image_service and write it to the volume.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – Security/policy info for the request.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">volume</literal_strong> – The volume to create.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">image_service</literal_strong> – The image service to use.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">image_id</literal_strong> – The image identifier.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>Model updates.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'copy_volume_to_image()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.copy_volume_to_image',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.copy_volume_to_image" ids="cinder.interface.volume_driver.VolumeDriverCore.copy_volume_to_image" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.copy_volume_to_image"><desc_name xml:space="preserve">copy_volume_to_image</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">image_service</desc_parameter><desc_parameter xml:space="preserve">image_meta</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Copy the volume to the specified image.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – Security/policy info for the request.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">volume</literal_strong> – The volume to copy.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">image_service</literal_strong> – The image service to use.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">image_meta</literal_strong> – Information about the image.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>Model updates.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'create_volume()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.create_volume',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.create_volume" ids="cinder.interface.volume_driver.VolumeDriverCore.create_volume" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.create_volume"><desc_name xml:space="preserve">create_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Create a new volume on the backend.</paragraph>
                                <paragraph>This method is responsible only for storage allocation on the backend.
                                    It should not export a LUN or actually make this storage available for
                                    use, this is done in a later call.</paragraph>
                                <paragraph>TODO(smcginnis): Add example data structure of volume object.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – Volume object containing specifics to create.</paragraph>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>(Optional) dict of database updates for the new volume.</paragraph>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Raises</field_name>
                                        <field_body>
                                            <paragraph><reference internal="True" reftitle="cinder.exception.VolumeBackendAPIException" refuri="api/cinder.exception#cinder.exception.VolumeBackendAPIException"><literal_strong>VolumeBackendAPIException</literal_strong></reference> – if creation failed.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'delete_volume()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.delete_volume',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.delete_volume" ids="cinder.interface.volume_driver.VolumeDriverCore.delete_volume" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.delete_volume"><desc_name xml:space="preserve">delete_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Delete a volume from the backend.</paragraph>
                                <paragraph>If the driver can talk to the backend and detects that the volume is no
                                    longer present, this call should succeed and allow Cinder to complete
                                    the process of deleting the volume.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – The volume to delete.</paragraph>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Raises</field_name>
                                        <field_body>
                                            <paragraph><reference internal="True" reftitle="cinder.exception.VolumeIsBusy" refuri="api/cinder.exception#cinder.exception.VolumeIsBusy"><literal_strong>VolumeIsBusy</literal_strong></reference> – if the volume is still attached or has snapshots.
                                                VolumeBackendAPIException on error.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'detach_volume()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.detach_volume',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.detach_volume" ids="cinder.interface.volume_driver.VolumeDriverCore.detach_volume" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.detach_volume"><desc_name xml:space="preserve">detach_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">attachment=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Detach volume from an instance.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – Security/policy info for the request.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">volume</literal_strong> – Volume being detached.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">attachment</literal_strong> – (Optional) Attachment information.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'do_setup()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.do_setup',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.do_setup" ids="cinder.interface.volume_driver.VolumeDriverCore.do_setup" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.do_setup"><desc_name xml:space="preserve">do_setup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Any initialization the volume driver needs to do while starting.</paragraph>
                                <paragraph>Called once by the manager after the driver is loaded.
                                    Can be used to set up clients, check licenses, set up protocol
                                    specific helpers, etc.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – The admin context.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'extend_volume()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.extend_volume',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.extend_volume" ids="cinder.interface.volume_driver.VolumeDriverCore.extend_volume" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.extend_volume"><desc_name xml:space="preserve">extend_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">new_size</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Extend the size of a volume.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">volume</literal_strong> – The volume to extend.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">new_size</literal_strong> – The new desired size of the volume.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'get_volume_stats()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.get_volume_stats',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.get_volume_stats" ids="cinder.interface.volume_driver.VolumeDriverCore.get_volume_stats" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.get_volume_stats"><desc_name xml:space="preserve">get_volume_stats</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">refresh=False</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Collects volume backend stats.</paragraph>
                                <paragraph>The get_volume_stats method is used by the volume manager to collect
                                    information from the driver instance related to information about the
                                    driver, available and used space, and driver/backend capabilities.</paragraph>
                                <paragraph>It returns a dict with the following required fields:</paragraph>
                                <bullet_list bullet="*">
                                    <list_item>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>volume_backend_name</term>
                                                <definition>
                                                    <paragraph>This is an identifier for the backend taken from cinder.conf.
                                                        Useful when using multi-backend.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </list_item>
                                    <list_item>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>vendor_name</term>
                                                <definition>
                                                    <paragraph>Vendor/author of the driver who serves as the contact for the
                                                        driver’s development and support.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </list_item>
                                    <list_item>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>driver_version</term>
                                                <definition>
                                                    <paragraph>The driver version is logged at cinder-volume startup and is useful
                                                        for tying volume service logs to a specific release of the code.
                                                        There are currently no rules for how or when this is updated, but
                                                        it tends to follow typical major.minor.revision ideas.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </list_item>
                                    <list_item>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>storage_protocol</term>
                                                <definition>
                                                    <paragraph>The protocol used to connect to the storage, this should be a short
                                                        string such as: “iSCSI”, “FC”, “nfs”, “ceph”, etc.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </list_item>
                                    <list_item>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>total_capacity_gb</term>
                                                <definition>
                                                    <paragraph>The total capacity in gigabytes (GiB) of the storage backend being
                                                        used to store Cinder volumes. Use keyword ‘unknown’ if the backend
                                                        cannot report the value or ‘infinite’ if there is no upper limit.
                                                        But, it is recommended to report real values as the Cinder
                                                        scheduler assigns lowest weight to any storage backend reporting
                                                        ‘unknown’ or ‘infinite’.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </list_item>
                                    <list_item>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>free_capacity_gb</term>
                                                <definition>
                                                    <paragraph>The free capacity in gigabytes (GiB). Use keyword ‘unknown’ if the
                                                        backend cannot report the value or ‘infinite’ if there is no upper
                                                        limit. But, it is recommended to report real values as the Cinder
                                                        scheduler assigns lowest weight to any storage backend reporting
                                                        ‘unknown’ or ‘infinite’.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </list_item>
                                </bullet_list>
                                <paragraph>And the following optional fields:</paragraph>
                                <bullet_list bullet="*">
                                    <list_item>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>reserved_percentage (integer)</term>
                                                <definition>
                                                    <paragraph>Percentage of backend capacity which is not used by the scheduler.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </list_item>
                                    <list_item>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>location_info (string)</term>
                                                <definition>
                                                    <paragraph>Driver-specific information used by the driver and storage backend
                                                        to correlate Cinder volumes and backend LUNs/files.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </list_item>
                                    <list_item>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>QoS_support (Boolean)</term>
                                                <definition>
                                                    <paragraph>Whether the backend supports quality of service.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </list_item>
                                    <list_item>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>provisioned_capacity_gb</term>
                                                <definition>
                                                    <paragraph>The total provisioned capacity on the storage backend, in gigabytes
                                                        (GiB), including space consumed by any user other than Cinder
                                                        itself.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </list_item>
                                    <list_item>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>max_over_subscription_ratio</term>
                                                <definition>
                                                    <paragraph>The maximum amount a backend can be over subscribed.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </list_item>
                                    <list_item>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>thin_provisioning_support (Boolean)</term>
                                                <definition>
                                                    <paragraph>Whether the backend is capable of allocating thinly provisioned
                                                        volumes.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </list_item>
                                    <list_item>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>thick_provisioning_support (Boolean)</term>
                                                <definition>
                                                    <paragraph>Whether the backend is capable of allocating thick provisioned
                                                        volumes. (Typically True.)</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </list_item>
                                    <list_item>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>total_volumes (integer)</term>
                                                <definition>
                                                    <paragraph>Total number of volumes on the storage backend. This can be used in
                                                        custom driver filter functions.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </list_item>
                                    <list_item>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>filter_function (string)</term>
                                                <definition>
                                                    <paragraph>A custom function used by the scheduler to determine whether a
                                                        volume should be allocated to this backend or not. Example:</paragraph>
                                                    <block_quote>
                                                        <paragraph>capabilities.total_volumes &lt; 10</paragraph>
                                                    </block_quote>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </list_item>
                                    <list_item>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>goodness_function (string)</term>
                                                <definition>
                                                    <paragraph>Similar to filter_function, but used to weigh multiple volume
                                                        backends. Example:</paragraph>
                                                    <block_quote>
                                                        <paragraph>capabilities.capacity_utilization &lt; 0.6 ? 100 : 25</paragraph>
                                                    </block_quote>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </list_item>
                                    <list_item>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>multiattach (Boolean)</term>
                                                <definition>
                                                    <paragraph>Whether the backend supports multiattach or not. Defaults to False.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </list_item>
                                    <list_item>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>sparse_copy_volume (Boolean)</term>
                                                <definition>
                                                    <paragraph>Whether copies performed by the volume manager for operations such
                                                        as migration should attempt to preserve sparseness.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </list_item>
                                </bullet_list>
                                <paragraph>The returned dict may also contain a list, “pools”, which has a similar
                                    dict for each pool being used with the backend.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">refresh</literal_strong> – Whether to discard any cached values and force a full
                                                refresh of stats.</paragraph>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>dict of appropriate values (see above).</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'initialize_connection()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.initialize_connection',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.initialize_connection" ids="cinder.interface.volume_driver.VolumeDriverCore.initialize_connection" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.initialize_connection"><desc_name xml:space="preserve">initialize_connection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter><desc_parameter xml:space="preserve">initiator_data=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Allow connection to connector and return connection info.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">volume</literal_strong> – The volume to be attached.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">connector</literal_strong> – Dictionary containing information about what is being
                                                        connected to.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">initiator_data</literal_strong> – (Optional) A dictionary of driver_initiator_data
                                                        objects with key-value pairs that have been
                                                        saved for this initiator by a driver in previous
                                                        initialize_connection calls.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>A dictionary of connection information. This can optionally
                                                include a “initiator_updates” field.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>The “initiator_updates” field must be a dictionary containing a
                                    “set_values” and/or “remove_values” field. The “set_values” field must
                                    be a dictionary of key-value pairs to be set/updated in the db. The
                                    “remove_values” field must be a list of keys, previously set with
                                    “set_values”, that will be deleted from the db.</paragraph>
                                <paragraph>May be called multiple times to get connection information after a
                                    volume has already been attached.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'terminate_connection()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.terminate_connection',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.terminate_connection" ids="cinder.interface.volume_driver.VolumeDriverCore.terminate_connection" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.terminate_connection"><desc_name xml:space="preserve">terminate_connection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Remove access to a volume.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">volume</literal_strong> – The volume to remove.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">connector</literal_strong> – The Dictionary containing information about the
                                                        connection. This is optional when doing a
                                                        force-detach and can be None.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
            </section>
            <section ids="snapshot-interface" names="snapshot\ interface">
                <title>Snapshot Interface</title>
                <paragraph>Another required interface for a volume driver to be fully compatible is the
                    ability to create and manage snapshots. Due to legacy constraints, this
                    interface is not included in the base driver interface above.</paragraph>
                <paragraph>Work is being done to address those legacy issues. Once that is complete, this
                    interface will be merged with the base driver interface.</paragraph>
                <target ids="module-cinder.interface.volume_snapshot_driver" ismod="True"></target>
                <index entries="['single',\ 'cinder.interface.volume_snapshot_driver\ (module)',\ 'module-cinder.interface.volume_snapshot_driver',\ '',\ None]"></index>
                <paragraph>Snapshot capable volume driver interface.</paragraph>
                <index entries="['single',\ 'VolumeSnapshotDriver\ (class\ in\ cinder.interface.volume_snapshot_driver)',\ 'cinder.interface.volume_snapshot_driver.VolumeSnapshotDriver',\ '',\ None]"></index>
                <desc desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="" first="False" fullname="VolumeSnapshotDriver" ids="cinder.interface.volume_snapshot_driver.VolumeSnapshotDriver" module="cinder.interface.volume_snapshot_driver" names="cinder.interface.volume_snapshot_driver.VolumeSnapshotDriver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">VolumeSnapshotDriver</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Interface for drivers that support snapshots.</paragraph>
                        <paragraph>TODO(smcginnis) Merge into VolumeDriverBase once NFS driver supports
                            snapshots.</paragraph>
                        <index entries="['single',\ 'create_snapshot()\ (VolumeSnapshotDriver\ method)',\ 'cinder.interface.volume_snapshot_driver.VolumeSnapshotDriver.create_snapshot',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeSnapshotDriver" first="False" fullname="VolumeSnapshotDriver.create_snapshot" ids="cinder.interface.volume_snapshot_driver.VolumeSnapshotDriver.create_snapshot" module="cinder.interface.volume_snapshot_driver" names="cinder.interface.volume_snapshot_driver.VolumeSnapshotDriver.create_snapshot"><desc_name xml:space="preserve">create_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Creates a snapshot.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">snapshot</literal_strong> – Information for the snapshot to be created.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'create_volume_from_snapshot()\ (VolumeSnapshotDriver\ method)',\ 'cinder.interface.volume_snapshot_driver.VolumeSnapshotDriver.create_volume_from_snapshot',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeSnapshotDriver" first="False" fullname="VolumeSnapshotDriver.create_volume_from_snapshot" ids="cinder.interface.volume_snapshot_driver.VolumeSnapshotDriver.create_volume_from_snapshot" module="cinder.interface.volume_snapshot_driver" names="cinder.interface.volume_snapshot_driver.VolumeSnapshotDriver.create_volume_from_snapshot"><desc_name xml:space="preserve">create_volume_from_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Creates a volume from a snapshot.</paragraph>
                                <paragraph>If volume_type extra specs includes ‘replication: &lt;is&gt; True’
                                    the driver needs to create a volume replica (secondary),
                                    and setup replication between the newly created volume and
                                    the secondary volume.</paragraph>
                                <paragraph>An optional larger size for the new snapshot can be specified. Drivers
                                    should check this value and create or expand the new volume to match.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">volume</literal_strong> – The volume to be created.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">snapshot</literal_strong> – The snapshot from which to create the volume.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>A dict of database updates for the new volume.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'delete_snapshot()\ (VolumeSnapshotDriver\ method)',\ 'cinder.interface.volume_snapshot_driver.VolumeSnapshotDriver.delete_snapshot',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeSnapshotDriver" first="False" fullname="VolumeSnapshotDriver.delete_snapshot" ids="cinder.interface.volume_snapshot_driver.VolumeSnapshotDriver.delete_snapshot" module="cinder.interface.volume_snapshot_driver" names="cinder.interface.volume_snapshot_driver.VolumeSnapshotDriver.delete_snapshot"><desc_name xml:space="preserve">delete_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Deletes a snapshot.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">snapshot</literal_strong> – The snapshot to delete.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'revert_to_snapshot()\ (VolumeSnapshotDriver\ method)',\ 'cinder.interface.volume_snapshot_driver.VolumeSnapshotDriver.revert_to_snapshot',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeSnapshotDriver" first="False" fullname="VolumeSnapshotDriver.revert_to_snapshot" ids="cinder.interface.volume_snapshot_driver.VolumeSnapshotDriver.revert_to_snapshot" module="cinder.interface.volume_snapshot_driver" names="cinder.interface.volume_snapshot_driver.VolumeSnapshotDriver.revert_to_snapshot"><desc_name xml:space="preserve">revert_to_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Revert volume to snapshot.</paragraph>
                                <paragraph>Note: the revert process should not change the volume’s
                                    current size, that means if the driver shrank
                                    the volume during the process, it should extend the
                                    volume internally.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">volume</literal_strong> – The volume to be reverted.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">snapshot</literal_strong> – The snapshot used for reverting.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
            </section>
            <section ids="manage-unmanage-support" names="manage/unmanage\ support">
                <title>Manage/Unmanage Support</title>
                <paragraph>An optional feature a volume backend can support is the ability to manage
                    existing volumes or unmanage volumes - keep the volume on the storage backend
                    but no longer manage it through Cinder.</paragraph>
                <paragraph>To support this functionality, volume drivers must implement these methods:</paragraph>
                <target ids="module-cinder.interface.volume_management_driver" ismod="True"></target>
                <index entries="['single',\ 'cinder.interface.volume_management_driver\ (module)',\ 'module-cinder.interface.volume_management_driver',\ '',\ None]"></index>
                <paragraph>Manage/unmanage existing volume driver interface.</paragraph>
                <index entries="['single',\ 'VolumeManagementDriver\ (class\ in\ cinder.interface.volume_management_driver)',\ 'cinder.interface.volume_management_driver.VolumeManagementDriver',\ '',\ None]"></index>
                <desc desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="" first="False" fullname="VolumeManagementDriver" ids="cinder.interface.volume_management_driver.VolumeManagementDriver" module="cinder.interface.volume_management_driver" names="cinder.interface.volume_management_driver.VolumeManagementDriver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">VolumeManagementDriver</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Interface for drivers that support managing existing volumes.</paragraph>
                        <index entries="['single',\ 'manage_existing()\ (VolumeManagementDriver\ method)',\ 'cinder.interface.volume_management_driver.VolumeManagementDriver.manage_existing',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeManagementDriver" first="False" fullname="VolumeManagementDriver.manage_existing" ids="cinder.interface.volume_management_driver.VolumeManagementDriver.manage_existing" module="cinder.interface.volume_management_driver" names="cinder.interface.volume_management_driver.VolumeManagementDriver.manage_existing"><desc_name xml:space="preserve">manage_existing</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Brings an existing backend storage object under Cinder management.</paragraph>
                                <paragraph>existing_ref is passed straight through from the API request’s
                                    manage_existing_ref value, and it is up to the driver how this should
                                    be interpreted.  It should be sufficient to identify a storage object
                                    that the driver should somehow associate with the newly-created cinder
                                    volume structure.</paragraph>
                                <paragraph>There are two ways to do this:</paragraph>
                                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                                    <list_item>
                                        <paragraph>Rename the backend storage object so that it matches the,
                                            volume[‘name’] which is how drivers traditionally map between a
                                            cinder volume and the associated backend storage object.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>Place some metadata on the volume, or somewhere in the backend, that
                                            allows other driver requests (e.g. delete, clone, attach, detach…)
                                            to locate the backend storage object when required.</paragraph>
                                    </list_item>
                                </enumerated_list>
                                <paragraph>If the existing_ref doesn’t make sense, or doesn’t refer to an existing
                                    backend storage object, raise a ManageExistingInvalidReference
                                    exception.</paragraph>
                                <paragraph>The volume may have a volume_type, and the driver can inspect that and
                                    compare against the properties of the referenced backend storage
                                    object.  If they are incompatible, raise a
                                    ManageExistingVolumeTypeMismatch, specifying a reason for the failure.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">volume</literal_strong> – Cinder volume to manage</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">existing_ref</literal_strong> – Dictionary with keys ‘source-id’, ‘source-name’
                                                        with driver-specific values to identify a backend
                                                        storage object.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Raises</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><reference internal="True" reftitle="cinder.exception.ManageExistingInvalidReference" refuri="api/cinder.exception#cinder.exception.ManageExistingInvalidReference"><literal_strong>ManageExistingInvalidReference</literal_strong></reference> – If the existing_ref doesn’t
                                                        make sense, or doesn’t refer to an existing backend storage
                                                        object.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><reference internal="True" reftitle="cinder.exception.ManageExistingVolumeTypeMismatch" refuri="api/cinder.exception#cinder.exception.ManageExistingVolumeTypeMismatch"><literal_strong>ManageExistingVolumeTypeMismatch</literal_strong></reference> – If there is a mismatch
                                                        between the volume type and the properties of the existing
                                                        backend storage object.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'manage_existing_get_size()\ (VolumeManagementDriver\ method)',\ 'cinder.interface.volume_management_driver.VolumeManagementDriver.manage_existing_get_size',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeManagementDriver" first="False" fullname="VolumeManagementDriver.manage_existing_get_size" ids="cinder.interface.volume_management_driver.VolumeManagementDriver.manage_existing_get_size" module="cinder.interface.volume_management_driver" names="cinder.interface.volume_management_driver.VolumeManagementDriver.manage_existing_get_size"><desc_name xml:space="preserve">manage_existing_get_size</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Return size of volume to be managed by manage_existing.</paragraph>
                                <paragraph>When calculating the size, round up to the next GB.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">volume</literal_strong> – Cinder volume to manage</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">existing_ref</literal_strong> – Dictionary with keys ‘source-id’, ‘source-name’
                                                        with driver-specific values to identify a backend
                                                        storage object.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Raises</field_name>
                                        <field_body>
                                            <paragraph><reference internal="True" reftitle="cinder.exception.ManageExistingInvalidReference" refuri="api/cinder.exception#cinder.exception.ManageExistingInvalidReference"><literal_strong>ManageExistingInvalidReference</literal_strong></reference> – If the existing_ref doesn’t
                                                make sense, or doesn’t refer to an existing backend storage
                                                object.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'unmanage()\ (VolumeManagementDriver\ method)',\ 'cinder.interface.volume_management_driver.VolumeManagementDriver.unmanage',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeManagementDriver" first="False" fullname="VolumeManagementDriver.unmanage" ids="cinder.interface.volume_management_driver.VolumeManagementDriver.unmanage" module="cinder.interface.volume_management_driver" names="cinder.interface.volume_management_driver.VolumeManagementDriver.unmanage"><desc_name xml:space="preserve">unmanage</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Removes the specified volume from Cinder management.</paragraph>
                                <paragraph>Does not delete the underlying backend storage object.</paragraph>
                                <paragraph>For most drivers, this will not need to do anything.  However, some
                                    drivers might use this call as an opportunity to clean up any
                                    Cinder-specific configuration that they have associated with the
                                    backend storage object.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – Cinder volume to unmanage</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
            </section>
            <section ids="manage-unmanage-snapshot-support" names="manage/unmanage\ snapshot\ support">
                <title>Manage/Unmanage Snapshot Support</title>
                <paragraph>In addition to the ability to manage and unmanage volumes, Cinder backend
                    drivers may also support managing and unmanaging volume snapshots. These
                    additional methods must be implemented to support these operations.</paragraph>
                <target ids="module-cinder.interface.volume_snapshotmanagement_driver" ismod="True"></target>
                <index entries="['single',\ 'cinder.interface.volume_snapshotmanagement_driver\ (module)',\ 'module-cinder.interface.volume_snapshotmanagement_driver',\ '',\ None]"></index>
                <paragraph>Manage/unmanage existing volume snapshots driver interface.</paragraph>
                <index entries="['single',\ 'VolumeSnapshotManagementDriver\ (class\ in\ cinder.interface.volume_snapshotmanagement_driver)',\ 'cinder.interface.volume_snapshotmanagement_driver.VolumeSnapshotManagementDriver',\ '',\ None]"></index>
                <desc desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="" first="False" fullname="VolumeSnapshotManagementDriver" ids="cinder.interface.volume_snapshotmanagement_driver.VolumeSnapshotManagementDriver" module="cinder.interface.volume_snapshotmanagement_driver" names="cinder.interface.volume_snapshotmanagement_driver.VolumeSnapshotManagementDriver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">VolumeSnapshotManagementDriver</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Interface for drivers that support managing existing snapshots.</paragraph>
                        <index entries="['single',\ 'manage_existing_snapshot()\ (VolumeSnapshotManagementDriver\ method)',\ 'cinder.interface.volume_snapshotmanagement_driver.VolumeSnapshotManagementDriver.manage_existing_snapshot',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeSnapshotManagementDriver" first="False" fullname="VolumeSnapshotManagementDriver.manage_existing_snapshot" ids="cinder.interface.volume_snapshotmanagement_driver.VolumeSnapshotManagementDriver.manage_existing_snapshot" module="cinder.interface.volume_snapshotmanagement_driver" names="cinder.interface.volume_snapshotmanagement_driver.VolumeSnapshotManagementDriver.manage_existing_snapshot"><desc_name xml:space="preserve">manage_existing_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Brings an existing backend storage object under Cinder management.</paragraph>
                                <paragraph>existing_ref is passed straight through from the API request’s
                                    manage_existing_ref value, and it is up to the driver how this should
                                    be interpreted.  It should be sufficient to identify a storage object
                                    that the driver should somehow associate with the newly-created cinder
                                    snapshot structure.</paragraph>
                                <paragraph>There are two ways to do this:</paragraph>
                                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                                    <list_item>
                                        <paragraph>Rename the backend storage object so that it matches the
                                            snapshot[‘name’] which is how drivers traditionally map between a
                                            cinder snapshot and the associated backend storage object.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>Place some metadata on the snapshot, or somewhere in the backend,
                                            that allows other driver requests (e.g. delete) to locate the
                                            backend storage object when required.</paragraph>
                                    </list_item>
                                </enumerated_list>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">snapshot</literal_strong> – The snapshot to manage.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">existing_ref</literal_strong> – Dictionary with keys ‘source-id’, ‘source-name’
                                                        with driver-specific values to identify a backend
                                                        storage object.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Raises</field_name>
                                        <field_body>
                                            <paragraph><reference internal="True" reftitle="cinder.exception.ManageExistingInvalidReference" refuri="api/cinder.exception#cinder.exception.ManageExistingInvalidReference"><literal_strong>ManageExistingInvalidReference</literal_strong></reference> – If the existing_ref doesn’t
                                                make sense, or doesn’t refer to an existing backend storage
                                                object.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'manage_existing_snapshot_get_size()\ (VolumeSnapshotManagementDriver\ method)',\ 'cinder.interface.volume_snapshotmanagement_driver.VolumeSnapshotManagementDriver.manage_existing_snapshot_get_size',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeSnapshotManagementDriver" first="False" fullname="VolumeSnapshotManagementDriver.manage_existing_snapshot_get_size" ids="cinder.interface.volume_snapshotmanagement_driver.VolumeSnapshotManagementDriver.manage_existing_snapshot_get_size" module="cinder.interface.volume_snapshotmanagement_driver" names="cinder.interface.volume_snapshotmanagement_driver.VolumeSnapshotManagementDriver.manage_existing_snapshot_get_size"><desc_name xml:space="preserve">manage_existing_snapshot_get_size</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Return size of snapshot to be managed by manage_existing.</paragraph>
                                <paragraph>When calculating the size, round up to the next GB.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">snapshot</literal_strong> – The snapshot to manage.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">existing_ref</literal_strong> – Dictionary with keys ‘source-id’, ‘source-name’
                                                        with driver-specific values to identify a backend
                                                        storage object.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Raises</field_name>
                                        <field_body>
                                            <paragraph><reference internal="True" reftitle="cinder.exception.ManageExistingInvalidReference" refuri="api/cinder.exception#cinder.exception.ManageExistingInvalidReference"><literal_strong>ManageExistingInvalidReference</literal_strong></reference> – If the existing_ref doesn’t
                                                make sense, or doesn’t refer to an existing backend storage
                                                object.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'unmanage_snapshot()\ (VolumeSnapshotManagementDriver\ method)',\ 'cinder.interface.volume_snapshotmanagement_driver.VolumeSnapshotManagementDriver.unmanage_snapshot',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeSnapshotManagementDriver" first="False" fullname="VolumeSnapshotManagementDriver.unmanage_snapshot" ids="cinder.interface.volume_snapshotmanagement_driver.VolumeSnapshotManagementDriver.unmanage_snapshot" module="cinder.interface.volume_snapshotmanagement_driver" names="cinder.interface.volume_snapshotmanagement_driver.VolumeSnapshotManagementDriver.unmanage_snapshot"><desc_name xml:space="preserve">unmanage_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Removes the specified snapshot from Cinder management.</paragraph>
                                <paragraph>Does not delete the underlying backend storage object.</paragraph>
                                <paragraph>For most drivers, this will not need to do anything. However, some
                                    drivers might use this call as an opportunity to clean up any
                                    Cinder-specific configuration that they have associated with the
                                    backend storage object.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">snapshot</literal_strong> – The snapshot to unmanage.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
            </section>
            <section ids="volume-consistency-groups" names="volume\ consistency\ groups">
                <title>Volume Consistency Groups</title>
                <paragraph>Some storage backends support the ability to group volumes and create write
                    consistent snapshots across the group. In order to support these operations,
                    the following interface must be implemented by the driver.</paragraph>
                <target ids="module-cinder.interface.volume_consistencygroup_driver" ismod="True"></target>
                <index entries="['single',\ 'cinder.interface.volume_consistencygroup_driver\ (module)',\ 'module-cinder.interface.volume_consistencygroup_driver',\ '',\ None]"></index>
                <paragraph>Consistency group volume driver interface.</paragraph>
                <index entries="['single',\ 'VolumeConsistencyGroupDriver\ (class\ in\ cinder.interface.volume_consistencygroup_driver)',\ 'cinder.interface.volume_consistencygroup_driver.VolumeConsistencyGroupDriver',\ '',\ None]"></index>
                <desc desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="" first="False" fullname="VolumeConsistencyGroupDriver" ids="cinder.interface.volume_consistencygroup_driver.VolumeConsistencyGroupDriver" module="cinder.interface.volume_consistencygroup_driver" names="cinder.interface.volume_consistencygroup_driver.VolumeConsistencyGroupDriver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">VolumeConsistencyGroupDriver</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Interface for drivers that support consistency groups.</paragraph>
                        <index entries="['single',\ 'create_cgsnapshot()\ (VolumeConsistencyGroupDriver\ method)',\ 'cinder.interface.volume_consistencygroup_driver.VolumeConsistencyGroupDriver.create_cgsnapshot',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeConsistencyGroupDriver" first="False" fullname="VolumeConsistencyGroupDriver.create_cgsnapshot" ids="cinder.interface.volume_consistencygroup_driver.VolumeConsistencyGroupDriver.create_cgsnapshot" module="cinder.interface.volume_consistencygroup_driver" names="cinder.interface.volume_consistencygroup_driver.VolumeConsistencyGroupDriver.create_cgsnapshot"><desc_name xml:space="preserve">create_cgsnapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">cgsnapshot</desc_parameter><desc_parameter xml:space="preserve">snapshots</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Creates a cgsnapshot.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">cgsnapshot</literal_strong> – the dictionary of the cgsnapshot to be created.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">snapshots</literal_strong> – a list of snapshot dictionaries in the cgsnapshot.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>model_update, snapshots_model_update</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>param snapshots is retrieved directly from the db. It is a list of
                                    cinder.db.sqlalchemy.models.Snapshot to be precise. It cannot be
                                    assigned to snapshots_model_update. snapshots_model_update is a list
                                    of dictionaries. It has to be built by the driver. An entry will be
                                    in this format: {‘id’: xxx, ‘status’: xxx, ……}. model_update
                                    will be in this format: {‘status’: xxx, ……}.</paragraph>
                                <paragraph>The driver should populate snapshots_model_update and model_update
                                    and return them.</paragraph>
                                <paragraph>The manager will check snapshots_model_update and update db accordingly
                                    for each snapshot. If the driver successfully deleted some snapshots
                                    but failed to delete others, it should set statuses of the snapshots
                                    accordingly so that the manager can update db correctly.</paragraph>
                                <paragraph>If the status in any entry of snapshots_model_update is ‘error’, the
                                    status in model_update will be set to the same if it is not already
                                    ‘error’.</paragraph>
                                <paragraph>If the status in model_update is ‘error’, the manager will raise an
                                    exception and the status of cgsnapshot will be set to ‘error’ in the
                                    db. If snapshots_model_update is not returned by the driver, the
                                    manager will set the status of every snapshot to ‘error’ in the except
                                    block.</paragraph>
                                <paragraph>If the driver raises an exception during the operation, it will be
                                    caught by the try-except block in the manager and the statuses of
                                    cgsnapshot and all snapshots will be set to ‘error’.</paragraph>
                                <paragraph>For a successful operation, the driver can either build the
                                    model_update and snapshots_model_update and return them or
                                    return None, None. The statuses of cgsnapshot and all snapshots
                                    will be set to ‘available’ at the end of the manager function.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'create_consistencygroup()\ (VolumeConsistencyGroupDriver\ method)',\ 'cinder.interface.volume_consistencygroup_driver.VolumeConsistencyGroupDriver.create_consistencygroup',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeConsistencyGroupDriver" first="False" fullname="VolumeConsistencyGroupDriver.create_consistencygroup" ids="cinder.interface.volume_consistencygroup_driver.VolumeConsistencyGroupDriver.create_consistencygroup" module="cinder.interface.volume_consistencygroup_driver" names="cinder.interface.volume_consistencygroup_driver.VolumeConsistencyGroupDriver.create_consistencygroup"><desc_name xml:space="preserve">create_consistencygroup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Creates a consistencygroup.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">group</literal_strong> – the dictionary of the consistency group to be created.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>model_update</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>model_update will be in this format: {‘status’: xxx, ……}.</paragraph>
                                <paragraph>If the status in model_update is ‘error’, the manager will throw
                                    an exception and it will be caught in the try-except block in the
                                    manager. If the driver throws an exception, the manager will also
                                    catch it in the try-except block. The group status in the db will
                                    be changed to ‘error’.</paragraph>
                                <paragraph>For a successful operation, the driver can either build the
                                    model_update and return it or return None. The group status will
                                    be set to ‘available’.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'create_consistencygroup_from_src()\ (VolumeConsistencyGroupDriver\ method)',\ 'cinder.interface.volume_consistencygroup_driver.VolumeConsistencyGroupDriver.create_consistencygroup_from_src',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeConsistencyGroupDriver" first="False" fullname="VolumeConsistencyGroupDriver.create_consistencygroup_from_src" ids="cinder.interface.volume_consistencygroup_driver.VolumeConsistencyGroupDriver.create_consistencygroup_from_src" module="cinder.interface.volume_consistencygroup_driver" names="cinder.interface.volume_consistencygroup_driver.VolumeConsistencyGroupDriver.create_consistencygroup_from_src"><desc_name xml:space="preserve">create_consistencygroup_from_src</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">volumes</desc_parameter><desc_parameter xml:space="preserve">cgsnapshot=None</desc_parameter><desc_parameter xml:space="preserve">snapshots=None</desc_parameter><desc_parameter xml:space="preserve">source_cg=None</desc_parameter><desc_parameter xml:space="preserve">source_vols=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Creates a consistencygroup from source.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">group</literal_strong> – the dictionary of the consistency group to be created.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">volumes</literal_strong> – a list of volume dictionaries in the group.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">cgsnapshot</literal_strong> – the dictionary of the cgsnapshot as source.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">snapshots</literal_strong> – a list of snapshot dictionaries in the cgsnapshot.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">source_cg</literal_strong> – the dictionary of a consistency group as source.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">source_vols</literal_strong> – a list of volume dictionaries in the source_cg.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>model_update, volumes_model_update</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>The source can be cgsnapshot or a source cg.</paragraph>
                                <paragraph>param volumes is retrieved directly from the db. It is a list of
                                    cinder.db.sqlalchemy.models.Volume to be precise. It cannot be
                                    assigned to volumes_model_update. volumes_model_update is a list of
                                    dictionaries. It has to be built by the driver. An entry will be
                                    in this format: {‘id’: xxx, ‘status’: xxx, ……}. model_update
                                    will be in this format: {‘status’: xxx, ……}.</paragraph>
                                <paragraph>To be consistent with other volume operations, the manager will
                                    assume the operation is successful if no exception is thrown by
                                    the driver. For a successful operation, the driver can either build
                                    the model_update and volumes_model_update and return them or
                                    return None, None.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'delete_cgsnapshot()\ (VolumeConsistencyGroupDriver\ method)',\ 'cinder.interface.volume_consistencygroup_driver.VolumeConsistencyGroupDriver.delete_cgsnapshot',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeConsistencyGroupDriver" first="False" fullname="VolumeConsistencyGroupDriver.delete_cgsnapshot" ids="cinder.interface.volume_consistencygroup_driver.VolumeConsistencyGroupDriver.delete_cgsnapshot" module="cinder.interface.volume_consistencygroup_driver" names="cinder.interface.volume_consistencygroup_driver.VolumeConsistencyGroupDriver.delete_cgsnapshot"><desc_name xml:space="preserve">delete_cgsnapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">cgsnapshot</desc_parameter><desc_parameter xml:space="preserve">snapshots</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Deletes a cgsnapshot.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">cgsnapshot</literal_strong> – the dictionary of the cgsnapshot to be deleted.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">snapshots</literal_strong> – a list of snapshot dictionaries in the cgsnapshot.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>model_update, snapshots_model_update</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>param snapshots is retrieved directly from the db. It is a list of
                                    cinder.db.sqlalchemy.models.Snapshot to be precise. It cannot be
                                    assigned to snapshots_model_update. snapshots_model_update is a list
                                    of dictionaries. It has to be built by the driver. An entry will be
                                    in this format: {‘id’: xxx, ‘status’: xxx, ……}. model_update
                                    will be in this format: {‘status’: xxx, ……}.</paragraph>
                                <paragraph>The driver should populate snapshots_model_update and model_update
                                    and return them.</paragraph>
                                <paragraph>The manager will check snapshots_model_update and update db accordingly
                                    for each snapshot. If the driver successfully deleted some snapshots
                                    but failed to delete others, it should set statuses of the snapshots
                                    accordingly so that the manager can update db correctly.</paragraph>
                                <paragraph>If the status in any entry of snapshots_model_update is
                                    ‘error_deleting’ or ‘error’, the status in model_update will be set to
                                    the same if it is not already ‘error_deleting’ or ‘error’.</paragraph>
                                <paragraph>If the status in model_update is ‘error_deleting’ or ‘error’, the
                                    manager will raise an exception and the status of cgsnapshot will be
                                    set to ‘error’ in the db. If snapshots_model_update is not returned by
                                    the driver, the manager will set the status of every snapshot to
                                    ‘error’ in the except block.</paragraph>
                                <paragraph>If the driver raises an exception during the operation, it will be
                                    caught by the try-except block in the manager and the statuses of
                                    cgsnapshot and all snapshots will be set to ‘error’.</paragraph>
                                <paragraph>For a successful operation, the driver can either build the
                                    model_update and snapshots_model_update and return them or
                                    return None, None. The statuses of cgsnapshot and all snapshots
                                    will be set to ‘deleted’ after the manager deletes them from db.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'delete_consistencygroup()\ (VolumeConsistencyGroupDriver\ method)',\ 'cinder.interface.volume_consistencygroup_driver.VolumeConsistencyGroupDriver.delete_consistencygroup',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeConsistencyGroupDriver" first="False" fullname="VolumeConsistencyGroupDriver.delete_consistencygroup" ids="cinder.interface.volume_consistencygroup_driver.VolumeConsistencyGroupDriver.delete_consistencygroup" module="cinder.interface.volume_consistencygroup_driver" names="cinder.interface.volume_consistencygroup_driver.VolumeConsistencyGroupDriver.delete_consistencygroup"><desc_name xml:space="preserve">delete_consistencygroup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">volumes</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Deletes a consistency group.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">group</literal_strong> – the dictionary of the consistency group to be deleted.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">volumes</literal_strong> – a list of volume dictionaries in the group.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>model_update, volumes_model_update</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>param volumes is retrieved directly from the db. It is a list of
                                    cinder.db.sqlalchemy.models.Volume to be precise. It cannot be
                                    assigned to volumes_model_update. volumes_model_update is a list of
                                    dictionaries. It has to be built by the driver. An entry will be
                                    in this format: {‘id’: xxx, ‘status’: xxx, ……}. model_update
                                    will be in this format: {‘status’: xxx, ……}.</paragraph>
                                <paragraph>The driver should populate volumes_model_update and model_update
                                    and return them.</paragraph>
                                <paragraph>The manager will check volumes_model_update and update db accordingly
                                    for each volume. If the driver successfully deleted some volumes
                                    but failed to delete others, it should set statuses of the volumes
                                    accordingly so that the manager can update db correctly.</paragraph>
                                <paragraph>If the status in any entry of volumes_model_update is ‘error_deleting’
                                    or ‘error’, the status in model_update will be set to the same if it
                                    is not already ‘error_deleting’ or ‘error’.</paragraph>
                                <paragraph>If the status in model_update is ‘error_deleting’ or ‘error’, the
                                    manager will raise an exception and the status of the group will be
                                    set to ‘error’ in the db. If volumes_model_update is not returned by
                                    the driver, the manager will set the status of every volume in the
                                    group to ‘error’ in the except block.</paragraph>
                                <paragraph>If the driver raises an exception during the operation, it will be
                                    caught by the try-except block in the manager. The statuses of the
                                    group and all volumes in it will be set to ‘error’.</paragraph>
                                <paragraph>For a successful operation, the driver can either build the
                                    model_update and volumes_model_update and return them or
                                    return None, None. The statuses of the group and all volumes
                                    will be set to ‘deleted’ after the manager deletes them from db.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'update_consistencygroup()\ (VolumeConsistencyGroupDriver\ method)',\ 'cinder.interface.volume_consistencygroup_driver.VolumeConsistencyGroupDriver.update_consistencygroup',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeConsistencyGroupDriver" first="False" fullname="VolumeConsistencyGroupDriver.update_consistencygroup" ids="cinder.interface.volume_consistencygroup_driver.VolumeConsistencyGroupDriver.update_consistencygroup" module="cinder.interface.volume_consistencygroup_driver" names="cinder.interface.volume_consistencygroup_driver.VolumeConsistencyGroupDriver.update_consistencygroup"><desc_name xml:space="preserve">update_consistencygroup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">add_volumes=None</desc_parameter><desc_parameter xml:space="preserve">remove_volumes=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Updates a consistency group.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">group</literal_strong> – the dictionary of the consistency group to be updated.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">add_volumes</literal_strong> – a list of volume dictionaries to be added.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">remove_volumes</literal_strong> – a list of volume dictionaries to be removed.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>model_update, add_volumes_update, remove_volumes_update</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>model_update is a dictionary that the driver wants the manager
                                    to update upon a successful return. If None is returned, the manager
                                    will set the status to ‘available’.</paragraph>
                                <paragraph>add_volumes_update and remove_volumes_update are lists of dictionaries
                                    that the driver wants the manager to update upon a successful return.
                                    Note that each entry requires a {‘id’: xxx} so that the correct
                                    volume entry can be updated. If None is returned, the volume will
                                    remain its original status. Also note that you cannot directly
                                    assign add_volumes to add_volumes_update as add_volumes is a list of
                                    cinder.db.sqlalchemy.models.Volume objects and cannot be used for
                                    db update directly. Same with remove_volumes.</paragraph>
                                <paragraph>If the driver throws an exception, the status of the group as well as
                                    those of the volumes to be added/removed will be set to ‘error’.</paragraph>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
            </section>
            <section ids="generic-volume-groups" names="generic\ volume\ groups">
                <title>Generic Volume Groups</title>
                <paragraph>The generic volume groups feature provides the ability to manage a group of
                    volumes together. Because this feature is implemented at the manager level,
                    every driver gets this feature by default. If a driver wants to override
                    the default behavior to support additional functionalities such as consistent
                    group snapshot, the following interface must be implemented by the driver.
                    Once every driver supporting volume consistency groups has added the
                    consistent group snapshot capability to generic volume groups, we no longer
                    need the volume consistency groups interface listed above.</paragraph>
                <target ids="module-cinder.interface.volume_group_driver" ismod="True"></target>
                <index entries="['single',\ 'cinder.interface.volume_group_driver\ (module)',\ 'module-cinder.interface.volume_group_driver',\ '',\ None]"></index>
                <paragraph>Generic volume group volume driver interface.</paragraph>
                <index entries="['single',\ 'VolumeGroupDriver\ (class\ in\ cinder.interface.volume_group_driver)',\ 'cinder.interface.volume_group_driver.VolumeGroupDriver',\ '',\ None]"></index>
                <desc desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="" first="False" fullname="VolumeGroupDriver" ids="cinder.interface.volume_group_driver.VolumeGroupDriver" module="cinder.interface.volume_group_driver" names="cinder.interface.volume_group_driver.VolumeGroupDriver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">VolumeGroupDriver</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Interface for drivers that support groups.</paragraph>
                        <index entries="['single',\ 'create_group()\ (VolumeGroupDriver\ method)',\ 'cinder.interface.volume_group_driver.VolumeGroupDriver.create_group',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeGroupDriver" first="False" fullname="VolumeGroupDriver.create_group" ids="cinder.interface.volume_group_driver.VolumeGroupDriver.create_group" module="cinder.interface.volume_group_driver" names="cinder.interface.volume_group_driver.VolumeGroupDriver.create_group"><desc_name xml:space="preserve">create_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Creates a group.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">group</literal_strong> – the Group object to be created.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>model_update</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>model_update will be in this format: {‘status’: xxx, ……}.</paragraph>
                                <paragraph>If the status in model_update is ‘error’, the manager will throw
                                    an exception and it will be caught in the try-except block in the
                                    manager. If the driver throws an exception, the manager will also
                                    catch it in the try-except block. The group status in the db will
                                    be changed to ‘error’.</paragraph>
                                <paragraph>For a successful operation, the driver can either build the
                                    model_update and return it or return None. The group status will
                                    be set to ‘available’.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'create_group_from_src()\ (VolumeGroupDriver\ method)',\ 'cinder.interface.volume_group_driver.VolumeGroupDriver.create_group_from_src',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeGroupDriver" first="False" fullname="VolumeGroupDriver.create_group_from_src" ids="cinder.interface.volume_group_driver.VolumeGroupDriver.create_group_from_src" module="cinder.interface.volume_group_driver" names="cinder.interface.volume_group_driver.VolumeGroupDriver.create_group_from_src"><desc_name xml:space="preserve">create_group_from_src</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">volumes</desc_parameter><desc_parameter xml:space="preserve">group_snapshot=None</desc_parameter><desc_parameter xml:space="preserve">snapshots=None</desc_parameter><desc_parameter xml:space="preserve">source_group=None</desc_parameter><desc_parameter xml:space="preserve">source_vols=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Creates a group from source.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">group</literal_strong> – the Group object to be created.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">volumes</literal_strong> – a list of Volume objects in the group.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">group_snapshot</literal_strong> – the GroupSnapshot object as source.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">snapshots</literal_strong> – a list of Snapshot objects in the group_snapshot.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">source_group</literal_strong> – a Group object as source.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">source_vols</literal_strong> – a list of Volume objects in the source_group.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>model_update, volumes_model_update</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>The source can be group_snapshot or a source group.</paragraph>
                                <paragraph>param volumes is a list of objects retrieved from the db. It cannot
                                    be assigned to volumes_model_update. volumes_model_update is a list
                                    of dictionaries. It has to be built by the driver. An entry will be
                                    in this format: {‘id’: xxx, ‘status’: xxx, ……}. model_update
                                    will be in this format: {‘status’: xxx, ……}.</paragraph>
                                <paragraph>To be consistent with other volume operations, the manager will
                                    assume the operation is successful if no exception is thrown by
                                    the driver. For a successful operation, the driver can either build
                                    the model_update and volumes_model_update and return them or
                                    return None, None.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'create_group_snapshot()\ (VolumeGroupDriver\ method)',\ 'cinder.interface.volume_group_driver.VolumeGroupDriver.create_group_snapshot',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeGroupDriver" first="False" fullname="VolumeGroupDriver.create_group_snapshot" ids="cinder.interface.volume_group_driver.VolumeGroupDriver.create_group_snapshot" module="cinder.interface.volume_group_driver" names="cinder.interface.volume_group_driver.VolumeGroupDriver.create_group_snapshot"><desc_name xml:space="preserve">create_group_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_snapshot</desc_parameter><desc_parameter xml:space="preserve">snapshots</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Creates a group_snapshot.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">group_snapshot</literal_strong> – the GroupSnapshot object to be created.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">snapshots</literal_strong> – a list of Snapshot objects in the group_snapshot.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>model_update, snapshots_model_update</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>param snapshots is a list of Snapshot objects. It cannot be assigned
                                    to snapshots_model_update. snapshots_model_update is a list of
                                    dictionaries. It has to be built by the driver. An entry will be
                                    in this format: {‘id’: xxx, ‘status’: xxx, ……}. model_update
                                    will be in this format: {‘status’: xxx, ……}.</paragraph>
                                <paragraph>The driver should populate snapshots_model_update and model_update
                                    and return them.</paragraph>
                                <paragraph>The manager will check snapshots_model_update and update db accordingly
                                    for each snapshot. If the driver successfully deleted some snapshots
                                    but failed to delete others, it should set statuses of the snapshots
                                    accordingly so that the manager can update db correctly.</paragraph>
                                <paragraph>If the status in any entry of snapshots_model_update is ‘error’, the
                                    status in model_update will be set to the same if it is not already
                                    ‘error’.</paragraph>
                                <paragraph>If the status in model_update is ‘error’, the manager will raise an
                                    exception and the status of group_snapshot will be set to ‘error’ in
                                    the db. If snapshots_model_update is not returned by the driver, the
                                    manager will set the status of every snapshot to ‘error’ in the except
                                    block.</paragraph>
                                <paragraph>If the driver raises an exception during the operation, it will be
                                    caught by the try-except block in the manager and the statuses of
                                    group_snapshot and all snapshots will be set to ‘error’.</paragraph>
                                <paragraph>For a successful operation, the driver can either build the
                                    model_update and snapshots_model_update and return them or
                                    return None, None. The statuses of group_snapshot and all snapshots
                                    will be set to ‘available’ at the end of the manager function.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'delete_group()\ (VolumeGroupDriver\ method)',\ 'cinder.interface.volume_group_driver.VolumeGroupDriver.delete_group',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeGroupDriver" first="False" fullname="VolumeGroupDriver.delete_group" ids="cinder.interface.volume_group_driver.VolumeGroupDriver.delete_group" module="cinder.interface.volume_group_driver" names="cinder.interface.volume_group_driver.VolumeGroupDriver.delete_group"><desc_name xml:space="preserve">delete_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">volumes</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Deletes a group.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">group</literal_strong> – the Group object to be deleted.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">volumes</literal_strong> – a list of Volume objects in the group.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>model_update, volumes_model_update</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>param volumes is a list of objects retrieved from the db. It cannot
                                    be assigned to volumes_model_update. volumes_model_update is a list
                                    of dictionaries. It has to be built by the driver. An entry will be
                                    in this format: {‘id’: xxx, ‘status’: xxx, ……}. model_update
                                    will be in this format: {‘status’: xxx, ……}.</paragraph>
                                <paragraph>The driver should populate volumes_model_update and model_update
                                    and return them.</paragraph>
                                <paragraph>The manager will check volumes_model_update and update db accordingly
                                    for each volume. If the driver successfully deleted some volumes
                                    but failed to delete others, it should set statuses of the volumes
                                    accordingly so that the manager can update db correctly.</paragraph>
                                <paragraph>If the status in any entry of volumes_model_update is ‘error_deleting’
                                    or ‘error’, the status in model_update will be set to the same if it
                                    is not already ‘error_deleting’ or ‘error’.</paragraph>
                                <paragraph>If the status in model_update is ‘error_deleting’ or ‘error’, the
                                    manager will raise an exception and the status of the group will be
                                    set to ‘error’ in the db. If volumes_model_update is not returned by
                                    the driver, the manager will set the status of every volume in the
                                    group to ‘error’ in the except block.</paragraph>
                                <paragraph>If the driver raises an exception during the operation, it will be
                                    caught by the try-except block in the manager. The statuses of the
                                    group and all volumes in it will be set to ‘error’.</paragraph>
                                <paragraph>For a successful operation, the driver can either build the
                                    model_update and volumes_model_update and return them or
                                    return None, None. The statuses of the group and all volumes
                                    will be set to ‘deleted’ after the manager deletes them from db.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'delete_group_snapshot()\ (VolumeGroupDriver\ method)',\ 'cinder.interface.volume_group_driver.VolumeGroupDriver.delete_group_snapshot',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeGroupDriver" first="False" fullname="VolumeGroupDriver.delete_group_snapshot" ids="cinder.interface.volume_group_driver.VolumeGroupDriver.delete_group_snapshot" module="cinder.interface.volume_group_driver" names="cinder.interface.volume_group_driver.VolumeGroupDriver.delete_group_snapshot"><desc_name xml:space="preserve">delete_group_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_snapshot</desc_parameter><desc_parameter xml:space="preserve">snapshots</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Deletes a group_snapshot.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">group_snapshot</literal_strong> – the GroupSnapshot object to be deleted.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">snapshots</literal_strong> – a list of Snapshot objects in the group_snapshot.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>model_update, snapshots_model_update</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>param snapshots is a list of objects. It cannot be assigned to
                                    snapshots_model_update. snapshots_model_update is a list of of
                                    dictionaries. It has to be built by the driver. An entry will be
                                    in this format: {‘id’: xxx, ‘status’: xxx, ……}. model_update
                                    will be in this format: {‘status’: xxx, ……}.</paragraph>
                                <paragraph>The driver should populate snapshots_model_update and model_update
                                    and return them.</paragraph>
                                <paragraph>The manager will check snapshots_model_update and update db accordingly
                                    for each snapshot. If the driver successfully deleted some snapshots
                                    but failed to delete others, it should set statuses of the snapshots
                                    accordingly so that the manager can update db correctly.</paragraph>
                                <paragraph>If the status in any entry of snapshots_model_update is
                                    ‘error_deleting’ or ‘error’, the status in model_update will be set to
                                    the same if it is not already ‘error_deleting’ or ‘error’.</paragraph>
                                <paragraph>If the status in model_update is ‘error_deleting’ or ‘error’, the
                                    manager will raise an exception and the status of group_snapshot will
                                    be set to ‘error’ in the db. If snapshots_model_update is not returned
                                    by the driver, the manager will set the status of every snapshot to
                                    ‘error’ in the except block.</paragraph>
                                <paragraph>If the driver raises an exception during the operation, it will be
                                    caught by the try-except block in the manager and the statuses of
                                    group_snapshot and all snapshots will be set to ‘error’.</paragraph>
                                <paragraph>For a successful operation, the driver can either build the
                                    model_update and snapshots_model_update and return them or
                                    return None, None. The statuses of group_snapshot and all snapshots
                                    will be set to ‘deleted’ after the manager deletes them from db.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'update_group()\ (VolumeGroupDriver\ method)',\ 'cinder.interface.volume_group_driver.VolumeGroupDriver.update_group',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="VolumeGroupDriver" first="False" fullname="VolumeGroupDriver.update_group" ids="cinder.interface.volume_group_driver.VolumeGroupDriver.update_group" module="cinder.interface.volume_group_driver" names="cinder.interface.volume_group_driver.VolumeGroupDriver.update_group"><desc_name xml:space="preserve">update_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">add_volumes=None</desc_parameter><desc_parameter xml:space="preserve">remove_volumes=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Updates a group.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">group</literal_strong> – the Group object to be updated.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">add_volumes</literal_strong> – a list of Volume objects to be added.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">remove_volumes</literal_strong> – a list of Volume objects to be removed.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>model_update, add_volumes_update, remove_volumes_update</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>model_update is a dictionary that the driver wants the manager
                                    to update upon a successful return. If None is returned, the manager
                                    will set the status to ‘available’.</paragraph>
                                <paragraph>add_volumes_update and remove_volumes_update are lists of dictionaries
                                    that the driver wants the manager to update upon a successful return.
                                    Note that each entry requires a {‘id’: xxx} so that the correct
                                    volume entry can be updated. If None is returned, the volume will
                                    remain its original status. Also note that you cannot directly
                                    assign add_volumes to add_volumes_update as add_volumes is a list of
                                    volume objects and cannot be used for db update directly. Same with
                                    remove_volumes.</paragraph>
                                <paragraph>If the driver throws an exception, the status of the group as well as
                                    those of the volumes to be added/removed will be set to ‘error’.</paragraph>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
            </section>
        </section>
    </section>
</document>
