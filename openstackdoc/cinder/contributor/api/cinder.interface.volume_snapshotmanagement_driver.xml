<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api/cinder.interface.volume_snapshotmanagement_driver.rst">
    <section ids="module-cinder.interface.volume_snapshotmanagement_driver the-cinder-interface-volume-snapshotmanagement-driver-module" names="the\ cinder.interface.volume_snapshotmanagement_driver\ module">
        <title>The <reference internal="True" reftitle="cinder.interface.volume_snapshotmanagement_driver" refuri="../drivers#module-cinder.interface.volume_snapshotmanagement_driver"><literal classes="xref py py-mod">cinder.interface.volume_snapshotmanagement_driver</literal></reference> Module</title>
        <index entries="['single',\ 'cinder.interface.volume_snapshotmanagement_driver\ (module)',\ 'module-cinder.interface.volume_snapshotmanagement_driver',\ '',\ None]"></index>
        <paragraph>Manage/unmanage existing volume snapshots driver interface.</paragraph>
        <index entries="['single',\ 'VolumeSnapshotManagementDriver\ (class\ in\ cinder.interface.volume_snapshotmanagement_driver)',\ 'cinder.interface.volume_snapshotmanagement_driver.VolumeSnapshotManagementDriver',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="VolumeSnapshotManagementDriver" ids="cinder.interface.volume_snapshotmanagement_driver.VolumeSnapshotManagementDriver" module="cinder.interface.volume_snapshotmanagement_driver" names="cinder.interface.volume_snapshotmanagement_driver.VolumeSnapshotManagementDriver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">VolumeSnapshotManagementDriver</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" reftitle="cinder.interface.base.CinderInterface" refuri="cinder.interface.base#cinder.interface.base.CinderInterface"><literal classes="xref py py-class">cinder.interface.base.CinderInterface</literal></reference></paragraph>
                <paragraph>Interface for drivers that support managing existing snapshots.</paragraph>
                <index entries="['single',\ 'manage_existing_snapshot()\ (VolumeSnapshotManagementDriver\ method)',\ 'cinder.interface.volume_snapshotmanagement_driver.VolumeSnapshotManagementDriver.manage_existing_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeSnapshotManagementDriver" first="False" fullname="VolumeSnapshotManagementDriver.manage_existing_snapshot" ids="cinder.interface.volume_snapshotmanagement_driver.VolumeSnapshotManagementDriver.manage_existing_snapshot" module="cinder.interface.volume_snapshotmanagement_driver" names="cinder.interface.volume_snapshotmanagement_driver.VolumeSnapshotManagementDriver.manage_existing_snapshot"><desc_name xml:space="preserve">manage_existing_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Brings an existing backend storage object under Cinder management.</paragraph>
                        <paragraph>existing_ref is passed straight through from the API request’s
                            manage_existing_ref value, and it is up to the driver how this should
                            be interpreted.  It should be sufficient to identify a storage object
                            that the driver should somehow associate with the newly-created cinder
                            snapshot structure.</paragraph>
                        <paragraph>There are two ways to do this:</paragraph>
                        <enumerated_list enumtype="arabic" prefix="" suffix=".">
                            <list_item>
                                <paragraph>Rename the backend storage object so that it matches the
                                    snapshot[‘name’] which is how drivers traditionally map between a
                                    cinder snapshot and the associated backend storage object.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Place some metadata on the snapshot, or somewhere in the backend,
                                    that allows other driver requests (e.g. delete) to locate the
                                    backend storage object when required.</paragraph>
                            </list_item>
                        </enumerated_list>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">snapshot</literal_strong> – The snapshot to manage.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">existing_ref</literal_strong> – Dictionary with keys ‘source-id’, ‘source-name’
                                                with driver-specific values to identify a backend
                                                storage object.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Raises</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="cinder.exception.ManageExistingInvalidReference" refuri="cinder.exception#cinder.exception.ManageExistingInvalidReference"><literal_strong>ManageExistingInvalidReference</literal_strong></reference> – If the existing_ref doesn’t
                                        make sense, or doesn’t refer to an existing backend storage
                                        object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing_snapshot_get_size()\ (VolumeSnapshotManagementDriver\ method)',\ 'cinder.interface.volume_snapshotmanagement_driver.VolumeSnapshotManagementDriver.manage_existing_snapshot_get_size',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeSnapshotManagementDriver" first="False" fullname="VolumeSnapshotManagementDriver.manage_existing_snapshot_get_size" ids="cinder.interface.volume_snapshotmanagement_driver.VolumeSnapshotManagementDriver.manage_existing_snapshot_get_size" module="cinder.interface.volume_snapshotmanagement_driver" names="cinder.interface.volume_snapshotmanagement_driver.VolumeSnapshotManagementDriver.manage_existing_snapshot_get_size"><desc_name xml:space="preserve">manage_existing_snapshot_get_size</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Return size of snapshot to be managed by manage_existing.</paragraph>
                        <paragraph>When calculating the size, round up to the next GB.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">snapshot</literal_strong> – The snapshot to manage.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">existing_ref</literal_strong> – Dictionary with keys ‘source-id’, ‘source-name’
                                                with driver-specific values to identify a backend
                                                storage object.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Raises</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="cinder.exception.ManageExistingInvalidReference" refuri="cinder.exception#cinder.exception.ManageExistingInvalidReference"><literal_strong>ManageExistingInvalidReference</literal_strong></reference> – If the existing_ref doesn’t
                                        make sense, or doesn’t refer to an existing backend storage
                                        object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'unmanage_snapshot()\ (VolumeSnapshotManagementDriver\ method)',\ 'cinder.interface.volume_snapshotmanagement_driver.VolumeSnapshotManagementDriver.unmanage_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeSnapshotManagementDriver" first="False" fullname="VolumeSnapshotManagementDriver.unmanage_snapshot" ids="cinder.interface.volume_snapshotmanagement_driver.VolumeSnapshotManagementDriver.unmanage_snapshot" module="cinder.interface.volume_snapshotmanagement_driver" names="cinder.interface.volume_snapshotmanagement_driver.VolumeSnapshotManagementDriver.unmanage_snapshot"><desc_name xml:space="preserve">unmanage_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Removes the specified snapshot from Cinder management.</paragraph>
                        <paragraph>Does not delete the underlying backend storage object.</paragraph>
                        <paragraph>For most drivers, this will not need to do anything. However, some
                            drivers might use this call as an opportunity to clean up any
                            Cinder-specific configuration that they have associated with the
                            backend storage object.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">snapshot</literal_strong> – The snapshot to unmanage.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
    </section>
</document>
