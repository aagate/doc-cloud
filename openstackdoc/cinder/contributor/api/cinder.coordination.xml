<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api/cinder.coordination.rst">
    <section ids="module-cinder.coordination the-cinder-coordination-module" names="the\ cinder.coordination\ module">
        <title>The <reference internal="True" refid="module-cinder.coordination" reftitle="cinder.coordination"><literal classes="xref py py-mod">cinder.coordination</literal></reference> Module</title>
        <index entries="['single',\ 'cinder.coordination\ (module)',\ 'module-cinder.coordination',\ '',\ None]"></index>
        <paragraph>Coordination and locking utilities.</paragraph>
        <index entries="['single',\ 'Coordinator\ (class\ in\ cinder.coordination)',\ 'cinder.coordination.Coordinator',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="Coordinator" ids="cinder.coordination.Coordinator" module="cinder.coordination" names="cinder.coordination.Coordinator"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">Coordinator</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">agent_id=None</desc_parameter><desc_parameter xml:space="preserve">prefix=''</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                <paragraph>Tooz coordination wrapper.</paragraph>
                <paragraph>Coordination member id is created from concatenated
                    <title_reference>prefix</title_reference> and <title_reference>agent_id</title_reference> parameters.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">agent_id</literal_strong> (<literal_emphasis>str</literal_emphasis>) – Agent identifier</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">prefix</literal_strong> (<literal_emphasis>str</literal_emphasis>) – Used to provide member identifier with a
                                        meaningful prefix.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
                <index entries="['single',\ 'get_lock()\ (Coordinator\ method)',\ 'cinder.coordination.Coordinator.get_lock',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Coordinator" first="False" fullname="Coordinator.get_lock" ids="cinder.coordination.Coordinator.get_lock" module="cinder.coordination" names="cinder.coordination.Coordinator.get_lock"><desc_name xml:space="preserve">get_lock</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Return a Tooz backend lock.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>str</literal_emphasis>) – The lock name that is used to identify it
                                        across all nodes.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'start()\ (Coordinator\ method)',\ 'cinder.coordination.Coordinator.start',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Coordinator" first="False" fullname="Coordinator.start" ids="cinder.coordination.Coordinator.start" module="cinder.coordination" names="cinder.coordination.Coordinator.start"><desc_name xml:space="preserve">start</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'stop()\ (Coordinator\ method)',\ 'cinder.coordination.Coordinator.stop',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Coordinator" first="False" fullname="Coordinator.stop" ids="cinder.coordination.Coordinator.stop" module="cinder.coordination" names="cinder.coordination.Coordinator.stop"><desc_name xml:space="preserve">stop</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Disconnect from coordination backend and stop heartbeat.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'synchronized()\ (in\ module\ cinder.coordination)',\ 'cinder.coordination.synchronized',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="synchronized" ids="cinder.coordination.synchronized" module="cinder.coordination" names="cinder.coordination.synchronized"><desc_name xml:space="preserve">synchronized</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">lock_name</desc_parameter><desc_parameter xml:space="preserve">blocking=True</desc_parameter><desc_parameter xml:space="preserve">coordinator=&lt;cinder.coordination.Coordinator object&gt;</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Synchronization decorator.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">lock_name</literal_strong> (<literal_emphasis>str</literal_emphasis>) – Lock name.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">blocking</literal_strong> – If True, blocks until the lock is acquired.
                                        If False, raises exception when not acquired. Otherwise,
                                        the value is used as a timeout value and if lock is not acquired
                                        after this number of seconds exception is raised.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">coordinator</literal_strong> – Coordinator class to use when creating lock.
                                        Defaults to the global coordinator.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Raises</field_name>
                        <field_body>
                            <paragraph><literal_strong>tooz.coordination.LockAcquireFailed</literal_strong> – if lock is not acquired</paragraph>
                        </field_body>
                    </field>
                </field_list>
                <paragraph>Decorating a method like so:</paragraph>
                <literal_block xml:space="preserve">@synchronized('mylock')
def foo(self, *args):
   ...</literal_block>
                <paragraph>ensures that only one process will execute the foo method at a time.</paragraph>
                <paragraph>Different methods can share the same lock:</paragraph>
                <literal_block xml:space="preserve">@synchronized('mylock')
def foo(self, *args):
   ...

@synchronized('mylock')
def bar(self, *args):
   ...</literal_block>
                <paragraph>This way only one of either foo or bar can be executing at a time.</paragraph>
                <paragraph>Lock name can be formatted using Python format string syntax:</paragraph>
                <literal_block xml:space="preserve">@synchronized('{f_name}-{vol.id}-{snap[name]}')
def foo(self, vol, snap):
   ...</literal_block>
                <paragraph>Available field names are: decorated function parameters and
                    <title_reference>f_name</title_reference> as a decorated function name.</paragraph>
            </desc_content>
        </desc>
    </section>
</document>
