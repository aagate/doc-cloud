<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api/cinder.hacking.checks.rst">
    <section ids="module-cinder.hacking.checks the-cinder-hacking-checks-module" names="the\ cinder.hacking.checks\ module">
        <title>The <reference internal="True" refid="module-cinder.hacking.checks" reftitle="cinder.hacking.checks"><literal classes="xref py py-mod">cinder.hacking.checks</literal></reference> Module</title>
        <index entries="['single',\ 'cinder.hacking.checks\ (module)',\ 'module-cinder.hacking.checks',\ '',\ None]"></index>
        <index entries="['single',\ 'BaseASTChecker\ (class\ in\ cinder.hacking.checks)',\ 'cinder.hacking.checks.BaseASTChecker',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="BaseASTChecker" ids="cinder.hacking.checks.BaseASTChecker" module="cinder.hacking.checks" names="cinder.hacking.checks.BaseASTChecker"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">BaseASTChecker</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">tree</desc_parameter><desc_parameter xml:space="preserve">filename</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">ast.NodeVisitor</literal></paragraph>
                <paragraph>Provides a simple framework for writing AST-based checks.</paragraph>
                <paragraph>Subclasses should implement visit_* methods like any other AST visitor
                    implementation. When they detect an error for a particular node the
                    method should call <literal>self.add_error(offending_node)</literal>. Details about
                    where in the code the error occurred will be pulled from the node
                    object.</paragraph>
                <paragraph>Subclasses should also provide a class variable named CHECK_DESC to
                    be used for the human readable error message.</paragraph>
                <index entries="['single',\ 'add_error()\ (BaseASTChecker\ method)',\ 'cinder.hacking.checks.BaseASTChecker.add_error',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseASTChecker" first="False" fullname="BaseASTChecker.add_error" ids="cinder.hacking.checks.BaseASTChecker.add_error" module="cinder.hacking.checks" names="cinder.hacking.checks.BaseASTChecker.add_error"><desc_name xml:space="preserve">add_error</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">message=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Add an error caused by a node to the list of errors for pep8.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'run()\ (BaseASTChecker\ method)',\ 'cinder.hacking.checks.BaseASTChecker.run',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseASTChecker" first="False" fullname="BaseASTChecker.run" ids="cinder.hacking.checks.BaseASTChecker.run" module="cinder.hacking.checks" names="cinder.hacking.checks.BaseASTChecker.run"><desc_name xml:space="preserve">run</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Called automatically by pep8.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'CheckForStrUnicodeExc\ (class\ in\ cinder.hacking.checks)',\ 'cinder.hacking.checks.CheckForStrUnicodeExc',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="CheckForStrUnicodeExc" ids="cinder.hacking.checks.CheckForStrUnicodeExc" module="cinder.hacking.checks" names="cinder.hacking.checks.CheckForStrUnicodeExc"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">CheckForStrUnicodeExc</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">tree</desc_parameter><desc_parameter xml:space="preserve">filename</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" refid="cinder.hacking.checks.BaseASTChecker" reftitle="cinder.hacking.checks.BaseASTChecker"><literal classes="xref py py-class">cinder.hacking.checks.BaseASTChecker</literal></reference></paragraph>
                <paragraph>Checks for the use of str() or unicode() on an exception.</paragraph>
                <paragraph>This currently only handles the case where str() or unicode()
                    is used in the scope of an exception handler.  If the exception
                    is passed into a function, returned from an assertRaises, or
                    used on an exception created in the same scope, this does not
                    catch it.</paragraph>
                <index entries="['single',\ 'CHECK_DESC\ (CheckForStrUnicodeExc\ attribute)',\ 'cinder.hacking.checks.CheckForStrUnicodeExc.CHECK_DESC',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CheckForStrUnicodeExc" first="False" fullname="CheckForStrUnicodeExc.CHECK_DESC" ids="cinder.hacking.checks.CheckForStrUnicodeExc.CHECK_DESC" module="cinder.hacking.checks" names="cinder.hacking.checks.CheckForStrUnicodeExc.CHECK_DESC"><desc_name xml:space="preserve">CHECK_DESC</desc_name><desc_annotation xml:space="preserve"> = 'N325 str() and unicode() cannot be used on an exception.  Remove or use six.text_type()'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'visit_Call()\ (CheckForStrUnicodeExc\ method)',\ 'cinder.hacking.checks.CheckForStrUnicodeExc.visit_Call',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CheckForStrUnicodeExc" first="False" fullname="CheckForStrUnicodeExc.visit_Call" ids="cinder.hacking.checks.CheckForStrUnicodeExc.visit_Call" module="cinder.hacking.checks" names="cinder.hacking.checks.CheckForStrUnicodeExc.visit_Call"><desc_name xml:space="preserve">visit_Call</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'visit_ExceptHandler()\ (CheckForStrUnicodeExc\ method)',\ 'cinder.hacking.checks.CheckForStrUnicodeExc.visit_ExceptHandler',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CheckForStrUnicodeExc" first="False" fullname="CheckForStrUnicodeExc.visit_ExceptHandler" ids="cinder.hacking.checks.CheckForStrUnicodeExc.visit_ExceptHandler" module="cinder.hacking.checks" names="cinder.hacking.checks.CheckForStrUnicodeExc.visit_ExceptHandler"><desc_name xml:space="preserve">visit_ExceptHandler</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'visit_TryExcept()\ (CheckForStrUnicodeExc\ method)',\ 'cinder.hacking.checks.CheckForStrUnicodeExc.visit_TryExcept',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CheckForStrUnicodeExc" first="False" fullname="CheckForStrUnicodeExc.visit_TryExcept" ids="cinder.hacking.checks.CheckForStrUnicodeExc.visit_TryExcept" module="cinder.hacking.checks" names="cinder.hacking.checks.CheckForStrUnicodeExc.visit_TryExcept"><desc_name xml:space="preserve">visit_TryExcept</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'CheckLoggingFormatArgs\ (class\ in\ cinder.hacking.checks)',\ 'cinder.hacking.checks.CheckLoggingFormatArgs',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="CheckLoggingFormatArgs" ids="cinder.hacking.checks.CheckLoggingFormatArgs" module="cinder.hacking.checks" names="cinder.hacking.checks.CheckLoggingFormatArgs"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">CheckLoggingFormatArgs</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">tree</desc_parameter><desc_parameter xml:space="preserve">filename</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" refid="cinder.hacking.checks.BaseASTChecker" reftitle="cinder.hacking.checks.BaseASTChecker"><literal classes="xref py py-class">cinder.hacking.checks.BaseASTChecker</literal></reference></paragraph>
                <paragraph>Check for improper use of logging format arguments.</paragraph>
                <definition_list>
                    <definition_list_item>
                        <term>LOG.debug(“Volume %s caught fire and is at %d degrees C and climbing.”,</term>
                        <definition>
                            <paragraph>(‘volume1’, 500))</paragraph>
                        </definition>
                    </definition_list_item>
                </definition_list>
                <paragraph>The format arguments should not be a tuple as it is easy to miss.</paragraph>
                <index entries="['single',\ 'CHECK_DESC\ (CheckLoggingFormatArgs\ attribute)',\ 'cinder.hacking.checks.CheckLoggingFormatArgs.CHECK_DESC',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CheckLoggingFormatArgs" first="False" fullname="CheckLoggingFormatArgs.CHECK_DESC" ids="cinder.hacking.checks.CheckLoggingFormatArgs.CHECK_DESC" module="cinder.hacking.checks" names="cinder.hacking.checks.CheckLoggingFormatArgs.CHECK_DESC"><desc_name xml:space="preserve">CHECK_DESC</desc_name><desc_annotation xml:space="preserve"> = 'C310 Log method arguments should not be a tuple.'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'LOG_METHODS\ (CheckLoggingFormatArgs\ attribute)',\ 'cinder.hacking.checks.CheckLoggingFormatArgs.LOG_METHODS',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CheckLoggingFormatArgs" first="False" fullname="CheckLoggingFormatArgs.LOG_METHODS" ids="cinder.hacking.checks.CheckLoggingFormatArgs.LOG_METHODS" module="cinder.hacking.checks" names="cinder.hacking.checks.CheckLoggingFormatArgs.LOG_METHODS"><desc_name xml:space="preserve">LOG_METHODS</desc_name><desc_annotation xml:space="preserve"> = ['debug', 'info', 'warn', 'warning', 'error', 'exception', 'critical', 'fatal', 'trace', 'log']</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'visit_Call()\ (CheckLoggingFormatArgs\ method)',\ 'cinder.hacking.checks.CheckLoggingFormatArgs.visit_Call',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CheckLoggingFormatArgs" first="False" fullname="CheckLoggingFormatArgs.visit_Call" ids="cinder.hacking.checks.CheckLoggingFormatArgs.visit_Call" module="cinder.hacking.checks" names="cinder.hacking.checks.CheckLoggingFormatArgs.visit_Call"><desc_name xml:space="preserve">visit_Call</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Look for the ‘LOG.*’ calls.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'CheckOptRegistrationArgs\ (class\ in\ cinder.hacking.checks)',\ 'cinder.hacking.checks.CheckOptRegistrationArgs',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="CheckOptRegistrationArgs" ids="cinder.hacking.checks.CheckOptRegistrationArgs" module="cinder.hacking.checks" names="cinder.hacking.checks.CheckOptRegistrationArgs"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">CheckOptRegistrationArgs</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">tree</desc_parameter><desc_parameter xml:space="preserve">filename</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" refid="cinder.hacking.checks.BaseASTChecker" reftitle="cinder.hacking.checks.BaseASTChecker"><literal classes="xref py py-class">cinder.hacking.checks.BaseASTChecker</literal></reference></paragraph>
                <paragraph>Verifying the registration of options are well formed</paragraph>
                <paragraph>This class creates a check for single opt or list/tuple of
                    opts when register_opt() or register_opts() are being called.</paragraph>
                <index entries="['single',\ 'CHECK_DESC\ (CheckOptRegistrationArgs\ attribute)',\ 'cinder.hacking.checks.CheckOptRegistrationArgs.CHECK_DESC',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CheckOptRegistrationArgs" first="False" fullname="CheckOptRegistrationArgs.CHECK_DESC" ids="cinder.hacking.checks.CheckOptRegistrationArgs.CHECK_DESC" module="cinder.hacking.checks" names="cinder.hacking.checks.CheckOptRegistrationArgs.CHECK_DESC"><desc_name xml:space="preserve">CHECK_DESC</desc_name><desc_annotation xml:space="preserve"> = 'C311: Arguments being passed to register_opt/register_opts must be a single option or list/tuple of options respectively. Options must also end with _opt or _opts respectively.'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'plural_method\ (CheckOptRegistrationArgs\ attribute)',\ 'cinder.hacking.checks.CheckOptRegistrationArgs.plural_method',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CheckOptRegistrationArgs" first="False" fullname="CheckOptRegistrationArgs.plural_method" ids="cinder.hacking.checks.CheckOptRegistrationArgs.plural_method" module="cinder.hacking.checks" names="cinder.hacking.checks.CheckOptRegistrationArgs.plural_method"><desc_name xml:space="preserve">plural_method</desc_name><desc_annotation xml:space="preserve"> = 'register_opts'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'register_methods\ (CheckOptRegistrationArgs\ attribute)',\ 'cinder.hacking.checks.CheckOptRegistrationArgs.register_methods',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CheckOptRegistrationArgs" first="False" fullname="CheckOptRegistrationArgs.register_methods" ids="cinder.hacking.checks.CheckOptRegistrationArgs.register_methods" module="cinder.hacking.checks" names="cinder.hacking.checks.CheckOptRegistrationArgs.register_methods"><desc_name xml:space="preserve">register_methods</desc_name><desc_annotation xml:space="preserve"> = ['register_opt', 'register_opts']</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'singular_method\ (CheckOptRegistrationArgs\ attribute)',\ 'cinder.hacking.checks.CheckOptRegistrationArgs.singular_method',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CheckOptRegistrationArgs" first="False" fullname="CheckOptRegistrationArgs.singular_method" ids="cinder.hacking.checks.CheckOptRegistrationArgs.singular_method" module="cinder.hacking.checks" names="cinder.hacking.checks.CheckOptRegistrationArgs.singular_method"><desc_name xml:space="preserve">singular_method</desc_name><desc_annotation xml:space="preserve"> = 'register_opt'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'visit_Call()\ (CheckOptRegistrationArgs\ method)',\ 'cinder.hacking.checks.CheckOptRegistrationArgs.visit_Call',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CheckOptRegistrationArgs" first="False" fullname="CheckOptRegistrationArgs.visit_Call" ids="cinder.hacking.checks.CheckOptRegistrationArgs.visit_Call" module="cinder.hacking.checks" names="cinder.hacking.checks.CheckOptRegistrationArgs.visit_Call"><desc_name xml:space="preserve">visit_Call</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Look for the register_opt/register_opts calls.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'check_datetime_now()\ (in\ module\ cinder.hacking.checks)',\ 'cinder.hacking.checks.check_datetime_now',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="check_datetime_now" ids="cinder.hacking.checks.check_datetime_now" module="cinder.hacking.checks" names="cinder.hacking.checks.check_datetime_now"><desc_name xml:space="preserve">check_datetime_now</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">logical_line</desc_parameter><desc_parameter xml:space="preserve">noqa</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'check_explicit_underscore_import()\ (in\ module\ cinder.hacking.checks)',\ 'cinder.hacking.checks.check_explicit_underscore_import',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="check_explicit_underscore_import" ids="cinder.hacking.checks.check_explicit_underscore_import" module="cinder.hacking.checks" names="cinder.hacking.checks.check_explicit_underscore_import"><desc_name xml:space="preserve">check_explicit_underscore_import</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">logical_line</desc_parameter><desc_parameter xml:space="preserve">filename</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Check for explicit import of the _ function</paragraph>
                <paragraph>We need to ensure that any files that are using the _() function
                    to translate messages are explicitly importing the _ function.  We
                    can’t trust unit test to catch whether the import has been
                    added so we need to check for it here.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'check_no_log_audit()\ (in\ module\ cinder.hacking.checks)',\ 'cinder.hacking.checks.check_no_log_audit',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="check_no_log_audit" ids="cinder.hacking.checks.check_no_log_audit" module="cinder.hacking.checks" names="cinder.hacking.checks.check_no_log_audit"><desc_name xml:space="preserve">check_no_log_audit</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">logical_line</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Ensure that we are not using LOG.audit messages</paragraph>
                <paragraph>Plans are in place going forward as discussed in the following
                    spec (<reference refuri="https://review.openstack.org/#/c/91446/">https://review.openstack.org/#/c/91446/</reference>) to take out
                    LOG.audit messages.  Given that audit was a concept invented
                    for OpenStack we can enforce not using it.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'check_no_print_statements()\ (in\ module\ cinder.hacking.checks)',\ 'cinder.hacking.checks.check_no_print_statements',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="check_no_print_statements" ids="cinder.hacking.checks.check_no_print_statements" module="cinder.hacking.checks" names="cinder.hacking.checks.check_no_print_statements"><desc_name xml:space="preserve">check_no_print_statements</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">logical_line</desc_parameter><desc_parameter xml:space="preserve">filename</desc_parameter><desc_parameter xml:space="preserve">noqa</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'check_timeutils_isotime()\ (in\ module\ cinder.hacking.checks)',\ 'cinder.hacking.checks.check_timeutils_isotime',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="check_timeutils_isotime" ids="cinder.hacking.checks.check_timeutils_isotime" module="cinder.hacking.checks" names="cinder.hacking.checks.check_timeutils_isotime"><desc_name xml:space="preserve">check_timeutils_isotime</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">logical_line</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'check_timeutils_strtime()\ (in\ module\ cinder.hacking.checks)',\ 'cinder.hacking.checks.check_timeutils_strtime',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="check_timeutils_strtime" ids="cinder.hacking.checks.check_timeutils_strtime" module="cinder.hacking.checks" names="cinder.hacking.checks.check_timeutils_strtime"><desc_name xml:space="preserve">check_timeutils_strtime</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">logical_line</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'check_unicode_usage()\ (in\ module\ cinder.hacking.checks)',\ 'cinder.hacking.checks.check_unicode_usage',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="check_unicode_usage" ids="cinder.hacking.checks.check_unicode_usage" module="cinder.hacking.checks" names="cinder.hacking.checks.check_unicode_usage"><desc_name xml:space="preserve">check_unicode_usage</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">logical_line</desc_parameter><desc_parameter xml:space="preserve">noqa</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'dict_constructor_with_list_copy()\ (in\ module\ cinder.hacking.checks)',\ 'cinder.hacking.checks.dict_constructor_with_list_copy',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="dict_constructor_with_list_copy" ids="cinder.hacking.checks.dict_constructor_with_list_copy" module="cinder.hacking.checks" names="cinder.hacking.checks.dict_constructor_with_list_copy"><desc_name xml:space="preserve">dict_constructor_with_list_copy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">logical_line</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'factory()\ (in\ module\ cinder.hacking.checks)',\ 'cinder.hacking.checks.factory',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="factory" ids="cinder.hacking.checks.factory" module="cinder.hacking.checks" names="cinder.hacking.checks.factory"><desc_name xml:space="preserve">factory</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">register</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'no_log_warn()\ (in\ module\ cinder.hacking.checks)',\ 'cinder.hacking.checks.no_log_warn',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="no_log_warn" ids="cinder.hacking.checks.no_log_warn" module="cinder.hacking.checks" names="cinder.hacking.checks.no_log_warn"><desc_name xml:space="preserve">no_log_warn</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">logical_line</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'no_mutable_default_args()\ (in\ module\ cinder.hacking.checks)',\ 'cinder.hacking.checks.no_mutable_default_args',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="no_mutable_default_args" ids="cinder.hacking.checks.no_mutable_default_args" module="cinder.hacking.checks" names="cinder.hacking.checks.no_mutable_default_args"><desc_name xml:space="preserve">no_mutable_default_args</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">logical_line</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'no_test_log()\ (in\ module\ cinder.hacking.checks)',\ 'cinder.hacking.checks.no_test_log',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="no_test_log" ids="cinder.hacking.checks.no_test_log" module="cinder.hacking.checks" names="cinder.hacking.checks.no_test_log"><desc_name xml:space="preserve">no_test_log</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">logical_line</desc_parameter><desc_parameter xml:space="preserve">filename</desc_parameter><desc_parameter xml:space="preserve">noqa</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'no_translate_logs()\ (in\ module\ cinder.hacking.checks)',\ 'cinder.hacking.checks.no_translate_logs',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="no_translate_logs" ids="cinder.hacking.checks.no_translate_logs" module="cinder.hacking.checks" names="cinder.hacking.checks.no_translate_logs"><desc_name xml:space="preserve">no_translate_logs</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">logical_line</desc_parameter><desc_parameter xml:space="preserve">filename</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Check for ‘LOG.*(_(‘</paragraph>
                <paragraph>Starting with the Pike series, OpenStack no longer supports log
                    translation. We shouldn’t translate logs.</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>This check assumes that ‘LOG’ is a logger.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Use filename so we can start enforcing this in specific folders
                            instead of needing to do so all at once.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>C312</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'no_vi_headers()\ (in\ module\ cinder.hacking.checks)',\ 'cinder.hacking.checks.no_vi_headers',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="no_vi_headers" ids="cinder.hacking.checks.no_vi_headers" module="cinder.hacking.checks" names="cinder.hacking.checks.no_vi_headers"><desc_name xml:space="preserve">no_vi_headers</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">physical_line</desc_parameter><desc_parameter xml:space="preserve">line_number</desc_parameter><desc_parameter xml:space="preserve">lines</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Check for vi editor configuration in source files.</paragraph>
                <paragraph>By default vi modelines can only appear in the first or
                    last 5 lines of a source file.</paragraph>
                <paragraph>N314</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'validate_assertTrue()\ (in\ module\ cinder.hacking.checks)',\ 'cinder.hacking.checks.validate_assertTrue',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="validate_assertTrue" ids="cinder.hacking.checks.validate_assertTrue" module="cinder.hacking.checks" names="cinder.hacking.checks.validate_assertTrue"><desc_name xml:space="preserve">validate_assertTrue</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">logical_line</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
    </section>
</document>
