<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api/cinder.interface.volume_driver.rst">
    <section ids="module-cinder.interface.volume_driver the-cinder-interface-volume-driver-module" names="the\ cinder.interface.volume_driver\ module">
        <title>The <reference internal="True" reftitle="cinder.interface.volume_driver" refuri="../drivers#module-cinder.interface.volume_driver"><literal classes="xref py py-mod">cinder.interface.volume_driver</literal></reference> Module</title>
        <index entries="['single',\ 'cinder.interface.volume_driver\ (module)',\ 'module-cinder.interface.volume_driver',\ '',\ None]"></index>
        <paragraph>Core backend volume driver interface.</paragraph>
        <paragraph>All backend drivers should support this interface as a bare minimum.</paragraph>
        <index entries="['single',\ 'VolumeDriverCore\ (class\ in\ cinder.interface.volume_driver)',\ 'cinder.interface.volume_driver.VolumeDriverCore',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="VolumeDriverCore" ids="cinder.interface.volume_driver.VolumeDriverCore" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">VolumeDriverCore</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" reftitle="cinder.interface.base.CinderInterface" refuri="cinder.interface.base#cinder.interface.base.CinderInterface"><literal classes="xref py py-class">cinder.interface.base.CinderInterface</literal></reference></paragraph>
                <paragraph>Core backend driver required interface.</paragraph>
                <index entries="['single',\ 'attach_volume()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.attach_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.attach_volume" ids="cinder.interface.volume_driver.VolumeDriverCore.attach_volume" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.attach_volume"><desc_name xml:space="preserve">attach_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">instance_uuid</desc_parameter><desc_parameter xml:space="preserve">host_name</desc_parameter><desc_parameter xml:space="preserve">mountpoint</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Lets the driver know Nova has attached the volume to an instance.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – Security/policy info for the request.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – Volume being attached.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">instance_uuid</literal_strong> – ID of the instance being attached to.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">host_name</literal_strong> – The host name.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">mountpoint</literal_strong> – Device mount point on the instance.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'check_for_setup_error()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.check_for_setup_error',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.check_for_setup_error" ids="cinder.interface.volume_driver.VolumeDriverCore.check_for_setup_error" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.check_for_setup_error"><desc_name xml:space="preserve">check_for_setup_error</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Validate there are no issues with the driver configuration.</paragraph>
                        <paragraph>Called after do_setup(). Driver initialization can occur there or in
                            this call, but must be complete by the time this returns.</paragraph>
                        <paragraph>If this method raises an exception, the driver will be left in an
                            “uninitialized” state by the volume manager, which means that it will
                            not be sent requests for volume operations.</paragraph>
                        <paragraph>This method typically checks things like whether the configured
                            credentials can be used to log in the storage backend, and whether any
                            external dependencies are present and working.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Raises</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="cinder.exception.VolumeBackendAPIException" refuri="cinder.exception#cinder.exception.VolumeBackendAPIException"><literal_strong>VolumeBackendAPIException</literal_strong></reference> – in case of setup error.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'clone_image()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.clone_image',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.clone_image" ids="cinder.interface.volume_driver.VolumeDriverCore.clone_image" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.clone_image"><desc_name xml:space="preserve">clone_image</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">image_location</desc_parameter><desc_parameter xml:space="preserve">image_id</desc_parameter><desc_parameter xml:space="preserve">image_metadata</desc_parameter><desc_parameter xml:space="preserve">image_service</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Clone an image to a volume.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – The volume to create.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">image_location</literal_strong> – Where to pull the image from.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">image_id</literal_strong> – The image identifier.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">image_metadata</literal_strong> – Information about the image.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">image_service</literal_strong> – The image service to use.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>Model updates.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'copy_image_to_volume()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.copy_image_to_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.copy_image_to_volume" ids="cinder.interface.volume_driver.VolumeDriverCore.copy_image_to_volume" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.copy_image_to_volume"><desc_name xml:space="preserve">copy_image_to_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">image_service</desc_parameter><desc_parameter xml:space="preserve">image_id</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Fetch the image from image_service and write it to the volume.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – Security/policy info for the request.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – The volume to create.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">image_service</literal_strong> – The image service to use.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">image_id</literal_strong> – The image identifier.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>Model updates.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'copy_volume_to_image()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.copy_volume_to_image',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.copy_volume_to_image" ids="cinder.interface.volume_driver.VolumeDriverCore.copy_volume_to_image" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.copy_volume_to_image"><desc_name xml:space="preserve">copy_volume_to_image</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">image_service</desc_parameter><desc_parameter xml:space="preserve">image_meta</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy the volume to the specified image.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – Security/policy info for the request.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – The volume to copy.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">image_service</literal_strong> – The image service to use.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">image_meta</literal_strong> – Information about the image.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>Model updates.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_volume()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.create_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.create_volume" ids="cinder.interface.volume_driver.VolumeDriverCore.create_volume" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.create_volume"><desc_name xml:space="preserve">create_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Create a new volume on the backend.</paragraph>
                        <paragraph>This method is responsible only for storage allocation on the backend.
                            It should not export a LUN or actually make this storage available for
                            use, this is done in a later call.</paragraph>
                        <paragraph>TODO(smcginnis): Add example data structure of volume object.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">volume</literal_strong> – Volume object containing specifics to create.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>(Optional) dict of database updates for the new volume.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Raises</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="cinder.exception.VolumeBackendAPIException" refuri="cinder.exception#cinder.exception.VolumeBackendAPIException"><literal_strong>VolumeBackendAPIException</literal_strong></reference> – if creation failed.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_volume()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.delete_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.delete_volume" ids="cinder.interface.volume_driver.VolumeDriverCore.delete_volume" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.delete_volume"><desc_name xml:space="preserve">delete_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Delete a volume from the backend.</paragraph>
                        <paragraph>If the driver can talk to the backend and detects that the volume is no
                            longer present, this call should succeed and allow Cinder to complete
                            the process of deleting the volume.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">volume</literal_strong> – The volume to delete.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Raises</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="cinder.exception.VolumeIsBusy" refuri="cinder.exception#cinder.exception.VolumeIsBusy"><literal_strong>VolumeIsBusy</literal_strong></reference> – if the volume is still attached or has snapshots.
                                        VolumeBackendAPIException on error.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'detach_volume()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.detach_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.detach_volume" ids="cinder.interface.volume_driver.VolumeDriverCore.detach_volume" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.detach_volume"><desc_name xml:space="preserve">detach_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">attachment=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Detach volume from an instance.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – Security/policy info for the request.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – Volume being detached.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">attachment</literal_strong> – (Optional) Attachment information.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'do_setup()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.do_setup',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.do_setup" ids="cinder.interface.volume_driver.VolumeDriverCore.do_setup" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.do_setup"><desc_name xml:space="preserve">do_setup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Any initialization the volume driver needs to do while starting.</paragraph>
                        <paragraph>Called once by the manager after the driver is loaded.
                            Can be used to set up clients, check licenses, set up protocol
                            specific helpers, etc.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – The admin context.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'extend_volume()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.extend_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.extend_volume" ids="cinder.interface.volume_driver.VolumeDriverCore.extend_volume" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.extend_volume"><desc_name xml:space="preserve">extend_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">new_size</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Extend the size of a volume.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – The volume to extend.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">new_size</literal_strong> – The new desired size of the volume.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_volume_stats()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.get_volume_stats',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.get_volume_stats" ids="cinder.interface.volume_driver.VolumeDriverCore.get_volume_stats" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.get_volume_stats"><desc_name xml:space="preserve">get_volume_stats</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">refresh=False</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Collects volume backend stats.</paragraph>
                        <paragraph>The get_volume_stats method is used by the volume manager to collect
                            information from the driver instance related to information about the
                            driver, available and used space, and driver/backend capabilities.</paragraph>
                        <paragraph>It returns a dict with the following required fields:</paragraph>
                        <bullet_list bullet="*">
                            <list_item>
                                <definition_list>
                                    <definition_list_item>
                                        <term>volume_backend_name</term>
                                        <definition>
                                            <paragraph>This is an identifier for the backend taken from cinder.conf.
                                                Useful when using multi-backend.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </list_item>
                            <list_item>
                                <definition_list>
                                    <definition_list_item>
                                        <term>vendor_name</term>
                                        <definition>
                                            <paragraph>Vendor/author of the driver who serves as the contact for the
                                                driver’s development and support.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </list_item>
                            <list_item>
                                <definition_list>
                                    <definition_list_item>
                                        <term>driver_version</term>
                                        <definition>
                                            <paragraph>The driver version is logged at cinder-volume startup and is useful
                                                for tying volume service logs to a specific release of the code.
                                                There are currently no rules for how or when this is updated, but
                                                it tends to follow typical major.minor.revision ideas.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </list_item>
                            <list_item>
                                <definition_list>
                                    <definition_list_item>
                                        <term>storage_protocol</term>
                                        <definition>
                                            <paragraph>The protocol used to connect to the storage, this should be a short
                                                string such as: “iSCSI”, “FC”, “nfs”, “ceph”, etc.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </list_item>
                            <list_item>
                                <definition_list>
                                    <definition_list_item>
                                        <term>total_capacity_gb</term>
                                        <definition>
                                            <paragraph>The total capacity in gigabytes (GiB) of the storage backend being
                                                used to store Cinder volumes. Use keyword ‘unknown’ if the backend
                                                cannot report the value or ‘infinite’ if there is no upper limit.
                                                But, it is recommended to report real values as the Cinder
                                                scheduler assigns lowest weight to any storage backend reporting
                                                ‘unknown’ or ‘infinite’.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </list_item>
                            <list_item>
                                <definition_list>
                                    <definition_list_item>
                                        <term>free_capacity_gb</term>
                                        <definition>
                                            <paragraph>The free capacity in gigabytes (GiB). Use keyword ‘unknown’ if the
                                                backend cannot report the value or ‘infinite’ if there is no upper
                                                limit. But, it is recommended to report real values as the Cinder
                                                scheduler assigns lowest weight to any storage backend reporting
                                                ‘unknown’ or ‘infinite’.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </list_item>
                        </bullet_list>
                        <paragraph>And the following optional fields:</paragraph>
                        <bullet_list bullet="*">
                            <list_item>
                                <definition_list>
                                    <definition_list_item>
                                        <term>reserved_percentage (integer)</term>
                                        <definition>
                                            <paragraph>Percentage of backend capacity which is not used by the scheduler.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </list_item>
                            <list_item>
                                <definition_list>
                                    <definition_list_item>
                                        <term>location_info (string)</term>
                                        <definition>
                                            <paragraph>Driver-specific information used by the driver and storage backend
                                                to correlate Cinder volumes and backend LUNs/files.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </list_item>
                            <list_item>
                                <definition_list>
                                    <definition_list_item>
                                        <term>QoS_support (Boolean)</term>
                                        <definition>
                                            <paragraph>Whether the backend supports quality of service.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </list_item>
                            <list_item>
                                <definition_list>
                                    <definition_list_item>
                                        <term>provisioned_capacity_gb</term>
                                        <definition>
                                            <paragraph>The total provisioned capacity on the storage backend, in gigabytes
                                                (GiB), including space consumed by any user other than Cinder
                                                itself.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </list_item>
                            <list_item>
                                <definition_list>
                                    <definition_list_item>
                                        <term>max_over_subscription_ratio</term>
                                        <definition>
                                            <paragraph>The maximum amount a backend can be over subscribed.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </list_item>
                            <list_item>
                                <definition_list>
                                    <definition_list_item>
                                        <term>thin_provisioning_support (Boolean)</term>
                                        <definition>
                                            <paragraph>Whether the backend is capable of allocating thinly provisioned
                                                volumes.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </list_item>
                            <list_item>
                                <definition_list>
                                    <definition_list_item>
                                        <term>thick_provisioning_support (Boolean)</term>
                                        <definition>
                                            <paragraph>Whether the backend is capable of allocating thick provisioned
                                                volumes. (Typically True.)</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </list_item>
                            <list_item>
                                <definition_list>
                                    <definition_list_item>
                                        <term>total_volumes (integer)</term>
                                        <definition>
                                            <paragraph>Total number of volumes on the storage backend. This can be used in
                                                custom driver filter functions.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </list_item>
                            <list_item>
                                <definition_list>
                                    <definition_list_item>
                                        <term>filter_function (string)</term>
                                        <definition>
                                            <paragraph>A custom function used by the scheduler to determine whether a
                                                volume should be allocated to this backend or not. Example:</paragraph>
                                            <block_quote>
                                                <paragraph>capabilities.total_volumes &lt; 10</paragraph>
                                            </block_quote>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </list_item>
                            <list_item>
                                <definition_list>
                                    <definition_list_item>
                                        <term>goodness_function (string)</term>
                                        <definition>
                                            <paragraph>Similar to filter_function, but used to weigh multiple volume
                                                backends. Example:</paragraph>
                                            <block_quote>
                                                <paragraph>capabilities.capacity_utilization &lt; 0.6 ? 100 : 25</paragraph>
                                            </block_quote>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </list_item>
                            <list_item>
                                <definition_list>
                                    <definition_list_item>
                                        <term>multiattach (Boolean)</term>
                                        <definition>
                                            <paragraph>Whether the backend supports multiattach or not. Defaults to False.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </list_item>
                            <list_item>
                                <definition_list>
                                    <definition_list_item>
                                        <term>sparse_copy_volume (Boolean)</term>
                                        <definition>
                                            <paragraph>Whether copies performed by the volume manager for operations such
                                                as migration should attempt to preserve sparseness.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </list_item>
                        </bullet_list>
                        <paragraph>The returned dict may also contain a list, “pools”, which has a similar
                            dict for each pool being used with the backend.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">refresh</literal_strong> – Whether to discard any cached values and force a full
                                        refresh of stats.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>dict of appropriate values (see above).</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'initialize_connection()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.initialize_connection',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.initialize_connection" ids="cinder.interface.volume_driver.VolumeDriverCore.initialize_connection" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.initialize_connection"><desc_name xml:space="preserve">initialize_connection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter><desc_parameter xml:space="preserve">initiator_data=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Allow connection to connector and return connection info.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – The volume to be attached.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">connector</literal_strong> – Dictionary containing information about what is being
                                                connected to.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">initiator_data</literal_strong> – (Optional) A dictionary of driver_initiator_data
                                                objects with key-value pairs that have been
                                                saved for this initiator by a driver in previous
                                                initialize_connection calls.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>A dictionary of connection information. This can optionally
                                        include a “initiator_updates” field.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>The “initiator_updates” field must be a dictionary containing a
                            “set_values” and/or “remove_values” field. The “set_values” field must
                            be a dictionary of key-value pairs to be set/updated in the db. The
                            “remove_values” field must be a list of keys, previously set with
                            “set_values”, that will be deleted from the db.</paragraph>
                        <paragraph>May be called multiple times to get connection information after a
                            volume has already been attached.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'terminate_connection()\ (VolumeDriverCore\ method)',\ 'cinder.interface.volume_driver.VolumeDriverCore.terminate_connection',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriverCore" first="False" fullname="VolumeDriverCore.terminate_connection" ids="cinder.interface.volume_driver.VolumeDriverCore.terminate_connection" module="cinder.interface.volume_driver" names="cinder.interface.volume_driver.VolumeDriverCore.terminate_connection"><desc_name xml:space="preserve">terminate_connection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Remove access to a volume.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – The volume to remove.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">connector</literal_strong> – The Dictionary containing information about the
                                                connection. This is optional when doing a
                                                force-detach and can be None.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
    </section>
</document>
