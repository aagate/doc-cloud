<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api/cinder.volume.drivers.dell_emc.sc.storagecenter_common.rst">
    <section ids="module-cinder.volume.drivers.dell_emc.sc.storagecenter_common the-cinder-volume-drivers-dell-emc-sc-storagecenter-common-module" names="the\ cinder.volume.drivers.dell_emc.sc.storagecenter_common\ module">
        <title>The <reference internal="True" refid="module-cinder.volume.drivers.dell_emc.sc.storagecenter_common" reftitle="cinder.volume.drivers.dell_emc.sc.storagecenter_common"><literal classes="xref py py-mod">cinder.volume.drivers.dell_emc.sc.storagecenter_common</literal></reference> Module</title>
        <index entries="['single',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common\ (module)',\ 'module-cinder.volume.drivers.dell_emc.sc.storagecenter_common',\ '',\ None]"></index>
        <index entries="['single',\ 'SCCommonDriver\ (class\ in\ cinder.volume.drivers.dell_emc.sc.storagecenter_common)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="SCCommonDriver" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">SCCommonDriver</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" reftitle="cinder.volume.driver.ManageableVD" refuri="cinder.volume.driver#cinder.volume.driver.ManageableVD"><literal classes="xref py py-class">cinder.volume.driver.ManageableVD</literal></reference>, <reference internal="True" reftitle="cinder.volume.driver.ManageableSnapshotsVD" refuri="cinder.volume.driver#cinder.volume.driver.ManageableSnapshotsVD"><literal classes="xref py py-class">cinder.volume.driver.ManageableSnapshotsVD</literal></reference>, <reference internal="True" reftitle="cinder.volume.driver.BaseVD" refuri="cinder.volume.driver#cinder.volume.driver.BaseVD"><literal classes="xref py py-class">cinder.volume.driver.BaseVD</literal></reference></paragraph>
                <index entries="['single',\ 'check_for_setup_error()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.check_for_setup_error',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.check_for_setup_error" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.check_for_setup_error" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.check_for_setup_error"><desc_name xml:space="preserve">check_for_setup_error</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Validates the configuration information.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_cloned_volume()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.create_cloned_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.create_cloned_volume" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.create_cloned_volume" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.create_cloned_volume"><desc_name xml:space="preserve">create_cloned_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">src_vref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a clone of the specified volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_export()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.create_export',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.create_export" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.create_export" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.create_export"><desc_name xml:space="preserve">create_export</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Create an export of a volume.</paragraph>
                        <paragraph>The volume exists on creation and will be visible on
                            initialize connection.  So nothing to do here.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_group()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.create_group',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.create_group" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.create_group" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.create_group"><desc_name xml:space="preserve">create_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a group.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group</literal_strong> – the Group object of the group to be created.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>model_update will be in this format: {‘status’: xxx, ……}.</paragraph>
                        <paragraph>If the status in model_update is ‘error’, the manager will throw
                            an exception and it will be caught in the try-except block in the
                            manager. If the driver throws an exception, the manager will also
                            catch it in the try-except block. The group status in the db will
                            be changed to ‘error’.</paragraph>
                        <paragraph>For a successful operation, the driver can either build the
                            model_update and return it or return None. The group status will
                            be set to ‘available’.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_group_from_src()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.create_group_from_src',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.create_group_from_src" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.create_group_from_src" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.create_group_from_src"><desc_name xml:space="preserve">create_group_from_src</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">volumes</desc_parameter><desc_parameter xml:space="preserve">group_snapshot=None</desc_parameter><desc_parameter xml:space="preserve">snapshots=None</desc_parameter><desc_parameter xml:space="preserve">source_group=None</desc_parameter><desc_parameter xml:space="preserve">source_vols=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a group from source.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group</literal_strong> – the Group object to be created.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volumes</literal_strong> – a list of Volume objects in the group.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group_snapshot</literal_strong> – the GroupSnapshot object as source.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">snapshots</literal_strong> – a list of Snapshot objects in group_snapshot.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">source_group</literal_strong> – the Group object as source.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">source_vols</literal_strong> – a list of Volume objects in the source_group.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update, volumes_model_update</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>The source can be group_snapshot or a source_group.</paragraph>
                        <paragraph>param volumes is a list of objects retrieved from the db. It cannot
                            be assigned to volumes_model_update. volumes_model_update is a list
                            of dictionaries. It has to be built by the driver. An entry will be
                            in this format: {‘id’: xxx, ‘status’: xxx, ……}. model_update
                            will be in this format: {‘status’: xxx, ……}.</paragraph>
                        <paragraph>To be consistent with other volume operations, the manager will
                            assume the operation is successful if no exception is thrown by
                            the driver. For a successful operation, the driver can either build
                            the model_update and volumes_model_update and return them or
                            return None, None.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_group_snapshot()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.create_group_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.create_group_snapshot" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.create_group_snapshot" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.create_group_snapshot"><desc_name xml:space="preserve">create_group_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_snapshot</desc_parameter><desc_parameter xml:space="preserve">snapshots</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a group_snapshot.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group_snapshot</literal_strong> – the GroupSnapshot object to be created.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">snapshots</literal_strong> – a list of Snapshot objects in the group_snapshot.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update, snapshots_model_update</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>param snapshots is a list of Snapshot objects. It cannot be assigned
                            to snapshots_model_update. snapshots_model_update is a list of
                            dictionaries. It has to be built by the driver. An entry will be
                            in this format: {‘id’: xxx, ‘status’: xxx, ……}. model_update
                            will be in this format: {‘status’: xxx, ……}.</paragraph>
                        <paragraph>The driver should populate snapshots_model_update and model_update
                            and return them.</paragraph>
                        <paragraph>The manager will check snapshots_model_update and update db accordingly
                            for each snapshot. If the driver successfully deleted some snapshots
                            but failed to delete others, it should set statuses of the snapshots
                            accordingly so that the manager can update db correctly.</paragraph>
                        <paragraph>If the status in any entry of snapshots_model_update is ‘error’, the
                            status in model_update will be set to the same if it is not already
                            ‘error’.</paragraph>
                        <paragraph>If the status in model_update is ‘error’, the manager will raise an
                            exception and the status of group_snapshot will be set to ‘error’ in
                            the db. If snapshots_model_update is not returned by the driver, the
                            manager will set the status of every snapshot to ‘error’ in the except
                            block.</paragraph>
                        <paragraph>If the driver raises an exception during the operation, it will be
                            caught by the try-except block in the manager and the statuses of
                            group_snapshot and all snapshots will be set to ‘error’.</paragraph>
                        <paragraph>For a successful operation, the driver can either build the
                            model_update and snapshots_model_update and return them or
                            return None, None. The statuses of group_snapshot and all snapshots
                            will be set to ‘available’ at the end of the manager function.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_snapshot()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.create_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.create_snapshot" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.create_snapshot" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.create_snapshot"><desc_name xml:space="preserve">create_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Create snapshot</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_volume()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.create_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.create_volume" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.create_volume" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.create_volume"><desc_name xml:space="preserve">create_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Create a volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_volume_from_snapshot()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.create_volume_from_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.create_volume_from_snapshot" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.create_volume_from_snapshot" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.create_volume_from_snapshot"><desc_name xml:space="preserve">create_volume_from_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Create new volume from other volume’s snapshot on appliance.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_group()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.delete_group',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.delete_group" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.delete_group" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.delete_group"><desc_name xml:space="preserve">delete_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">volumes</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Deletes a group.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group</literal_strong> – the Group object of the group to be deleted.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volumes</literal_strong> – a list of Volume objects in the group.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update, volumes_model_update</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>param volumes is a list of objects retrieved from the db. It cannot
                            be assigned to volumes_model_update. volumes_model_update is a list
                            of dictionaries. It has to be built by the driver. An entry will be
                            in this format: {‘id’: xxx, ‘status’: xxx, ……}. model_update
                            will be in this format: {‘status’: xxx, ……}.</paragraph>
                        <paragraph>The driver should populate volumes_model_update and model_update
                            and return them.</paragraph>
                        <paragraph>The manager will check volumes_model_update and update db accordingly
                            for each volume. If the driver successfully deleted some volumes
                            but failed to delete others, it should set statuses of the volumes
                            accordingly so that the manager can update db correctly.</paragraph>
                        <paragraph>If the status in any entry of volumes_model_update is ‘error_deleting’
                            or ‘error’, the status in model_update will be set to the same if it
                            is not already ‘error_deleting’ or ‘error’.</paragraph>
                        <paragraph>If the status in model_update is ‘error_deleting’ or ‘error’, the
                            manager will raise an exception and the status of the group will be
                            set to ‘error’ in the db. If volumes_model_update is not returned by
                            the driver, the manager will set the status of every volume in the
                            group to ‘error’ in the except block.</paragraph>
                        <paragraph>If the driver raises an exception during the operation, it will be
                            caught by the try-except block in the manager. The statuses of the
                            group and all volumes in it will be set to ‘error’.</paragraph>
                        <paragraph>For a successful operation, the driver can either build the
                            model_update and volumes_model_update and return them or
                            return None, None. The statuses of the group and all volumes
                            will be set to ‘deleted’ after the manager deletes them from db.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_group_snapshot()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.delete_group_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.delete_group_snapshot" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.delete_group_snapshot" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.delete_group_snapshot"><desc_name xml:space="preserve">delete_group_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_snapshot</desc_parameter><desc_parameter xml:space="preserve">snapshots</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Deletes a group_snapshot.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group_snapshot</literal_strong> – the GroupSnapshot object to be deleted.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">snapshots</literal_strong> – a list of Snapshot objects in the group_snapshot.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update, snapshots_model_update</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>param snapshots is a list of objects. It cannot be assigned to
                            snapshots_model_update. snapshots_model_update is a list of of
                            dictionaries. It has to be built by the driver. An entry will be
                            in this format: {‘id’: xxx, ‘status’: xxx, ……}. model_update
                            will be in this format: {‘status’: xxx, ……}.</paragraph>
                        <paragraph>The driver should populate snapshots_model_update and model_update
                            and return them.</paragraph>
                        <paragraph>The manager will check snapshots_model_update and update db accordingly
                            for each snapshot. If the driver successfully deleted some snapshots
                            but failed to delete others, it should set statuses of the snapshots
                            accordingly so that the manager can update db correctly.</paragraph>
                        <paragraph>If the status in any entry of snapshots_model_update is
                            ‘error_deleting’ or ‘error’, the status in model_update will be set to
                            the same if it is not already ‘error_deleting’ or ‘error’.</paragraph>
                        <paragraph>If the status in model_update is ‘error_deleting’ or ‘error’, the
                            manager will raise an exception and the status of group_snapshot will
                            be set to ‘error’ in the db. If snapshots_model_update is not returned
                            by the driver, the manager will set the status of every snapshot to
                            ‘error’ in the except block.</paragraph>
                        <paragraph>If the driver raises an exception during the operation, it will be
                            caught by the try-except block in the manager and the statuses of
                            group_snapshot and all snapshots will be set to ‘error’.</paragraph>
                        <paragraph>For a successful operation, the driver can either build the
                            model_update and snapshots_model_update and return them or
                            return None, None. The statuses of group_snapshot and all snapshots
                            will be set to ‘deleted’ after the manager deletes them from db.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_snapshot()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.delete_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.delete_snapshot" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.delete_snapshot" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.delete_snapshot"><desc_name xml:space="preserve">delete_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_volume()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.delete_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.delete_volume" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.delete_volume" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.delete_volume"><desc_name xml:space="preserve">delete_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'do_setup()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.do_setup',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.do_setup" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.do_setup" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.do_setup"><desc_name xml:space="preserve">do_setup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>One time driver setup.</paragraph>
                        <paragraph>Called once by the manager after the driver is loaded.
                            Sets up clients, check licenses, sets up protocol
                            specific helpers.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'ensure_export()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.ensure_export',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.ensure_export" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.ensure_export" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.ensure_export"><desc_name xml:space="preserve">ensure_export</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Ensure an export of a volume.</paragraph>
                        <paragraph>Per the eqlx driver we just make sure that the volume actually
                            exists where we think it does.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'extend_volume()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.extend_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.extend_volume" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.extend_volume" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.extend_volume"><desc_name xml:space="preserve">extend_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">new_size</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Extend the size of the volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'failback_volumes()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.failback_volumes',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.failback_volumes" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.failback_volumes" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.failback_volumes"><desc_name xml:space="preserve">failback_volumes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volumes</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>This is a generic volume failback.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">volumes</literal_strong> – List of volumes that need to be failed back.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>volume_updates for the list of volumes.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'failover_host()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.failover_host',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.failover_host" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.failover_host" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.failover_host"><desc_name xml:space="preserve">failover_host</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volumes</desc_parameter><desc_parameter xml:space="preserve">secondary_id=None</desc_parameter><desc_parameter xml:space="preserve">groups=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Failover to secondary.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – security context</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">secondary_id</literal_strong> – Specifies rep target to fail over to</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volumes</literal_strong> – List of volumes serviced by this backend.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>destssn, volume_updates data structure</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>Example volume_updates data structure:</paragraph>
                        <literal_block highlight_args="{}" language="json" linenos="False" xml:space="preserve"></literal_block>
                        <definition_list>
                            <definition_list_item>
                                <term>[{‘volume_id’: &lt;cinder-uuid&gt;,</term>
                                <definition>
                                    <definition_list>
                                        <definition_list_item>
                                            <term>‘updates’: {‘provider_id’: 8,</term>
                                            <definition>
                                                <paragraph>‘replication_status’: ‘failed-over’,
                                                    ‘replication_extended_status’: ‘whatever’,…}},]</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </definition>
                            </definition_list_item>
                        </definition_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_volume_stats()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.get_volume_stats',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.get_volume_stats" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.get_volume_stats" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.get_volume_stats"><desc_name xml:space="preserve">get_volume_stats</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">refresh=False</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get volume status.</paragraph>
                        <paragraph>If ‘refresh’ is True, run update the stats first.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.manage_existing',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.manage_existing" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.manage_existing" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.manage_existing"><desc_name xml:space="preserve">manage_existing</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Brings an existing backend storage object under Cinder management.</paragraph>
                        <paragraph>existing_ref is passed straight through from the API request’s
                            manage_existing_ref value, and it is up to the driver how this should
                            be interpreted.  It should be sufficient to identify a storage object
                            that the driver should somehow associate with the newly-created cinder
                            volume structure.</paragraph>
                        <paragraph>There are two ways to do this:</paragraph>
                        <enumerated_list enumtype="arabic" prefix="" suffix=".">
                            <list_item>
                                <paragraph>Rename the backend storage object so that it matches the,
                                    volume[‘name’] which is how drivers traditionally map between a
                                    cinder volume and the associated backend storage object.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Place some metadata on the volume, or somewhere in the backend, that
                                    allows other driver requests (e.g. delete, clone, attach, detach…)
                                    to locate the backend storage object when required.</paragraph>
                            </list_item>
                        </enumerated_list>
                        <paragraph>If the existing_ref doesn’t make sense, or doesn’t refer to an existing
                            backend storage object, raise a ManageExistingInvalidReference
                            exception.</paragraph>
                        <paragraph>The volume may have a volume_type, and the driver can inspect that and
                            compare against the properties of the referenced backend storage
                            object.  If they are incompatible, raise a
                            ManageExistingVolumeTypeMismatch, specifying a reason for the failure.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – Cinder volume to manage</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">existing_ref</literal_strong> – Driver-specific information used to identify a
                                                volume</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing_get_size()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.manage_existing_get_size',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.manage_existing_get_size" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.manage_existing_get_size" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.manage_existing_get_size"><desc_name xml:space="preserve">manage_existing_get_size</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Return size of volume to be managed by manage_existing.</paragraph>
                        <paragraph>When calculating the size, round up to the next GB.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – Cinder volume to manage</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">existing_ref</literal_strong> – Driver-specific information used to identify a
                                                volume</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing_snapshot()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.manage_existing_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.manage_existing_snapshot" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.manage_existing_snapshot" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.manage_existing_snapshot"><desc_name xml:space="preserve">manage_existing_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Brings an existing backend storage object under Cinder management.</paragraph>
                        <paragraph>existing_ref is passed straight through from the API request’s
                            manage_existing_ref value, and it is up to the driver how this should
                            be interpreted.  It should be sufficient to identify a storage object
                            that the driver should somehow associate with the newly-created cinder
                            snapshot structure.</paragraph>
                        <paragraph>There are two ways to do this:</paragraph>
                        <enumerated_list enumtype="arabic" prefix="" suffix=".">
                            <list_item>
                                <paragraph>Rename the backend storage object so that it matches the
                                    snapshot[‘name’] which is how drivers traditionally map between a
                                    cinder snapshot and the associated backend storage object.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Place some metadata on the snapshot, or somewhere in the backend,
                                    that allows other driver requests (e.g. delete) to locate the
                                    backend storage object when required.</paragraph>
                            </list_item>
                        </enumerated_list>
                        <paragraph>If the existing_ref doesn’t make sense, or doesn’t refer to an existing
                            backend storage object, raise a ManageExistingInvalidReference
                            exception.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing_snapshot_get_size()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.manage_existing_snapshot_get_size',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.manage_existing_snapshot_get_size" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.manage_existing_snapshot_get_size" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.manage_existing_snapshot_get_size"><desc_name xml:space="preserve">manage_existing_snapshot_get_size</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Return size of snapshot to be managed by manage_existing.</paragraph>
                        <paragraph>When calculating the size, round up to the next GB.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'remove_export()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.remove_export',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.remove_export" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.remove_export" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.remove_export"><desc_name xml:space="preserve">remove_export</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Remove an export of a volume.</paragraph>
                        <paragraph>We do nothing here to match the nothing we do in create export.  Again
                            we do everything in initialize and terminate connection.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'retype()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.retype',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.retype" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.retype" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.retype"><desc_name xml:space="preserve">retype</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">new_type</desc_parameter><desc_parameter xml:space="preserve">diff</desc_parameter><desc_parameter xml:space="preserve">host</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Convert the volume to be of the new type.</paragraph>
                        <paragraph>Returns a boolean indicating whether the retype occurred.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">ctxt</literal_strong> – Context</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – A dictionary describing the volume to migrate</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">new_type</literal_strong> – A dictionary describing the volume type to convert to</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">diff</literal_strong> – A dictionary with the difference between the two types</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">host</literal_strong> – A dictionary describing the host to migrate to, where
                                                host[‘host’] is its name, and host[‘capabilities’] is a
                                                dictionary of its reported capabilities (Not Used).</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>Boolean or Boolean, model_update tuple.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'thaw_backend()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.thaw_backend',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.thaw_backend" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.thaw_backend" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.thaw_backend"><desc_name xml:space="preserve">thaw_backend</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Notify the backend that it’s unfrozen/thawed.</paragraph>
                        <paragraph>This is a gate. We do not allow the backend to be thawed if
                            it is still failed over.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – security context</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Response</field_name>
                                <field_body>
                                    <paragraph>True on success</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Raises</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="cinder.exception.Invalid" refuri="cinder.exception#cinder.exception.Invalid"><literal_strong>Invalid</literal_strong></reference> – if it cannot be thawed.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'unmanage()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.unmanage',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.unmanage" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.unmanage" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.unmanage"><desc_name xml:space="preserve">unmanage</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Removes the specified volume from Cinder management.</paragraph>
                        <paragraph>Does not delete the underlying backend storage object.</paragraph>
                        <paragraph>For most drivers, this will not need to do anything.  However, some
                            drivers might use this call as an opportunity to clean up any
                            Cinder-specific configuration that they have associated with the
                            backend storage object.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">volume</literal_strong> – Cinder volume to unmanage</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'unmanage_snapshot()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.unmanage_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.unmanage_snapshot" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.unmanage_snapshot" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.unmanage_snapshot"><desc_name xml:space="preserve">unmanage_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Removes the specified snapshot from Cinder management.</paragraph>
                        <paragraph>Does not delete the underlying backend storage object.</paragraph>
                        <definition_list>
                            <definition_list_item>
                                <term>NOTE: We do set the expire countdown to 1 day. Once a snapshot is</term>
                                <definition>
                                    <paragraph>unmanaged it will expire 24 hours later.</paragraph>
                                </definition>
                            </definition_list_item>
                        </definition_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'update_group()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.update_group',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.update_group" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.update_group" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.update_group"><desc_name xml:space="preserve">update_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">add_volumes=None</desc_parameter><desc_parameter xml:space="preserve">remove_volumes=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Updates a group.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group</literal_strong> – the Group object of the group to be updated.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">add_volumes</literal_strong> – a list of Volume objects to be added.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">remove_volumes</literal_strong> – a list of Volume objects to be removed.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update, add_volumes_update, remove_volumes_update</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>model_update is a dictionary that the driver wants the manager
                            to update upon a successful return. If None is returned, the manager
                            will set the status to ‘available’.</paragraph>
                        <paragraph>add_volumes_update and remove_volumes_update are lists of dictionaries
                            that the driver wants the manager to update upon a successful return.
                            Note that each entry requires a {‘id’: xxx} so that the correct
                            volume entry can be updated. If None is returned, the volume will
                            remain its original status. Also note that you cannot directly
                            assign add_volumes to add_volumes_update as add_volumes is a list of
                            volume objects and cannot be used for db update directly. Same with
                            remove_volumes.</paragraph>
                        <paragraph>If the driver throws an exception, the status of the group as well as
                            those of the volumes to be added/removed will be set to ‘error’.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'update_migrated_volume()\ (SCCommonDriver\ method)',\ 'cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.update_migrated_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SCCommonDriver" first="False" fullname="SCCommonDriver.update_migrated_volume" ids="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.update_migrated_volume" module="cinder.volume.drivers.dell_emc.sc.storagecenter_common" names="cinder.volume.drivers.dell_emc.sc.storagecenter_common.SCCommonDriver.update_migrated_volume"><desc_name xml:space="preserve">update_migrated_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">new_volume</desc_parameter><desc_parameter xml:space="preserve">original_volume_status</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Return model update for migrated volume.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – The original volume that was migrated to this backend</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">new_volume</literal_strong> – The migration volume object that was created on
                                                this backend as part of the migration process</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">original_volume_status</literal_strong> – The status of the original volume</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update to update DB with any needed changes</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
    </section>
</document>
