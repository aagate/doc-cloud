<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api/cinder.objects.cleanable.rst">
    <section ids="module-cinder.objects.cleanable the-cinder-objects-cleanable-module" names="the\ cinder.objects.cleanable\ module">
        <title>The <reference internal="True" refid="module-cinder.objects.cleanable" reftitle="cinder.objects.cleanable"><literal classes="xref py py-mod">cinder.objects.cleanable</literal></reference> Module</title>
        <index entries="['single',\ 'cinder.objects.cleanable\ (module)',\ 'module-cinder.objects.cleanable',\ '',\ None]"></index>
        <index entries="['single',\ 'CinderCleanableObject\ (class\ in\ cinder.objects.cleanable)',\ 'cinder.objects.cleanable.CinderCleanableObject',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="CinderCleanableObject" ids="cinder.objects.cleanable.CinderCleanableObject" module="cinder.objects.cleanable" names="cinder.objects.cleanable.CinderCleanableObject"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">CinderCleanableObject</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" reftitle="cinder.objects.base.CinderPersistentObject" refuri="cinder.objects.base#cinder.objects.base.CinderPersistentObject"><literal classes="xref py py-class">cinder.objects.base.CinderPersistentObject</literal></reference></paragraph>
                <paragraph>Base class for cleanable OVO resources.</paragraph>
                <paragraph>All cleanable objects must have a host property/attribute.</paragraph>
                <index entries="['single',\ 'cinder_ovo_cls_init()\ (cinder.objects.cleanable.CinderCleanableObject\ class\ method)',\ 'cinder.objects.cleanable.CinderCleanableObject.cinder_ovo_cls_init',\ '',\ None]"></index>
                <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                    <desc_signature class="CinderCleanableObject" first="False" fullname="CinderCleanableObject.cinder_ovo_cls_init" ids="cinder.objects.cleanable.CinderCleanableObject.cinder_ovo_cls_init" module="cinder.objects.cleanable" names="cinder.objects.cleanable.CinderCleanableObject.cinder_ovo_cls_init"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">cinder_ovo_cls_init</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Called on OVO registration, sets set of cleanable resources.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'cleanable_resource_types\ (CinderCleanableObject\ attribute)',\ 'cinder.objects.cleanable.CinderCleanableObject.cleanable_resource_types',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CinderCleanableObject" first="False" fullname="CinderCleanableObject.cleanable_resource_types" ids="cinder.objects.cleanable.CinderCleanableObject.cleanable_resource_types" module="cinder.objects.cleanable" names="cinder.objects.cleanable.CinderCleanableObject.cleanable_resource_types"><desc_name xml:space="preserve">cleanable_resource_types</desc_name><desc_annotation xml:space="preserve"> = {'Volume', 'Snapshot'}</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_worker()\ (CinderCleanableObject\ method)',\ 'cinder.objects.cleanable.CinderCleanableObject.create_worker',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CinderCleanableObject" first="False" fullname="CinderCleanableObject.create_worker" ids="cinder.objects.cleanable.CinderCleanableObject.create_worker" module="cinder.objects.cleanable" names="cinder.objects.cleanable.CinderCleanableObject.create_worker"><desc_name xml:space="preserve">create_worker</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">pinned=True</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Create a worker entry at the API.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'decorate()\ (CinderCleanableObject\ static\ method)',\ 'cinder.objects.cleanable.CinderCleanableObject.decorate',\ '',\ None]"></index>
                <desc desctype="staticmethod" domain="py" noindex="False" objtype="staticmethod">
                    <desc_signature class="CinderCleanableObject" first="False" fullname="CinderCleanableObject.decorate" ids="cinder.objects.cleanable.CinderCleanableObject.decorate" module="cinder.objects.cleanable" names="cinder.objects.cleanable.CinderCleanableObject.decorate"><desc_annotation xml:space="preserve">static </desc_annotation><desc_name xml:space="preserve">decorate</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">func</desc_parameter><desc_parameter xml:space="preserve">caller</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>decorate(func, caller) decorates a function using a caller.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_pinned_version()\ (cinder.objects.cleanable.CinderCleanableObject\ class\ method)',\ 'cinder.objects.cleanable.CinderCleanableObject.get_pinned_version',\ '',\ None]"></index>
                <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                    <desc_signature class="CinderCleanableObject" first="False" fullname="CinderCleanableObject.get_pinned_version" ids="cinder.objects.cleanable.CinderCleanableObject.get_pinned_version" module="cinder.objects.cleanable" names="cinder.objects.cleanable.CinderCleanableObject.get_pinned_version"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">get_pinned_version</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_rpc_api()\ (cinder.objects.cleanable.CinderCleanableObject\ class\ method)',\ 'cinder.objects.cleanable.CinderCleanableObject.get_rpc_api',\ '',\ None]"></index>
                <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                    <desc_signature class="CinderCleanableObject" first="False" fullname="CinderCleanableObject.get_rpc_api" ids="cinder.objects.cleanable.CinderCleanableObject.get_rpc_api" module="cinder.objects.cleanable" names="cinder.objects.cleanable.CinderCleanableObject.get_rpc_api"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">get_rpc_api</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'is_cleanable()\ (CinderCleanableObject\ method)',\ 'cinder.objects.cleanable.CinderCleanableObject.is_cleanable',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CinderCleanableObject" first="False" fullname="CinderCleanableObject.is_cleanable" ids="cinder.objects.cleanable.CinderCleanableObject.is_cleanable" module="cinder.objects.cleanable" names="cinder.objects.cleanable.CinderCleanableObject.is_cleanable"><desc_name xml:space="preserve">is_cleanable</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">pinned=False</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Check if cleanable VO status is cleanable.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">pinned</literal_strong> (<literal_emphasis>bool</literal_emphasis>) â€“ If we should check against pinned version or current
                                        version.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>Whether this needs a workers DB entry or not</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'refresh()\ (CinderCleanableObject\ method)',\ 'cinder.objects.cleanable.CinderCleanableObject.refresh',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CinderCleanableObject" first="False" fullname="CinderCleanableObject.refresh" ids="cinder.objects.cleanable.CinderCleanableObject.refresh" module="cinder.objects.cleanable" names="cinder.objects.cleanable.CinderCleanableObject.refresh"><desc_name xml:space="preserve">refresh</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'set_worker()\ (CinderCleanableObject\ method)',\ 'cinder.objects.cleanable.CinderCleanableObject.set_worker',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CinderCleanableObject" first="False" fullname="CinderCleanableObject.set_worker" ids="cinder.objects.cleanable.CinderCleanableObject.set_worker" module="cinder.objects.cleanable" names="cinder.objects.cleanable.CinderCleanableObject.set_worker"><desc_name xml:space="preserve">set_worker</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'set_workers()\ (CinderCleanableObject\ static\ method)',\ 'cinder.objects.cleanable.CinderCleanableObject.set_workers',\ '',\ None]"></index>
                <desc desctype="staticmethod" domain="py" noindex="False" objtype="staticmethod">
                    <desc_signature class="CinderCleanableObject" first="False" fullname="CinderCleanableObject.set_workers" ids="cinder.objects.cleanable.CinderCleanableObject.set_workers" module="cinder.objects.cleanable" names="cinder.objects.cleanable.CinderCleanableObject.set_workers"><desc_annotation xml:space="preserve">static </desc_annotation><desc_name xml:space="preserve">set_workers</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*decorator_args</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Decorator that adds worker DB rows for cleanable versioned  objects.</paragraph>
                        <paragraph>By default will take care of all cleanable objects, but we can limit
                            which objects we want by passing the name of the arguments we want
                            to be added.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'unset_worker()\ (CinderCleanableObject\ method)',\ 'cinder.objects.cleanable.CinderCleanableObject.unset_worker',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CinderCleanableObject" first="False" fullname="CinderCleanableObject.unset_worker" ids="cinder.objects.cleanable.CinderCleanableObject.unset_worker" module="cinder.objects.cleanable" names="cinder.objects.cleanable.CinderCleanableObject.unset_worker"><desc_name xml:space="preserve">unset_worker</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'worker\ (CinderCleanableObject\ attribute)',\ 'cinder.objects.cleanable.CinderCleanableObject.worker',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CinderCleanableObject" first="False" fullname="CinderCleanableObject.worker" ids="cinder.objects.cleanable.CinderCleanableObject.worker" module="cinder.objects.cleanable" names="cinder.objects.cleanable.CinderCleanableObject.worker"><desc_name xml:space="preserve">worker</desc_name><desc_annotation xml:space="preserve"> = None</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
    </section>
</document>
