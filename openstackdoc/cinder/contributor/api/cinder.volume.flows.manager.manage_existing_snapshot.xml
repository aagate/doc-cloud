<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api/cinder.volume.flows.manager.manage_existing_snapshot.rst">
    <section ids="module-cinder.volume.flows.manager.manage_existing_snapshot the-cinder-volume-flows-manager-manage-existing-snapshot-module" names="the\ cinder.volume.flows.manager.manage_existing_snapshot\ module">
        <title>The <reference internal="True" refid="module-cinder.volume.flows.manager.manage_existing_snapshot" reftitle="cinder.volume.flows.manager.manage_existing_snapshot"><literal classes="xref py py-mod">cinder.volume.flows.manager.manage_existing_snapshot</literal></reference> Module</title>
        <index entries="['single',\ 'cinder.volume.flows.manager.manage_existing_snapshot\ (module)',\ 'module-cinder.volume.flows.manager.manage_existing_snapshot',\ '',\ None]"></index>
        <index entries="['single',\ 'CreateSnapshotOnFinishTask\ (class\ in\ cinder.volume.flows.manager.manage_existing_snapshot)',\ 'cinder.volume.flows.manager.manage_existing_snapshot.CreateSnapshotOnFinishTask',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="CreateSnapshotOnFinishTask" ids="cinder.volume.flows.manager.manage_existing_snapshot.CreateSnapshotOnFinishTask" module="cinder.volume.flows.manager.manage_existing_snapshot" names="cinder.volume.flows.manager.manage_existing_snapshot.CreateSnapshotOnFinishTask"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">CreateSnapshotOnFinishTask</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">db</desc_parameter><desc_parameter xml:space="preserve">event_suffix</desc_parameter><desc_parameter xml:space="preserve">host</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" refid="cinder.volume.flows.manager.manage_existing_snapshot.NotifySnapshotActionTask" reftitle="cinder.volume.flows.manager.manage_existing_snapshot.NotifySnapshotActionTask"><literal classes="xref py py-class">cinder.volume.flows.manager.manage_existing_snapshot.NotifySnapshotActionTask</literal></reference></paragraph>
                <paragraph>Perform final snapshot actions.</paragraph>
                <paragraph>When a snapshot is created successfully it is expected that MQ
                    notifications and database updates will occur to ‘signal’ to others that
                    the snapshot is now ready for usage. This task does those notifications and
                    updates in a reliable manner (not re-raising exceptions if said actions can
                    not be triggered).</paragraph>
                <paragraph>Reversion strategy: N/A</paragraph>
                <index entries="['single',\ 'execute()\ (CreateSnapshotOnFinishTask\ method)',\ 'cinder.volume.flows.manager.manage_existing_snapshot.CreateSnapshotOnFinishTask.execute',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CreateSnapshotOnFinishTask" first="False" fullname="CreateSnapshotOnFinishTask.execute" ids="cinder.volume.flows.manager.manage_existing_snapshot.CreateSnapshotOnFinishTask.execute" module="cinder.volume.flows.manager.manage_existing_snapshot" names="cinder.volume.flows.manager.manage_existing_snapshot.CreateSnapshotOnFinishTask.execute"><desc_name xml:space="preserve">execute</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">new_status</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'ExtractSnapshotRefTask\ (class\ in\ cinder.volume.flows.manager.manage_existing_snapshot)',\ 'cinder.volume.flows.manager.manage_existing_snapshot.ExtractSnapshotRefTask',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="ExtractSnapshotRefTask" ids="cinder.volume.flows.manager.manage_existing_snapshot.ExtractSnapshotRefTask" module="cinder.volume.flows.manager.manage_existing_snapshot" names="cinder.volume.flows.manager.manage_existing_snapshot.ExtractSnapshotRefTask"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">ExtractSnapshotRefTask</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">db</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" reftitle="cinder.flow_utils.CinderTask" refuri="cinder.flow_utils#cinder.flow_utils.CinderTask"><literal classes="xref py py-class">cinder.flow_utils.CinderTask</literal></reference></paragraph>
                <paragraph>Extracts snapshot reference for given snapshot id.</paragraph>
                <index entries="['single',\ 'default_provides\ (ExtractSnapshotRefTask\ attribute)',\ 'cinder.volume.flows.manager.manage_existing_snapshot.ExtractSnapshotRefTask.default_provides',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ExtractSnapshotRefTask" first="False" fullname="ExtractSnapshotRefTask.default_provides" ids="cinder.volume.flows.manager.manage_existing_snapshot.ExtractSnapshotRefTask.default_provides" module="cinder.volume.flows.manager.manage_existing_snapshot" names="cinder.volume.flows.manager.manage_existing_snapshot.ExtractSnapshotRefTask.default_provides"><desc_name xml:space="preserve">default_provides</desc_name><desc_annotation xml:space="preserve"> = 'snapshot_ref'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'execute()\ (ExtractSnapshotRefTask\ method)',\ 'cinder.volume.flows.manager.manage_existing_snapshot.ExtractSnapshotRefTask.execute',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ExtractSnapshotRefTask" first="False" fullname="ExtractSnapshotRefTask.execute" ids="cinder.volume.flows.manager.manage_existing_snapshot.ExtractSnapshotRefTask.execute" module="cinder.volume.flows.manager.manage_existing_snapshot" names="cinder.volume.flows.manager.manage_existing_snapshot.ExtractSnapshotRefTask.execute"><desc_name xml:space="preserve">execute</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot_id</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'revert()\ (ExtractSnapshotRefTask\ method)',\ 'cinder.volume.flows.manager.manage_existing_snapshot.ExtractSnapshotRefTask.revert',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ExtractSnapshotRefTask" first="False" fullname="ExtractSnapshotRefTask.revert" ids="cinder.volume.flows.manager.manage_existing_snapshot.ExtractSnapshotRefTask.revert" module="cinder.volume.flows.manager.manage_existing_snapshot" names="cinder.volume.flows.manager.manage_existing_snapshot.ExtractSnapshotRefTask.revert"><desc_name xml:space="preserve">revert</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot_id</desc_parameter><desc_parameter xml:space="preserve">result</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'ManageExistingTask\ (class\ in\ cinder.volume.flows.manager.manage_existing_snapshot)',\ 'cinder.volume.flows.manager.manage_existing_snapshot.ManageExistingTask',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="ManageExistingTask" ids="cinder.volume.flows.manager.manage_existing_snapshot.ManageExistingTask" module="cinder.volume.flows.manager.manage_existing_snapshot" names="cinder.volume.flows.manager.manage_existing_snapshot.ManageExistingTask"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">ManageExistingTask</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">db</desc_parameter><desc_parameter xml:space="preserve">driver</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" reftitle="cinder.flow_utils.CinderTask" refuri="cinder.flow_utils#cinder.flow_utils.CinderTask"><literal classes="xref py py-class">cinder.flow_utils.CinderTask</literal></reference></paragraph>
                <paragraph>Brings an existing snapshot under Cinder management.</paragraph>
                <index entries="['single',\ 'default_provides\ (ManageExistingTask\ attribute)',\ 'cinder.volume.flows.manager.manage_existing_snapshot.ManageExistingTask.default_provides',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ManageExistingTask" first="False" fullname="ManageExistingTask.default_provides" ids="cinder.volume.flows.manager.manage_existing_snapshot.ManageExistingTask.default_provides" module="cinder.volume.flows.manager.manage_existing_snapshot" names="cinder.volume.flows.manager.manage_existing_snapshot.ManageExistingTask.default_provides"><desc_name xml:space="preserve">default_provides</desc_name><desc_annotation xml:space="preserve"> = {'new_status', 'snapshot'}</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'execute()\ (ManageExistingTask\ method)',\ 'cinder.volume.flows.manager.manage_existing_snapshot.ManageExistingTask.execute',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ManageExistingTask" first="False" fullname="ManageExistingTask.execute" ids="cinder.volume.flows.manager.manage_existing_snapshot.ManageExistingTask.execute" module="cinder.volume.flows.manager.manage_existing_snapshot" names="cinder.volume.flows.manager.manage_existing_snapshot.ManageExistingTask.execute"><desc_name xml:space="preserve">execute</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot_ref</desc_parameter><desc_parameter xml:space="preserve">manage_existing_ref</desc_parameter><desc_parameter xml:space="preserve">size</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'NotifySnapshotActionTask\ (class\ in\ cinder.volume.flows.manager.manage_existing_snapshot)',\ 'cinder.volume.flows.manager.manage_existing_snapshot.NotifySnapshotActionTask',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="NotifySnapshotActionTask" ids="cinder.volume.flows.manager.manage_existing_snapshot.NotifySnapshotActionTask" module="cinder.volume.flows.manager.manage_existing_snapshot" names="cinder.volume.flows.manager.manage_existing_snapshot.NotifySnapshotActionTask"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">NotifySnapshotActionTask</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">db</desc_parameter><desc_parameter xml:space="preserve">event_suffix</desc_parameter><desc_parameter xml:space="preserve">host</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" reftitle="cinder.flow_utils.CinderTask" refuri="cinder.flow_utils#cinder.flow_utils.CinderTask"><literal classes="xref py py-class">cinder.flow_utils.CinderTask</literal></reference></paragraph>
                <paragraph>Performs a notification about the given snapshot when called.</paragraph>
                <paragraph>Reversion strategy: N/A</paragraph>
                <index entries="['single',\ 'execute()\ (NotifySnapshotActionTask\ method)',\ 'cinder.volume.flows.manager.manage_existing_snapshot.NotifySnapshotActionTask.execute',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="NotifySnapshotActionTask" first="False" fullname="NotifySnapshotActionTask.execute" ids="cinder.volume.flows.manager.manage_existing_snapshot.NotifySnapshotActionTask.execute" module="cinder.volume.flows.manager.manage_existing_snapshot" names="cinder.volume.flows.manager.manage_existing_snapshot.NotifySnapshotActionTask.execute"><desc_name xml:space="preserve">execute</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'PrepareForQuotaReservationTask\ (class\ in\ cinder.volume.flows.manager.manage_existing_snapshot)',\ 'cinder.volume.flows.manager.manage_existing_snapshot.PrepareForQuotaReservationTask',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="PrepareForQuotaReservationTask" ids="cinder.volume.flows.manager.manage_existing_snapshot.PrepareForQuotaReservationTask" module="cinder.volume.flows.manager.manage_existing_snapshot" names="cinder.volume.flows.manager.manage_existing_snapshot.PrepareForQuotaReservationTask"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">PrepareForQuotaReservationTask</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">db</desc_parameter><desc_parameter xml:space="preserve">driver</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" reftitle="cinder.flow_utils.CinderTask" refuri="cinder.flow_utils#cinder.flow_utils.CinderTask"><literal classes="xref py py-class">cinder.flow_utils.CinderTask</literal></reference></paragraph>
                <paragraph>Gets the snapshot size from the driver.</paragraph>
                <index entries="['single',\ 'default_provides\ (PrepareForQuotaReservationTask\ attribute)',\ 'cinder.volume.flows.manager.manage_existing_snapshot.PrepareForQuotaReservationTask.default_provides',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="PrepareForQuotaReservationTask" first="False" fullname="PrepareForQuotaReservationTask.default_provides" ids="cinder.volume.flows.manager.manage_existing_snapshot.PrepareForQuotaReservationTask.default_provides" module="cinder.volume.flows.manager.manage_existing_snapshot" names="cinder.volume.flows.manager.manage_existing_snapshot.PrepareForQuotaReservationTask.default_provides"><desc_name xml:space="preserve">default_provides</desc_name><desc_annotation xml:space="preserve"> = {'size', 'snapshot_properties'}</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'execute()\ (PrepareForQuotaReservationTask\ method)',\ 'cinder.volume.flows.manager.manage_existing_snapshot.PrepareForQuotaReservationTask.execute',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="PrepareForQuotaReservationTask" first="False" fullname="PrepareForQuotaReservationTask.execute" ids="cinder.volume.flows.manager.manage_existing_snapshot.PrepareForQuotaReservationTask.execute" module="cinder.volume.flows.manager.manage_existing_snapshot" names="cinder.volume.flows.manager.manage_existing_snapshot.PrepareForQuotaReservationTask.execute"><desc_name xml:space="preserve">execute</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot_ref</desc_parameter><desc_parameter xml:space="preserve">manage_existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'QuotaCommitTask\ (class\ in\ cinder.volume.flows.manager.manage_existing_snapshot)',\ 'cinder.volume.flows.manager.manage_existing_snapshot.QuotaCommitTask',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="QuotaCommitTask" ids="cinder.volume.flows.manager.manage_existing_snapshot.QuotaCommitTask" module="cinder.volume.flows.manager.manage_existing_snapshot" names="cinder.volume.flows.manager.manage_existing_snapshot.QuotaCommitTask"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">QuotaCommitTask</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" reftitle="cinder.flow_utils.CinderTask" refuri="cinder.flow_utils#cinder.flow_utils.CinderTask"><literal classes="xref py py-class">cinder.flow_utils.CinderTask</literal></reference></paragraph>
                <paragraph>Commits the reservation.</paragraph>
                <paragraph>Reversion strategy: N/A (the rollback will be handled by the task that did
                    the initial reservation (see: QuotaReserveTask).</paragraph>
                <paragraph>Warning Warning: if the process that is running this reserve and commit
                    process fails (or is killed before the quota is rolled back or committed
                    it does appear like the quota will never be rolled back). This makes
                    software upgrades hard (inflight operations will need to be stopped or
                    allowed to complete before the upgrade can occur). <emphasis>In the future</emphasis> when
                    taskflow has persistence built-in this should be easier to correct via
                    an automated or manual process.</paragraph>
                <index entries="['single',\ 'execute()\ (QuotaCommitTask\ method)',\ 'cinder.volume.flows.manager.manage_existing_snapshot.QuotaCommitTask.execute',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="QuotaCommitTask" first="False" fullname="QuotaCommitTask.execute" ids="cinder.volume.flows.manager.manage_existing_snapshot.QuotaCommitTask.execute" module="cinder.volume.flows.manager.manage_existing_snapshot" names="cinder.volume.flows.manager.manage_existing_snapshot.QuotaCommitTask.execute"><desc_name xml:space="preserve">execute</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">reservations</desc_parameter><desc_parameter xml:space="preserve">snapshot_properties</desc_parameter><desc_parameter xml:space="preserve">optional_args</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'revert()\ (QuotaCommitTask\ method)',\ 'cinder.volume.flows.manager.manage_existing_snapshot.QuotaCommitTask.revert',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="QuotaCommitTask" first="False" fullname="QuotaCommitTask.revert" ids="cinder.volume.flows.manager.manage_existing_snapshot.QuotaCommitTask.revert" module="cinder.volume.flows.manager.manage_existing_snapshot" names="cinder.volume.flows.manager.manage_existing_snapshot.QuotaCommitTask.revert"><desc_name xml:space="preserve">revert</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">result</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'QuotaReserveTask\ (class\ in\ cinder.volume.flows.manager.manage_existing_snapshot)',\ 'cinder.volume.flows.manager.manage_existing_snapshot.QuotaReserveTask',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="QuotaReserveTask" ids="cinder.volume.flows.manager.manage_existing_snapshot.QuotaReserveTask" module="cinder.volume.flows.manager.manage_existing_snapshot" names="cinder.volume.flows.manager.manage_existing_snapshot.QuotaReserveTask"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">QuotaReserveTask</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" reftitle="cinder.flow_utils.CinderTask" refuri="cinder.flow_utils#cinder.flow_utils.CinderTask"><literal classes="xref py py-class">cinder.flow_utils.CinderTask</literal></reference></paragraph>
                <paragraph>Reserves a single snapshot with the given size.</paragraph>
                <paragraph>Reversion strategy: rollback the quota reservation.</paragraph>
                <paragraph>Warning Warning: if the process that is running this reserve and commit
                    process fails (or is killed before the quota is rolled back or committed
                    it does appear like the quota will never be rolled back). This makes
                    software upgrades hard (inflight operations will need to be stopped or
                    allowed to complete before the upgrade can occur). <emphasis>In the future</emphasis> when
                    taskflow has persistence built-in this should be easier to correct via
                    an automated or manual process.</paragraph>
                <index entries="['single',\ 'default_provides\ (QuotaReserveTask\ attribute)',\ 'cinder.volume.flows.manager.manage_existing_snapshot.QuotaReserveTask.default_provides',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="QuotaReserveTask" first="False" fullname="QuotaReserveTask.default_provides" ids="cinder.volume.flows.manager.manage_existing_snapshot.QuotaReserveTask.default_provides" module="cinder.volume.flows.manager.manage_existing_snapshot" names="cinder.volume.flows.manager.manage_existing_snapshot.QuotaReserveTask.default_provides"><desc_name xml:space="preserve">default_provides</desc_name><desc_annotation xml:space="preserve"> = {'reservations'}</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'execute()\ (QuotaReserveTask\ method)',\ 'cinder.volume.flows.manager.manage_existing_snapshot.QuotaReserveTask.execute',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="QuotaReserveTask" first="False" fullname="QuotaReserveTask.execute" ids="cinder.volume.flows.manager.manage_existing_snapshot.QuotaReserveTask.execute" module="cinder.volume.flows.manager.manage_existing_snapshot" names="cinder.volume.flows.manager.manage_existing_snapshot.QuotaReserveTask.execute"><desc_name xml:space="preserve">execute</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">size</desc_parameter><desc_parameter xml:space="preserve">snapshot_ref</desc_parameter><desc_parameter xml:space="preserve">optional_args</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'revert()\ (QuotaReserveTask\ method)',\ 'cinder.volume.flows.manager.manage_existing_snapshot.QuotaReserveTask.revert',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="QuotaReserveTask" first="False" fullname="QuotaReserveTask.revert" ids="cinder.volume.flows.manager.manage_existing_snapshot.QuotaReserveTask.revert" module="cinder.volume.flows.manager.manage_existing_snapshot" names="cinder.volume.flows.manager.manage_existing_snapshot.QuotaReserveTask.revert"><desc_name xml:space="preserve">revert</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">result</desc_parameter><desc_parameter xml:space="preserve">optional_args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'get_flow()\ (in\ module\ cinder.volume.flows.manager.manage_existing_snapshot)',\ 'cinder.volume.flows.manager.manage_existing_snapshot.get_flow',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="get_flow" ids="cinder.volume.flows.manager.manage_existing_snapshot.get_flow" module="cinder.volume.flows.manager.manage_existing_snapshot" names="cinder.volume.flows.manager.manage_existing_snapshot.get_flow"><desc_name xml:space="preserve">get_flow</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">db</desc_parameter><desc_parameter xml:space="preserve">driver</desc_parameter><desc_parameter xml:space="preserve">host</desc_parameter><desc_parameter xml:space="preserve">snapshot_id</desc_parameter><desc_parameter xml:space="preserve">ref</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Constructs and returns the manager entry point flow.</paragraph>
            </desc_content>
        </desc>
    </section>
</document>
