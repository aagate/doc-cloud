<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api/cinder.backup.drivers.ceph.rst">
    <section ids="module-cinder.backup.drivers.ceph the-cinder-backup-drivers-ceph-module" names="the\ cinder.backup.drivers.ceph\ module">
        <title>The <reference internal="True" refid="module-cinder.backup.drivers.ceph" reftitle="cinder.backup.drivers.ceph"><literal classes="xref py py-mod">cinder.backup.drivers.ceph</literal></reference> Module</title>
        <index entries="['single',\ 'cinder.backup.drivers.ceph\ (module)',\ 'module-cinder.backup.drivers.ceph',\ '',\ None]"></index>
        <paragraph>Ceph Backup Service Implementation.</paragraph>
        <paragraph>This driver supports backing up volumes of any type to a Ceph object store. It
            is also capable of detecting whether the volume to be backed up is a Ceph RBD
            volume and, if so, attempts to perform incremental/differential backups.</paragraph>
        <paragraph>Support is also included for the following in the case of a source volume being
            a Ceph RBD volume:</paragraph>
        <block_quote>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>backing up within the same Ceph pool (not recommended)</paragraph>
                </list_item>
                <list_item>
                    <paragraph>backing up between different Ceph pools</paragraph>
                </list_item>
                <list_item>
                    <paragraph>backing up between different Ceph clusters</paragraph>
                </list_item>
            </bullet_list>
        </block_quote>
        <paragraph>At the time of writing, differential backup support in Ceph/librbd was quite
            new so this driver accounts for this by first attempting differential backup
            and falling back to full backup/copy if the former fails. It is recommended
            that you upgrade to Ceph Dumpling (&gt;= v0.67) or above to get the best results.</paragraph>
        <paragraph>If incremental backups are used, multiple backups of the same volume are stored
            as snapshots so that minimal space is consumed in the object store and
            restoring the volume takes a far reduced amount of time compared to a full
            copy.</paragraph>
        <paragraph>Note that Cinder supports restoring to a new volume or the original volume the
            backup was taken from. For the latter case, a full copy is enforced since this
            was deemed the safest action to take. It is therefore recommended to always
            restore to a new volume (default).</paragraph>
        <index entries="['single',\ 'CephBackupDriver\ (class\ in\ cinder.backup.drivers.ceph)',\ 'cinder.backup.drivers.ceph.CephBackupDriver',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="CephBackupDriver" ids="cinder.backup.drivers.ceph.CephBackupDriver" module="cinder.backup.drivers.ceph" names="cinder.backup.drivers.ceph.CephBackupDriver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">CephBackupDriver</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">db=None</desc_parameter><desc_parameter xml:space="preserve">execute=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" reftitle="cinder.backup.driver.BackupDriver" refuri="cinder.backup.driver#cinder.backup.driver.BackupDriver"><literal classes="xref py py-class">cinder.backup.driver.BackupDriver</literal></reference></paragraph>
                <paragraph>Backup Cinder volumes to Ceph Object Store.</paragraph>
                <paragraph>This class enables backing up Cinder volumes to a Ceph object store.
                    Backups may be stored in their own pool or even cluster. Store location is
                    defined by the Ceph conf file and service config options supplied.</paragraph>
                <paragraph>If the source volume is itself an RBD volume, the backup will be performed
                    using incremental differential backups which <emphasis>should</emphasis> give a performance
                    gain.</paragraph>
                <index entries="['single',\ 'backup()\ (CephBackupDriver\ method)',\ 'cinder.backup.drivers.ceph.CephBackupDriver.backup',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CephBackupDriver" first="False" fullname="CephBackupDriver.backup" ids="cinder.backup.drivers.ceph.CephBackupDriver.backup" module="cinder.backup.drivers.ceph" names="cinder.backup.drivers.ceph.CephBackupDriver.backup"><desc_name xml:space="preserve">backup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">backup</desc_parameter><desc_parameter xml:space="preserve">volume_file</desc_parameter><desc_parameter xml:space="preserve">backup_metadata=True</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Backup volume and metadata (if available) to Ceph object store.</paragraph>
                        <paragraph>If the source volume is an RBD we will attempt to do an
                            incremental/differential backup, otherwise a full copy is performed.
                            If this fails we will attempt to fall back to full copy.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'backup_snapshot_name_pattern()\ (CephBackupDriver\ static\ method)',\ 'cinder.backup.drivers.ceph.CephBackupDriver.backup_snapshot_name_pattern',\ '',\ None]"></index>
                <desc desctype="staticmethod" domain="py" noindex="False" objtype="staticmethod">
                    <desc_signature class="CephBackupDriver" first="False" fullname="CephBackupDriver.backup_snapshot_name_pattern" ids="cinder.backup.drivers.ceph.CephBackupDriver.backup_snapshot_name_pattern" module="cinder.backup.drivers.ceph" names="cinder.backup.drivers.ceph.CephBackupDriver.backup_snapshot_name_pattern"><desc_annotation xml:space="preserve">static </desc_annotation><desc_name xml:space="preserve">backup_snapshot_name_pattern</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns the pattern used to match backup snapshots.</paragraph>
                        <paragraph>It is essential that snapshots created for purposes other than backups
                            do not have this name format.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'check_for_setup_error()\ (CephBackupDriver\ method)',\ 'cinder.backup.drivers.ceph.CephBackupDriver.check_for_setup_error',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CephBackupDriver" first="False" fullname="CephBackupDriver.check_for_setup_error" ids="cinder.backup.drivers.ceph.CephBackupDriver.check_for_setup_error" module="cinder.backup.drivers.ceph" names="cinder.backup.drivers.ceph.CephBackupDriver.check_for_setup_error"><desc_name xml:space="preserve">check_for_setup_error</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns an error if prerequisites arenâ€™t met.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_backup()\ (CephBackupDriver\ method)',\ 'cinder.backup.drivers.ceph.CephBackupDriver.delete_backup',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CephBackupDriver" first="False" fullname="CephBackupDriver.delete_backup" ids="cinder.backup.drivers.ceph.CephBackupDriver.delete_backup" module="cinder.backup.drivers.ceph" names="cinder.backup.drivers.ceph.CephBackupDriver.delete_backup"><desc_name xml:space="preserve">delete_backup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">backup</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Delete the given backup from Ceph object store.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_backup_snaps()\ (cinder.backup.drivers.ceph.CephBackupDriver\ class\ method)',\ 'cinder.backup.drivers.ceph.CephBackupDriver.get_backup_snaps',\ '',\ None]"></index>
                <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                    <desc_signature class="CephBackupDriver" first="False" fullname="CephBackupDriver.get_backup_snaps" ids="cinder.backup.drivers.ceph.CephBackupDriver.get_backup_snaps" module="cinder.backup.drivers.ceph" names="cinder.backup.drivers.ceph.CephBackupDriver.get_backup_snaps"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">get_backup_snaps</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">rbd_image</desc_parameter><desc_parameter xml:space="preserve">sort=False</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get all backup snapshots for the given rbd image.</paragraph>
                        <definition_list>
                            <definition_list_item>
                                <term>NOTE: this call is made public since these snapshots must be deleted</term>
                                <definition>
                                    <paragraph>before the base volume can be deleted.</paragraph>
                                </definition>
                            </definition_list_item>
                        </definition_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'restore()\ (CephBackupDriver\ method)',\ 'cinder.backup.drivers.ceph.CephBackupDriver.restore',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CephBackupDriver" first="False" fullname="CephBackupDriver.restore" ids="cinder.backup.drivers.ceph.CephBackupDriver.restore" module="cinder.backup.drivers.ceph" names="cinder.backup.drivers.ceph.CephBackupDriver.restore"><desc_name xml:space="preserve">restore</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">backup</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">volume_file</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Restore volume from backup in Ceph object store.</paragraph>
                        <paragraph>If volume metadata is available this will also be restored.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'VolumeMetadataBackup\ (class\ in\ cinder.backup.drivers.ceph)',\ 'cinder.backup.drivers.ceph.VolumeMetadataBackup',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="VolumeMetadataBackup" ids="cinder.backup.drivers.ceph.VolumeMetadataBackup" module="cinder.backup.drivers.ceph" names="cinder.backup.drivers.ceph.VolumeMetadataBackup"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">VolumeMetadataBackup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">client</desc_parameter><desc_parameter xml:space="preserve">backup_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                <index entries="['single',\ 'exists\ (VolumeMetadataBackup\ attribute)',\ 'cinder.backup.drivers.ceph.VolumeMetadataBackup.exists',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="VolumeMetadataBackup" first="False" fullname="VolumeMetadataBackup.exists" ids="cinder.backup.drivers.ceph.VolumeMetadataBackup.exists" module="cinder.backup.drivers.ceph" names="cinder.backup.drivers.ceph.VolumeMetadataBackup.exists"><desc_name xml:space="preserve">exists</desc_name></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get()\ (VolumeMetadataBackup\ method)',\ 'cinder.backup.drivers.ceph.VolumeMetadataBackup.get',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeMetadataBackup" first="False" fullname="VolumeMetadataBackup.get" ids="cinder.backup.drivers.ceph.VolumeMetadataBackup.get" module="cinder.backup.drivers.ceph" names="cinder.backup.drivers.ceph.VolumeMetadataBackup.get"><desc_name xml:space="preserve">get</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get metadata backup object.</paragraph>
                        <paragraph>Returns None if the object does not exist.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'name\ (VolumeMetadataBackup\ attribute)',\ 'cinder.backup.drivers.ceph.VolumeMetadataBackup.name',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="VolumeMetadataBackup" first="False" fullname="VolumeMetadataBackup.name" ids="cinder.backup.drivers.ceph.VolumeMetadataBackup.name" module="cinder.backup.drivers.ceph" names="cinder.backup.drivers.ceph.VolumeMetadataBackup.name"><desc_name xml:space="preserve">name</desc_name></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'remove_if_exists()\ (VolumeMetadataBackup\ method)',\ 'cinder.backup.drivers.ceph.VolumeMetadataBackup.remove_if_exists',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeMetadataBackup" first="False" fullname="VolumeMetadataBackup.remove_if_exists" ids="cinder.backup.drivers.ceph.VolumeMetadataBackup.remove_if_exists" module="cinder.backup.drivers.ceph" names="cinder.backup.drivers.ceph.VolumeMetadataBackup.remove_if_exists"><desc_name xml:space="preserve">remove_if_exists</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'set()\ (VolumeMetadataBackup\ method)',\ 'cinder.backup.drivers.ceph.VolumeMetadataBackup.set',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeMetadataBackup" first="False" fullname="VolumeMetadataBackup.set" ids="cinder.backup.drivers.ceph.VolumeMetadataBackup.set" module="cinder.backup.drivers.ceph" names="cinder.backup.drivers.ceph.VolumeMetadataBackup.set"><desc_name xml:space="preserve">set</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">json_meta</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Write JSON metadata to a new object.</paragraph>
                        <paragraph>This should only be called once per backup. Raises
                            VolumeMetadataBackupExists if the object already exists.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'get_backup_driver()\ (in\ module\ cinder.backup.drivers.ceph)',\ 'cinder.backup.drivers.ceph.get_backup_driver',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="get_backup_driver" ids="cinder.backup.drivers.ceph.get_backup_driver" module="cinder.backup.drivers.ceph" names="cinder.backup.drivers.ceph.get_backup_driver"><desc_name xml:space="preserve">get_backup_driver</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
    </section>
</document>
