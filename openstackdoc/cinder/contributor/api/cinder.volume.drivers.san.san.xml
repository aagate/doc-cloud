<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api/cinder.volume.drivers.san.san.rst">
    <section ids="module-cinder.volume.drivers.san.san the-cinder-volume-drivers-san-san-module" names="the\ cinder.volume.drivers.san.san\ module">
        <title>The <reference internal="True" refid="module-cinder.volume.drivers.san.san" reftitle="cinder.volume.drivers.san.san"><literal classes="xref py py-mod">cinder.volume.drivers.san.san</literal></reference> Module</title>
        <index entries="['single',\ 'cinder.volume.drivers.san.san\ (module)',\ 'module-cinder.volume.drivers.san.san',\ '',\ None]"></index>
        <paragraph>Default Driver for san-stored volumes.</paragraph>
        <paragraph>The unique thing about a SAN is that we don’t expect that we can run the volume
            controller on the SAN hardware. We expect to access it over SSH or some API.</paragraph>
        <index entries="['single',\ 'SanDriver\ (class\ in\ cinder.volume.drivers.san.san)',\ 'cinder.volume.drivers.san.san.SanDriver',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="SanDriver" ids="cinder.volume.drivers.san.san.SanDriver" module="cinder.volume.drivers.san.san" names="cinder.volume.drivers.san.san.SanDriver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">SanDriver</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" reftitle="cinder.volume.driver.BaseVD" refuri="cinder.volume.driver#cinder.volume.driver.BaseVD"><literal classes="xref py py-class">cinder.volume.driver.BaseVD</literal></reference></paragraph>
                <paragraph>Base class for SAN-style storage volumes</paragraph>
                <paragraph>A SAN-style storage value is ‘different’ because the volume controller
                    probably won’t run on it, so we need to access is over SSH or another
                    remote protocol.</paragraph>
                <index entries="['single',\ 'check_for_setup_error()\ (SanDriver\ method)',\ 'cinder.volume.drivers.san.san.SanDriver.check_for_setup_error',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SanDriver" first="False" fullname="SanDriver.check_for_setup_error" ids="cinder.volume.drivers.san.san.SanDriver.check_for_setup_error" module="cinder.volume.drivers.san.san" names="cinder.volume.drivers.san.san.SanDriver.check_for_setup_error"><desc_name xml:space="preserve">check_for_setup_error</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns an error if prerequisites aren’t met.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_export()\ (SanDriver\ method)',\ 'cinder.volume.drivers.san.san.SanDriver.create_export',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SanDriver" first="False" fullname="SanDriver.create_export" ids="cinder.volume.drivers.san.san.SanDriver.create_export" module="cinder.volume.drivers.san.san" names="cinder.volume.drivers.san.san.SanDriver.create_export"><desc_name xml:space="preserve">create_export</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Exports the volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'ensure_export()\ (SanDriver\ method)',\ 'cinder.volume.drivers.san.san.SanDriver.ensure_export',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SanDriver" first="False" fullname="SanDriver.ensure_export" ids="cinder.volume.drivers.san.san.SanDriver.ensure_export" module="cinder.volume.drivers.san.san" names="cinder.volume.drivers.san.san.SanDriver.ensure_export"><desc_name xml:space="preserve">ensure_export</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Synchronously recreates an export for a logical volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'remove_export()\ (SanDriver\ method)',\ 'cinder.volume.drivers.san.san.SanDriver.remove_export',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SanDriver" first="False" fullname="SanDriver.remove_export" ids="cinder.volume.drivers.san.san.SanDriver.remove_export" module="cinder.volume.drivers.san.san" names="cinder.volume.drivers.san.san.SanDriver.remove_export"><desc_name xml:space="preserve">remove_export</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Removes an export for a logical volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'san_execute()\ (SanDriver\ method)',\ 'cinder.volume.drivers.san.san.SanDriver.san_execute',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SanDriver" first="False" fullname="SanDriver.san_execute" ids="cinder.volume.drivers.san.san.SanDriver.san_execute" module="cinder.volume.drivers.san.san" names="cinder.volume.drivers.san.san.SanDriver.san_execute"><desc_name xml:space="preserve">san_execute</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*cmd</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'SanISCSIDriver\ (class\ in\ cinder.volume.drivers.san.san)',\ 'cinder.volume.drivers.san.san.SanISCSIDriver',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="SanISCSIDriver" ids="cinder.volume.drivers.san.san.SanISCSIDriver" module="cinder.volume.drivers.san.san" names="cinder.volume.drivers.san.san.SanISCSIDriver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">SanISCSIDriver</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" refid="cinder.volume.drivers.san.san.SanDriver" reftitle="cinder.volume.drivers.san.san.SanDriver"><literal classes="xref py py-class">cinder.volume.drivers.san.san.SanDriver</literal></reference>, <reference internal="True" reftitle="cinder.volume.driver.ISCSIDriver" refuri="cinder.volume.driver#cinder.volume.driver.ISCSIDriver"><literal classes="xref py py-class">cinder.volume.driver.ISCSIDriver</literal></reference></paragraph>
            </desc_content>
        </desc>
    </section>
</document>
