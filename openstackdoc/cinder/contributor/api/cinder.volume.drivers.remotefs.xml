<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api/cinder.volume.drivers.remotefs.rst">
    <section ids="module-cinder.volume.drivers.remotefs the-cinder-volume-drivers-remotefs-module" names="the\ cinder.volume.drivers.remotefs\ module">
        <title>The <reference internal="True" refid="module-cinder.volume.drivers.remotefs" reftitle="cinder.volume.drivers.remotefs"><literal classes="xref py py-mod">cinder.volume.drivers.remotefs</literal></reference> Module</title>
        <index entries="['single',\ 'cinder.volume.drivers.remotefs\ (module)',\ 'module-cinder.volume.drivers.remotefs',\ '',\ None]"></index>
        <index entries="['single',\ 'RemoteFSDriver\ (class\ in\ cinder.volume.drivers.remotefs)',\ 'cinder.volume.drivers.remotefs.RemoteFSDriver',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="RemoteFSDriver" ids="cinder.volume.drivers.remotefs.RemoteFSDriver" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSDriver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">RemoteFSDriver</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" reftitle="cinder.volume.driver.BaseVD" refuri="cinder.volume.driver#cinder.volume.driver.BaseVD"><literal classes="xref py py-class">cinder.volume.driver.BaseVD</literal></reference></paragraph>
                <paragraph>Common base for drivers that work like NFS.</paragraph>
                <index entries="['single',\ 'SHARE_FORMAT_REGEX\ (RemoteFSDriver\ attribute)',\ 'cinder.volume.drivers.remotefs.RemoteFSDriver.SHARE_FORMAT_REGEX',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="RemoteFSDriver" first="False" fullname="RemoteFSDriver.SHARE_FORMAT_REGEX" ids="cinder.volume.drivers.remotefs.RemoteFSDriver.SHARE_FORMAT_REGEX" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSDriver.SHARE_FORMAT_REGEX"><desc_name xml:space="preserve">SHARE_FORMAT_REGEX</desc_name><desc_annotation xml:space="preserve"> = '.+:/.+'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'check_for_setup_error()\ (RemoteFSDriver\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSDriver.check_for_setup_error',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSDriver" first="False" fullname="RemoteFSDriver.check_for_setup_error" ids="cinder.volume.drivers.remotefs.RemoteFSDriver.check_for_setup_error" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSDriver.check_for_setup_error"><desc_name xml:space="preserve">check_for_setup_error</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Just to override parent behavior.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'copy_image_to_volume()\ (RemoteFSDriver\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSDriver.copy_image_to_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSDriver" first="False" fullname="RemoteFSDriver.copy_image_to_volume" ids="cinder.volume.drivers.remotefs.RemoteFSDriver.copy_image_to_volume" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSDriver.copy_image_to_volume"><desc_name xml:space="preserve">copy_image_to_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">image_service</desc_parameter><desc_parameter xml:space="preserve">image_id</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Fetch the image from image_service and write it to the volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'copy_volume_to_image()\ (RemoteFSDriver\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSDriver.copy_volume_to_image',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSDriver" first="False" fullname="RemoteFSDriver.copy_volume_to_image" ids="cinder.volume.drivers.remotefs.RemoteFSDriver.copy_volume_to_image" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSDriver.copy_volume_to_image"><desc_name xml:space="preserve">copy_volume_to_image</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">image_service</desc_parameter><desc_parameter xml:space="preserve">image_meta</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy the volume to the specified image.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_export()\ (RemoteFSDriver\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSDriver.create_export',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSDriver" first="False" fullname="RemoteFSDriver.create_export" ids="cinder.volume.drivers.remotefs.RemoteFSDriver.create_export" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSDriver.create_export"><desc_name xml:space="preserve">create_export</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctx</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Exports the volume.</paragraph>
                        <paragraph>Can optionally return a dictionary of changes
                            to the volume object to be persisted.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_volume()\ (RemoteFSDriver\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSDriver.create_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSDriver" first="False" fullname="RemoteFSDriver.create_volume" ids="cinder.volume.drivers.remotefs.RemoteFSDriver.create_volume" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSDriver.create_volume"><desc_name xml:space="preserve">create_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a volume.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">volume</literal_strong> â€“ volume reference</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>provider_location update dict for database</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_snapshot()\ (RemoteFSDriver\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSDriver.delete_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSDriver" first="False" fullname="RemoteFSDriver.delete_snapshot" ids="cinder.volume.drivers.remotefs.RemoteFSDriver.delete_snapshot" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSDriver.delete_snapshot"><desc_name xml:space="preserve">delete_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Delete snapshot.</paragraph>
                        <paragraph>Do nothing for this driver, but allow manager to handle deletion
                            of snapshot in error state.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_volume()\ (RemoteFSDriver\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSDriver.delete_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSDriver" first="False" fullname="RemoteFSDriver.delete_volume" ids="cinder.volume.drivers.remotefs.RemoteFSDriver.delete_volume" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSDriver.delete_volume"><desc_name xml:space="preserve">delete_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Deletes a logical volume.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">volume</literal_strong> â€“ volume reference</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'do_setup()\ (RemoteFSDriver\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSDriver.do_setup',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSDriver" first="False" fullname="RemoteFSDriver.do_setup" ids="cinder.volume.drivers.remotefs.RemoteFSDriver.do_setup" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSDriver.do_setup"><desc_name xml:space="preserve">do_setup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Any initialization the volume driver does while starting.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'driver_prefix\ (RemoteFSDriver\ attribute)',\ 'cinder.volume.drivers.remotefs.RemoteFSDriver.driver_prefix',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="RemoteFSDriver" first="False" fullname="RemoteFSDriver.driver_prefix" ids="cinder.volume.drivers.remotefs.RemoteFSDriver.driver_prefix" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSDriver.driver_prefix"><desc_name xml:space="preserve">driver_prefix</desc_name><desc_annotation xml:space="preserve"> = 'remotefs'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'driver_volume_type\ (RemoteFSDriver\ attribute)',\ 'cinder.volume.drivers.remotefs.RemoteFSDriver.driver_volume_type',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="RemoteFSDriver" first="False" fullname="RemoteFSDriver.driver_volume_type" ids="cinder.volume.drivers.remotefs.RemoteFSDriver.driver_volume_type" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSDriver.driver_volume_type"><desc_name xml:space="preserve">driver_volume_type</desc_name><desc_annotation xml:space="preserve"> = None</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'ensure_export()\ (RemoteFSDriver\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSDriver.ensure_export',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSDriver" first="False" fullname="RemoteFSDriver.ensure_export" ids="cinder.volume.drivers.remotefs.RemoteFSDriver.ensure_export" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSDriver.ensure_export"><desc_name xml:space="preserve">ensure_export</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctx</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Synchronously recreates an export for a logical volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_volume_stats()\ (RemoteFSDriver\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSDriver.get_volume_stats',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSDriver" first="False" fullname="RemoteFSDriver.get_volume_stats" ids="cinder.volume.drivers.remotefs.RemoteFSDriver.get_volume_stats" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSDriver.get_volume_stats"><desc_name xml:space="preserve">get_volume_stats</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">refresh=False</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get volume stats.</paragraph>
                        <paragraph>If â€˜refreshâ€™ is True, update the stats first.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'initialize_connection()\ (RemoteFSDriver\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSDriver.initialize_connection',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSDriver" first="False" fullname="RemoteFSDriver.initialize_connection" ids="cinder.volume.drivers.remotefs.RemoteFSDriver.initialize_connection" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSDriver.initialize_connection"><desc_name xml:space="preserve">initialize_connection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Allow connection to connector and return connection info.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> â€“ volume reference</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">connector</literal_strong> â€“ connector reference</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'local_path()\ (RemoteFSDriver\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSDriver.local_path',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSDriver" first="False" fullname="RemoteFSDriver.local_path" ids="cinder.volume.drivers.remotefs.RemoteFSDriver.local_path" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSDriver.local_path"><desc_name xml:space="preserve">local_path</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get volume path (mounted locally fs path) for given volume.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">volume</literal_strong> â€“ volume reference</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'remove_export()\ (RemoteFSDriver\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSDriver.remove_export',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSDriver" first="False" fullname="RemoteFSDriver.remove_export" ids="cinder.volume.drivers.remotefs.RemoteFSDriver.remove_export" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSDriver.remove_export"><desc_name xml:space="preserve">remove_export</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctx</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Removes an export for a logical volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'secure_file_operations_enabled()\ (RemoteFSDriver\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSDriver.secure_file_operations_enabled',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSDriver" first="False" fullname="RemoteFSDriver.secure_file_operations_enabled" ids="cinder.volume.drivers.remotefs.RemoteFSDriver.secure_file_operations_enabled" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSDriver.secure_file_operations_enabled"><desc_name xml:space="preserve">secure_file_operations_enabled</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Determine if driver is operating in Secure File Operations mode.</paragraph>
                        <paragraph>The Cinder Volume driver needs to query if this driver is operating
                            in a secure file mode; check our nas_secure_file_operations flag.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'set_nas_security_options()\ (RemoteFSDriver\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSDriver.set_nas_security_options',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSDriver" first="False" fullname="RemoteFSDriver.set_nas_security_options" ids="cinder.volume.drivers.remotefs.RemoteFSDriver.set_nas_security_options" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSDriver.set_nas_security_options"><desc_name xml:space="preserve">set_nas_security_options</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">is_new_cinder_install</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Determine the setting to use for Secure NAS options.</paragraph>
                        <paragraph>This method must be overridden by child wishing to use secure
                            NAS file operations. This base method will set the NAS security
                            options to false.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'terminate_connection()\ (RemoteFSDriver\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSDriver.terminate_connection',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSDriver" first="False" fullname="RemoteFSDriver.terminate_connection" ids="cinder.volume.drivers.remotefs.RemoteFSDriver.terminate_connection" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSDriver.terminate_connection"><desc_name xml:space="preserve">terminate_connection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Disallow connection from connector.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'vendor_name\ (RemoteFSDriver\ attribute)',\ 'cinder.volume.drivers.remotefs.RemoteFSDriver.vendor_name',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="RemoteFSDriver" first="False" fullname="RemoteFSDriver.vendor_name" ids="cinder.volume.drivers.remotefs.RemoteFSDriver.vendor_name" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSDriver.vendor_name"><desc_name xml:space="preserve">vendor_name</desc_name><desc_annotation xml:space="preserve"> = 'Open Source'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'volume_backend_name\ (RemoteFSDriver\ attribute)',\ 'cinder.volume.drivers.remotefs.RemoteFSDriver.volume_backend_name',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="RemoteFSDriver" first="False" fullname="RemoteFSDriver.volume_backend_name" ids="cinder.volume.drivers.remotefs.RemoteFSDriver.volume_backend_name" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSDriver.volume_backend_name"><desc_name xml:space="preserve">volume_backend_name</desc_name><desc_annotation xml:space="preserve"> = None</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'RemoteFSPoolMixin\ (class\ in\ cinder.volume.drivers.remotefs)',\ 'cinder.volume.drivers.remotefs.RemoteFSPoolMixin',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="RemoteFSPoolMixin" ids="cinder.volume.drivers.remotefs.RemoteFSPoolMixin" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSPoolMixin"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">RemoteFSPoolMixin</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                <paragraph>Drivers inheriting this will report each share as a pool.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'RemoteFSSnapDriver\ (class\ in\ cinder.volume.drivers.remotefs)',\ 'cinder.volume.drivers.remotefs.RemoteFSSnapDriver',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="RemoteFSSnapDriver" ids="cinder.volume.drivers.remotefs.RemoteFSSnapDriver" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSSnapDriver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">RemoteFSSnapDriver</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" refid="cinder.volume.drivers.remotefs.RemoteFSSnapDriverBase" reftitle="cinder.volume.drivers.remotefs.RemoteFSSnapDriverBase"><literal classes="xref py py-class">cinder.volume.drivers.remotefs.RemoteFSSnapDriverBase</literal></reference></paragraph>
                <index entries="['single',\ 'copy_volume_to_image()\ (RemoteFSSnapDriver\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSSnapDriver.copy_volume_to_image',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSSnapDriver" first="False" fullname="RemoteFSSnapDriver.copy_volume_to_image" ids="cinder.volume.drivers.remotefs.RemoteFSSnapDriver.copy_volume_to_image" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSSnapDriver.copy_volume_to_image"><desc_name xml:space="preserve">copy_volume_to_image</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">inst</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_cloned_volume()\ (RemoteFSSnapDriver\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSSnapDriver.create_cloned_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSSnapDriver" first="False" fullname="RemoteFSSnapDriver.create_cloned_volume" ids="cinder.volume.drivers.remotefs.RemoteFSSnapDriver.create_cloned_volume" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSSnapDriver.create_cloned_volume"><desc_name xml:space="preserve">create_cloned_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">inst</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_snapshot()\ (RemoteFSSnapDriver\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSSnapDriver.create_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSSnapDriver" first="False" fullname="RemoteFSSnapDriver.create_snapshot" ids="cinder.volume.drivers.remotefs.RemoteFSSnapDriver.create_snapshot" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSSnapDriver.create_snapshot"><desc_name xml:space="preserve">create_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">inst</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_volume_from_snapshot()\ (RemoteFSSnapDriver\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSSnapDriver.create_volume_from_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSSnapDriver" first="False" fullname="RemoteFSSnapDriver.create_volume_from_snapshot" ids="cinder.volume.drivers.remotefs.RemoteFSSnapDriver.create_volume_from_snapshot" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSSnapDriver.create_volume_from_snapshot"><desc_name xml:space="preserve">create_volume_from_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">inst</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_snapshot()\ (RemoteFSSnapDriver\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSSnapDriver.delete_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSSnapDriver" first="False" fullname="RemoteFSSnapDriver.delete_snapshot" ids="cinder.volume.drivers.remotefs.RemoteFSSnapDriver.delete_snapshot" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSSnapDriver.delete_snapshot"><desc_name xml:space="preserve">delete_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">inst</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'extend_volume()\ (RemoteFSSnapDriver\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSSnapDriver.extend_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSSnapDriver" first="False" fullname="RemoteFSSnapDriver.extend_volume" ids="cinder.volume.drivers.remotefs.RemoteFSSnapDriver.extend_volume" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSSnapDriver.extend_volume"><desc_name xml:space="preserve">extend_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">inst</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'RemoteFSSnapDriverBase\ (class\ in\ cinder.volume.drivers.remotefs)',\ 'cinder.volume.drivers.remotefs.RemoteFSSnapDriverBase',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="RemoteFSSnapDriverBase" ids="cinder.volume.drivers.remotefs.RemoteFSSnapDriverBase" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSSnapDriverBase"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">RemoteFSSnapDriverBase</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" refid="cinder.volume.drivers.remotefs.RemoteFSDriver" reftitle="cinder.volume.drivers.remotefs.RemoteFSDriver"><literal classes="xref py py-class">cinder.volume.drivers.remotefs.RemoteFSDriver</literal></reference></paragraph>
                <paragraph>Base class for remotefs drivers implementing qcow2 snapshots.</paragraph>
                <definition_list>
                    <definition_list_item>
                        <term>Driver must implement:</term>
                        <definition>
                            <paragraph>_local_volume_dir(self, volume)</paragraph>
                        </definition>
                    </definition_list_item>
                </definition_list>
                <index entries="['single',\ 'do_setup()\ (RemoteFSSnapDriverBase\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSSnapDriverBase.do_setup',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSSnapDriverBase" first="False" fullname="RemoteFSSnapDriverBase.do_setup" ids="cinder.volume.drivers.remotefs.RemoteFSSnapDriverBase.do_setup" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSSnapDriverBase.do_setup"><desc_name xml:space="preserve">do_setup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_active_image_from_info()\ (RemoteFSSnapDriverBase\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSSnapDriverBase.get_active_image_from_info',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSSnapDriverBase" first="False" fullname="RemoteFSSnapDriverBase.get_active_image_from_info" ids="cinder.volume.drivers.remotefs.RemoteFSSnapDriverBase.get_active_image_from_info" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSSnapDriverBase.get_active_image_from_info"><desc_name xml:space="preserve">get_active_image_from_info</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns filename of the active image from the info file.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'RemoteFSSnapDriverDistributed\ (class\ in\ cinder.volume.drivers.remotefs)',\ 'cinder.volume.drivers.remotefs.RemoteFSSnapDriverDistributed',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="RemoteFSSnapDriverDistributed" ids="cinder.volume.drivers.remotefs.RemoteFSSnapDriverDistributed" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSSnapDriverDistributed"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">RemoteFSSnapDriverDistributed</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" refid="cinder.volume.drivers.remotefs.RemoteFSSnapDriverBase" reftitle="cinder.volume.drivers.remotefs.RemoteFSSnapDriverBase"><literal classes="xref py py-class">cinder.volume.drivers.remotefs.RemoteFSSnapDriverBase</literal></reference></paragraph>
                <index entries="['single',\ 'copy_volume_to_image()\ (RemoteFSSnapDriverDistributed\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSSnapDriverDistributed.copy_volume_to_image',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSSnapDriverDistributed" first="False" fullname="RemoteFSSnapDriverDistributed.copy_volume_to_image" ids="cinder.volume.drivers.remotefs.RemoteFSSnapDriverDistributed.copy_volume_to_image" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSSnapDriverDistributed.copy_volume_to_image"><desc_name xml:space="preserve">copy_volume_to_image</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">image_service</desc_parameter><desc_parameter xml:space="preserve">image_meta</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy the volume to the specified image.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_cloned_volume()\ (RemoteFSSnapDriverDistributed\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSSnapDriverDistributed.create_cloned_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSSnapDriverDistributed" first="False" fullname="RemoteFSSnapDriverDistributed.create_cloned_volume" ids="cinder.volume.drivers.remotefs.RemoteFSSnapDriverDistributed.create_cloned_volume" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSSnapDriverDistributed.create_cloned_volume"><desc_name xml:space="preserve">create_cloned_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">src_vref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a clone of the specified volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_snapshot()\ (RemoteFSSnapDriverDistributed\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSSnapDriverDistributed.create_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSSnapDriverDistributed" first="False" fullname="RemoteFSSnapDriverDistributed.create_snapshot" ids="cinder.volume.drivers.remotefs.RemoteFSSnapDriverDistributed.create_snapshot" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSSnapDriverDistributed.create_snapshot"><desc_name xml:space="preserve">create_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Apply locking to the create snapshot operation.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_volume_from_snapshot()\ (RemoteFSSnapDriverDistributed\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSSnapDriverDistributed.create_volume_from_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSSnapDriverDistributed" first="False" fullname="RemoteFSSnapDriverDistributed.create_volume_from_snapshot" ids="cinder.volume.drivers.remotefs.RemoteFSSnapDriverDistributed.create_volume_from_snapshot" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSSnapDriverDistributed.create_volume_from_snapshot"><desc_name xml:space="preserve">create_volume_from_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_snapshot()\ (RemoteFSSnapDriverDistributed\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSSnapDriverDistributed.delete_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSSnapDriverDistributed" first="False" fullname="RemoteFSSnapDriverDistributed.delete_snapshot" ids="cinder.volume.drivers.remotefs.RemoteFSSnapDriverDistributed.delete_snapshot" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSSnapDriverDistributed.delete_snapshot"><desc_name xml:space="preserve">delete_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Apply locking to the delete snapshot operation.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'extend_volume()\ (RemoteFSSnapDriverDistributed\ method)',\ 'cinder.volume.drivers.remotefs.RemoteFSSnapDriverDistributed.extend_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RemoteFSSnapDriverDistributed" first="False" fullname="RemoteFSSnapDriverDistributed.extend_volume" ids="cinder.volume.drivers.remotefs.RemoteFSSnapDriverDistributed.extend_volume" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.RemoteFSSnapDriverDistributed.extend_volume"><desc_name xml:space="preserve">extend_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">size_gb</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'locked_volume_id_operation()\ (in\ module\ cinder.volume.drivers.remotefs)',\ 'cinder.volume.drivers.remotefs.locked_volume_id_operation',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="locked_volume_id_operation" ids="cinder.volume.drivers.remotefs.locked_volume_id_operation" module="cinder.volume.drivers.remotefs" names="cinder.volume.drivers.remotefs.locked_volume_id_operation"><desc_name xml:space="preserve">locked_volume_id_operation</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">f</desc_parameter><desc_parameter xml:space="preserve">external=False</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Lock decorator for volume operations.</paragraph>
                <paragraph>Takes a named lock prior to executing the operation. The lock is named
                    with the id of the volume. This lock can be used by driver methods
                    to prevent conflicts with other operations modifying the same volume.</paragraph>
                <paragraph>May be applied to methods that take a â€˜volumeâ€™ or â€˜snapshotâ€™ argument.</paragraph>
            </desc_content>
        </desc>
    </section>
</document>
