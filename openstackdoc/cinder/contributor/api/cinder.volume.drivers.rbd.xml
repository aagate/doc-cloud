<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api/cinder.volume.drivers.rbd.rst">
    <section ids="module-cinder.volume.drivers.rbd the-cinder-volume-drivers-rbd-module" names="the\ cinder.volume.drivers.rbd\ module">
        <title>The <reference internal="True" refid="module-cinder.volume.drivers.rbd" reftitle="cinder.volume.drivers.rbd"><literal classes="xref py py-mod">cinder.volume.drivers.rbd</literal></reference> Module</title>
        <index entries="['single',\ 'cinder.volume.drivers.rbd\ (module)',\ 'module-cinder.volume.drivers.rbd',\ '',\ None]"></index>
        <paragraph>RADOS Block Device Driver</paragraph>
        <index entries="['single',\ 'RADOSClient\ (class\ in\ cinder.volume.drivers.rbd)',\ 'cinder.volume.drivers.rbd.RADOSClient',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="RADOSClient" ids="cinder.volume.drivers.rbd.RADOSClient" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RADOSClient"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">RADOSClient</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">driver</desc_parameter><desc_parameter xml:space="preserve">pool=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                <paragraph>Context manager to simplify error handling for connecting to ceph.</paragraph>
                <index entries="['single',\ 'features\ (RADOSClient\ attribute)',\ 'cinder.volume.drivers.rbd.RADOSClient.features',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="RADOSClient" first="False" fullname="RADOSClient.features" ids="cinder.volume.drivers.rbd.RADOSClient.features" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RADOSClient.features"><desc_name xml:space="preserve">features</desc_name></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'RBDDriver\ (class\ in\ cinder.volume.drivers.rbd)',\ 'cinder.volume.drivers.rbd.RBDDriver',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="RBDDriver" ids="cinder.volume.drivers.rbd.RBDDriver" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">RBDDriver</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">active_backend_id=None</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" reftitle="cinder.volume.driver.CloneableImageVD" refuri="cinder.volume.driver#cinder.volume.driver.CloneableImageVD"><literal classes="xref py py-class">cinder.volume.driver.CloneableImageVD</literal></reference>, <reference internal="True" reftitle="cinder.volume.driver.MigrateVD" refuri="cinder.volume.driver#cinder.volume.driver.MigrateVD"><literal classes="xref py py-class">cinder.volume.driver.MigrateVD</literal></reference>, <reference internal="True" reftitle="cinder.volume.driver.ManageableVD" refuri="cinder.volume.driver#cinder.volume.driver.ManageableVD"><literal classes="xref py py-class">cinder.volume.driver.ManageableVD</literal></reference>, <reference internal="True" reftitle="cinder.volume.driver.BaseVD" refuri="cinder.volume.driver#cinder.volume.driver.BaseVD"><literal classes="xref py py-class">cinder.volume.driver.BaseVD</literal></reference></paragraph>
                <paragraph>Implements RADOS block device (RBD) volume commands.</paragraph>
                <index entries="['single',\ 'CI_WIKI_NAME\ (RBDDriver\ attribute)',\ 'cinder.volume.drivers.rbd.RBDDriver.CI_WIKI_NAME',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.CI_WIKI_NAME" ids="cinder.volume.drivers.rbd.RBDDriver.CI_WIKI_NAME" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.CI_WIKI_NAME"><desc_name xml:space="preserve">CI_WIKI_NAME</desc_name><desc_annotation xml:space="preserve"> = 'Cinder_Jenkins'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'RBDProxy()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.RBDProxy',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.RBDProxy" ids="cinder.volume.drivers.rbd.RBDDriver.RBDProxy" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.RBDProxy"><desc_name xml:space="preserve">RBDProxy</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'SYSCONFDIR\ (RBDDriver\ attribute)',\ 'cinder.volume.drivers.rbd.RBDDriver.SYSCONFDIR',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.SYSCONFDIR" ids="cinder.volume.drivers.rbd.RBDDriver.SYSCONFDIR" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.SYSCONFDIR"><desc_name xml:space="preserve">SYSCONFDIR</desc_name><desc_annotation xml:space="preserve"> = '/etc/ceph/'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'VERSION\ (RBDDriver\ attribute)',\ 'cinder.volume.drivers.rbd.RBDDriver.VERSION',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.VERSION" ids="cinder.volume.drivers.rbd.RBDDriver.VERSION" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.VERSION"><desc_name xml:space="preserve">VERSION</desc_name><desc_annotation xml:space="preserve"> = '1.2.0'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'check_for_setup_error()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.check_for_setup_error',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.check_for_setup_error" ids="cinder.volume.drivers.rbd.RBDDriver.check_for_setup_error" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.check_for_setup_error"><desc_name xml:space="preserve">check_for_setup_error</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns an error if prerequisites arenâ€™t met.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'clone_image()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.clone_image',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.clone_image" ids="cinder.volume.drivers.rbd.RBDDriver.clone_image" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.clone_image"><desc_name xml:space="preserve">clone_image</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">image_location</desc_parameter><desc_parameter xml:space="preserve">image_meta</desc_parameter><desc_parameter xml:space="preserve">image_service</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'copy_image_to_volume()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.copy_image_to_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.copy_image_to_volume" ids="cinder.volume.drivers.rbd.RBDDriver.copy_image_to_volume" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.copy_image_to_volume"><desc_name xml:space="preserve">copy_image_to_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">image_service</desc_parameter><desc_parameter xml:space="preserve">image_id</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'copy_volume_to_image()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.copy_volume_to_image',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.copy_volume_to_image" ids="cinder.volume.drivers.rbd.RBDDriver.copy_volume_to_image" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.copy_volume_to_image"><desc_name xml:space="preserve">copy_volume_to_image</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">image_service</desc_parameter><desc_parameter xml:space="preserve">image_meta</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_cloned_volume()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.create_cloned_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.create_cloned_volume" ids="cinder.volume.drivers.rbd.RBDDriver.create_cloned_volume" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.create_cloned_volume"><desc_name xml:space="preserve">create_cloned_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">src_vref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Create a cloned volume from another volume.</paragraph>
                        <paragraph>Since we are cloning from a volume and not a snapshot, we must first
                            create a snapshot of the source volume.</paragraph>
                        <paragraph>The user has the option to limit how long a volumeâ€™s clone chain can be
                            by setting rbd_max_clone_depth. If a clone is made of another clone
                            and that clone has rbd_max_clone_depth clones behind it, the source
                            volume will be flattened.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_export()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.create_export',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.create_export" ids="cinder.volume.drivers.rbd.RBDDriver.create_export" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.create_export"><desc_name xml:space="preserve">create_export</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Exports the volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_snapshot()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.create_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.create_snapshot" ids="cinder.volume.drivers.rbd.RBDDriver.create_snapshot" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.create_snapshot"><desc_name xml:space="preserve">create_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates an rbd snapshot.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_volume()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.create_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.create_volume" ids="cinder.volume.drivers.rbd.RBDDriver.create_volume" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.create_volume"><desc_name xml:space="preserve">create_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a logical volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_volume_from_snapshot()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.create_volume_from_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.create_volume_from_snapshot" ids="cinder.volume.drivers.rbd.RBDDriver.create_volume_from_snapshot" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.create_volume_from_snapshot"><desc_name xml:space="preserve">create_volume_from_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a volume from a snapshot.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_snapshot()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.delete_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.delete_snapshot" ids="cinder.volume.drivers.rbd.RBDDriver.delete_snapshot" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.delete_snapshot"><desc_name xml:space="preserve">delete_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Deletes an rbd snapshot.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_volume()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.delete_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.delete_volume" ids="cinder.volume.drivers.rbd.RBDDriver.delete_volume" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.delete_volume"><desc_name xml:space="preserve">delete_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Deletes a logical volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'do_setup()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.do_setup',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.do_setup" ids="cinder.volume.drivers.rbd.RBDDriver.do_setup" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.do_setup"><desc_name xml:space="preserve">do_setup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Performs initialization steps that could raise exceptions.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'ensure_export()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.ensure_export',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.ensure_export" ids="cinder.volume.drivers.rbd.RBDDriver.ensure_export" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.ensure_export"><desc_name xml:space="preserve">ensure_export</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Synchronously recreates an export for a logical volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'extend_volume()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.extend_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.extend_volume" ids="cinder.volume.drivers.rbd.RBDDriver.extend_volume" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.extend_volume"><desc_name xml:space="preserve">extend_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">new_size</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Extend an existing volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'failover_host()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.failover_host',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.failover_host" ids="cinder.volume.drivers.rbd.RBDDriver.failover_host" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.failover_host"><desc_name xml:space="preserve">failover_host</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volumes</desc_parameter><desc_parameter xml:space="preserve">secondary_id=None</desc_parameter><desc_parameter xml:space="preserve">groups=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Failover to replication target.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_volume_stats()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.get_volume_stats',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.get_volume_stats" ids="cinder.volume.drivers.rbd.RBDDriver.get_volume_stats" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.get_volume_stats"><desc_name xml:space="preserve">get_volume_stats</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">refresh=False</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Return the current state of the volume service.</paragraph>
                        <paragraph>If â€˜refreshâ€™ is True, run the update first.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'initialize_connection()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.initialize_connection',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.initialize_connection" ids="cinder.volume.drivers.rbd.RBDDriver.initialize_connection" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.initialize_connection"><desc_name xml:space="preserve">initialize_connection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.manage_existing',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.manage_existing" ids="cinder.volume.drivers.rbd.RBDDriver.manage_existing" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.manage_existing"><desc_name xml:space="preserve">manage_existing</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Manages an existing image.</paragraph>
                        <paragraph>Renames the image name to match the expected name for the volume.
                            Error checking done by manage_existing_get_size is not repeated.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> â€“ volume ref info to be set</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">existing_ref</literal_strong> â€“ existing_ref is a dictionary of the form:
                                                {â€˜source-nameâ€™: &lt;name of rbd image&gt;}</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing_get_size()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.manage_existing_get_size',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.manage_existing_get_size" ids="cinder.volume.drivers.rbd.RBDDriver.manage_existing_get_size" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.manage_existing_get_size"><desc_name xml:space="preserve">manage_existing_get_size</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Return size of an existing image for manage_existing.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> â€“ volume ref info to be set</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">existing_ref</literal_strong> â€“ existing_ref is a dictionary of the form:
                                                {â€˜source-nameâ€™: &lt;name of rbd image&gt;}</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing_snapshot()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.manage_existing_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.manage_existing_snapshot" ids="cinder.volume.drivers.rbd.RBDDriver.manage_existing_snapshot" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.manage_existing_snapshot"><desc_name xml:space="preserve">manage_existing_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Manages an existing snapshot.</paragraph>
                        <paragraph>Renames the snapshot name to match the expected name for the snapshot.
                            Error checking done by manage_existing_get_size is not repeated.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">snapshot</literal_strong> â€“ snapshot ref info to be set</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">existing_ref</literal_strong> â€“ existing_ref is a dictionary of the form:
                                                {â€˜source-nameâ€™: &lt;name of rbd snapshot&gt;}</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing_snapshot_get_size()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.manage_existing_snapshot_get_size',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.manage_existing_snapshot_get_size" ids="cinder.volume.drivers.rbd.RBDDriver.manage_existing_snapshot_get_size" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.manage_existing_snapshot_get_size"><desc_name xml:space="preserve">manage_existing_snapshot_get_size</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Return size of an existing image for manage_existing.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">snapshot</literal_strong> â€“ snapshot ref info to be set</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">existing_ref</literal_strong> â€“ existing_ref is a dictionary of the form:
                                                {â€˜source-nameâ€™: &lt;name of snapshot&gt;}</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'migrate_volume()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.migrate_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.migrate_volume" ids="cinder.volume.drivers.rbd.RBDDriver.migrate_volume" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.migrate_volume"><desc_name xml:space="preserve">migrate_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">host</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'remove_export()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.remove_export',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.remove_export" ids="cinder.volume.drivers.rbd.RBDDriver.remove_export" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.remove_export"><desc_name xml:space="preserve">remove_export</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Removes an export for a logical volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'retype()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.retype',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.retype" ids="cinder.volume.drivers.rbd.RBDDriver.retype" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.retype"><desc_name xml:space="preserve">retype</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">new_type</desc_parameter><desc_parameter xml:space="preserve">diff</desc_parameter><desc_parameter xml:space="preserve">host</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Retype from one volume type to another on the same backend.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'terminate_connection()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.terminate_connection',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.terminate_connection" ids="cinder.volume.drivers.rbd.RBDDriver.terminate_connection" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.terminate_connection"><desc_name xml:space="preserve">terminate_connection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'unmanage()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.unmanage',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.unmanage" ids="cinder.volume.drivers.rbd.RBDDriver.unmanage" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.unmanage"><desc_name xml:space="preserve">unmanage</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'update_migrated_volume()\ (RBDDriver\ method)',\ 'cinder.volume.drivers.rbd.RBDDriver.update_migrated_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="RBDDriver" first="False" fullname="RBDDriver.update_migrated_volume" ids="cinder.volume.drivers.rbd.RBDDriver.update_migrated_volume" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDDriver.update_migrated_volume"><desc_name xml:space="preserve">update_migrated_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">new_volume</desc_parameter><desc_parameter xml:space="preserve">original_volume_status</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Return model update from RBD for migrated volume.</paragraph>
                        <paragraph>This method should rename the back-end volume name(id) on the
                            destination host back to its original name(id) on the source host.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">ctxt</literal_strong> â€“ The context used to run the method update_migrated_volume</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> â€“ The original volume that was migrated to this backend</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">new_volume</literal_strong> â€“ The migration volume object that was created on
                                                this backend as part of the migration process</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">original_volume_status</literal_strong> â€“ The status of the original volume</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update to update DB with any needed changes</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'RBDVolumeProxy\ (class\ in\ cinder.volume.drivers.rbd)',\ 'cinder.volume.drivers.rbd.RBDVolumeProxy',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="RBDVolumeProxy" ids="cinder.volume.drivers.rbd.RBDVolumeProxy" module="cinder.volume.drivers.rbd" names="cinder.volume.drivers.rbd.RBDVolumeProxy"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">RBDVolumeProxy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">driver</desc_parameter><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">pool=None</desc_parameter><desc_parameter xml:space="preserve">snapshot=None</desc_parameter><desc_parameter xml:space="preserve">read_only=False</desc_parameter><desc_parameter xml:space="preserve">remote=None</desc_parameter><desc_parameter xml:space="preserve">timeout=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                <paragraph>Context manager for dealing with an existing rbd volume.</paragraph>
                <paragraph>This handles connecting to rados and opening an ioctx automatically, and
                    otherwise acts like a librbd Image object.</paragraph>
                <paragraph>The underlying librados client and ioctx can be accessed as the attributes
                    â€˜clientâ€™ and â€˜ioctxâ€™.</paragraph>
            </desc_content>
        </desc>
    </section>
</document>
