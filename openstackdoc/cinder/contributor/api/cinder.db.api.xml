<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api/cinder.db.api.rst">
    <section ids="module-cinder.db.api the-cinder-db-api-module" names="the\ cinder.db.api\ module">
        <title>The <reference internal="True" refid="module-cinder.db.api" reftitle="cinder.db.api"><literal classes="xref py py-mod">cinder.db.api</literal></reference> Module</title>
        <index entries="['single',\ 'cinder.db.api\ (module)',\ 'module-cinder.db.api',\ '',\ None]"></index>
        <paragraph>Defines interface for DB access.</paragraph>
        <paragraph>Functions in this module are imported into the cinder.db namespace. Call these
            functions from cinder.db namespace, not the cinder.db.api namespace.</paragraph>
        <paragraph>All functions in this module return objects that implement a dictionary-like
            interface. Currently, many of these objects are sqlalchemy objects that
            implement a dictionary interface. However, a future goal is to have all of
            these objects be simple dictionaries.</paragraph>
        <paragraph><strong>Related Flags</strong></paragraph>
        <field_list>
            <field>
                <field_name>connection</field_name>
                <field_body>
                    <paragraph>string specifying the sqlalchemy connection to use, like:
                        <title_reference>sqlite:///var/lib/cinder/cinder.sqlite</title_reference>.</paragraph>
                </field_body>
            </field>
            <field>
                <field_name>enable_new_services</field_name>
                <field_body>
                    <paragraph>when adding a new service to the database, is it in the
                        pool of available hardware (Default: True)</paragraph>
                </field_body>
            </field>
        </field_list>
        <index entries="['single',\ 'Case\ (class\ in\ cinder.db.api)',\ 'cinder.db.api.Case',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="Case" ids="cinder.db.api.Case" module="cinder.db.api" names="cinder.db.api.Case"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">Case</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">whens</desc_parameter><desc_parameter xml:space="preserve">value=None</desc_parameter><desc_parameter xml:space="preserve">else_=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                <paragraph>Class for conditional value selection for conditional_update.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'Condition\ (class\ in\ cinder.db.api)',\ 'cinder.db.api.Condition',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="Condition" ids="cinder.db.api.Condition" module="cinder.db.api" names="cinder.db.api.Condition"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">Condition</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">value</desc_parameter><desc_parameter xml:space="preserve">field=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                <paragraph>Class for normal condition values for conditional_update.</paragraph>
                <index entries="['single',\ 'get_filter()\ (Condition\ method)',\ 'cinder.db.api.Condition.get_filter',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Condition" first="False" fullname="Condition.get_filter" ids="cinder.db.api.Condition.get_filter" module="cinder.db.api" names="cinder.db.api.Condition.get_filter"><desc_name xml:space="preserve">get_filter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">model</desc_parameter><desc_parameter xml:space="preserve">field=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'Not\ (class\ in\ cinder.db.api)',\ 'cinder.db.api.Not',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="Not" ids="cinder.db.api.Not" module="cinder.db.api" names="cinder.db.api.Not"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">Not</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">value</desc_parameter><desc_parameter xml:space="preserve">field=None</desc_parameter><desc_parameter xml:space="preserve">auto_none=True</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" refid="cinder.db.api.Condition" reftitle="cinder.db.api.Condition"><literal classes="xref py py-class">cinder.db.api.Condition</literal></reference></paragraph>
                <paragraph>Class for negated condition values for conditional_update.</paragraph>
                <paragraph>By default NULL values will be treated like Python treats None instead of
                    how SQL treats it.</paragraph>
                <paragraph>So for example when values are (1, 2) it will evaluate to True when we have
                    value 3 or NULL, instead of only with 3 like SQL does.</paragraph>
                <index entries="['single',\ 'get_filter()\ (Not\ method)',\ 'cinder.db.api.Not.get_filter',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Not" first="False" fullname="Not.get_filter" ids="cinder.db.api.Not.get_filter" module="cinder.db.api" names="cinder.db.api.Not.get_filter"><desc_name xml:space="preserve">get_filter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">model</desc_parameter><desc_parameter xml:space="preserve">field=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'attachment_destroy()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.attachment_destroy',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="attachment_destroy" ids="cinder.db.api.attachment_destroy" module="cinder.db.api" names="cinder.db.api.attachment_destroy"><desc_name xml:space="preserve">attachment_destroy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">attachment_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Destroy the attachment or raise if it does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'attachment_specs_delete()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.attachment_specs_delete',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="attachment_specs_delete" ids="cinder.db.api.attachment_specs_delete" module="cinder.db.api" names="cinder.db.api.attachment_specs_delete"><desc_name xml:space="preserve">attachment_specs_delete</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">attachment_id</desc_parameter><desc_parameter xml:space="preserve">key</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Delete the given attachment specs item.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'attachment_specs_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.attachment_specs_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="attachment_specs_get" ids="cinder.db.api.attachment_specs_get" module="cinder.db.api" names="cinder.db.api.attachment_specs_get"><desc_name xml:space="preserve">attachment_specs_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">attachment_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all specs for an attachment.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'attachment_specs_update_or_create()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.attachment_specs_update_or_create',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="attachment_specs_update_or_create" ids="cinder.db.api.attachment_specs_update_or_create" module="cinder.db.api" names="cinder.db.api.attachment_specs_update_or_create"><desc_name xml:space="preserve">attachment_specs_update_or_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">attachment_id</desc_parameter><desc_parameter xml:space="preserve">specs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Create or update attachment specs.</paragraph>
                <paragraph>This adds or modifies the key/value pairs specified in the attachment
                    specs dict argument.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'backup_create()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.backup_create',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="backup_create" ids="cinder.db.api.backup_create" module="cinder.db.api" names="cinder.db.api.backup_create"><desc_name xml:space="preserve">backup_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Create a backup from the values dictionary.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'backup_destroy()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.backup_destroy',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="backup_destroy" ids="cinder.db.api.backup_destroy" module="cinder.db.api" names="cinder.db.api.backup_destroy"><desc_name xml:space="preserve">backup_destroy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">backup_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Destroy the backup or raise if it does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'backup_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.backup_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="backup_get" ids="cinder.db.api.backup_get" module="cinder.db.api" names="cinder.db.api.backup_get"><desc_name xml:space="preserve">backup_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">backup_id</desc_parameter><desc_parameter xml:space="preserve">read_deleted=None</desc_parameter><desc_parameter xml:space="preserve">project_only=True</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get a backup or raise if it does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'backup_get_all()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.backup_get_all',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="backup_get_all" ids="cinder.db.api.backup_get_all" module="cinder.db.api" names="cinder.db.api.backup_get_all"><desc_name xml:space="preserve">backup_get_all</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter><desc_parameter xml:space="preserve">marker=None</desc_parameter><desc_parameter xml:space="preserve">limit=None</desc_parameter><desc_parameter xml:space="preserve">offset=None</desc_parameter><desc_parameter xml:space="preserve">sort_keys=None</desc_parameter><desc_parameter xml:space="preserve">sort_dirs=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all backups.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'backup_get_all_active_by_window()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.backup_get_all_active_by_window',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="backup_get_all_active_by_window" ids="cinder.db.api.backup_get_all_active_by_window" module="cinder.db.api" names="cinder.db.api.backup_get_all_active_by_window"><desc_name xml:space="preserve">backup_get_all_active_by_window</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">begin</desc_parameter><desc_parameter xml:space="preserve">end=None</desc_parameter><desc_parameter xml:space="preserve">project_id=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all the backups inside the window.</paragraph>
                <paragraph>Specifying a project_id will filter for a certain project.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'backup_get_all_by_host()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.backup_get_all_by_host',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="backup_get_all_by_host" ids="cinder.db.api.backup_get_all_by_host" module="cinder.db.api" names="cinder.db.api.backup_get_all_by_host"><desc_name xml:space="preserve">backup_get_all_by_host</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">host</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all backups belonging to a host.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'backup_get_all_by_project()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.backup_get_all_by_project',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="backup_get_all_by_project" ids="cinder.db.api.backup_get_all_by_project" module="cinder.db.api" names="cinder.db.api.backup_get_all_by_project"><desc_name xml:space="preserve">backup_get_all_by_project</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter><desc_parameter xml:space="preserve">marker=None</desc_parameter><desc_parameter xml:space="preserve">limit=None</desc_parameter><desc_parameter xml:space="preserve">offset=None</desc_parameter><desc_parameter xml:space="preserve">sort_keys=None</desc_parameter><desc_parameter xml:space="preserve">sort_dirs=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all backups belonging to a project.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'backup_get_all_by_volume()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.backup_get_all_by_volume',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="backup_get_all_by_volume" ids="cinder.db.api.backup_get_all_by_volume" module="cinder.db.api" names="cinder.db.api.backup_get_all_by_volume"><desc_name xml:space="preserve">backup_get_all_by_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all backups belonging to a volume.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'backup_metadata_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.backup_metadata_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="backup_metadata_get" ids="cinder.db.api.backup_metadata_get" module="cinder.db.api" names="cinder.db.api.backup_metadata_get"><desc_name xml:space="preserve">backup_metadata_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">backup_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'backup_metadata_update()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.backup_metadata_update',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="backup_metadata_update" ids="cinder.db.api.backup_metadata_update" module="cinder.db.api" names="cinder.db.api.backup_metadata_update"><desc_name xml:space="preserve">backup_metadata_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">backup_id</desc_parameter><desc_parameter xml:space="preserve">metadata</desc_parameter><desc_parameter xml:space="preserve">delete</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'backup_update()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.backup_update',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="backup_update" ids="cinder.db.api.backup_update" module="cinder.db.api" names="cinder.db.api.backup_update"><desc_name xml:space="preserve">backup_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">backup_id</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Set the given properties on a backup and update it.</paragraph>
                <paragraph>Raises NotFound if backup does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'cg_creating_from_src()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.cg_creating_from_src',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="cg_creating_from_src" ids="cinder.db.api.cg_creating_from_src" module="cinder.db.api" names="cinder.db.api.cg_creating_from_src"><desc_name xml:space="preserve">cg_creating_from_src</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">cg_id=None</desc_parameter><desc_parameter xml:space="preserve">cgsnapshot_id=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Return a filter to check if a CG is being used as creation source.</paragraph>
                <paragraph>Returned filter is meant to be used in the Conditional Update mechanism and
                    checks if provided CG ID or CG Snapshot ID is currently being used to
                    create another CG.</paragraph>
                <paragraph>This filter will not include CGs that have used the ID but have already
                    finished their creation (status is no longer creating).</paragraph>
                <paragraph>Filter uses a subquery that allows it to be used on updates to the
                    consistencygroups table.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'cg_has_cgsnapshot_filter()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.cg_has_cgsnapshot_filter',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="cg_has_cgsnapshot_filter" ids="cinder.db.api.cg_has_cgsnapshot_filter" module="cinder.db.api" names="cinder.db.api.cg_has_cgsnapshot_filter"><desc_name xml:space="preserve">cg_has_cgsnapshot_filter</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Return a filter that checks if a CG has CG Snapshots.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'cg_has_volumes_filter()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.cg_has_volumes_filter',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="cg_has_volumes_filter" ids="cinder.db.api.cg_has_volumes_filter" module="cinder.db.api" names="cinder.db.api.cg_has_volumes_filter"><desc_name xml:space="preserve">cg_has_volumes_filter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">attached_or_with_snapshots=False</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Return a filter to check if a CG has volumes.</paragraph>
                <paragraph>When attached_or_with_snapshots parameter is given a True value only
                    attached volumes or those with snapshots will be considered.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'cgsnapshot_create()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.cgsnapshot_create',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="cgsnapshot_create" ids="cinder.db.api.cgsnapshot_create" module="cinder.db.api" names="cinder.db.api.cgsnapshot_create"><desc_name xml:space="preserve">cgsnapshot_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Create a cgsnapshot from the values dictionary.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'cgsnapshot_creating_from_src()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.cgsnapshot_creating_from_src',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="cgsnapshot_creating_from_src" ids="cinder.db.api.cgsnapshot_creating_from_src" module="cinder.db.api" names="cinder.db.api.cgsnapshot_creating_from_src"><desc_name xml:space="preserve">cgsnapshot_creating_from_src</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get a filter that checks if a CGSnapshot is being created from a CG.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'cgsnapshot_destroy()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.cgsnapshot_destroy',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="cgsnapshot_destroy" ids="cinder.db.api.cgsnapshot_destroy" module="cinder.db.api" names="cinder.db.api.cgsnapshot_destroy"><desc_name xml:space="preserve">cgsnapshot_destroy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">cgsnapshot_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Destroy the cgsnapshot or raise if it does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'cgsnapshot_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.cgsnapshot_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="cgsnapshot_get" ids="cinder.db.api.cgsnapshot_get" module="cinder.db.api" names="cinder.db.api.cgsnapshot_get"><desc_name xml:space="preserve">cgsnapshot_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">cgsnapshot_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get a cgsnapshot or raise if it does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'cgsnapshot_get_all()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.cgsnapshot_get_all',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="cgsnapshot_get_all" ids="cinder.db.api.cgsnapshot_get_all" module="cinder.db.api" names="cinder.db.api.cgsnapshot_get_all"><desc_name xml:space="preserve">cgsnapshot_get_all</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all cgsnapshots.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'cgsnapshot_get_all_by_group()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.cgsnapshot_get_all_by_group',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="cgsnapshot_get_all_by_group" ids="cinder.db.api.cgsnapshot_get_all_by_group" module="cinder.db.api" names="cinder.db.api.cgsnapshot_get_all_by_group"><desc_name xml:space="preserve">cgsnapshot_get_all_by_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_id</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all cgsnapshots belonging to a consistency group.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'cgsnapshot_get_all_by_project()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.cgsnapshot_get_all_by_project',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="cgsnapshot_get_all_by_project" ids="cinder.db.api.cgsnapshot_get_all_by_project" module="cinder.db.api" names="cinder.db.api.cgsnapshot_get_all_by_project"><desc_name xml:space="preserve">cgsnapshot_get_all_by_project</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all cgsnapshots belonging to a project.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'cgsnapshot_update()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.cgsnapshot_update',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="cgsnapshot_update" ids="cinder.db.api.cgsnapshot_update" module="cinder.db.api" names="cinder.db.api.cgsnapshot_update"><desc_name xml:space="preserve">cgsnapshot_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">cgsnapshot_id</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Set the given properties on a cgsnapshot and update it.</paragraph>
                <paragraph>Raises NotFound if cgsnapshot does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'cleanup_expired_messages()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.cleanup_expired_messages',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="cleanup_expired_messages" ids="cinder.db.api.cleanup_expired_messages" module="cinder.db.api" names="cinder.db.api.cleanup_expired_messages"><desc_name xml:space="preserve">cleanup_expired_messages</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Soft delete expired messages</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'cluster_create()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.cluster_create',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="cluster_create" ids="cinder.db.api.cluster_create" module="cinder.db.api" names="cinder.db.api.cluster_create"><desc_name xml:space="preserve">cluster_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Create a cluster from the values dictionary.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'cluster_destroy()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.cluster_destroy',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="cluster_destroy" ids="cinder.db.api.cluster_destroy" module="cinder.db.api" names="cinder.db.api.cluster_destroy"><desc_name xml:space="preserve">cluster_destroy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Destroy the cluster or raise if it does not exist or has hosts.</paragraph>
                <field_list>
                    <field>
                        <field_name>Raises</field_name>
                        <field_body>
                            <paragraph><reference internal="True" reftitle="cinder.exception.ClusterNotFound" refuri="cinder.exception#cinder.exception.ClusterNotFound"><literal_strong>ClusterNotFound</literal_strong></reference> – If cluster doesn’t exist.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ 'cluster_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.cluster_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="cluster_get" ids="cinder.db.api.cluster_get" module="cinder.db.api" names="cinder.db.api.cluster_get"><desc_name xml:space="preserve">cluster_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">id=None</desc_parameter><desc_parameter xml:space="preserve">is_up=None</desc_parameter><desc_parameter xml:space="preserve">get_services=False</desc_parameter><desc_parameter xml:space="preserve">services_summary=False</desc_parameter><desc_parameter xml:space="preserve">read_deleted='no'</desc_parameter><desc_parameter xml:space="preserve">name_match_level=None</desc_parameter><desc_parameter xml:space="preserve">**filters</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get a cluster that matches the criteria.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">id</literal_strong> – Id of the cluster.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">is_up</literal_strong> – Boolean value to filter based on the cluster’s up status.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">get_services</literal_strong> – If we want to load all services from this cluster.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">services_summary</literal_strong> – If we want to load num_hosts and
                                        num_down_hosts fields.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">read_deleted</literal_strong> – Filtering based on delete status. Default value is
                                        “no”.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">name_match_level</literal_strong> – ‘pool’, ‘backend’, or ‘host’ for name filter (as
                                        defined in _filter_host method)</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">filters</literal_strong> – Field based filters in the form of key/value.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Raises</field_name>
                        <field_body>
                            <paragraph><reference internal="True" reftitle="cinder.exception.ClusterNotFound" refuri="cinder.exception#cinder.exception.ClusterNotFound"><literal_strong>ClusterNotFound</literal_strong></reference> – If cluster doesn’t exist.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ 'cluster_get_all()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.cluster_get_all',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="cluster_get_all" ids="cinder.db.api.cluster_get_all" module="cinder.db.api" names="cinder.db.api.cluster_get_all"><desc_name xml:space="preserve">cluster_get_all</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">is_up=None</desc_parameter><desc_parameter xml:space="preserve">get_services=False</desc_parameter><desc_parameter xml:space="preserve">services_summary=False</desc_parameter><desc_parameter xml:space="preserve">read_deleted='no'</desc_parameter><desc_parameter xml:space="preserve">name_match_level=None</desc_parameter><desc_parameter xml:space="preserve">**filters</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all clusters that match the criteria.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">is_up</literal_strong> – Boolean value to filter based on the cluster’s up status.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">get_services</literal_strong> – If we want to load all services from this cluster.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">services_summary</literal_strong> – If we want to load num_hosts and
                                        num_down_hosts fields.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">read_deleted</literal_strong> – Filtering based on delete status. Default value is
                                        “no”.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">name_match_level</literal_strong> – ‘pool’, ‘backend’, or ‘host’ for name filter (as
                                        defined in _filter_host method)</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">filters</literal_strong> – Field based filters in the form of key/value.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ 'cluster_update()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.cluster_update',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="cluster_update" ids="cinder.db.api.cluster_update" module="cinder.db.api" names="cinder.db.api.cluster_update"><desc_name xml:space="preserve">cluster_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">id</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Set the given properties on an cluster and update it.</paragraph>
                <paragraph>Raises ClusterNotFound if cluster does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'conditional_update()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.conditional_update',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="conditional_update" ids="cinder.db.api.conditional_update" module="cinder.db.api" names="cinder.db.api.conditional_update"><desc_name xml:space="preserve">conditional_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">model</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter><desc_parameter xml:space="preserve">expected_values</desc_parameter><desc_parameter xml:space="preserve">filters=()</desc_parameter><desc_parameter xml:space="preserve">include_deleted='no'</desc_parameter><desc_parameter xml:space="preserve">project_only=False</desc_parameter><desc_parameter xml:space="preserve">order=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Compare-and-swap conditional update.</paragraph>
                <paragraph>Update will only occur in the DB if conditions are met.</paragraph>
                <definition_list>
                    <definition_list_item>
                        <term>We have 4 different condition types we can use in expected_values:</term>
                        <definition>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>Equality:  {‘status’: ‘available’}</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>Inequality: {‘status’: vol_obj.Not(‘deleting’)}</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>In range: {‘status’: [‘available’, ‘error’]</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>Not in range: {‘status’: vol_obj.Not([‘in-use’, ‘attaching’])</paragraph>
                                </list_item>
                            </bullet_list>
                        </definition>
                    </definition_list_item>
                </definition_list>
                <paragraph>Method accepts additional filters, which are basically anything that can be
                    passed to a sqlalchemy query’s filter method, for example:</paragraph>
                <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">[~sql.exists().where(models.Volume.id == models.Snapshot.volume_id)]</literal_block>
                <paragraph>We can select values based on conditions using Case objects in the ‘values’
                    argument. For example:</paragraph>
                <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">has_snapshot_filter = sql.exists().where(
    models.Snapshot.volume_id == models.Volume.id)
case_values = db.Case([(has_snapshot_filter, 'has-snapshot')],
                      else_='no-snapshot')
db.conditional_update(context, models.Volume, {'status': case_values},
                      {'status': 'available'})</literal_block>
                <paragraph>And we can use DB fields for example to store previous status in the
                    corresponding field even though we don’t know which value is in the db from
                    those we allowed:</paragraph>
                <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">db.conditional_update(context, models.Volume,
                      {'status': 'deleting',
                       'previous_status': models.Volume.status},
                      {'status': ('available', 'error')})</literal_block>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">values</literal_strong> – Dictionary of key-values to update in the DB.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">expected_values</literal_strong> – Dictionary of conditions that must be met for the
                                        update to be executed.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">filters</literal_strong> – Iterable with additional filters.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">include_deleted</literal_strong> – Should the update include deleted items, this is
                                        equivalent to read_deleted.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">project_only</literal_strong> – Should the query be limited to context’s project.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">order</literal_strong> – Specific order of fields in which to update the values</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Returns</field_name>
                        <field_body>
                            <paragraph>Number of db rows that were updated.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ 'consistencygroup_create()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.consistencygroup_create',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="consistencygroup_create" ids="cinder.db.api.consistencygroup_create" module="cinder.db.api" names="cinder.db.api.consistencygroup_create"><desc_name xml:space="preserve">consistencygroup_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter><desc_parameter xml:space="preserve">cg_snap_id=None</desc_parameter><desc_parameter xml:space="preserve">cg_id=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Create a consistencygroup from the values dictionary.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'consistencygroup_destroy()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.consistencygroup_destroy',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="consistencygroup_destroy" ids="cinder.db.api.consistencygroup_destroy" module="cinder.db.api" names="cinder.db.api.consistencygroup_destroy"><desc_name xml:space="preserve">consistencygroup_destroy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">consistencygroup_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Destroy the consistencygroup or raise if it does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'consistencygroup_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.consistencygroup_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="consistencygroup_get" ids="cinder.db.api.consistencygroup_get" module="cinder.db.api" names="cinder.db.api.consistencygroup_get"><desc_name xml:space="preserve">consistencygroup_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">consistencygroup_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get a consistencygroup or raise if it does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'consistencygroup_get_all()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.consistencygroup_get_all',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="consistencygroup_get_all" ids="cinder.db.api.consistencygroup_get_all" module="cinder.db.api" names="cinder.db.api.consistencygroup_get_all"><desc_name xml:space="preserve">consistencygroup_get_all</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter><desc_parameter xml:space="preserve">marker=None</desc_parameter><desc_parameter xml:space="preserve">limit=None</desc_parameter><desc_parameter xml:space="preserve">offset=None</desc_parameter><desc_parameter xml:space="preserve">sort_keys=None</desc_parameter><desc_parameter xml:space="preserve">sort_dirs=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all consistencygroups.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'consistencygroup_get_all_by_project()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.consistencygroup_get_all_by_project',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="consistencygroup_get_all_by_project" ids="cinder.db.api.consistencygroup_get_all_by_project" module="cinder.db.api" names="cinder.db.api.consistencygroup_get_all_by_project"><desc_name xml:space="preserve">consistencygroup_get_all_by_project</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter><desc_parameter xml:space="preserve">marker=None</desc_parameter><desc_parameter xml:space="preserve">limit=None</desc_parameter><desc_parameter xml:space="preserve">offset=None</desc_parameter><desc_parameter xml:space="preserve">sort_keys=None</desc_parameter><desc_parameter xml:space="preserve">sort_dirs=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all consistencygroups belonging to a project.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'consistencygroup_include_in_cluster()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.consistencygroup_include_in_cluster',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="consistencygroup_include_in_cluster" ids="cinder.db.api.consistencygroup_include_in_cluster" module="cinder.db.api" names="cinder.db.api.consistencygroup_include_in_cluster"><desc_name xml:space="preserve">consistencygroup_include_in_cluster</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">cluster</desc_parameter><desc_parameter xml:space="preserve">partial_rename=True</desc_parameter><desc_parameter xml:space="preserve">**filters</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Include all consistency groups matching the filters into a cluster.</paragraph>
                <paragraph>When partial_rename is set we will not set the cluster_name with cluster
                    parameter value directly, we’ll replace provided cluster_name or host
                    filter value with cluster instead.</paragraph>
                <paragraph>This is useful when we want to replace just the cluster name but leave
                    the backend and pool information as it is.  If we are using cluster_name
                    to filter, we’ll use that same DB field to replace the cluster value and
                    leave the rest as it is.  Likewise if we use the host to filter.</paragraph>
                <paragraph>Returns the number of consistency groups that have been changed.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'consistencygroup_update()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.consistencygroup_update',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="consistencygroup_update" ids="cinder.db.api.consistencygroup_update" module="cinder.db.api" names="cinder.db.api.consistencygroup_update"><desc_name xml:space="preserve">consistencygroup_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">consistencygroup_id</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Set the given properties on a consistencygroup and update it.</paragraph>
                <paragraph>Raises NotFound if consistencygroup does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'dispose_engine()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.dispose_engine',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="dispose_engine" ids="cinder.db.api.dispose_engine" module="cinder.db.api" names="cinder.db.api.dispose_engine"><desc_name xml:space="preserve">dispose_engine</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Force the engine to establish new connections.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'driver_initiator_data_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.driver_initiator_data_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="driver_initiator_data_get" ids="cinder.db.api.driver_initiator_data_get" module="cinder.db.api" names="cinder.db.api.driver_initiator_data_get"><desc_name xml:space="preserve">driver_initiator_data_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">initiator</desc_parameter><desc_parameter xml:space="preserve">namespace</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Query for an DriverInitiatorData that has the specified key</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'driver_initiator_data_insert_by_key()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.driver_initiator_data_insert_by_key',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="driver_initiator_data_insert_by_key" ids="cinder.db.api.driver_initiator_data_insert_by_key" module="cinder.db.api" names="cinder.db.api.driver_initiator_data_insert_by_key"><desc_name xml:space="preserve">driver_initiator_data_insert_by_key</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">initiator</desc_parameter><desc_parameter xml:space="preserve">namespace</desc_parameter><desc_parameter xml:space="preserve">key</desc_parameter><desc_parameter xml:space="preserve">value</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Updates DriverInitiatorData entry.</paragraph>
                <paragraph>Sets the value for the specified key within the namespace.</paragraph>
                <paragraph>If the entry already exists return False, if it inserted successfully
                    return True.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'get_booleans_for_table()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.get_booleans_for_table',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="get_booleans_for_table" ids="cinder.db.api.get_booleans_for_table" module="cinder.db.api" names="cinder.db.api.get_booleans_for_table"><desc_name xml:space="preserve">get_booleans_for_table</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">table_name</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'get_by_id()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.get_by_id',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="get_by_id" ids="cinder.db.api.get_by_id" module="cinder.db.api" names="cinder.db.api.get_by_id"><desc_name xml:space="preserve">get_by_id</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">model</desc_parameter><desc_parameter xml:space="preserve">id</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'get_model_for_versioned_object()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.get_model_for_versioned_object',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="get_model_for_versioned_object" ids="cinder.db.api.get_model_for_versioned_object" module="cinder.db.api" names="cinder.db.api.get_model_for_versioned_object"><desc_name xml:space="preserve">get_model_for_versioned_object</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">versioned_object</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'get_volume_summary()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.get_volume_summary',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="get_volume_summary" ids="cinder.db.api.get_volume_summary" module="cinder.db.api" names="cinder.db.api.get_volume_summary"><desc_name xml:space="preserve">get_volume_summary</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">project_only</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get volume summary.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_create()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_create',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_create" ids="cinder.db.api.group_create" module="cinder.db.api" names="cinder.db.api.group_create"><desc_name xml:space="preserve">group_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter><desc_parameter xml:space="preserve">group_snapshot_id=None</desc_parameter><desc_parameter xml:space="preserve">group_id=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Create a group from the values dictionary.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_creating_from_src()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_creating_from_src',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_creating_from_src" ids="cinder.db.api.group_creating_from_src" module="cinder.db.api" names="cinder.db.api.group_creating_from_src"><desc_name xml:space="preserve">group_creating_from_src</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">group_id=None</desc_parameter><desc_parameter xml:space="preserve">group_snapshot_id=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Return a filter to check if a Group is being used as creation source.</paragraph>
                <paragraph>Returned filter is meant to be used in the Conditional Update mechanism and
                    checks if provided Group ID or Group Snapshot ID is currently being used to
                    create another Group.</paragraph>
                <paragraph>This filter will not include Groups that have used the ID but have already
                    finished their creation (status is no longer creating).</paragraph>
                <paragraph>Filter uses a subquery that allows it to be used on updates to the
                    groups table.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_destroy()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_destroy',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_destroy" ids="cinder.db.api.group_destroy" module="cinder.db.api" names="cinder.db.api.group_destroy"><desc_name xml:space="preserve">group_destroy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Destroy the group or raise if it does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_get" ids="cinder.db.api.group_get" module="cinder.db.api" names="cinder.db.api.group_get"><desc_name xml:space="preserve">group_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get a group or raise if it does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_get_all()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_get_all',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_get_all" ids="cinder.db.api.group_get_all" module="cinder.db.api" names="cinder.db.api.group_get_all"><desc_name xml:space="preserve">group_get_all</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter><desc_parameter xml:space="preserve">marker=None</desc_parameter><desc_parameter xml:space="preserve">limit=None</desc_parameter><desc_parameter xml:space="preserve">offset=None</desc_parameter><desc_parameter xml:space="preserve">sort_keys=None</desc_parameter><desc_parameter xml:space="preserve">sort_dirs=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all groups.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_get_all_by_project()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_get_all_by_project',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_get_all_by_project" ids="cinder.db.api.group_get_all_by_project" module="cinder.db.api" names="cinder.db.api.group_get_all_by_project"><desc_name xml:space="preserve">group_get_all_by_project</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter><desc_parameter xml:space="preserve">marker=None</desc_parameter><desc_parameter xml:space="preserve">limit=None</desc_parameter><desc_parameter xml:space="preserve">offset=None</desc_parameter><desc_parameter xml:space="preserve">sort_keys=None</desc_parameter><desc_parameter xml:space="preserve">sort_dirs=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all groups belonging to a project.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_has_group_snapshot_filter()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_has_group_snapshot_filter',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_has_group_snapshot_filter" ids="cinder.db.api.group_has_group_snapshot_filter" module="cinder.db.api" names="cinder.db.api.group_has_group_snapshot_filter"><desc_name xml:space="preserve">group_has_group_snapshot_filter</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Return a filter that checks if a Group has Group Snapshots.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_has_volumes_filter()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_has_volumes_filter',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_has_volumes_filter" ids="cinder.db.api.group_has_volumes_filter" module="cinder.db.api" names="cinder.db.api.group_has_volumes_filter"><desc_name xml:space="preserve">group_has_volumes_filter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">attached_or_with_snapshots=False</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Return a filter to check if a Group has volumes.</paragraph>
                <paragraph>When attached_or_with_snapshots parameter is given a True value only
                    attached volumes or those with snapshots will be considered.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_include_in_cluster()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_include_in_cluster',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_include_in_cluster" ids="cinder.db.api.group_include_in_cluster" module="cinder.db.api" names="cinder.db.api.group_include_in_cluster"><desc_name xml:space="preserve">group_include_in_cluster</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">cluster</desc_parameter><desc_parameter xml:space="preserve">partial_rename=True</desc_parameter><desc_parameter xml:space="preserve">**filters</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Include all generic groups matching the filters into a cluster.</paragraph>
                <paragraph>When partial_rename is set we will not set the cluster_name with cluster
                    parameter value directly, we’ll replace provided cluster_name or host
                    filter value with cluster instead.</paragraph>
                <paragraph>This is useful when we want to replace just the cluster name but leave
                    the backend and pool information as it is.  If we are using cluster_name
                    to filter, we’ll use that same DB field to replace the cluster value and
                    leave the rest as it is.  Likewise if we use the host to filter.</paragraph>
                <paragraph>Returns the number of generic groups that have been changed.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_snapshot_create()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_snapshot_create',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_snapshot_create" ids="cinder.db.api.group_snapshot_create" module="cinder.db.api" names="cinder.db.api.group_snapshot_create"><desc_name xml:space="preserve">group_snapshot_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Create a group snapshot from the values dictionary.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_snapshot_creating_from_src()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_snapshot_creating_from_src',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_snapshot_creating_from_src" ids="cinder.db.api.group_snapshot_creating_from_src" module="cinder.db.api" names="cinder.db.api.group_snapshot_creating_from_src"><desc_name xml:space="preserve">group_snapshot_creating_from_src</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get a filter to check if a grp snapshot is being created from a grp.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_snapshot_destroy()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_snapshot_destroy',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_snapshot_destroy" ids="cinder.db.api.group_snapshot_destroy" module="cinder.db.api" names="cinder.db.api.group_snapshot_destroy"><desc_name xml:space="preserve">group_snapshot_destroy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_snapshot_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Destroy the group snapshot or raise if it does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_snapshot_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_snapshot_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_snapshot_get" ids="cinder.db.api.group_snapshot_get" module="cinder.db.api" names="cinder.db.api.group_snapshot_get"><desc_name xml:space="preserve">group_snapshot_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_snapshot_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get a group snapshot or raise if it does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_snapshot_get_all()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_snapshot_get_all',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_snapshot_get_all" ids="cinder.db.api.group_snapshot_get_all" module="cinder.db.api" names="cinder.db.api.group_snapshot_get_all"><desc_name xml:space="preserve">group_snapshot_get_all</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter><desc_parameter xml:space="preserve">marker=None</desc_parameter><desc_parameter xml:space="preserve">limit=None</desc_parameter><desc_parameter xml:space="preserve">offset=None</desc_parameter><desc_parameter xml:space="preserve">sort_keys=None</desc_parameter><desc_parameter xml:space="preserve">sort_dirs=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all group snapshots.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_snapshot_get_all_by_group()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_snapshot_get_all_by_group',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_snapshot_get_all_by_group" ids="cinder.db.api.group_snapshot_get_all_by_group" module="cinder.db.api" names="cinder.db.api.group_snapshot_get_all_by_group"><desc_name xml:space="preserve">group_snapshot_get_all_by_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_id</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter><desc_parameter xml:space="preserve">marker=None</desc_parameter><desc_parameter xml:space="preserve">limit=None</desc_parameter><desc_parameter xml:space="preserve">offset=None</desc_parameter><desc_parameter xml:space="preserve">sort_keys=None</desc_parameter><desc_parameter xml:space="preserve">sort_dirs=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all group snapshots belonging to a group.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_snapshot_get_all_by_project()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_snapshot_get_all_by_project',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_snapshot_get_all_by_project" ids="cinder.db.api.group_snapshot_get_all_by_project" module="cinder.db.api" names="cinder.db.api.group_snapshot_get_all_by_project"><desc_name xml:space="preserve">group_snapshot_get_all_by_project</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter><desc_parameter xml:space="preserve">marker=None</desc_parameter><desc_parameter xml:space="preserve">limit=None</desc_parameter><desc_parameter xml:space="preserve">offset=None</desc_parameter><desc_parameter xml:space="preserve">sort_keys=None</desc_parameter><desc_parameter xml:space="preserve">sort_dirs=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all group snapshots belonging to a project.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_snapshot_update()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_snapshot_update',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_snapshot_update" ids="cinder.db.api.group_snapshot_update" module="cinder.db.api" names="cinder.db.api.group_snapshot_update"><desc_name xml:space="preserve">group_snapshot_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_snapshot_id</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Set the given properties on a group snapshot and update it.</paragraph>
                <paragraph>Raises NotFound if group snapshot does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_type_access_add()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_type_access_add',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_type_access_add" ids="cinder.db.api.group_type_access_add" module="cinder.db.api" names="cinder.db.api.group_type_access_add"><desc_name xml:space="preserve">group_type_access_add</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">type_id</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Add group type access for project.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_type_access_get_all()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_type_access_get_all',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_type_access_get_all" ids="cinder.db.api.group_type_access_get_all" module="cinder.db.api" names="cinder.db.api.group_type_access_get_all"><desc_name xml:space="preserve">group_type_access_get_all</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">type_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all group type access of a group type.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_type_access_remove()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_type_access_remove',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_type_access_remove" ids="cinder.db.api.group_type_access_remove" module="cinder.db.api" names="cinder.db.api.group_type_access_remove"><desc_name xml:space="preserve">group_type_access_remove</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">type_id</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Remove group type access for project.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_type_create()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_type_create',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_type_create" ids="cinder.db.api.group_type_create" module="cinder.db.api" names="cinder.db.api.group_type_create"><desc_name xml:space="preserve">group_type_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter><desc_parameter xml:space="preserve">projects=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Create a new group type.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_type_destroy()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_type_destroy',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_type_destroy" ids="cinder.db.api.group_type_destroy" module="cinder.db.api" names="cinder.db.api.group_type_destroy"><desc_name xml:space="preserve">group_type_destroy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Delete a group type.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_type_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_type_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_type_get" ids="cinder.db.api.group_type_get" module="cinder.db.api" names="cinder.db.api.group_type_get"><desc_name xml:space="preserve">group_type_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">id</desc_parameter><desc_parameter xml:space="preserve">inactive=False</desc_parameter><desc_parameter xml:space="preserve">expected_fields=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get group type by id.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – context to query under</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">id</literal_strong> – Group type id to get.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">inactive</literal_strong> – Consider inactive group types when searching</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">expected_fields</literal_strong> – Return those additional fields.
                                        Supported fields are: projects.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Returns</field_name>
                        <field_body>
                            <paragraph>group type</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_type_get_all()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_type_get_all',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_type_get_all" ids="cinder.db.api.group_type_get_all" module="cinder.db.api" names="cinder.db.api.group_type_get_all"><desc_name xml:space="preserve">group_type_get_all</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">inactive=False</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter><desc_parameter xml:space="preserve">marker=None</desc_parameter><desc_parameter xml:space="preserve">limit=None</desc_parameter><desc_parameter xml:space="preserve">sort_keys=None</desc_parameter><desc_parameter xml:space="preserve">sort_dirs=None</desc_parameter><desc_parameter xml:space="preserve">offset=None</desc_parameter><desc_parameter xml:space="preserve">list_result=False</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all group types.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – context to query under</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">inactive</literal_strong> – Include inactive group types to the result set</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">filters</literal_strong> – Filters for the query in the form of key/value.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">marker</literal_strong> – the last item of the previous page, used to determine the
                                        next page of results to return</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">limit</literal_strong> – maximum number of items to return</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">sort_keys</literal_strong> – list of attributes by which results should be sorted,
                                        paired with corresponding item in sort_dirs</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">sort_dirs</literal_strong> – list of directions in which results should be sorted,
                                        paired with corresponding item in sort_keys</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">list_result</literal_strong> – <definition_list><definition_list_item><term>For compatibility, if list_result = True, return a list</term><definition><paragraph>instead of dict.</paragraph></definition></definition_list_item></definition_list><field_list><field><field_name>is_public</field_name><field_body><paragraph>Filter group types based on visibility:</paragraph><bullet_list bullet="*"><list_item><paragraph><strong>True</strong>: List public group types only</paragraph></list_item><list_item><paragraph><strong>False</strong>: List private group types only</paragraph></list_item><list_item><paragraph><strong>None</strong>: List both public and private group types</paragraph></list_item></bullet_list></field_body></field></field_list></paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Returns</field_name>
                        <field_body>
                            <paragraph>list/dict of matching group types</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_type_get_by_name()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_type_get_by_name',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_type_get_by_name" ids="cinder.db.api.group_type_get_by_name" module="cinder.db.api" names="cinder.db.api.group_type_get_by_name"><desc_name xml:space="preserve">group_type_get_by_name</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">name</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get group type by name.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_type_specs_delete()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_type_specs_delete',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_type_specs_delete" ids="cinder.db.api.group_type_specs_delete" module="cinder.db.api" names="cinder.db.api.group_type_specs_delete"><desc_name xml:space="preserve">group_type_specs_delete</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_type_id</desc_parameter><desc_parameter xml:space="preserve">key</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Delete the given group specs item.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_type_specs_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_type_specs_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_type_specs_get" ids="cinder.db.api.group_type_specs_get" module="cinder.db.api" names="cinder.db.api.group_type_specs_get"><desc_name xml:space="preserve">group_type_specs_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_type_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all group specs for a group type.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_type_specs_update_or_create()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_type_specs_update_or_create',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_type_specs_update_or_create" ids="cinder.db.api.group_type_specs_update_or_create" module="cinder.db.api" names="cinder.db.api.group_type_specs_update_or_create"><desc_name xml:space="preserve">group_type_specs_update_or_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_type_id</desc_parameter><desc_parameter xml:space="preserve">group_specs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Create or update group type specs.</paragraph>
                <paragraph>This adds or modifies the key/value pairs specified in the group specs dict
                    argument.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_type_update()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_type_update',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_type_update" ids="cinder.db.api.group_type_update" module="cinder.db.api" names="cinder.db.api.group_type_update"><desc_name xml:space="preserve">group_type_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_type_id</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_types_get_by_name_or_id()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_types_get_by_name_or_id',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_types_get_by_name_or_id" ids="cinder.db.api.group_types_get_by_name_or_id" module="cinder.db.api" names="cinder.db.api.group_types_get_by_name_or_id"><desc_name xml:space="preserve">group_types_get_by_name_or_id</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_type_list</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get group types by name or id.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_update()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_update',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_update" ids="cinder.db.api.group_update" module="cinder.db.api" names="cinder.db.api.group_update"><desc_name xml:space="preserve">group_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_id</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Set the given properties on a group and update it.</paragraph>
                <paragraph>Raises NotFound if group does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'group_volume_type_mapping_create()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.group_volume_type_mapping_create',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="group_volume_type_mapping_create" ids="cinder.db.api.group_volume_type_mapping_create" module="cinder.db.api" names="cinder.db.api.group_volume_type_mapping_create"><desc_name xml:space="preserve">group_volume_type_mapping_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_id</desc_parameter><desc_parameter xml:space="preserve">volume_type_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Create a group volume_type mapping entry.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'image_volume_cache_create()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.image_volume_cache_create',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="image_volume_cache_create" ids="cinder.db.api.image_volume_cache_create" module="cinder.db.api" names="cinder.db.api.image_volume_cache_create"><desc_name xml:space="preserve">image_volume_cache_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">host</desc_parameter><desc_parameter xml:space="preserve">cluster_name</desc_parameter><desc_parameter xml:space="preserve">image_id</desc_parameter><desc_parameter xml:space="preserve">image_updated_at</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">size</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Create a new image volume cache entry.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'image_volume_cache_delete()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.image_volume_cache_delete',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="image_volume_cache_delete" ids="cinder.db.api.image_volume_cache_delete" module="cinder.db.api" names="cinder.db.api.image_volume_cache_delete"><desc_name xml:space="preserve">image_volume_cache_delete</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Delete an image volume cache entry specified by volume id.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'image_volume_cache_get_all()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.image_volume_cache_get_all',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="image_volume_cache_get_all" ids="cinder.db.api.image_volume_cache_get_all" module="cinder.db.api" names="cinder.db.api.image_volume_cache_get_all"><desc_name xml:space="preserve">image_volume_cache_get_all</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">**filters</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Query for all image volume cache entry for a host.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'image_volume_cache_get_and_update_last_used()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.image_volume_cache_get_and_update_last_used',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="image_volume_cache_get_and_update_last_used" ids="cinder.db.api.image_volume_cache_get_and_update_last_used" module="cinder.db.api" names="cinder.db.api.image_volume_cache_get_and_update_last_used"><desc_name xml:space="preserve">image_volume_cache_get_and_update_last_used</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">image_id</desc_parameter><desc_parameter xml:space="preserve">**filters</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Query for an image volume cache entry.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'image_volume_cache_get_by_volume_id()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.image_volume_cache_get_by_volume_id',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="image_volume_cache_get_by_volume_id" ids="cinder.db.api.image_volume_cache_get_by_volume_id" module="cinder.db.api" names="cinder.db.api.image_volume_cache_get_by_volume_id"><desc_name xml:space="preserve">image_volume_cache_get_by_volume_id</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Query to see if a volume id is an image-volume contained in the cache</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'image_volume_cache_include_in_cluster()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.image_volume_cache_include_in_cluster',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="image_volume_cache_include_in_cluster" ids="cinder.db.api.image_volume_cache_include_in_cluster" module="cinder.db.api" names="cinder.db.api.image_volume_cache_include_in_cluster"><desc_name xml:space="preserve">image_volume_cache_include_in_cluster</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">cluster</desc_parameter><desc_parameter xml:space="preserve">partial_rename=True</desc_parameter><desc_parameter xml:space="preserve">**filters</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Include in cluster image volume cache entries matching the filters.</paragraph>
                <paragraph>When partial_rename is set we will not set the cluster_name with cluster
                    parameter value directly, we’ll replace provided cluster_name or host
                    filter value with cluster instead.</paragraph>
                <paragraph>This is useful when we want to replace just the cluster name but leave
                    the backend and pool information as it is.  If we are using cluster_name
                    to filter, we’ll use that same DB field to replace the cluster value and
                    leave the rest as it is.  Likewise if we use the host to filter.</paragraph>
                <paragraph>Returns the number of volumes that have been changed.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'is_backend_frozen()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.is_backend_frozen',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="is_backend_frozen" ids="cinder.db.api.is_backend_frozen" module="cinder.db.api" names="cinder.db.api.is_backend_frozen"><desc_name xml:space="preserve">is_backend_frozen</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">host</desc_parameter><desc_parameter xml:space="preserve">cluster_name</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Check if a storage backend is frozen based on host and cluster_name.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'is_orm_value()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.is_orm_value',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="is_orm_value" ids="cinder.db.api.is_orm_value" module="cinder.db.api" names="cinder.db.api.is_orm_value"><desc_name xml:space="preserve">is_orm_value</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">obj</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Check if object is an ORM field.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'message_create()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.message_create',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="message_create" ids="cinder.db.api.message_create" module="cinder.db.api" names="cinder.db.api.message_create"><desc_name xml:space="preserve">message_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Creates a new message with the specified values.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'message_destroy()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.message_destroy',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="message_destroy" ids="cinder.db.api.message_destroy" module="cinder.db.api" names="cinder.db.api.message_destroy"><desc_name xml:space="preserve">message_destroy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">message_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Deletes message with the specified ID.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'message_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.message_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="message_get" ids="cinder.db.api.message_get" module="cinder.db.api" names="cinder.db.api.message_get"><desc_name xml:space="preserve">message_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">message_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Return a message with the specified ID.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'message_get_all()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.message_get_all',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="message_get_all" ids="cinder.db.api.message_get_all" module="cinder.db.api" names="cinder.db.api.message_get_all"><desc_name xml:space="preserve">message_get_all</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter><desc_parameter xml:space="preserve">marker=None</desc_parameter><desc_parameter xml:space="preserve">limit=None</desc_parameter><desc_parameter xml:space="preserve">offset=None</desc_parameter><desc_parameter xml:space="preserve">sort_keys=None</desc_parameter><desc_parameter xml:space="preserve">sort_dirs=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'purge_deleted_rows()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.purge_deleted_rows',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="purge_deleted_rows" ids="cinder.db.api.purge_deleted_rows" module="cinder.db.api" names="cinder.db.api.purge_deleted_rows"><desc_name xml:space="preserve">purge_deleted_rows</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">age_in_days</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Purge deleted rows older than given age from cinder tables</paragraph>
                <paragraph>Raises InvalidParameterValue if age_in_days is incorrect.
                    :returns: number of deleted rows</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'qos_specs_associate()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.qos_specs_associate',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="qos_specs_associate" ids="cinder.db.api.qos_specs_associate" module="cinder.db.api" names="cinder.db.api.qos_specs_associate"><desc_name xml:space="preserve">qos_specs_associate</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">qos_specs_id</desc_parameter><desc_parameter xml:space="preserve">type_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Associate qos_specs from volume type.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'qos_specs_associations_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.qos_specs_associations_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="qos_specs_associations_get" ids="cinder.db.api.qos_specs_associations_get" module="cinder.db.api" names="cinder.db.api.qos_specs_associations_get"><desc_name xml:space="preserve">qos_specs_associations_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">qos_specs_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all associated volume types for a given qos_specs.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'qos_specs_create()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.qos_specs_create',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="qos_specs_create" ids="cinder.db.api.qos_specs_create" module="cinder.db.api" names="cinder.db.api.qos_specs_create"><desc_name xml:space="preserve">qos_specs_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Create a qos_specs.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'qos_specs_delete()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.qos_specs_delete',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="qos_specs_delete" ids="cinder.db.api.qos_specs_delete" module="cinder.db.api" names="cinder.db.api.qos_specs_delete"><desc_name xml:space="preserve">qos_specs_delete</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">qos_specs_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Delete the qos_specs.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'qos_specs_disassociate()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.qos_specs_disassociate',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="qos_specs_disassociate" ids="cinder.db.api.qos_specs_disassociate" module="cinder.db.api" names="cinder.db.api.qos_specs_disassociate"><desc_name xml:space="preserve">qos_specs_disassociate</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">qos_specs_id</desc_parameter><desc_parameter xml:space="preserve">type_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Disassociate qos_specs from volume type.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'qos_specs_disassociate_all()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.qos_specs_disassociate_all',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="qos_specs_disassociate_all" ids="cinder.db.api.qos_specs_disassociate_all" module="cinder.db.api" names="cinder.db.api.qos_specs_disassociate_all"><desc_name xml:space="preserve">qos_specs_disassociate_all</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">qos_specs_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Disassociate qos_specs from all entities.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'qos_specs_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.qos_specs_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="qos_specs_get" ids="cinder.db.api.qos_specs_get" module="cinder.db.api" names="cinder.db.api.qos_specs_get"><desc_name xml:space="preserve">qos_specs_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">qos_specs_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all specification for a given qos_specs.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'qos_specs_get_all()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.qos_specs_get_all',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="qos_specs_get_all" ids="cinder.db.api.qos_specs_get_all" module="cinder.db.api" names="cinder.db.api.qos_specs_get_all"><desc_name xml:space="preserve">qos_specs_get_all</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter><desc_parameter xml:space="preserve">marker=None</desc_parameter><desc_parameter xml:space="preserve">limit=None</desc_parameter><desc_parameter xml:space="preserve">offset=None</desc_parameter><desc_parameter xml:space="preserve">sort_keys=None</desc_parameter><desc_parameter xml:space="preserve">sort_dirs=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all qos_specs.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'qos_specs_get_by_name()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.qos_specs_get_by_name',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="qos_specs_get_by_name" ids="cinder.db.api.qos_specs_get_by_name" module="cinder.db.api" names="cinder.db.api.qos_specs_get_by_name"><desc_name xml:space="preserve">qos_specs_get_by_name</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">name</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all specification for a given qos_specs.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'qos_specs_item_delete()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.qos_specs_item_delete',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="qos_specs_item_delete" ids="cinder.db.api.qos_specs_item_delete" module="cinder.db.api" names="cinder.db.api.qos_specs_item_delete"><desc_name xml:space="preserve">qos_specs_item_delete</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">qos_specs_id</desc_parameter><desc_parameter xml:space="preserve">key</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Delete specified key in the qos_specs.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'qos_specs_update()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.qos_specs_update',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="qos_specs_update" ids="cinder.db.api.qos_specs_update" module="cinder.db.api" names="cinder.db.api.qos_specs_update"><desc_name xml:space="preserve">qos_specs_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">qos_specs_id</desc_parameter><desc_parameter xml:space="preserve">specs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Update qos specs.</paragraph>
                <paragraph>This adds or modifies the key/value pairs specified in the
                    specs dict argument for a given qos_specs.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'quota_allocated_get_all_by_project()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.quota_allocated_get_all_by_project',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="quota_allocated_get_all_by_project" ids="cinder.db.api.quota_allocated_get_all_by_project" module="cinder.db.api" names="cinder.db.api.quota_allocated_get_all_by_project"><desc_name xml:space="preserve">quota_allocated_get_all_by_project</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Retrieve all allocated quotas associated with a given project.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'quota_allocated_update()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.quota_allocated_update',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="quota_allocated_update" ids="cinder.db.api.quota_allocated_update" module="cinder.db.api" names="cinder.db.api.quota_allocated_update"><desc_name xml:space="preserve">quota_allocated_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter><desc_parameter xml:space="preserve">resource</desc_parameter><desc_parameter xml:space="preserve">allocated</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Update allocated quota to subprojects or raise if it does not exist.</paragraph>
                <field_list>
                    <field>
                        <field_name>Raises</field_name>
                        <field_body>
                            <paragraph><reference internal="True" reftitle="cinder.exception.ProjectQuotaNotFound" refuri="cinder.exception#cinder.exception.ProjectQuotaNotFound"><literal_strong>cinder.exception.ProjectQuotaNotFound</literal_strong></reference> – </paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ 'quota_class_create()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.quota_class_create',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="quota_class_create" ids="cinder.db.api.quota_class_create" module="cinder.db.api" names="cinder.db.api.quota_class_create"><desc_name xml:space="preserve">quota_class_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">class_name</desc_parameter><desc_parameter xml:space="preserve">resource</desc_parameter><desc_parameter xml:space="preserve">limit</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Create a quota class for the given name and resource.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'quota_class_destroy()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.quota_class_destroy',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="quota_class_destroy" ids="cinder.db.api.quota_class_destroy" module="cinder.db.api" names="cinder.db.api.quota_class_destroy"><desc_name xml:space="preserve">quota_class_destroy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">class_name</desc_parameter><desc_parameter xml:space="preserve">resource</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Destroy the quota class or raise if it does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'quota_class_destroy_all_by_name()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.quota_class_destroy_all_by_name',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="quota_class_destroy_all_by_name" ids="cinder.db.api.quota_class_destroy_all_by_name" module="cinder.db.api" names="cinder.db.api.quota_class_destroy_all_by_name"><desc_name xml:space="preserve">quota_class_destroy_all_by_name</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">class_name</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Destroy all quotas associated with a given quota class.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'quota_class_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.quota_class_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="quota_class_get" ids="cinder.db.api.quota_class_get" module="cinder.db.api" names="cinder.db.api.quota_class_get"><desc_name xml:space="preserve">quota_class_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">class_name</desc_parameter><desc_parameter xml:space="preserve">resource</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Retrieve a quota class or raise if it does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'quota_class_get_all_by_name()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.quota_class_get_all_by_name',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="quota_class_get_all_by_name" ids="cinder.db.api.quota_class_get_all_by_name" module="cinder.db.api" names="cinder.db.api.quota_class_get_all_by_name"><desc_name xml:space="preserve">quota_class_get_all_by_name</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">class_name</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Retrieve all quotas associated with a given quota class.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'quota_class_get_defaults()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.quota_class_get_defaults',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="quota_class_get_defaults" ids="cinder.db.api.quota_class_get_defaults" module="cinder.db.api" names="cinder.db.api.quota_class_get_defaults"><desc_name xml:space="preserve">quota_class_get_defaults</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Retrieve all default quotas.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'quota_class_update()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.quota_class_update',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="quota_class_update" ids="cinder.db.api.quota_class_update" module="cinder.db.api" names="cinder.db.api.quota_class_update"><desc_name xml:space="preserve">quota_class_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">class_name</desc_parameter><desc_parameter xml:space="preserve">resource</desc_parameter><desc_parameter xml:space="preserve">limit</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Update a quota class or raise if it does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'quota_class_update_resource()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.quota_class_update_resource',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="quota_class_update_resource" ids="cinder.db.api.quota_class_update_resource" module="cinder.db.api" names="cinder.db.api.quota_class_update_resource"><desc_name xml:space="preserve">quota_class_update_resource</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">resource</desc_parameter><desc_parameter xml:space="preserve">new_resource</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Update resource name in quota_class.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'quota_create()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.quota_create',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="quota_create" ids="cinder.db.api.quota_create" module="cinder.db.api" names="cinder.db.api.quota_create"><desc_name xml:space="preserve">quota_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter><desc_parameter xml:space="preserve">resource</desc_parameter><desc_parameter xml:space="preserve">limit</desc_parameter><desc_parameter xml:space="preserve">allocated=0</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Create a quota for the given project and resource.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'quota_destroy()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.quota_destroy',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="quota_destroy" ids="cinder.db.api.quota_destroy" module="cinder.db.api" names="cinder.db.api.quota_destroy"><desc_name xml:space="preserve">quota_destroy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter><desc_parameter xml:space="preserve">resource</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Destroy the quota or raise if it does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'quota_destroy_by_project()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.quota_destroy_by_project',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="quota_destroy_by_project" ids="cinder.db.api.quota_destroy_by_project" module="cinder.db.api" names="cinder.db.api.quota_destroy_by_project"><desc_name xml:space="preserve">quota_destroy_by_project</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Destroy all quotas associated with a given project.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'quota_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.quota_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="quota_get" ids="cinder.db.api.quota_get" module="cinder.db.api" names="cinder.db.api.quota_get"><desc_name xml:space="preserve">quota_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter><desc_parameter xml:space="preserve">resource</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Retrieve a quota or raise if it does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'quota_get_all_by_project()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.quota_get_all_by_project',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="quota_get_all_by_project" ids="cinder.db.api.quota_get_all_by_project" module="cinder.db.api" names="cinder.db.api.quota_get_all_by_project"><desc_name xml:space="preserve">quota_get_all_by_project</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Retrieve all quotas associated with a given project.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'quota_reserve()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.quota_reserve',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="quota_reserve" ids="cinder.db.api.quota_reserve" module="cinder.db.api" names="cinder.db.api.quota_reserve"><desc_name xml:space="preserve">quota_reserve</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">resources</desc_parameter><desc_parameter xml:space="preserve">quotas</desc_parameter><desc_parameter xml:space="preserve">deltas</desc_parameter><desc_parameter xml:space="preserve">expire</desc_parameter><desc_parameter xml:space="preserve">until_refresh</desc_parameter><desc_parameter xml:space="preserve">max_age</desc_parameter><desc_parameter xml:space="preserve">project_id=None</desc_parameter><desc_parameter xml:space="preserve">is_allocated_reserve=False</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Check quotas and create appropriate reservations.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'quota_update()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.quota_update',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="quota_update" ids="cinder.db.api.quota_update" module="cinder.db.api" names="cinder.db.api.quota_update"><desc_name xml:space="preserve">quota_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter><desc_parameter xml:space="preserve">resource</desc_parameter><desc_parameter xml:space="preserve">limit</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Update a quota or raise if it does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'quota_update_resource()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.quota_update_resource',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="quota_update_resource" ids="cinder.db.api.quota_update_resource" module="cinder.db.api" names="cinder.db.api.quota_update_resource"><desc_name xml:space="preserve">quota_update_resource</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">old_res</desc_parameter><desc_parameter xml:space="preserve">new_res</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Update resource of quotas.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'quota_usage_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.quota_usage_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="quota_usage_get" ids="cinder.db.api.quota_usage_get" module="cinder.db.api" names="cinder.db.api.quota_usage_get"><desc_name xml:space="preserve">quota_usage_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter><desc_parameter xml:space="preserve">resource</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Retrieve a quota usage or raise if it does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'quota_usage_get_all_by_project()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.quota_usage_get_all_by_project',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="quota_usage_get_all_by_project" ids="cinder.db.api.quota_usage_get_all_by_project" module="cinder.db.api" names="cinder.db.api.quota_usage_get_all_by_project"><desc_name xml:space="preserve">quota_usage_get_all_by_project</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Retrieve all usage associated with a given resource.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'quota_usage_update_resource()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.quota_usage_update_resource',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="quota_usage_update_resource" ids="cinder.db.api.quota_usage_update_resource" module="cinder.db.api" names="cinder.db.api.quota_usage_update_resource"><desc_name xml:space="preserve">quota_usage_update_resource</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">old_res</desc_parameter><desc_parameter xml:space="preserve">new_res</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Update resource field in quota_usages.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'reservation_commit()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.reservation_commit',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="reservation_commit" ids="cinder.db.api.reservation_commit" module="cinder.db.api" names="cinder.db.api.reservation_commit"><desc_name xml:space="preserve">reservation_commit</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">reservations</desc_parameter><desc_parameter xml:space="preserve">project_id=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Commit quota reservations.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'reservation_expire()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.reservation_expire',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="reservation_expire" ids="cinder.db.api.reservation_expire" module="cinder.db.api" names="cinder.db.api.reservation_expire"><desc_name xml:space="preserve">reservation_expire</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Roll back any expired reservations.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'reservation_rollback()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.reservation_rollback',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="reservation_rollback" ids="cinder.db.api.reservation_rollback" module="cinder.db.api" names="cinder.db.api.reservation_rollback"><desc_name xml:space="preserve">reservation_rollback</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">reservations</desc_parameter><desc_parameter xml:space="preserve">project_id=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Roll back quota reservations.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'resource_exists()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.resource_exists',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="resource_exists" ids="cinder.db.api.resource_exists" module="cinder.db.api" names="cinder.db.api.resource_exists"><desc_name xml:space="preserve">resource_exists</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">model</desc_parameter><desc_parameter xml:space="preserve">resource_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'service_create()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.service_create',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="service_create" ids="cinder.db.api.service_create" module="cinder.db.api" names="cinder.db.api.service_create"><desc_name xml:space="preserve">service_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Create a service from the values dictionary.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'service_destroy()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.service_destroy',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="service_destroy" ids="cinder.db.api.service_destroy" module="cinder.db.api" names="cinder.db.api.service_destroy"><desc_name xml:space="preserve">service_destroy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">service_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Destroy the service or raise if it does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'service_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.service_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="service_get" ids="cinder.db.api.service_get" module="cinder.db.api" names="cinder.db.api.service_get"><desc_name xml:space="preserve">service_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">service_id=None</desc_parameter><desc_parameter xml:space="preserve">backend_match_level=None</desc_parameter><desc_parameter xml:space="preserve">**filters</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get a service that matches the criteria.</paragraph>
                <paragraph>A possible filter is is_up=True and it will filter nodes that are down.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">service_id</literal_strong> – Id of the service.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">filters</literal_strong> – Filters for the query in the form of key/value.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">backend_match_level</literal_strong> – ‘pool’, ‘backend’, or ‘host’ for host and
                                        cluster filters (as defined in _filter_host
                                        method)</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Raises</field_name>
                        <field_body>
                            <paragraph><reference internal="True" reftitle="cinder.exception.ServiceNotFound" refuri="cinder.exception#cinder.exception.ServiceNotFound"><literal_strong>ServiceNotFound</literal_strong></reference> – If service doesn’t exist.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ 'service_get_all()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.service_get_all',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="service_get_all" ids="cinder.db.api.service_get_all" module="cinder.db.api" names="cinder.db.api.service_get_all"><desc_name xml:space="preserve">service_get_all</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">backend_match_level=None</desc_parameter><desc_parameter xml:space="preserve">**filters</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all services that match the criteria.</paragraph>
                <paragraph>A possible filter is is_up=True and it will filter nodes that are down,
                    as well as host_or_cluster, that lets you look for services using both
                    of these properties.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">filters</literal_strong> – Filters for the query in the form of key/value arguments.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">backend_match_level</literal_strong> – ‘pool’, ‘backend’, or ‘host’ for host and
                                        cluster filters (as defined in _filter_host
                                        method)</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ 'service_update()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.service_update',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="service_update" ids="cinder.db.api.service_update" module="cinder.db.api" names="cinder.db.api.service_update"><desc_name xml:space="preserve">service_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">service_id</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Set the given properties on an service and update it.</paragraph>
                <paragraph>Raises NotFound if service does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'snapshot_create()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.snapshot_create',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="snapshot_create" ids="cinder.db.api.snapshot_create" module="cinder.db.api" names="cinder.db.api.snapshot_create"><desc_name xml:space="preserve">snapshot_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Create a snapshot from the values dictionary.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'snapshot_data_get_for_project()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.snapshot_data_get_for_project',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="snapshot_data_get_for_project" ids="cinder.db.api.snapshot_data_get_for_project" module="cinder.db.api" names="cinder.db.api.snapshot_data_get_for_project"><desc_name xml:space="preserve">snapshot_data_get_for_project</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter><desc_parameter xml:space="preserve">volume_type_id=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get count and gigabytes used for snapshots for specified project.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'snapshot_destroy()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.snapshot_destroy',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="snapshot_destroy" ids="cinder.db.api.snapshot_destroy" module="cinder.db.api" names="cinder.db.api.snapshot_destroy"><desc_name xml:space="preserve">snapshot_destroy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Destroy the snapshot or raise if it does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'snapshot_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.snapshot_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="snapshot_get" ids="cinder.db.api.snapshot_get" module="cinder.db.api" names="cinder.db.api.snapshot_get"><desc_name xml:space="preserve">snapshot_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get a snapshot or raise if it does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'snapshot_get_all()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.snapshot_get_all',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="snapshot_get_all" ids="cinder.db.api.snapshot_get_all" module="cinder.db.api" names="cinder.db.api.snapshot_get_all"><desc_name xml:space="preserve">snapshot_get_all</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter><desc_parameter xml:space="preserve">marker=None</desc_parameter><desc_parameter xml:space="preserve">limit=None</desc_parameter><desc_parameter xml:space="preserve">sort_keys=None</desc_parameter><desc_parameter xml:space="preserve">sort_dirs=None</desc_parameter><desc_parameter xml:space="preserve">offset=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all snapshots.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'snapshot_get_all_active_by_window()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.snapshot_get_all_active_by_window',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="snapshot_get_all_active_by_window" ids="cinder.db.api.snapshot_get_all_active_by_window" module="cinder.db.api" names="cinder.db.api.snapshot_get_all_active_by_window"><desc_name xml:space="preserve">snapshot_get_all_active_by_window</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">begin</desc_parameter><desc_parameter xml:space="preserve">end=None</desc_parameter><desc_parameter xml:space="preserve">project_id=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all the snapshots inside the window.</paragraph>
                <paragraph>Specifying a project_id will filter for a certain project.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'snapshot_get_all_by_host()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.snapshot_get_all_by_host',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="snapshot_get_all_by_host" ids="cinder.db.api.snapshot_get_all_by_host" module="cinder.db.api" names="cinder.db.api.snapshot_get_all_by_host"><desc_name xml:space="preserve">snapshot_get_all_by_host</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">host</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all snapshots belonging to a host.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">host</literal_strong> – Include include snapshots only for specified host.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">filters</literal_strong> – Filters for the query in the form of key/value.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ 'snapshot_get_all_by_project()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.snapshot_get_all_by_project',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="snapshot_get_all_by_project" ids="cinder.db.api.snapshot_get_all_by_project" module="cinder.db.api" names="cinder.db.api.snapshot_get_all_by_project"><desc_name xml:space="preserve">snapshot_get_all_by_project</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter><desc_parameter xml:space="preserve">marker=None</desc_parameter><desc_parameter xml:space="preserve">limit=None</desc_parameter><desc_parameter xml:space="preserve">sort_keys=None</desc_parameter><desc_parameter xml:space="preserve">sort_dirs=None</desc_parameter><desc_parameter xml:space="preserve">offset=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all snapshots belonging to a project.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'snapshot_get_all_for_cgsnapshot()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.snapshot_get_all_for_cgsnapshot',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="snapshot_get_all_for_cgsnapshot" ids="cinder.db.api.snapshot_get_all_for_cgsnapshot" module="cinder.db.api" names="cinder.db.api.snapshot_get_all_for_cgsnapshot"><desc_name xml:space="preserve">snapshot_get_all_for_cgsnapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all snapshots belonging to a cgsnapshot.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'snapshot_get_all_for_group_snapshot()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.snapshot_get_all_for_group_snapshot',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="snapshot_get_all_for_group_snapshot" ids="cinder.db.api.snapshot_get_all_for_group_snapshot" module="cinder.db.api" names="cinder.db.api.snapshot_get_all_for_group_snapshot"><desc_name xml:space="preserve">snapshot_get_all_for_group_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_snapshot_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all snapshots belonging to a group snapshot.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'snapshot_get_all_for_volume()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.snapshot_get_all_for_volume',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="snapshot_get_all_for_volume" ids="cinder.db.api.snapshot_get_all_for_volume" module="cinder.db.api" names="cinder.db.api.snapshot_get_all_for_volume"><desc_name xml:space="preserve">snapshot_get_all_for_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all snapshots for a volume.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'snapshot_get_latest_for_volume()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.snapshot_get_latest_for_volume',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="snapshot_get_latest_for_volume" ids="cinder.db.api.snapshot_get_latest_for_volume" module="cinder.db.api" names="cinder.db.api.snapshot_get_latest_for_volume"><desc_name xml:space="preserve">snapshot_get_latest_for_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get latest snapshot for a volume</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'snapshot_metadata_delete()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.snapshot_metadata_delete',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="snapshot_metadata_delete" ids="cinder.db.api.snapshot_metadata_delete" module="cinder.db.api" names="cinder.db.api.snapshot_metadata_delete"><desc_name xml:space="preserve">snapshot_metadata_delete</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot_id</desc_parameter><desc_parameter xml:space="preserve">key</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Delete the given metadata item.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'snapshot_metadata_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.snapshot_metadata_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="snapshot_metadata_get" ids="cinder.db.api.snapshot_metadata_get" module="cinder.db.api" names="cinder.db.api.snapshot_metadata_get"><desc_name xml:space="preserve">snapshot_metadata_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all metadata for a snapshot.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'snapshot_metadata_update()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.snapshot_metadata_update',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="snapshot_metadata_update" ids="cinder.db.api.snapshot_metadata_update" module="cinder.db.api" names="cinder.db.api.snapshot_metadata_update"><desc_name xml:space="preserve">snapshot_metadata_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot_id</desc_parameter><desc_parameter xml:space="preserve">metadata</desc_parameter><desc_parameter xml:space="preserve">delete</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Update metadata if it exists, otherwise create it.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'snapshot_update()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.snapshot_update',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="snapshot_update" ids="cinder.db.api.snapshot_update" module="cinder.db.api" names="cinder.db.api.snapshot_update"><desc_name xml:space="preserve">snapshot_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot_id</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Set the given properties on an snapshot and update it.</paragraph>
                <paragraph>Raises NotFound if snapshot does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'transfer_accept()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.transfer_accept',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="transfer_accept" ids="cinder.db.api.transfer_accept" module="cinder.db.api" names="cinder.db.api.transfer_accept"><desc_name xml:space="preserve">transfer_accept</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">transfer_id</desc_parameter><desc_parameter xml:space="preserve">user_id</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Accept a volume transfer.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'transfer_create()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.transfer_create',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="transfer_create" ids="cinder.db.api.transfer_create" module="cinder.db.api" names="cinder.db.api.transfer_create"><desc_name xml:space="preserve">transfer_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Create an entry in the transfers table.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'transfer_destroy()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.transfer_destroy',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="transfer_destroy" ids="cinder.db.api.transfer_destroy" module="cinder.db.api" names="cinder.db.api.transfer_destroy"><desc_name xml:space="preserve">transfer_destroy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">transfer_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Destroy a record in the volume transfer table.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'transfer_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.transfer_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="transfer_get" ids="cinder.db.api.transfer_get" module="cinder.db.api" names="cinder.db.api.transfer_get"><desc_name xml:space="preserve">transfer_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">transfer_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get a volume transfer record or raise if it does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'transfer_get_all()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.transfer_get_all',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="transfer_get_all" ids="cinder.db.api.transfer_get_all" module="cinder.db.api" names="cinder.db.api.transfer_get_all"><desc_name xml:space="preserve">transfer_get_all</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all volume transfer records.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'transfer_get_all_by_project()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.transfer_get_all_by_project',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="transfer_get_all_by_project" ids="cinder.db.api.transfer_get_all_by_project" module="cinder.db.api" names="cinder.db.api.transfer_get_all_by_project"><desc_name xml:space="preserve">transfer_get_all_by_project</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all volume transfer records for specified project.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_admin_metadata_delete()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_admin_metadata_delete',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_admin_metadata_delete" ids="cinder.db.api.volume_admin_metadata_delete" module="cinder.db.api" names="cinder.db.api.volume_admin_metadata_delete"><desc_name xml:space="preserve">volume_admin_metadata_delete</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">key</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Delete the given metadata item.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_admin_metadata_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_admin_metadata_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_admin_metadata_get" ids="cinder.db.api.volume_admin_metadata_get" module="cinder.db.api" names="cinder.db.api.volume_admin_metadata_get"><desc_name xml:space="preserve">volume_admin_metadata_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all administration metadata for a volume.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_admin_metadata_update()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_admin_metadata_update',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_admin_metadata_update" ids="cinder.db.api.volume_admin_metadata_update" module="cinder.db.api" names="cinder.db.api.volume_admin_metadata_update"><desc_name xml:space="preserve">volume_admin_metadata_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">metadata</desc_parameter><desc_parameter xml:space="preserve">delete</desc_parameter><desc_parameter xml:space="preserve">add=True</desc_parameter><desc_parameter xml:space="preserve">update=True</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Update metadata if it exists, otherwise create it.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_attach()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_attach',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_attach" ids="cinder.db.api.volume_attach" module="cinder.db.api" names="cinder.db.api.volume_attach"><desc_name xml:space="preserve">volume_attach</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Attach a volume.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_attached()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_attached',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_attached" ids="cinder.db.api.volume_attached" module="cinder.db.api" names="cinder.db.api.volume_attached"><desc_name xml:space="preserve">volume_attached</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">instance_id</desc_parameter><desc_parameter xml:space="preserve">host_name</desc_parameter><desc_parameter xml:space="preserve">mountpoint</desc_parameter><desc_parameter xml:space="preserve">attach_mode='rw'</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Ensure that a volume is set as attached.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_attachment_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_attachment_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_attachment_get" ids="cinder.db.api.volume_attachment_get" module="cinder.db.api" names="cinder.db.api.volume_attachment_get"><desc_name xml:space="preserve">volume_attachment_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">attachment_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_attachment_get_all()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_attachment_get_all',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_attachment_get_all" ids="cinder.db.api.volume_attachment_get_all" module="cinder.db.api" names="cinder.db.api.volume_attachment_get_all"><desc_name xml:space="preserve">volume_attachment_get_all</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter><desc_parameter xml:space="preserve">marker=None</desc_parameter><desc_parameter xml:space="preserve">limit=None</desc_parameter><desc_parameter xml:space="preserve">offset=None</desc_parameter><desc_parameter xml:space="preserve">sort_keys=None</desc_parameter><desc_parameter xml:space="preserve">sort_dirs=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_attachment_get_all_by_host()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_attachment_get_all_by_host',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_attachment_get_all_by_host" ids="cinder.db.api.volume_attachment_get_all_by_host" module="cinder.db.api" names="cinder.db.api.volume_attachment_get_all_by_host"><desc_name xml:space="preserve">volume_attachment_get_all_by_host</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">host</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_attachment_get_all_by_instance_uuid()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_attachment_get_all_by_instance_uuid',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_attachment_get_all_by_instance_uuid" ids="cinder.db.api.volume_attachment_get_all_by_instance_uuid" module="cinder.db.api" names="cinder.db.api.volume_attachment_get_all_by_instance_uuid"><desc_name xml:space="preserve">volume_attachment_get_all_by_instance_uuid</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">instance_uuid</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_attachment_get_all_by_project()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_attachment_get_all_by_project',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_attachment_get_all_by_project" ids="cinder.db.api.volume_attachment_get_all_by_project" module="cinder.db.api" names="cinder.db.api.volume_attachment_get_all_by_project"><desc_name xml:space="preserve">volume_attachment_get_all_by_project</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter><desc_parameter xml:space="preserve">marker=None</desc_parameter><desc_parameter xml:space="preserve">limit=None</desc_parameter><desc_parameter xml:space="preserve">offset=None</desc_parameter><desc_parameter xml:space="preserve">sort_keys=None</desc_parameter><desc_parameter xml:space="preserve">sort_dirs=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_attachment_get_all_by_volume_id()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_attachment_get_all_by_volume_id',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_attachment_get_all_by_volume_id" ids="cinder.db.api.volume_attachment_get_all_by_volume_id" module="cinder.db.api" names="cinder.db.api.volume_attachment_get_all_by_volume_id"><desc_name xml:space="preserve">volume_attachment_get_all_by_volume_id</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">session=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_attachment_update()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_attachment_update',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_attachment_update" ids="cinder.db.api.volume_attachment_update" module="cinder.db.api" names="cinder.db.api.volume_attachment_update"><desc_name xml:space="preserve">volume_attachment_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">attachment_id</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_create()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_create',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_create" ids="cinder.db.api.volume_create" module="cinder.db.api" names="cinder.db.api.volume_create"><desc_name xml:space="preserve">volume_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Create a volume from the values dictionary.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_data_get_for_host()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_data_get_for_host',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_data_get_for_host" ids="cinder.db.api.volume_data_get_for_host" module="cinder.db.api" names="cinder.db.api.volume_data_get_for_host"><desc_name xml:space="preserve">volume_data_get_for_host</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">host</desc_parameter><desc_parameter xml:space="preserve">count_only=False</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get (volume_count, gigabytes) for project.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_data_get_for_project()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_data_get_for_project',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_data_get_for_project" ids="cinder.db.api.volume_data_get_for_project" module="cinder.db.api" names="cinder.db.api.volume_data_get_for_project"><desc_name xml:space="preserve">volume_data_get_for_project</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get (volume_count, gigabytes) for project.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_destroy()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_destroy',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_destroy" ids="cinder.db.api.volume_destroy" module="cinder.db.api" names="cinder.db.api.volume_destroy"><desc_name xml:space="preserve">volume_destroy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Destroy the volume or raise if it does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_detached()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_detached',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_detached" ids="cinder.db.api.volume_detached" module="cinder.db.api" names="cinder.db.api.volume_detached"><desc_name xml:space="preserve">volume_detached</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">attachment_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Ensure that a volume is set as detached.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_encryption_metadata_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_encryption_metadata_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_encryption_metadata_get" ids="cinder.db.api.volume_encryption_metadata_get" module="cinder.db.api" names="cinder.db.api.volume_encryption_metadata_get"><desc_name xml:space="preserve">volume_encryption_metadata_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">session=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_get" ids="cinder.db.api.volume_get" module="cinder.db.api" names="cinder.db.api.volume_get"><desc_name xml:space="preserve">volume_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get a volume or raise if it does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_get_all()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_get_all',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_get_all" ids="cinder.db.api.volume_get_all" module="cinder.db.api" names="cinder.db.api.volume_get_all"><desc_name xml:space="preserve">volume_get_all</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">marker=None</desc_parameter><desc_parameter xml:space="preserve">limit=None</desc_parameter><desc_parameter xml:space="preserve">sort_keys=None</desc_parameter><desc_parameter xml:space="preserve">sort_dirs=None</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter><desc_parameter xml:space="preserve">offset=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all volumes.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_get_all_active_by_window()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_get_all_active_by_window',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_get_all_active_by_window" ids="cinder.db.api.volume_get_all_active_by_window" module="cinder.db.api" names="cinder.db.api.volume_get_all_active_by_window"><desc_name xml:space="preserve">volume_get_all_active_by_window</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">begin</desc_parameter><desc_parameter xml:space="preserve">end=None</desc_parameter><desc_parameter xml:space="preserve">project_id=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all the volumes inside the window.</paragraph>
                <paragraph>Specifying a project_id will filter for a certain project.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_get_all_by_generic_group()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_get_all_by_generic_group',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_get_all_by_generic_group" ids="cinder.db.api.volume_get_all_by_generic_group" module="cinder.db.api" names="cinder.db.api.volume_get_all_by_generic_group"><desc_name xml:space="preserve">volume_get_all_by_generic_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_id</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all volumes belonging to a generic volume group.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_get_all_by_group()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_get_all_by_group',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_get_all_by_group" ids="cinder.db.api.volume_get_all_by_group" module="cinder.db.api" names="cinder.db.api.volume_get_all_by_group"><desc_name xml:space="preserve">volume_get_all_by_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_id</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all volumes belonging to a consistency group.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_get_all_by_host()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_get_all_by_host',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_get_all_by_host" ids="cinder.db.api.volume_get_all_by_host" module="cinder.db.api" names="cinder.db.api.volume_get_all_by_host"><desc_name xml:space="preserve">volume_get_all_by_host</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">host</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all volumes belonging to a host.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_get_all_by_project()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_get_all_by_project',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_get_all_by_project" ids="cinder.db.api.volume_get_all_by_project" module="cinder.db.api" names="cinder.db.api.volume_get_all_by_project"><desc_name xml:space="preserve">volume_get_all_by_project</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter><desc_parameter xml:space="preserve">marker</desc_parameter><desc_parameter xml:space="preserve">limit</desc_parameter><desc_parameter xml:space="preserve">sort_keys=None</desc_parameter><desc_parameter xml:space="preserve">sort_dirs=None</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter><desc_parameter xml:space="preserve">offset=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all volumes belonging to a project.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_glance_metadata_bulk_create()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_glance_metadata_bulk_create',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_glance_metadata_bulk_create" ids="cinder.db.api.volume_glance_metadata_bulk_create" module="cinder.db.api" names="cinder.db.api.volume_glance_metadata_bulk_create"><desc_name xml:space="preserve">volume_glance_metadata_bulk_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">metadata</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Add Glance metadata for specified volume (multiple pairs).</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_glance_metadata_copy_from_volume_to_volume()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_glance_metadata_copy_from_volume_to_volume',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_glance_metadata_copy_from_volume_to_volume" ids="cinder.db.api.volume_glance_metadata_copy_from_volume_to_volume" module="cinder.db.api" names="cinder.db.api.volume_glance_metadata_copy_from_volume_to_volume"><desc_name xml:space="preserve">volume_glance_metadata_copy_from_volume_to_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">src_volume_id</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Update the Glance metadata for a volume.</paragraph>
                <paragraph>Update the Glance metadata for a volume by copying all of the key:value
                    pairs from the originating volume.</paragraph>
                <paragraph>This is so that a volume created from the volume (clone) will retain the
                    original metadata.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_glance_metadata_copy_to_snapshot()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_glance_metadata_copy_to_snapshot',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_glance_metadata_copy_to_snapshot" ids="cinder.db.api.volume_glance_metadata_copy_to_snapshot" module="cinder.db.api" names="cinder.db.api.volume_glance_metadata_copy_to_snapshot"><desc_name xml:space="preserve">volume_glance_metadata_copy_to_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot_id</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Update the Glance metadata for a snapshot.</paragraph>
                <paragraph>This will copy all of the key:value pairs from the originating volume,
                    to ensure that a volume created from the snapshot will retain the
                    original metadata.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_glance_metadata_copy_to_volume()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_glance_metadata_copy_to_volume',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_glance_metadata_copy_to_volume" ids="cinder.db.api.volume_glance_metadata_copy_to_volume" module="cinder.db.api" names="cinder.db.api.volume_glance_metadata_copy_to_volume"><desc_name xml:space="preserve">volume_glance_metadata_copy_to_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">snapshot_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Update the Glance metadata from a volume (created from a snapshot).</paragraph>
                <paragraph>This will copy all of the key:value pairs from the originating snapshot,
                    to ensure that the Glance metadata from the original volume is retained.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_glance_metadata_create()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_glance_metadata_create',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_glance_metadata_create" ids="cinder.db.api.volume_glance_metadata_create" module="cinder.db.api" names="cinder.db.api.volume_glance_metadata_create"><desc_name xml:space="preserve">volume_glance_metadata_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">key</desc_parameter><desc_parameter xml:space="preserve">value</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Update the Glance metadata for the specified volume.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_glance_metadata_delete_by_snapshot()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_glance_metadata_delete_by_snapshot',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_glance_metadata_delete_by_snapshot" ids="cinder.db.api.volume_glance_metadata_delete_by_snapshot" module="cinder.db.api" names="cinder.db.api.volume_glance_metadata_delete_by_snapshot"><desc_name xml:space="preserve">volume_glance_metadata_delete_by_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Delete the glance metadata for a snapshot.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_glance_metadata_delete_by_volume()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_glance_metadata_delete_by_volume',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_glance_metadata_delete_by_volume" ids="cinder.db.api.volume_glance_metadata_delete_by_volume" module="cinder.db.api" names="cinder.db.api.volume_glance_metadata_delete_by_volume"><desc_name xml:space="preserve">volume_glance_metadata_delete_by_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Delete the glance metadata for a volume.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_glance_metadata_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_glance_metadata_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_glance_metadata_get" ids="cinder.db.api.volume_glance_metadata_get" module="cinder.db.api" names="cinder.db.api.volume_glance_metadata_get"><desc_name xml:space="preserve">volume_glance_metadata_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Return the glance metadata for a volume.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_glance_metadata_get_all()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_glance_metadata_get_all',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_glance_metadata_get_all" ids="cinder.db.api.volume_glance_metadata_get_all" module="cinder.db.api" names="cinder.db.api.volume_glance_metadata_get_all"><desc_name xml:space="preserve">volume_glance_metadata_get_all</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Return the glance metadata for all volumes.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_glance_metadata_list_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_glance_metadata_list_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_glance_metadata_list_get" ids="cinder.db.api.volume_glance_metadata_list_get" module="cinder.db.api" names="cinder.db.api.volume_glance_metadata_list_get"><desc_name xml:space="preserve">volume_glance_metadata_list_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id_list</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Return the glance metadata for a volume list.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_has_attachments_filter()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_has_attachments_filter',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_has_attachments_filter" ids="cinder.db.api.volume_has_attachments_filter" module="cinder.db.api" names="cinder.db.api.volume_has_attachments_filter"><desc_name xml:space="preserve">volume_has_attachments_filter</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_has_other_project_snp_filter()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_has_other_project_snp_filter',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_has_other_project_snp_filter" ids="cinder.db.api.volume_has_other_project_snp_filter" module="cinder.db.api" names="cinder.db.api.volume_has_other_project_snp_filter"><desc_name xml:space="preserve">volume_has_other_project_snp_filter</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_has_snapshots_filter()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_has_snapshots_filter',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_has_snapshots_filter" ids="cinder.db.api.volume_has_snapshots_filter" module="cinder.db.api" names="cinder.db.api.volume_has_snapshots_filter"><desc_name xml:space="preserve">volume_has_snapshots_filter</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_has_snapshots_in_a_cgsnapshot_filter()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_has_snapshots_in_a_cgsnapshot_filter',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_has_snapshots_in_a_cgsnapshot_filter" ids="cinder.db.api.volume_has_snapshots_in_a_cgsnapshot_filter" module="cinder.db.api" names="cinder.db.api.volume_has_snapshots_in_a_cgsnapshot_filter"><desc_name xml:space="preserve">volume_has_snapshots_in_a_cgsnapshot_filter</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_has_undeletable_snapshots_filter()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_has_undeletable_snapshots_filter',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_has_undeletable_snapshots_filter" ids="cinder.db.api.volume_has_undeletable_snapshots_filter" module="cinder.db.api" names="cinder.db.api.volume_has_undeletable_snapshots_filter"><desc_name xml:space="preserve">volume_has_undeletable_snapshots_filter</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_include_in_cluster()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_include_in_cluster',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_include_in_cluster" ids="cinder.db.api.volume_include_in_cluster" module="cinder.db.api" names="cinder.db.api.volume_include_in_cluster"><desc_name xml:space="preserve">volume_include_in_cluster</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">cluster</desc_parameter><desc_parameter xml:space="preserve">partial_rename=True</desc_parameter><desc_parameter xml:space="preserve">**filters</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Include all volumes matching the filters into a cluster.</paragraph>
                <paragraph>When partial_rename is set we will not set the cluster_name with cluster
                    parameter value directly, we’ll replace provided cluster_name or host
                    filter value with cluster instead.</paragraph>
                <paragraph>This is useful when we want to replace just the cluster name but leave
                    the backend and pool information as it is.  If we are using cluster_name
                    to filter, we’ll use that same DB field to replace the cluster value and
                    leave the rest as it is.  Likewise if we use the host to filter.</paragraph>
                <paragraph>Returns the number of volumes that have been changed.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_metadata_delete()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_metadata_delete',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_metadata_delete" ids="cinder.db.api.volume_metadata_delete" module="cinder.db.api" names="cinder.db.api.volume_metadata_delete"><desc_name xml:space="preserve">volume_metadata_delete</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">key</desc_parameter><desc_parameter xml:space="preserve">meta_type=&lt;METADATA_TYPES.user: 1&gt;</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Delete the given metadata item.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_metadata_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_metadata_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_metadata_get" ids="cinder.db.api.volume_metadata_get" module="cinder.db.api" names="cinder.db.api.volume_metadata_get"><desc_name xml:space="preserve">volume_metadata_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all metadata for a volume.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_metadata_update()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_metadata_update',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_metadata_update" ids="cinder.db.api.volume_metadata_update" module="cinder.db.api" names="cinder.db.api.volume_metadata_update"><desc_name xml:space="preserve">volume_metadata_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">metadata</desc_parameter><desc_parameter xml:space="preserve">delete</desc_parameter><desc_parameter xml:space="preserve">meta_type=&lt;METADATA_TYPES.user: 1&gt;</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Update metadata if it exists, otherwise create it.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_qos_allows_retype()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_qos_allows_retype',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_qos_allows_retype" ids="cinder.db.api.volume_qos_allows_retype" module="cinder.db.api" names="cinder.db.api.volume_qos_allows_retype"><desc_name xml:space="preserve">volume_qos_allows_retype</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">new_vol_type</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_snapshot_glance_metadata_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_snapshot_glance_metadata_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_snapshot_glance_metadata_get" ids="cinder.db.api.volume_snapshot_glance_metadata_get" module="cinder.db.api" names="cinder.db.api.volume_snapshot_glance_metadata_get"><desc_name xml:space="preserve">volume_snapshot_glance_metadata_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Return the Glance metadata for the specified snapshot.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_type_access_add()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_type_access_add',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_type_access_add" ids="cinder.db.api.volume_type_access_add" module="cinder.db.api" names="cinder.db.api.volume_type_access_add"><desc_name xml:space="preserve">volume_type_access_add</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">type_id</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Add volume type access for project.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_type_access_get_all()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_type_access_get_all',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_type_access_get_all" ids="cinder.db.api.volume_type_access_get_all" module="cinder.db.api" names="cinder.db.api.volume_type_access_get_all"><desc_name xml:space="preserve">volume_type_access_get_all</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">type_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all volume type access of a volume type.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_type_access_remove()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_type_access_remove',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_type_access_remove" ids="cinder.db.api.volume_type_access_remove" module="cinder.db.api" names="cinder.db.api.volume_type_access_remove"><desc_name xml:space="preserve">volume_type_access_remove</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">type_id</desc_parameter><desc_parameter xml:space="preserve">project_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Remove volume type access for project.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_type_create()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_type_create',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_type_create" ids="cinder.db.api.volume_type_create" module="cinder.db.api" names="cinder.db.api.volume_type_create"><desc_name xml:space="preserve">volume_type_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter><desc_parameter xml:space="preserve">projects=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Create a new volume type.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_type_destroy()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_type_destroy',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_type_destroy" ids="cinder.db.api.volume_type_destroy" module="cinder.db.api" names="cinder.db.api.volume_type_destroy"><desc_name xml:space="preserve">volume_type_destroy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Delete a volume type.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_type_encryption_create()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_type_encryption_create',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_type_encryption_create" ids="cinder.db.api.volume_type_encryption_create" module="cinder.db.api" names="cinder.db.api.volume_type_encryption_create"><desc_name xml:space="preserve">volume_type_encryption_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_type_id</desc_parameter><desc_parameter xml:space="preserve">encryption_specs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_type_encryption_delete()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_type_encryption_delete',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_type_encryption_delete" ids="cinder.db.api.volume_type_encryption_delete" module="cinder.db.api" names="cinder.db.api.volume_type_encryption_delete"><desc_name xml:space="preserve">volume_type_encryption_delete</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_type_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_type_encryption_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_type_encryption_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_type_encryption_get" ids="cinder.db.api.volume_type_encryption_get" module="cinder.db.api" names="cinder.db.api.volume_type_encryption_get"><desc_name xml:space="preserve">volume_type_encryption_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_type_id</desc_parameter><desc_parameter xml:space="preserve">session=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_type_encryption_update()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_type_encryption_update',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_type_encryption_update" ids="cinder.db.api.volume_type_encryption_update" module="cinder.db.api" names="cinder.db.api.volume_type_encryption_update"><desc_name xml:space="preserve">volume_type_encryption_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_type_id</desc_parameter><desc_parameter xml:space="preserve">encryption_specs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_type_encryption_volume_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_type_encryption_volume_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_type_encryption_volume_get" ids="cinder.db.api.volume_type_encryption_volume_get" module="cinder.db.api" names="cinder.db.api.volume_type_encryption_volume_get"><desc_name xml:space="preserve">volume_type_encryption_volume_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_type_id</desc_parameter><desc_parameter xml:space="preserve">session=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_type_extra_specs_delete()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_type_extra_specs_delete',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_type_extra_specs_delete" ids="cinder.db.api.volume_type_extra_specs_delete" module="cinder.db.api" names="cinder.db.api.volume_type_extra_specs_delete"><desc_name xml:space="preserve">volume_type_extra_specs_delete</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_type_id</desc_parameter><desc_parameter xml:space="preserve">key</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Delete the given extra specs item.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_type_extra_specs_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_type_extra_specs_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_type_extra_specs_get" ids="cinder.db.api.volume_type_extra_specs_get" module="cinder.db.api" names="cinder.db.api.volume_type_extra_specs_get"><desc_name xml:space="preserve">volume_type_extra_specs_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_type_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all extra specs for a volume type.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_type_extra_specs_update_or_create()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_type_extra_specs_update_or_create',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_type_extra_specs_update_or_create" ids="cinder.db.api.volume_type_extra_specs_update_or_create" module="cinder.db.api" names="cinder.db.api.volume_type_extra_specs_update_or_create"><desc_name xml:space="preserve">volume_type_extra_specs_update_or_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_type_id</desc_parameter><desc_parameter xml:space="preserve">extra_specs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Create or update volume type extra specs.</paragraph>
                <paragraph>This adds or modifies the key/value pairs specified in the extra specs dict
                    argument.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_type_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_type_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_type_get" ids="cinder.db.api.volume_type_get" module="cinder.db.api" names="cinder.db.api.volume_type_get"><desc_name xml:space="preserve">volume_type_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">id</desc_parameter><desc_parameter xml:space="preserve">inactive=False</desc_parameter><desc_parameter xml:space="preserve">expected_fields=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get volume type by id.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – context to query under</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">id</literal_strong> – Volume type id to get.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">inactive</literal_strong> – Consider inactive volume types when searching</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">expected_fields</literal_strong> – Return those additional fields.
                                        Supported fields are: projects.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Returns</field_name>
                        <field_body>
                            <paragraph>volume type</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_type_get_all()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_type_get_all',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_type_get_all" ids="cinder.db.api.volume_type_get_all" module="cinder.db.api" names="cinder.db.api.volume_type_get_all"><desc_name xml:space="preserve">volume_type_get_all</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">inactive=False</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter><desc_parameter xml:space="preserve">marker=None</desc_parameter><desc_parameter xml:space="preserve">limit=None</desc_parameter><desc_parameter xml:space="preserve">sort_keys=None</desc_parameter><desc_parameter xml:space="preserve">sort_dirs=None</desc_parameter><desc_parameter xml:space="preserve">offset=None</desc_parameter><desc_parameter xml:space="preserve">list_result=False</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all volume types.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – context to query under</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">inactive</literal_strong> – Include inactive volume types to the result set</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">filters</literal_strong> – Filters for the query in the form of key/value.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">marker</literal_strong> – the last item of the previous page, used to determine the
                                        next page of results to return</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">limit</literal_strong> – maximum number of items to return</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">sort_keys</literal_strong> – list of attributes by which results should be sorted,
                                        paired with corresponding item in sort_dirs</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">sort_dirs</literal_strong> – list of directions in which results should be sorted,
                                        paired with corresponding item in sort_keys</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">list_result</literal_strong> – <definition_list><definition_list_item><term>For compatibility, if list_result = True, return a list</term><definition><paragraph>instead of dict.</paragraph></definition></definition_list_item></definition_list><field_list><field><field_name>is_public</field_name><field_body><paragraph>Filter volume types based on visibility:</paragraph><bullet_list bullet="*"><list_item><paragraph><strong>True</strong>: List public volume types only</paragraph></list_item><list_item><paragraph><strong>False</strong>: List private volume types only</paragraph></list_item><list_item><paragraph><strong>None</strong>: List both public and private volume types</paragraph></list_item></bullet_list></field_body></field></field_list></paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Returns</field_name>
                        <field_body>
                            <paragraph>list/dict of matching volume types</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_type_get_all_by_group()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_type_get_all_by_group',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_type_get_all_by_group" ids="cinder.db.api.volume_type_get_all_by_group" module="cinder.db.api" names="cinder.db.api.volume_type_get_all_by_group"><desc_name xml:space="preserve">volume_type_get_all_by_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all volumes in a group.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_type_get_by_name()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_type_get_by_name',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_type_get_by_name" ids="cinder.db.api.volume_type_get_by_name" module="cinder.db.api" names="cinder.db.api.volume_type_get_by_name"><desc_name xml:space="preserve">volume_type_get_by_name</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">name</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get volume type by name.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_type_qos_associate()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_type_qos_associate',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_type_qos_associate" ids="cinder.db.api.volume_type_qos_associate" module="cinder.db.api" names="cinder.db.api.volume_type_qos_associate"><desc_name xml:space="preserve">volume_type_qos_associate</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">type_id</desc_parameter><desc_parameter xml:space="preserve">qos_specs_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Associate a volume type with specific qos specs.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_type_qos_associations_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_type_qos_associations_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_type_qos_associations_get" ids="cinder.db.api.volume_type_qos_associations_get" module="cinder.db.api" names="cinder.db.api.volume_type_qos_associations_get"><desc_name xml:space="preserve">volume_type_qos_associations_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">qos_specs_id</desc_parameter><desc_parameter xml:space="preserve">inactive=False</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get volume types that are associated with specific qos specs.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_type_qos_disassociate()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_type_qos_disassociate',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_type_qos_disassociate" ids="cinder.db.api.volume_type_qos_disassociate" module="cinder.db.api" names="cinder.db.api.volume_type_qos_disassociate"><desc_name xml:space="preserve">volume_type_qos_disassociate</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">qos_specs_id</desc_parameter><desc_parameter xml:space="preserve">type_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Disassociate a volume type from specific qos specs.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_type_qos_disassociate_all()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_type_qos_disassociate_all',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_type_qos_disassociate_all" ids="cinder.db.api.volume_type_qos_disassociate_all" module="cinder.db.api" names="cinder.db.api.volume_type_qos_disassociate_all"><desc_name xml:space="preserve">volume_type_qos_disassociate_all</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">qos_specs_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Disassociate all volume types from specific qos specs.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_type_qos_specs_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_type_qos_specs_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_type_qos_specs_get" ids="cinder.db.api.volume_type_qos_specs_get" module="cinder.db.api" names="cinder.db.api.volume_type_qos_specs_get"><desc_name xml:space="preserve">volume_type_qos_specs_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">type_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all qos specs for given volume type.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_type_update()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_type_update',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_type_update" ids="cinder.db.api.volume_type_update" module="cinder.db.api" names="cinder.db.api.volume_type_update"><desc_name xml:space="preserve">volume_type_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_type_id</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_types_get_by_name_or_id()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_types_get_by_name_or_id',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_types_get_by_name_or_id" ids="cinder.db.api.volume_types_get_by_name_or_id" module="cinder.db.api" names="cinder.db.api.volume_types_get_by_name_or_id"><desc_name xml:space="preserve">volume_types_get_by_name_or_id</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_type_list</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get volume types by name or id.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_update()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_update',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_update" ids="cinder.db.api.volume_update" module="cinder.db.api" names="cinder.db.api.volume_update"><desc_name xml:space="preserve">volume_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">values</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Set the given properties on a volume and update it.</paragraph>
                <paragraph>Raises NotFound if volume does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volume_update_status_based_on_attachment()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volume_update_status_based_on_attachment',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volume_update_status_based_on_attachment" ids="cinder.db.api.volume_update_status_based_on_attachment" module="cinder.db.api" names="cinder.db.api.volume_update_status_based_on_attachment"><desc_name xml:space="preserve">volume_update_status_based_on_attachment</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Update volume status according to attached instance id</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'volumes_update()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.volumes_update',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="volumes_update" ids="cinder.db.api.volumes_update" module="cinder.db.api" names="cinder.db.api.volumes_update"><desc_name xml:space="preserve">volumes_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">values_list</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Set the given properties on a list of volumes and update them.</paragraph>
                <paragraph>Raises NotFound if a volume does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'worker_claim_for_cleanup()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.worker_claim_for_cleanup',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="worker_claim_for_cleanup" ids="cinder.db.api.worker_claim_for_cleanup" module="cinder.db.api" names="cinder.db.api.worker_claim_for_cleanup"><desc_name xml:space="preserve">worker_claim_for_cleanup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">claimer_id</desc_parameter><desc_parameter xml:space="preserve">orm_worker</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Soft delete a worker, change the service_id and update the worker.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'worker_create()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.worker_create',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="worker_create" ids="cinder.db.api.worker_create" module="cinder.db.api" names="cinder.db.api.worker_create"><desc_name xml:space="preserve">worker_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">**values</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Create a worker entry from optional arguments.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'worker_destroy()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.worker_destroy',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="worker_destroy" ids="cinder.db.api.worker_destroy" module="cinder.db.api" names="cinder.db.api.worker_destroy"><desc_name xml:space="preserve">worker_destroy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">**filters</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Delete a worker (no soft delete).</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'worker_get()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.worker_get',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="worker_get" ids="cinder.db.api.worker_get" module="cinder.db.api" names="cinder.db.api.worker_get"><desc_name xml:space="preserve">worker_get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">**filters</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get a worker or raise exception if it does not exist.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'worker_get_all()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.worker_get_all',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="worker_get_all" ids="cinder.db.api.worker_get_all" module="cinder.db.api" names="cinder.db.api.worker_get_all"><desc_name xml:space="preserve">worker_get_all</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">until=None</desc_parameter><desc_parameter xml:space="preserve">db_filters=None</desc_parameter><desc_parameter xml:space="preserve">**filters</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Get all workers that match given criteria.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'worker_update()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.worker_update',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="worker_update" ids="cinder.db.api.worker_update" module="cinder.db.api" names="cinder.db.api.worker_update"><desc_name xml:space="preserve">worker_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">id</desc_parameter><desc_parameter xml:space="preserve">filters=None</desc_parameter><desc_parameter xml:space="preserve">orm_worker=None</desc_parameter><desc_parameter xml:space="preserve">**values</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Update a worker with given values.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'workers_init()\ (in\ module\ cinder.db.api)',\ 'cinder.db.api.workers_init',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="workers_init" ids="cinder.db.api.workers_init" module="cinder.db.api" names="cinder.db.api.workers_init"><desc_name xml:space="preserve">workers_init</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Check if DB supports subsecond resolution and set global flag.</paragraph>
                <paragraph>MySQL 5.5 doesn’t support subsecond resolution in datetime fields, so we
                    have to take it into account when working with the worker’s table.</paragraph>
                <paragraph>Once we drop support for MySQL 5.5 we can remove this method.</paragraph>
            </desc_content>
        </desc>
    </section>
</document>
