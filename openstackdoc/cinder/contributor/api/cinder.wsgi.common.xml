<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api/cinder.wsgi.common.rst">
    <section ids="module-cinder.wsgi.common the-cinder-wsgi-common-module" names="the\ cinder.wsgi.common\ module">
        <title>The <reference internal="True" refid="module-cinder.wsgi.common" reftitle="cinder.wsgi.common"><literal classes="xref py py-mod">cinder.wsgi.common</literal></reference> Module</title>
        <index entries="['single',\ 'cinder.wsgi.common\ (module)',\ 'module-cinder.wsgi.common',\ '',\ None]"></index>
        <paragraph>Utility methods for working with WSGI servers.</paragraph>
        <index entries="['single',\ 'Application\ (class\ in\ cinder.wsgi.common)',\ 'cinder.wsgi.common.Application',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="Application" ids="cinder.wsgi.common.Application" module="cinder.wsgi.common" names="cinder.wsgi.common.Application"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">Application</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                <paragraph>Base WSGI application wrapper. Subclasses need to implement __call__.</paragraph>
                <index entries="['single',\ 'factory()\ (cinder.wsgi.common.Application\ class\ method)',\ 'cinder.wsgi.common.Application.factory',\ '',\ None]"></index>
                <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                    <desc_signature class="Application" first="False" fullname="Application.factory" ids="cinder.wsgi.common.Application.factory" module="cinder.wsgi.common" names="cinder.wsgi.common.Application.factory"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">factory</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">global_config</desc_parameter><desc_parameter xml:space="preserve">**local_config</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Used for paste app factories in paste.deploy config files.</paragraph>
                        <paragraph>Any local configuration (that is, values under the [app:APPNAME]
                            section of the paste config) will be passed into the <title_reference>__init__</title_reference> method
                            as kwargs.</paragraph>
                        <paragraph>A hypothetical configuration would look like:</paragraph>
                        <block_quote>
                            <paragraph>[app:wadl]
                                latest_version = 1.3
                                paste.app_factory = cinder.api.fancy_api:Wadl.factory</paragraph>
                        </block_quote>
                        <paragraph>which would result in a call to the <title_reference>Wadl</title_reference> class as</paragraph>
                        <block_quote>
                            <paragraph>import cinder.api.fancy_api
                                fancy_api.Wadl(latest_version=‘1.3’)</paragraph>
                        </block_quote>
                        <paragraph>You could of course re-implement the <title_reference>factory</title_reference> method in subclasses,
                            but using the kwarg passing it shouldn’t be necessary.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'Middleware\ (class\ in\ cinder.wsgi.common)',\ 'cinder.wsgi.common.Middleware',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="Middleware" ids="cinder.wsgi.common.Middleware" module="cinder.wsgi.common" names="cinder.wsgi.common.Middleware"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">Middleware</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">application</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" refid="cinder.wsgi.common.Application" reftitle="cinder.wsgi.common.Application"><literal classes="xref py py-class">cinder.wsgi.common.Application</literal></reference></paragraph>
                <paragraph>Base WSGI middleware.</paragraph>
                <paragraph>These classes require an application to be
                    initialized that will be called next.  By default the middleware will
                    simply call its wrapped app, or you can override __call__ to customize its
                    behavior.</paragraph>
                <index entries="['single',\ 'factory()\ (cinder.wsgi.common.Middleware\ class\ method)',\ 'cinder.wsgi.common.Middleware.factory',\ '',\ None]"></index>
                <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                    <desc_signature class="Middleware" first="False" fullname="Middleware.factory" ids="cinder.wsgi.common.Middleware.factory" module="cinder.wsgi.common" names="cinder.wsgi.common.Middleware.factory"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">factory</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">global_config</desc_parameter><desc_parameter xml:space="preserve">**local_config</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Used for paste app factories in paste.deploy config files.</paragraph>
                        <paragraph>Any local configuration (that is, values under the [filter:APPNAME]
                            section of the paste config) will be passed into the <title_reference>__init__</title_reference> method
                            as kwargs.</paragraph>
                        <paragraph>A hypothetical configuration would look like:</paragraph>
                        <block_quote>
                            <paragraph>[filter:analytics]
                                redis_host = 127.0.0.1
                                paste.filter_factory = cinder.api.analytics:Analytics.factory</paragraph>
                        </block_quote>
                        <paragraph>which would result in a call to the <title_reference>Analytics</title_reference> class as</paragraph>
                        <block_quote>
                            <paragraph>import cinder.api.analytics
                                analytics.Analytics(app_from_paste, redis_host=‘127.0.0.1’)</paragraph>
                        </block_quote>
                        <paragraph>You could of course re-implement the <title_reference>factory</title_reference> method in subclasses,
                            but using the kwarg passing it shouldn’t be necessary.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'process_request()\ (Middleware\ method)',\ 'cinder.wsgi.common.Middleware.process_request',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Middleware" first="False" fullname="Middleware.process_request" ids="cinder.wsgi.common.Middleware.process_request" module="cinder.wsgi.common" names="cinder.wsgi.common.Middleware.process_request"><desc_name xml:space="preserve">process_request</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Called on each request.</paragraph>
                        <paragraph>If this returns None, the next application down the stack will be
                            executed. If it returns a response then that response will be returned
                            and execution will stop here.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'process_response()\ (Middleware\ method)',\ 'cinder.wsgi.common.Middleware.process_response',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Middleware" first="False" fullname="Middleware.process_response" ids="cinder.wsgi.common.Middleware.process_response" module="cinder.wsgi.common" names="cinder.wsgi.common.Middleware.process_response"><desc_name xml:space="preserve">process_response</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">response</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Do whatever you’d like to the response.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'Request\ (class\ in\ cinder.wsgi.common)',\ 'cinder.wsgi.common.Request',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="Request" ids="cinder.wsgi.common.Request" module="cinder.wsgi.common" names="cinder.wsgi.common.Request"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">Request</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">environ</desc_parameter><desc_parameter xml:space="preserve">charset=None</desc_parameter><desc_parameter xml:space="preserve">unicode_errors=None</desc_parameter><desc_parameter xml:space="preserve">decode_param_names=None</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">webob.request.Request</literal></paragraph>
            </desc_content>
        </desc>
    </section>
</document>
