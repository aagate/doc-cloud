<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api/cinder.manager.rst">
    <section ids="module-cinder.manager the-cinder-manager-module" names="the\ cinder.manager\ module">
        <title>The <reference internal="True" refid="module-cinder.manager" reftitle="cinder.manager"><literal classes="xref py py-mod">cinder.manager</literal></reference> Module</title>
        <index entries="['single',\ 'cinder.manager\ (module)',\ 'module-cinder.manager',\ '',\ None]"></index>
        <paragraph>Base Manager class.</paragraph>
        <paragraph>Managers are responsible for a certain aspect of the system.  It is a logical
            grouping of code relating to a portion of the system.  In general other
            components should be using the manager to make changes to the components that
            it is responsible for.</paragraph>
        <paragraph>For example, other components that need to deal with volumes in some way,
            should do so by calling methods on the VolumeManager instead of directly
            changing fields in the database.  This allows us to keep all of the code
            relating to volumes in the same place.</paragraph>
        <paragraph>We have adopted a basic strategy of Smart managers and dumb data, which means
            rather than attaching methods to data objects, components should call manager
            methods that act on the data.</paragraph>
        <paragraph>Methods on managers that can be executed locally should be called directly. If
            a particular method must execute on a remote host, this should be done via rpc
            to the service that wraps the manager</paragraph>
        <paragraph>Managers should be responsible for most of the db access, and
            non-implementation specific data.  Anything implementation specific that can’t
            be generalized should be done by the Driver.</paragraph>
        <paragraph>In general, we prefer to have one manager with multiple drivers for different
            implementations, but sometimes it makes sense to have multiple managers.  You
            can think of it this way: Abstract different overall strategies at the manager
            level(FlatNetwork vs VlanNetwork), and different implementations at the driver
            level(LinuxNetDriver vs CiscoNetDriver).</paragraph>
        <paragraph>Managers will often provide methods for initial setup of a host or periodic
            tasks to a wrapping service.</paragraph>
        <paragraph>This module provides Manager, a base class for managers.</paragraph>
        <index entries="['single',\ 'CleanableManager\ (class\ in\ cinder.manager)',\ 'cinder.manager.CleanableManager',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="CleanableManager" ids="cinder.manager.CleanableManager" module="cinder.manager" names="cinder.manager.CleanableManager"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">CleanableManager</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                <index entries="['single',\ 'do_cleanup()\ (CleanableManager\ method)',\ 'cinder.manager.CleanableManager.do_cleanup',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CleanableManager" first="False" fullname="CleanableManager.do_cleanup" ids="cinder.manager.CleanableManager.do_cleanup" module="cinder.manager" names="cinder.manager.CleanableManager.do_cleanup"><desc_name xml:space="preserve">do_cleanup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">cleanup_request</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'init_host()\ (CleanableManager\ method)',\ 'cinder.manager.CleanableManager.init_host',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CleanableManager" first="False" fullname="CleanableManager.init_host" ids="cinder.manager.CleanableManager.init_host" module="cinder.manager" names="cinder.manager.CleanableManager.init_host"><desc_name xml:space="preserve">init_host</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">service_id</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'Manager\ (class\ in\ cinder.manager)',\ 'cinder.manager.Manager',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="Manager" ids="cinder.manager.Manager" module="cinder.manager" names="cinder.manager.Manager"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">Manager</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">host=None</desc_parameter><desc_parameter xml:space="preserve">db_driver=None</desc_parameter><desc_parameter xml:space="preserve">cluster=None</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" reftitle="cinder.db.base.Base" refuri="cinder.db.base#cinder.db.base.Base"><literal classes="xref py py-class">cinder.db.base.Base</literal></reference>, <reference internal="True" refid="cinder.manager.PeriodicTasks" reftitle="cinder.manager.PeriodicTasks"><literal classes="xref py py-class">cinder.manager.PeriodicTasks</literal></reference></paragraph>
                <index entries="['single',\ 'RPC_API_VERSION\ (Manager\ attribute)',\ 'cinder.manager.Manager.RPC_API_VERSION',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Manager" first="False" fullname="Manager.RPC_API_VERSION" ids="cinder.manager.Manager.RPC_API_VERSION" module="cinder.manager" names="cinder.manager.Manager.RPC_API_VERSION"><desc_name xml:space="preserve">RPC_API_VERSION</desc_name><desc_annotation xml:space="preserve"> = '1.0'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_log_levels()\ (Manager\ method)',\ 'cinder.manager.Manager.get_log_levels',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Manager" first="False" fullname="Manager.get_log_levels" ids="cinder.manager.Manager.get_log_levels" module="cinder.manager" names="cinder.manager.Manager.get_log_levels"><desc_name xml:space="preserve">get_log_levels</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">log_request</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'init_host()\ (Manager\ method)',\ 'cinder.manager.Manager.init_host',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Manager" first="False" fullname="Manager.init_host" ids="cinder.manager.Manager.init_host" module="cinder.manager" names="cinder.manager.Manager.init_host"><desc_name xml:space="preserve">init_host</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">service_id=None</desc_parameter><desc_parameter xml:space="preserve">added_to_cluster=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Handle initialization if this is a standalone service.</paragraph>
                        <paragraph>A hook point for services to execute tasks before the services are made
                            available (i.e. showing up on RPC and starting to accept RPC calls) to
                            other components.  Child classes should override this method.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">service_id</literal_strong> – ID of the service where the manager is running.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">added_to_cluster</literal_strong> – True when a host’s cluster configuration has
                                                changed from not being defined or being ‘’ to
                                                any other value and the DB service record
                                                reflects this new value.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'init_host_with_rpc()\ (Manager\ method)',\ 'cinder.manager.Manager.init_host_with_rpc',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Manager" first="False" fullname="Manager.init_host_with_rpc" ids="cinder.manager.Manager.init_host_with_rpc" module="cinder.manager" names="cinder.manager.Manager.init_host_with_rpc"><desc_name xml:space="preserve">init_host_with_rpc</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>A hook for service to do jobs after RPC is ready.</paragraph>
                        <paragraph>Like init_host(), this method is a hook where services get a chance
                            to execute tasks that <emphasis>need</emphasis> RPC. Child classes should override
                            this method.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'is_working()\ (Manager\ method)',\ 'cinder.manager.Manager.is_working',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Manager" first="False" fullname="Manager.is_working" ids="cinder.manager.Manager.is_working" module="cinder.manager" names="cinder.manager.Manager.is_working"><desc_name xml:space="preserve">is_working</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Method indicating if service is working correctly.</paragraph>
                        <paragraph>This method is supposed to be overridden by subclasses and return if
                            manager is working correctly.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'reset()\ (Manager\ method)',\ 'cinder.manager.Manager.reset',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Manager" first="False" fullname="Manager.reset" ids="cinder.manager.Manager.reset" module="cinder.manager" names="cinder.manager.Manager.reset"><desc_name xml:space="preserve">reset</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Method executed when SIGHUP is caught by the process.</paragraph>
                        <paragraph>We’re utilizing it to reset RPC API version pins to avoid restart of
                            the service when rolling upgrade is completed.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'service_topic_queue\ (Manager\ attribute)',\ 'cinder.manager.Manager.service_topic_queue',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Manager" first="False" fullname="Manager.service_topic_queue" ids="cinder.manager.Manager.service_topic_queue" module="cinder.manager" names="cinder.manager.Manager.service_topic_queue"><desc_name xml:space="preserve">service_topic_queue</desc_name></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'set_log_levels()\ (Manager\ method)',\ 'cinder.manager.Manager.set_log_levels',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Manager" first="False" fullname="Manager.set_log_levels" ids="cinder.manager.Manager.set_log_levels" module="cinder.manager" names="cinder.manager.Manager.set_log_levels"><desc_name xml:space="preserve">set_log_levels</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">log_request</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'target\ (Manager\ attribute)',\ 'cinder.manager.Manager.target',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Manager" first="False" fullname="Manager.target" ids="cinder.manager.Manager.target" module="cinder.manager" names="cinder.manager.Manager.target"><desc_name xml:space="preserve">target</desc_name><desc_annotation xml:space="preserve"> = &lt;Target version=1.0&gt;</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'PeriodicTasks\ (class\ in\ cinder.manager)',\ 'cinder.manager.PeriodicTasks',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="PeriodicTasks" ids="cinder.manager.PeriodicTasks" module="cinder.manager" names="cinder.manager.PeriodicTasks"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">PeriodicTasks</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">oslo_service.periodic_task.PeriodicTasks</literal></paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'SchedulerDependentManager\ (class\ in\ cinder.manager)',\ 'cinder.manager.SchedulerDependentManager',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="SchedulerDependentManager" ids="cinder.manager.SchedulerDependentManager" module="cinder.manager" names="cinder.manager.SchedulerDependentManager"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">SchedulerDependentManager</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">host=None</desc_parameter><desc_parameter xml:space="preserve">db_driver=None</desc_parameter><desc_parameter xml:space="preserve">service_name='undefined'</desc_parameter><desc_parameter xml:space="preserve">cluster=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" refid="cinder.manager.ThreadPoolManager" reftitle="cinder.manager.ThreadPoolManager"><literal classes="xref py py-class">cinder.manager.ThreadPoolManager</literal></reference></paragraph>
                <paragraph>Periodically send capability updates to the Scheduler services.</paragraph>
                <paragraph>Services that need to update the Scheduler of their capabilities
                    should derive from this class. Otherwise they can derive from
                    manager.Manager directly. Updates are only sent after
                    update_service_capabilities is called with non-None values.</paragraph>
                <index entries="['single',\ 'reset()\ (SchedulerDependentManager\ method)',\ 'cinder.manager.SchedulerDependentManager.reset',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SchedulerDependentManager" first="False" fullname="SchedulerDependentManager.reset" ids="cinder.manager.SchedulerDependentManager.reset" module="cinder.manager" names="cinder.manager.SchedulerDependentManager.reset"><desc_name xml:space="preserve">reset</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'update_service_capabilities()\ (SchedulerDependentManager\ method)',\ 'cinder.manager.SchedulerDependentManager.update_service_capabilities',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SchedulerDependentManager" first="False" fullname="SchedulerDependentManager.update_service_capabilities" ids="cinder.manager.SchedulerDependentManager.update_service_capabilities" module="cinder.manager" names="cinder.manager.SchedulerDependentManager.update_service_capabilities"><desc_name xml:space="preserve">update_service_capabilities</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">capabilities</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Remember these capabilities to send on next periodic update.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'ThreadPoolManager\ (class\ in\ cinder.manager)',\ 'cinder.manager.ThreadPoolManager',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="ThreadPoolManager" ids="cinder.manager.ThreadPoolManager" module="cinder.manager" names="cinder.manager.ThreadPoolManager"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">ThreadPoolManager</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" refid="cinder.manager.Manager" reftitle="cinder.manager.Manager"><literal classes="xref py py-class">cinder.manager.Manager</literal></reference></paragraph>
            </desc_content>
        </desc>
    </section>
</document>
