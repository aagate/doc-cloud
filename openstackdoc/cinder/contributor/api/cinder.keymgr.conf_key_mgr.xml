<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api/cinder.keymgr.conf_key_mgr.rst">
    <section ids="module-cinder.keymgr.conf_key_mgr the-cinder-keymgr-conf-key-mgr-module" names="the\ cinder.keymgr.conf_key_mgr\ module">
        <title>The <reference internal="True" refid="module-cinder.keymgr.conf_key_mgr" reftitle="cinder.keymgr.conf_key_mgr"><literal classes="xref py py-mod">cinder.keymgr.conf_key_mgr</literal></reference> Module</title>
        <index entries="['single',\ 'cinder.keymgr.conf_key_mgr\ (module)',\ 'module-cinder.keymgr.conf_key_mgr',\ '',\ None]"></index>
        <paragraph>An implementation of a key manager that reads its key from the projectâ€™s
            configuration options.</paragraph>
        <paragraph>This key manager implementation provides limited security, assuming that the
            key remains secret. Using the volume encryption feature as an example,
            encryption provides protection against a lost or stolen disk, assuming that
            the configuration file that contains the key is not stored on the disk.
            Encryption also protects the confidentiality of data as it is transmitted via
            iSCSI from the compute host to the storage host (again assuming that an
            attacker who intercepts the data does not know the secret key).</paragraph>
        <paragraph>Because this implementation uses a single, fixed key, it proffers no
            protection once that key is compromised. In particular, different volumes
            encrypted with a key provided by this key manager actually share the same
            encryption key so <emphasis>any</emphasis> volume can be decrypted once the fixed key is known.</paragraph>
        <index entries="['single',\ 'ConfKeyManager\ (class\ in\ cinder.keymgr.conf_key_mgr)',\ 'cinder.keymgr.conf_key_mgr.ConfKeyManager',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="ConfKeyManager" ids="cinder.keymgr.conf_key_mgr.ConfKeyManager" module="cinder.keymgr.conf_key_mgr" names="cinder.keymgr.conf_key_mgr.ConfKeyManager"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">ConfKeyManager</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">configuration</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">castellan.key_manager.key_manager.KeyManager</literal></paragraph>
                <paragraph>Key Manager that supports one key defined by the fixed_key conf option.</paragraph>
                <paragraph>This key manager implementation supports all the methods specified by the
                    key manager interface. This implementation creates a single key in response
                    to all invocations of create_key. Side effects (e.g., raising exceptions)
                    for each method are handled as specified by the key manager interface.</paragraph>
                <index entries="['single',\ 'create_key()\ (ConfKeyManager\ method)',\ 'cinder.keymgr.conf_key_mgr.ConfKeyManager.create_key',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ConfKeyManager" first="False" fullname="ConfKeyManager.create_key" ids="cinder.keymgr.conf_key_mgr.ConfKeyManager.create_key" module="cinder.keymgr.conf_key_mgr" names="cinder.keymgr.conf_key_mgr.ConfKeyManager.create_key"><desc_name xml:space="preserve">create_key</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a symmetric key.</paragraph>
                        <paragraph>This implementation returns a UUID for the key read from the
                            configuration file. A NotAuthorized exception is raised if the
                            specified context is None.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_key_pair()\ (ConfKeyManager\ method)',\ 'cinder.keymgr.conf_key_mgr.ConfKeyManager.create_key_pair',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ConfKeyManager" first="False" fullname="ConfKeyManager.create_key_pair" ids="cinder.keymgr.conf_key_mgr.ConfKeyManager.create_key_pair" module="cinder.keymgr.conf_key_mgr" names="cinder.keymgr.conf_key_mgr.ConfKeyManager.create_key_pair"><desc_name xml:space="preserve">create_key_pair</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete()\ (ConfKeyManager\ method)',\ 'cinder.keymgr.conf_key_mgr.ConfKeyManager.delete',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ConfKeyManager" first="False" fullname="ConfKeyManager.delete" ids="cinder.keymgr.conf_key_mgr.ConfKeyManager.delete" module="cinder.keymgr.conf_key_mgr" names="cinder.keymgr.conf_key_mgr.ConfKeyManager.delete"><desc_name xml:space="preserve">delete</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">managed_object_id</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Represents deleting the key.</paragraph>
                        <paragraph>Because the ConfKeyManager has only one key, which is read from the
                            configuration file, the key is not actually deleted when this is
                            called.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get()\ (ConfKeyManager\ method)',\ 'cinder.keymgr.conf_key_mgr.ConfKeyManager.get',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ConfKeyManager" first="False" fullname="ConfKeyManager.get" ids="cinder.keymgr.conf_key_mgr.ConfKeyManager.get" module="cinder.keymgr.conf_key_mgr" names="cinder.keymgr.conf_key_mgr.ConfKeyManager.get"><desc_name xml:space="preserve">get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">managed_object_id</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Retrieves the key identified by the specified id.</paragraph>
                        <paragraph>This implementation returns the key that is associated with the
                            specified UUID. A NotAuthorized exception is raised if the specified
                            context is None; a KeyError is raised if the UUID is invalid.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'store()\ (ConfKeyManager\ method)',\ 'cinder.keymgr.conf_key_mgr.ConfKeyManager.store',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ConfKeyManager" first="False" fullname="ConfKeyManager.store" ids="cinder.keymgr.conf_key_mgr.ConfKeyManager.store" module="cinder.keymgr.conf_key_mgr" names="cinder.keymgr.conf_key_mgr.ConfKeyManager.store"><desc_name xml:space="preserve">store</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">managed_object</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Stores (i.e., registers) a key with the key manager.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'warning_logged\ (ConfKeyManager\ attribute)',\ 'cinder.keymgr.conf_key_mgr.ConfKeyManager.warning_logged',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ConfKeyManager" first="False" fullname="ConfKeyManager.warning_logged" ids="cinder.keymgr.conf_key_mgr.ConfKeyManager.warning_logged" module="cinder.keymgr.conf_key_mgr" names="cinder.keymgr.conf_key_mgr.ConfKeyManager.warning_logged"><desc_name xml:space="preserve">warning_logged</desc_name><desc_annotation xml:space="preserve"> = False</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
    </section>
</document>
