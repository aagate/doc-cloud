<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api/cinder.volume.drivers.zfssa.zfssanfs.rst">
    <section ids="module-cinder.volume.drivers.zfssa.zfssanfs the-cinder-volume-drivers-zfssa-zfssanfs-module" names="the\ cinder.volume.drivers.zfssa.zfssanfs\ module">
        <title>The <reference internal="True" refid="module-cinder.volume.drivers.zfssa.zfssanfs" reftitle="cinder.volume.drivers.zfssa.zfssanfs"><literal classes="xref py py-mod">cinder.volume.drivers.zfssa.zfssanfs</literal></reference> Module</title>
        <index entries="['single',\ 'cinder.volume.drivers.zfssa.zfssanfs\ (module)',\ 'module-cinder.volume.drivers.zfssa.zfssanfs',\ '',\ None]"></index>
        <paragraph>ZFS Storage Appliance NFS Cinder Volume Driver</paragraph>
        <index entries="['single',\ 'ZFSSANFSDriver\ (class\ in\ cinder.volume.drivers.zfssa.zfssanfs)',\ 'cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="ZFSSANFSDriver" ids="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver" module="cinder.volume.drivers.zfssa.zfssanfs" names="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">ZFSSANFSDriver</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" reftitle="cinder.volume.drivers.nfs.NfsDriver" refuri="cinder.volume.drivers.nfs#cinder.volume.drivers.nfs.NfsDriver"><literal classes="xref py py-class">cinder.volume.drivers.nfs.NfsDriver</literal></reference></paragraph>
                <paragraph>ZFSSA Cinder NFS volume driver.</paragraph>
                <paragraph>Version history:</paragraph>
                <literal_block highlight_args="{}" language="none" linenos="False" xml:space="preserve">1.0.1:
    Backend enabled volume migration.
    Local cache feature.
1.0.2:
    Volume manage/unmanage support.</literal_block>
                <index entries="['single',\ 'CI_WIKI_NAME\ (ZFSSANFSDriver\ attribute)',\ 'cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.CI_WIKI_NAME',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ZFSSANFSDriver" first="False" fullname="ZFSSANFSDriver.CI_WIKI_NAME" ids="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.CI_WIKI_NAME" module="cinder.volume.drivers.zfssa.zfssanfs" names="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.CI_WIKI_NAME"><desc_name xml:space="preserve">CI_WIKI_NAME</desc_name><desc_annotation xml:space="preserve"> = 'Oracle_ZFSSA_CI'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'VERSION\ (ZFSSANFSDriver\ attribute)',\ 'cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.VERSION',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ZFSSANFSDriver" first="False" fullname="ZFSSANFSDriver.VERSION" ids="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.VERSION" module="cinder.volume.drivers.zfssa.zfssanfs" names="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.VERSION"><desc_name xml:space="preserve">VERSION</desc_name><desc_annotation xml:space="preserve"> = '1.0.2'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'check_for_setup_error()\ (ZFSSANFSDriver\ method)',\ 'cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.check_for_setup_error',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ZFSSANFSDriver" first="False" fullname="ZFSSANFSDriver.check_for_setup_error" ids="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.check_for_setup_error" module="cinder.volume.drivers.zfssa.zfssanfs" names="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.check_for_setup_error"><desc_name xml:space="preserve">check_for_setup_error</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Check that driver can login.</paragraph>
                        <paragraph>Check also for properly configured pool, project and share
                            Check that the http and nfs services are enabled</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'clone_image()\ (ZFSSANFSDriver\ method)',\ 'cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.clone_image',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ZFSSANFSDriver" first="False" fullname="ZFSSANFSDriver.clone_image" ids="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.clone_image" module="cinder.volume.drivers.zfssa.zfssanfs" names="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.clone_image"><desc_name xml:space="preserve">clone_image</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">image_location</desc_parameter><desc_parameter xml:space="preserve">image_meta</desc_parameter><desc_parameter xml:space="preserve">image_service</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Create a volume efficiently from an existing image.</paragraph>
                        <paragraph>Verify the image ID being used:</paragraph>
                        <paragraph>(1) If there is no existing cache volume, create one and transfer
                            image data to it. Take a snapshot.</paragraph>
                        <paragraph>(2) If a cache volume already exists, verify if it is either alternated
                            or updated. If so try to remove it, raise exception if removal fails.
                            Create a new cache volume as in (1).</paragraph>
                        <paragraph>Clone a volume from the cache volume and returns it to Cinder.</paragraph>
                        <paragraph>A file lock is placed on this method to prevent:
                            (a) a race condition when a cache volume has been verified, but then
                            gets deleted before it is cloned.</paragraph>
                        <paragraph>(b) failure of subsequent clone_image requests if the first request is
                            still pending.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_cloned_volume()\ (ZFSSANFSDriver\ method)',\ 'cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.create_cloned_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ZFSSANFSDriver" first="False" fullname="ZFSSANFSDriver.create_cloned_volume" ids="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.create_cloned_volume" module="cinder.volume.drivers.zfssa.zfssanfs" names="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.create_cloned_volume"><desc_name xml:space="preserve">create_cloned_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">src_vref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a snapshot and then clones the snapshot into a volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_snapshot()\ (ZFSSANFSDriver\ method)',\ 'cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.create_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ZFSSANFSDriver" first="False" fullname="ZFSSANFSDriver.create_snapshot" ids="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.create_snapshot" module="cinder.volume.drivers.zfssa.zfssanfs" names="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.create_snapshot"><desc_name xml:space="preserve">create_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a snapshot of a volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_volume()\ (ZFSSANFSDriver\ method)',\ 'cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.create_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ZFSSANFSDriver" first="False" fullname="ZFSSANFSDriver.create_volume" ids="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.create_volume" module="cinder.volume.drivers.zfssa.zfssanfs" names="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.create_volume"><desc_name xml:space="preserve">create_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_volume_from_snapshot()\ (ZFSSANFSDriver\ method)',\ 'cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.create_volume_from_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ZFSSANFSDriver" first="False" fullname="ZFSSANFSDriver.create_volume_from_snapshot" ids="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.create_volume_from_snapshot" module="cinder.volume.drivers.zfssa.zfssanfs" names="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.create_volume_from_snapshot"><desc_name xml:space="preserve">create_volume_from_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">method='COPY'</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_snapshot()\ (ZFSSANFSDriver\ method)',\ 'cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.delete_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ZFSSANFSDriver" first="False" fullname="ZFSSANFSDriver.delete_snapshot" ids="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.delete_snapshot" module="cinder.volume.drivers.zfssa.zfssanfs" names="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.delete_snapshot"><desc_name xml:space="preserve">delete_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Deletes a snapshot.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_volume()\ (ZFSSANFSDriver\ method)',\ 'cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.delete_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ZFSSANFSDriver" first="False" fullname="ZFSSANFSDriver.delete_volume" ids="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.delete_volume" module="cinder.volume.drivers.zfssa.zfssanfs" names="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.delete_volume"><desc_name xml:space="preserve">delete_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'do_setup()\ (ZFSSANFSDriver\ method)',\ 'cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.do_setup',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ZFSSANFSDriver" first="False" fullname="ZFSSANFSDriver.do_setup" ids="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.do_setup" module="cinder.volume.drivers.zfssa.zfssanfs" names="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.do_setup"><desc_name xml:space="preserve">do_setup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'driver_prefix\ (ZFSSANFSDriver\ attribute)',\ 'cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.driver_prefix',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ZFSSANFSDriver" first="False" fullname="ZFSSANFSDriver.driver_prefix" ids="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.driver_prefix" module="cinder.volume.drivers.zfssa.zfssanfs" names="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.driver_prefix"><desc_name xml:space="preserve">driver_prefix</desc_name><desc_annotation xml:space="preserve"> = 'nfs'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'driver_volume_type\ (ZFSSANFSDriver\ attribute)',\ 'cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.driver_volume_type',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ZFSSANFSDriver" first="False" fullname="ZFSSANFSDriver.driver_volume_type" ids="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.driver_volume_type" module="cinder.volume.drivers.zfssa.zfssanfs" names="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.driver_volume_type"><desc_name xml:space="preserve">driver_volume_type</desc_name><desc_annotation xml:space="preserve"> = 'nfs'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing()\ (ZFSSANFSDriver\ method)',\ 'cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.manage_existing',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ZFSSANFSDriver" first="False" fullname="ZFSSANFSDriver.manage_existing" ids="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.manage_existing" module="cinder.volume.drivers.zfssa.zfssanfs" names="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.manage_existing"><desc_name xml:space="preserve">manage_existing</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Manage an existing volume in the ZFSSA backend.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – Reference to the new volume.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">existing_ref</literal_strong> – Reference to the existing volume to be managed.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing_get_size()\ (ZFSSANFSDriver\ method)',\ 'cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.manage_existing_get_size',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ZFSSANFSDriver" first="False" fullname="ZFSSANFSDriver.manage_existing_get_size" ids="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.manage_existing_get_size" module="cinder.volume.drivers.zfssa.zfssanfs" names="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.manage_existing_get_size"><desc_name xml:space="preserve">manage_existing_get_size</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Return size of the volume to be managed by manage_existing.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'migrate_volume()\ (ZFSSANFSDriver\ method)',\ 'cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.migrate_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ZFSSANFSDriver" first="False" fullname="ZFSSANFSDriver.migrate_volume" ids="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.migrate_volume" module="cinder.volume.drivers.zfssa.zfssanfs" names="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.migrate_volume"><desc_name xml:space="preserve">migrate_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">host</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'protocol\ (ZFSSANFSDriver\ attribute)',\ 'cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.protocol',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ZFSSANFSDriver" first="False" fullname="ZFSSANFSDriver.protocol" ids="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.protocol" module="cinder.volume.drivers.zfssa.zfssanfs" names="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.protocol"><desc_name xml:space="preserve">protocol</desc_name><desc_annotation xml:space="preserve"> = 'nfs'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'unmanage()\ (ZFSSANFSDriver\ method)',\ 'cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.unmanage',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ZFSSANFSDriver" first="False" fullname="ZFSSANFSDriver.unmanage" ids="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.unmanage" module="cinder.volume.drivers.zfssa.zfssanfs" names="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.unmanage"><desc_name xml:space="preserve">unmanage</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Remove an existing volume from cinder management.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">volume</literal_strong> – Reference to the volume to be unmanaged.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'update_migrated_volume()\ (ZFSSANFSDriver\ method)',\ 'cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.update_migrated_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ZFSSANFSDriver" first="False" fullname="ZFSSANFSDriver.update_migrated_volume" ids="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.update_migrated_volume" module="cinder.volume.drivers.zfssa.zfssanfs" names="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.update_migrated_volume"><desc_name xml:space="preserve">update_migrated_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">new_volume</desc_parameter><desc_parameter xml:space="preserve">original_volume_status</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Return model update for migrated volume.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – The original volume that was migrated to this backend</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">new_volume</literal_strong> – The migration volume object that was created on
                                                this backend as part of the migration process</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">original_volume_status</literal_strong> – The status of the original volume</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update to update DB with any needed changes</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'volume_backend_name\ (ZFSSANFSDriver\ attribute)',\ 'cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.volume_backend_name',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ZFSSANFSDriver" first="False" fullname="ZFSSANFSDriver.volume_backend_name" ids="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.volume_backend_name" module="cinder.volume.drivers.zfssa.zfssanfs" names="cinder.volume.drivers.zfssa.zfssanfs.ZFSSANFSDriver.volume_backend_name"><desc_name xml:space="preserve">volume_backend_name</desc_name><desc_annotation xml:space="preserve"> = 'ZFSSA_NFS'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'factory_zfssa()\ (in\ module\ cinder.volume.drivers.zfssa.zfssanfs)',\ 'cinder.volume.drivers.zfssa.zfssanfs.factory_zfssa',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="factory_zfssa" ids="cinder.volume.drivers.zfssa.zfssanfs.factory_zfssa" module="cinder.volume.drivers.zfssa.zfssanfs" names="cinder.volume.drivers.zfssa.zfssanfs.factory_zfssa"><desc_name xml:space="preserve">factory_zfssa</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
    </section>
</document>
