<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api/cinder.objects.base.rst">
    <section ids="module-cinder.objects.base the-cinder-objects-base-module" names="the\ cinder.objects.base\ module">
        <title>The <reference internal="True" refid="module-cinder.objects.base" reftitle="cinder.objects.base"><literal classes="xref py py-mod">cinder.objects.base</literal></reference> Module</title>
        <index entries="['single',\ 'cinder.objects.base\ (module)',\ 'module-cinder.objects.base',\ '',\ None]"></index>
        <paragraph>Cinder common internal object model</paragraph>
        <index entries="['single',\ 'CinderComparableObject\ (class\ in\ cinder.objects.base)',\ 'cinder.objects.base.CinderComparableObject',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="CinderComparableObject" ids="cinder.objects.base.CinderComparableObject" module="cinder.objects.base" names="cinder.objects.base.CinderComparableObject"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">CinderComparableObject</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">oslo_versionedobjects.base.ComparableVersionedObject</literal></paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'CinderObject\ (class\ in\ cinder.objects.base)',\ 'cinder.objects.base.CinderObject',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="CinderObject" ids="cinder.objects.base.CinderObject" module="cinder.objects.base" names="cinder.objects.base.CinderObject"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">CinderObject</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context=None</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">oslo_versionedobjects.base.VersionedObject</literal></paragraph>
                <index entries="['single',\ 'OBJ_PROJECT_NAMESPACE\ (CinderObject\ attribute)',\ 'cinder.objects.base.CinderObject.OBJ_PROJECT_NAMESPACE',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CinderObject" first="False" fullname="CinderObject.OBJ_PROJECT_NAMESPACE" ids="cinder.objects.base.CinderObject.OBJ_PROJECT_NAMESPACE" module="cinder.objects.base" names="cinder.objects.base.CinderObject.OBJ_PROJECT_NAMESPACE"><desc_name xml:space="preserve">OBJ_PROJECT_NAMESPACE</desc_name><desc_annotation xml:space="preserve"> = 'cinder'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'cinder_obj_get_changes()\ (CinderObject\ method)',\ 'cinder.objects.base.CinderObject.cinder_obj_get_changes',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CinderObject" first="False" fullname="CinderObject.cinder_obj_get_changes" ids="cinder.objects.base.CinderObject.cinder_obj_get_changes" module="cinder.objects.base" names="cinder.objects.base.CinderObject.cinder_obj_get_changes"><desc_name xml:space="preserve">cinder_obj_get_changes</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns a dict of changed fields with tz unaware datetimes.</paragraph>
                        <paragraph>Any timezone aware datetime field will be converted to UTC timezone
                            and returned as timezone unaware datetime.</paragraph>
                        <paragraph>This will allow us to pass these fields directly to a db update
                            method as they canâ€™t have timezone information.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'obj_make_compatible()\ (CinderObject\ method)',\ 'cinder.objects.base.CinderObject.obj_make_compatible',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CinderObject" first="False" fullname="CinderObject.obj_make_compatible" ids="cinder.objects.base.CinderObject.obj_make_compatible" module="cinder.objects.base" names="cinder.objects.base.CinderObject.obj_make_compatible"><desc_name xml:space="preserve">obj_make_compatible</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">primitive</desc_parameter><desc_parameter xml:space="preserve">target_version</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'CinderObjectDictCompat\ (class\ in\ cinder.objects.base)',\ 'cinder.objects.base.CinderObjectDictCompat',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="CinderObjectDictCompat" ids="cinder.objects.base.CinderObjectDictCompat" module="cinder.objects.base" names="cinder.objects.base.CinderObjectDictCompat"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">CinderObjectDictCompat</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">oslo_versionedobjects.base.VersionedObjectDictCompat</literal></paragraph>
                <paragraph>Mix-in to provide dictionary key access compat.</paragraph>
                <paragraph>If an object needs to support attribute access using
                    dictionary items instead of object attributes, inherit
                    from this class. This should only be used as a temporary
                    measure until all callers are converted to use modern
                    attribute access.</paragraph>
                <paragraph>NOTE(berrange) This class will eventually be deleted.</paragraph>
                <index entries="['single',\ 'get()\ (CinderObjectDictCompat\ method)',\ 'cinder.objects.base.CinderObjectDictCompat.get',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CinderObjectDictCompat" first="False" fullname="CinderObjectDictCompat.get" ids="cinder.objects.base.CinderObjectDictCompat.get" module="cinder.objects.base" names="cinder.objects.base.CinderObjectDictCompat.get"><desc_name xml:space="preserve">get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">key</desc_parameter><desc_parameter xml:space="preserve">value=&lt;class 'oslo_versionedobjects.base._NotSpecifiedSentinel'&gt;</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>For backwards-compatibility with dict-based objects.</paragraph>
                        <paragraph>NOTE(danms): May be removed in the future.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'CinderObjectRegistry\ (class\ in\ cinder.objects.base)',\ 'cinder.objects.base.CinderObjectRegistry',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="CinderObjectRegistry" ids="cinder.objects.base.CinderObjectRegistry" module="cinder.objects.base" names="cinder.objects.base.CinderObjectRegistry"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">CinderObjectRegistry</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">oslo_versionedobjects.base.VersionedObjectRegistry</literal></paragraph>
                <index entries="['single',\ 'registration_hook()\ (CinderObjectRegistry\ method)',\ 'cinder.objects.base.CinderObjectRegistry.registration_hook',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CinderObjectRegistry" first="False" fullname="CinderObjectRegistry.registration_hook" ids="cinder.objects.base.CinderObjectRegistry.registration_hook" module="cinder.objects.base" names="cinder.objects.base.CinderObjectRegistry.registration_hook"><desc_name xml:space="preserve">registration_hook</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">cls</desc_parameter><desc_parameter xml:space="preserve">index</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Hook called when registering a class.</paragraph>
                        <paragraph>This method takes care of adding the class to cinder.objects namespace.</paragraph>
                        <paragraph>Should registering class have a method called cinder_ovo_cls_init it
                            will be called to support class initialization.  This is convenient
                            for all persistent classes that need to register their models.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'CinderObjectSerializer\ (class\ in\ cinder.objects.base)',\ 'cinder.objects.base.CinderObjectSerializer',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="CinderObjectSerializer" ids="cinder.objects.base.CinderObjectSerializer" module="cinder.objects.base" names="cinder.objects.base.CinderObjectSerializer"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">CinderObjectSerializer</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">version_cap=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">oslo_versionedobjects.base.VersionedObjectSerializer</literal></paragraph>
                <index entries="['single',\ 'OBJ_BASE_CLASS\ (CinderObjectSerializer\ attribute)',\ 'cinder.objects.base.CinderObjectSerializer.OBJ_BASE_CLASS',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CinderObjectSerializer" first="False" fullname="CinderObjectSerializer.OBJ_BASE_CLASS" ids="cinder.objects.base.CinderObjectSerializer.OBJ_BASE_CLASS" module="cinder.objects.base" names="cinder.objects.base.CinderObjectSerializer.OBJ_BASE_CLASS"><desc_name xml:space="preserve">OBJ_BASE_CLASS</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>alias of <reference internal="True" refid="cinder.objects.base.CinderObject" reftitle="cinder.objects.base.CinderObject"><literal classes="xref py py-class">CinderObject</literal></reference></paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'serialize_entity()\ (CinderObjectSerializer\ method)',\ 'cinder.objects.base.CinderObjectSerializer.serialize_entity',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CinderObjectSerializer" first="False" fullname="CinderObjectSerializer.serialize_entity" ids="cinder.objects.base.CinderObjectSerializer.serialize_entity" module="cinder.objects.base" names="cinder.objects.base.CinderObjectSerializer.serialize_entity"><desc_name xml:space="preserve">serialize_entity</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">entity</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'CinderObjectVersionsHistory\ (class\ in\ cinder.objects.base)',\ 'cinder.objects.base.CinderObjectVersionsHistory',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="CinderObjectVersionsHistory" ids="cinder.objects.base.CinderObjectVersionsHistory" module="cinder.objects.base" names="cinder.objects.base.CinderObjectVersionsHistory"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">CinderObjectVersionsHistory</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">dict</literal></paragraph>
                <paragraph>Helper class that maintains objects version history.</paragraph>
                <paragraph>Current state of object versions is aggregated in a single version number
                    that explicitly identifies a set of object versions. That way a service
                    is able to report what objects it supports using a single string and all
                    the newer services will know exactly what that mean for a single object.</paragraph>
                <index entries="['single',\ 'add()\ (CinderObjectVersionsHistory\ method)',\ 'cinder.objects.base.CinderObjectVersionsHistory.add',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CinderObjectVersionsHistory" first="False" fullname="CinderObjectVersionsHistory.add" ids="cinder.objects.base.CinderObjectVersionsHistory.add" module="cinder.objects.base" names="cinder.objects.base.CinderObjectVersionsHistory.add"><desc_name xml:space="preserve">add</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ver</desc_parameter><desc_parameter xml:space="preserve">updates</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_current()\ (CinderObjectVersionsHistory\ method)',\ 'cinder.objects.base.CinderObjectVersionsHistory.get_current',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CinderObjectVersionsHistory" first="False" fullname="CinderObjectVersionsHistory.get_current" ids="cinder.objects.base.CinderObjectVersionsHistory.get_current" module="cinder.objects.base" names="cinder.objects.base.CinderObjectVersionsHistory.get_current"><desc_name xml:space="preserve">get_current</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_current_versions()\ (CinderObjectVersionsHistory\ method)',\ 'cinder.objects.base.CinderObjectVersionsHistory.get_current_versions',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CinderObjectVersionsHistory" first="False" fullname="CinderObjectVersionsHistory.get_current_versions" ids="cinder.objects.base.CinderObjectVersionsHistory.get_current_versions" module="cinder.objects.base" names="cinder.objects.base.CinderObjectVersionsHistory.get_current_versions"><desc_name xml:space="preserve">get_current_versions</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'CinderPersistentObject\ (class\ in\ cinder.objects.base)',\ 'cinder.objects.base.CinderPersistentObject',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="CinderPersistentObject" ids="cinder.objects.base.CinderPersistentObject" module="cinder.objects.base" names="cinder.objects.base.CinderPersistentObject"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">CinderPersistentObject</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                <paragraph>Mixin class for Persistent objects.</paragraph>
                <paragraph>This adds the fields that we use in common for all persistent objects.</paragraph>
                <index entries="['single',\ 'CinderPersistentObject.Case\ (class\ in\ cinder.objects.base)',\ 'cinder.objects.base.CinderPersistentObject.Case',\ '',\ None]"></index>
                <desc desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="CinderPersistentObject" first="False" fullname="CinderPersistentObject.Case" ids="cinder.objects.base.CinderPersistentObject.Case" module="cinder.objects.base" names="cinder.objects.base.CinderPersistentObject.Case"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">Case</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">whens</desc_parameter><desc_parameter xml:space="preserve">value=None</desc_parameter><desc_parameter xml:space="preserve">else_=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                        <paragraph>Class for conditional value selection for conditional_update.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'CinderPersistentObject.Not\ (class\ in\ cinder.objects.base)',\ 'cinder.objects.base.CinderPersistentObject.Not',\ '',\ None]"></index>
                <desc desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="CinderPersistentObject" first="False" fullname="CinderPersistentObject.Not" ids="cinder.objects.base.CinderPersistentObject.Not" module="cinder.objects.base" names="cinder.objects.base.CinderPersistentObject.Not"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">Not</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">value</desc_parameter><desc_parameter xml:space="preserve">field=None</desc_parameter><desc_parameter xml:space="preserve">auto_none=True</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Bases: <reference internal="True" reftitle="cinder.db.api.Condition" refuri="cinder.db.api#cinder.db.api.Condition"><literal classes="xref py py-class">cinder.db.api.Condition</literal></reference></paragraph>
                        <paragraph>Class for negated condition values for conditional_update.</paragraph>
                        <paragraph>By default NULL values will be treated like Python treats None instead of
                            how SQL treats it.</paragraph>
                        <paragraph>So for example when values are (1, 2) it will evaluate to True when we have
                            value 3 or NULL, instead of only with 3 like SQL does.</paragraph>
                        <index entries="['single',\ 'get_filter()\ (CinderPersistentObject.Not\ method)',\ 'cinder.objects.base.CinderPersistentObject.Not.get_filter',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="CinderPersistentObject.Not" first="False" fullname="CinderPersistentObject.Not.get_filter" ids="cinder.objects.base.CinderPersistentObject.Not.get_filter" module="cinder.objects.base" names="cinder.objects.base.CinderPersistentObject.Not.get_filter"><desc_name xml:space="preserve">get_filter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">model</desc_parameter><desc_parameter xml:space="preserve">field=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'OPTIONAL_FIELDS\ (CinderPersistentObject\ attribute)',\ 'cinder.objects.base.CinderPersistentObject.OPTIONAL_FIELDS',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CinderPersistentObject" first="False" fullname="CinderPersistentObject.OPTIONAL_FIELDS" ids="cinder.objects.base.CinderPersistentObject.OPTIONAL_FIELDS" module="cinder.objects.base" names="cinder.objects.base.CinderPersistentObject.OPTIONAL_FIELDS"><desc_name xml:space="preserve">OPTIONAL_FIELDS</desc_name><desc_annotation xml:space="preserve"> = []</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'as_read_deleted()\ (CinderPersistentObject\ method)',\ 'cinder.objects.base.CinderPersistentObject.as_read_deleted',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CinderPersistentObject" first="False" fullname="CinderPersistentObject.as_read_deleted" ids="cinder.objects.base.CinderPersistentObject.as_read_deleted" module="cinder.objects.base" names="cinder.objects.base.CinderPersistentObject.as_read_deleted"><desc_name xml:space="preserve">as_read_deleted</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">mode='yes'</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Context manager to make OVO with modified read deleted context.</paragraph>
                        <paragraph>This temporarily modifies the context embedded in an object to
                            have a different <title_reference>read_deleted</title_reference> parameter.</paragraph>
                        <paragraph>Parameter mode accepts most of the same parameters as our <title_reference>model_query</title_reference>
                            DB method.  We support â€˜yesâ€™, â€˜noâ€™, and â€˜onlyâ€™.</paragraph>
                        <paragraph>usage:</paragraph>
                        <block_quote>
                            <definition_list>
                                <definition_list_item>
                                    <term>with obj.as_read_deleted():</term>
                                    <definition>
                                        <paragraph>obj.refresh()</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>if obj.status = â€˜deletedâ€™:</term>
                                    <definition>
                                        <paragraph>â€¦</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </block_quote>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'cinder_ovo_cls_init()\ (cinder.objects.base.CinderPersistentObject\ class\ method)',\ 'cinder.objects.base.CinderPersistentObject.cinder_ovo_cls_init',\ '',\ None]"></index>
                <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                    <desc_signature class="CinderPersistentObject" first="False" fullname="CinderPersistentObject.cinder_ovo_cls_init" ids="cinder.objects.base.CinderPersistentObject.cinder_ovo_cls_init" module="cinder.objects.base" names="cinder.objects.base.CinderPersistentObject.cinder_ovo_cls_init"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">cinder_ovo_cls_init</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>This method is called on OVO registration and sets the DB model.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'conditional_update()\ (CinderPersistentObject\ method)',\ 'cinder.objects.base.CinderPersistentObject.conditional_update',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CinderPersistentObject" first="False" fullname="CinderPersistentObject.conditional_update" ids="cinder.objects.base.CinderPersistentObject.conditional_update" module="cinder.objects.base" names="cinder.objects.base.CinderPersistentObject.conditional_update"><desc_name xml:space="preserve">conditional_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">values</desc_parameter><desc_parameter xml:space="preserve">expected_values=None</desc_parameter><desc_parameter xml:space="preserve">filters=()</desc_parameter><desc_parameter xml:space="preserve">save_all=False</desc_parameter><desc_parameter xml:space="preserve">session=None</desc_parameter><desc_parameter xml:space="preserve">reflect_changes=True</desc_parameter><desc_parameter xml:space="preserve">order=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Compare-and-swap update.</paragraph>
                        <paragraph>A conditional object update that, unlike normal update, will SAVE the
                            contents of the update to the DB.</paragraph>
                        <paragraph>Update will only occur in the DB and the object if conditions are met.</paragraph>
                        <paragraph>If no expected_values are passed in we will default to make sure that
                            all fields have not been changed in the DB. Since we cannot know the
                            original value in the DB for dirty fields in the object those will be
                            excluded.</paragraph>
                        <definition_list>
                            <definition_list_item>
                                <term>We have 4 different condition types we can use in expected_values:</term>
                                <definition>
                                    <bullet_list bullet="-">
                                        <list_item>
                                            <paragraph>Equality:  {â€˜statusâ€™: â€˜availableâ€™}</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph>Inequality: {â€˜statusâ€™: vol_obj.Not(â€˜deletingâ€™)}</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph>In range: {â€˜statusâ€™: [â€˜availableâ€™, â€˜errorâ€™]</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph>Not in range: {â€˜statusâ€™: vol_obj.Not([â€˜in-useâ€™, â€˜attachingâ€™])</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </definition>
                            </definition_list_item>
                        </definition_list>
                        <paragraph>Method accepts additional filters, which are basically anything that
                            can be passed to a sqlalchemy queryâ€™s filter method, for example:</paragraph>
                        <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">[~sql.exists().where(models.Volume.id == models.Snapshot.volume_id)]</literal_block>
                        <paragraph>We can select values based on conditions using Case objects in the
                            â€˜valuesâ€™ argument. For example:</paragraph>
                        <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">has_snapshot_filter = sql.exists().where(
    models.Snapshot.volume_id == models.Volume.id)
case_values = volume.Case([(has_snapshot_filter, 'has-snapshot')],
                          else_='no-snapshot')
volume.conditional_update({'status': case_values},
                          {'status': 'available'}))</literal_block>
                        <paragraph>And we can use DB fields using model class attribute for example to
                            store previous status in the corresponding field even though we donâ€™t
                            know which value is in the db from those we allowed:</paragraph>
                        <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">volume.conditional_update({'status': 'deleting',
                           'previous_status': volume.model.status},
                          {'status': ('available', 'error')})</literal_block>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">values</literal_strong> â€“ Dictionary of key-values to update in the DB.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">expected_values</literal_strong> â€“ Dictionary of conditions that must be met for
                                                the update to be executed.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">filters</literal_strong> â€“ Iterable with additional filters</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">save_all</literal_strong> â€“ Object may have changes that are not in the DB, this
                                                will say whether we want those changes saved as well.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">session</literal_strong> â€“ Session to use for the update</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">reflect_changes</literal_strong> â€“ If we want changes made in the database to be
                                                reflected in the versioned object.  This may
                                                mean in some cases that we have to reload the
                                                object from the database.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">order</literal_strong> â€“ Specific order of fields in which to update the values</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>number of db rows that were updated, which can be used as a
                                        boolean, since it will be 0 if we couldnâ€™t update the DB and
                                        1 if we could, because we are using unique index id.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'exists()\ (cinder.objects.base.CinderPersistentObject\ class\ method)',\ 'cinder.objects.base.CinderPersistentObject.exists',\ '',\ None]"></index>
                <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                    <desc_signature class="CinderPersistentObject" first="False" fullname="CinderPersistentObject.exists" ids="cinder.objects.base.CinderPersistentObject.exists" module="cinder.objects.base" names="cinder.objects.base.CinderPersistentObject.exists"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">exists</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">id_</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'fields\ (CinderPersistentObject\ attribute)',\ 'cinder.objects.base.CinderPersistentObject.fields',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CinderPersistentObject" first="False" fullname="CinderPersistentObject.fields" ids="cinder.objects.base.CinderPersistentObject.fields" module="cinder.objects.base" names="cinder.objects.base.CinderPersistentObject.fields"><desc_name xml:space="preserve">fields</desc_name><desc_annotation xml:space="preserve"> = {'created_at': DateTime(default=&lt;class 'oslo_versionedobjects.fields.UnspecifiedDefault'&gt;,nullable=True), 'updated_at': DateTime(default=&lt;class 'oslo_versionedobjects.fields.UnspecifiedDefault'&gt;,nullable=True), 'deleted_at': DateTime(default=&lt;class 'oslo_versionedobjects.fields.UnspecifiedDefault'&gt;,nullable=True), 'deleted': Boolean(default=False,nullable=True)}</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_by_id()\ (cinder.objects.base.CinderPersistentObject\ class\ method)',\ 'cinder.objects.base.CinderPersistentObject.get_by_id',\ '',\ None]"></index>
                <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                    <desc_signature class="CinderPersistentObject" first="False" fullname="CinderPersistentObject.get_by_id" ids="cinder.objects.base.CinderPersistentObject.get_by_id" module="cinder.objects.base" names="cinder.objects.base.CinderPersistentObject.get_by_id"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">get_by_id</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">id</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'obj_as_admin()\ (CinderPersistentObject\ method)',\ 'cinder.objects.base.CinderPersistentObject.obj_as_admin',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CinderPersistentObject" first="False" fullname="CinderPersistentObject.obj_as_admin" ids="cinder.objects.base.CinderPersistentObject.obj_as_admin" module="cinder.objects.base" names="cinder.objects.base.CinderPersistentObject.obj_as_admin"><desc_name xml:space="preserve">obj_as_admin</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Context manager to make an object call as an admin.</paragraph>
                        <paragraph>This temporarily modifies the context embedded in an object to
                            be elevated() and restores it after the call completes. Example
                            usage:</paragraph>
                        <block_quote>
                            <definition_list>
                                <definition_list_item>
                                    <term>with obj.obj_as_admin():</term>
                                    <definition>
                                        <paragraph>obj.save()</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </block_quote>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'refresh()\ (CinderPersistentObject\ method)',\ 'cinder.objects.base.CinderPersistentObject.refresh',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CinderPersistentObject" first="False" fullname="CinderPersistentObject.refresh" ids="cinder.objects.base.CinderPersistentObject.refresh" module="cinder.objects.base" names="cinder.objects.base.CinderPersistentObject.refresh"><desc_name xml:space="preserve">refresh</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'update_single_status_where()\ (CinderPersistentObject\ method)',\ 'cinder.objects.base.CinderPersistentObject.update_single_status_where',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CinderPersistentObject" first="False" fullname="CinderPersistentObject.update_single_status_where" ids="cinder.objects.base.CinderPersistentObject.update_single_status_where" module="cinder.objects.base" names="cinder.objects.base.CinderPersistentObject.update_single_status_where"><desc_name xml:space="preserve">update_single_status_where</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">new_status</desc_parameter><desc_parameter xml:space="preserve">expected_status</desc_parameter><desc_parameter xml:space="preserve">filters=()</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'ClusteredObject\ (class\ in\ cinder.objects.base)',\ 'cinder.objects.base.ClusteredObject',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="ClusteredObject" ids="cinder.objects.base.ClusteredObject" module="cinder.objects.base" names="cinder.objects.base.ClusteredObject"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">ClusteredObject</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                <index entries="['single',\ 'assert_not_frozen()\ (ClusteredObject\ method)',\ 'cinder.objects.base.ClusteredObject.assert_not_frozen',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ClusteredObject" first="False" fullname="ClusteredObject.assert_not_frozen" ids="cinder.objects.base.ClusteredObject.assert_not_frozen" module="cinder.objects.base" names="cinder.objects.base.ClusteredObject.assert_not_frozen"><desc_name xml:space="preserve">assert_not_frozen</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'is_clustered\ (ClusteredObject\ attribute)',\ 'cinder.objects.base.ClusteredObject.is_clustered',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ClusteredObject" first="False" fullname="ClusteredObject.is_clustered" ids="cinder.objects.base.ClusteredObject.is_clustered" module="cinder.objects.base" names="cinder.objects.base.ClusteredObject.is_clustered"><desc_name xml:space="preserve">is_clustered</desc_name></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'service_topic_queue\ (ClusteredObject\ attribute)',\ 'cinder.objects.base.ClusteredObject.service_topic_queue',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ClusteredObject" first="False" fullname="ClusteredObject.service_topic_queue" ids="cinder.objects.base.ClusteredObject.service_topic_queue" module="cinder.objects.base" names="cinder.objects.base.ClusteredObject.service_topic_queue"><desc_name xml:space="preserve">service_topic_queue</desc_name></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'ObjectListBase\ (class\ in\ cinder.objects.base)',\ 'cinder.objects.base.ObjectListBase',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="ObjectListBase" ids="cinder.objects.base.ObjectListBase" module="cinder.objects.base" names="cinder.objects.base.ObjectListBase"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">ObjectListBase</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">oslo_versionedobjects.base.ObjectListBase</literal></paragraph>
                <index entries="['single',\ 'obj_make_compatible()\ (ObjectListBase\ method)',\ 'cinder.objects.base.ObjectListBase.obj_make_compatible',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ObjectListBase" first="False" fullname="ObjectListBase.obj_make_compatible" ids="cinder.objects.base.ObjectListBase.obj_make_compatible" module="cinder.objects.base" names="cinder.objects.base.ObjectListBase.obj_make_compatible"><desc_name xml:space="preserve">obj_make_compatible</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">primitive</desc_parameter><desc_parameter xml:space="preserve">target_version</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
    </section>
</document>
