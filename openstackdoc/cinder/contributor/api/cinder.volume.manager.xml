<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api/cinder.volume.manager.rst">
    <section ids="module-cinder.volume.manager the-cinder-volume-manager-module" names="the\ cinder.volume.manager\ module">
        <title>The <reference internal="True" refid="module-cinder.volume.manager" reftitle="cinder.volume.manager"><literal classes="xref py py-mod">cinder.volume.manager</literal></reference> Module</title>
        <index entries="['single',\ 'cinder.volume.manager\ (module)',\ 'module-cinder.volume.manager',\ '',\ None]"></index>
        <paragraph>Volume manager manages creating, attaching, detaching, and persistent storage.</paragraph>
        <paragraph>Persistent storage volumes keep their state independent of instances.  You can
            attach to an instance, terminate the instance, spawn a new instance (even
            one from a different image) and re-attach the volume with the same data
            intact.</paragraph>
        <paragraph><strong>Related Flags</strong></paragraph>
        <field_list>
            <field>
                <field_name>volume_manager</field_name>
                <field_body>
                    <paragraph>The module name of a class derived from
                        <literal classes="xref py py-class">manager.Manager</literal> (default:
                        <literal classes="xref py py-class">cinder.volume.manager.Manager</literal>).</paragraph>
                </field_body>
            </field>
            <field>
                <field_name>volume_driver</field_name>
                <field_body>
                    <paragraph>Used by <literal classes="xref py py-class">Manager</literal>.  Defaults to
                        <reference internal="True" reftitle="cinder.volume.drivers.lvm.LVMVolumeDriver" refuri="cinder.volume.drivers.lvm#cinder.volume.drivers.lvm.LVMVolumeDriver"><literal classes="xref py py-class">cinder.volume.drivers.lvm.LVMVolumeDriver</literal></reference>.</paragraph>
                </field_body>
            </field>
            <field>
                <field_name>volume_group</field_name>
                <field_body>
                    <paragraph>Name of the group that will contain exported volumes (default:
                        <title_reference>cinder-volumes</title_reference>)</paragraph>
                </field_body>
            </field>
            <field>
                <field_name>num_shell_tries</field_name>
                <field_body>
                    <paragraph>Number of times to attempt to run commands (default: 3)</paragraph>
                </field_body>
            </field>
        </field_list>
        <index entries="['single',\ 'VolumeManager\ (class\ in\ cinder.volume.manager)',\ 'cinder.volume.manager.VolumeManager',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="VolumeManager" ids="cinder.volume.manager.VolumeManager" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">VolumeManager</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume_driver=None</desc_parameter><desc_parameter xml:space="preserve">service_name=None</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" reftitle="cinder.manager.CleanableManager" refuri="cinder.manager#cinder.manager.CleanableManager"><literal classes="xref py py-class">cinder.manager.CleanableManager</literal></reference>, <reference internal="True" reftitle="cinder.manager.SchedulerDependentManager" refuri="cinder.manager#cinder.manager.SchedulerDependentManager"><literal classes="xref py py-class">cinder.manager.SchedulerDependentManager</literal></reference></paragraph>
                <paragraph>Manages attachable block storage devices.</paragraph>
                <index entries="['single',\ 'FAILBACK_SENTINEL\ (VolumeManager\ attribute)',\ 'cinder.volume.manager.VolumeManager.FAILBACK_SENTINEL',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.FAILBACK_SENTINEL" ids="cinder.volume.manager.VolumeManager.FAILBACK_SENTINEL" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.FAILBACK_SENTINEL"><desc_name xml:space="preserve">FAILBACK_SENTINEL</desc_name><desc_annotation xml:space="preserve"> = 'default'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'RPC_API_VERSION\ (VolumeManager\ attribute)',\ 'cinder.volume.manager.VolumeManager.RPC_API_VERSION',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.RPC_API_VERSION" ids="cinder.volume.manager.VolumeManager.RPC_API_VERSION" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.RPC_API_VERSION"><desc_name xml:space="preserve">RPC_API_VERSION</desc_name><desc_annotation xml:space="preserve"> = '3.15'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'accept_transfer()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.accept_transfer',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.accept_transfer" ids="cinder.volume.manager.VolumeManager.accept_transfer" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.accept_transfer"><desc_name xml:space="preserve">accept_transfer</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">new_user</desc_parameter><desc_parameter xml:space="preserve">new_project</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'attach_volume()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.attach_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.attach_volume" ids="cinder.volume.manager.VolumeManager.attach_volume" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.attach_volume"><desc_name xml:space="preserve">attach_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">instance_uuid</desc_parameter><desc_parameter xml:space="preserve">host_name</desc_parameter><desc_parameter xml:space="preserve">mountpoint</desc_parameter><desc_parameter xml:space="preserve">mode</desc_parameter><desc_parameter xml:space="preserve">volume=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Updates db to show volume is attached.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'attachment_delete()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.attachment_delete',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.attachment_delete" ids="cinder.volume.manager.VolumeManager.attachment_delete" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.attachment_delete"><desc_name xml:space="preserve">attachment_delete</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">attachment_id</desc_parameter><desc_parameter xml:space="preserve">vref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Delete/Detach the specified attachment.</paragraph>
                        <paragraph>Notifies the backend device that weâ€™re detaching the specified
                            attachment instance.</paragraph>
                        <paragraph>param: vref: Volume object associated with the attachment
                            param: attachment: Attachment reference object to remove</paragraph>
                        <paragraph>NOTE if the attachment reference is None, we remove all existing
                            attachments for the specified volume object.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'attachment_update()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.attachment_update',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.attachment_update" ids="cinder.volume.manager.VolumeManager.attachment_update" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.attachment_update"><desc_name xml:space="preserve">attachment_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">vref</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter><desc_parameter xml:space="preserve">attachment_id</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Update/Finalize an attachment.</paragraph>
                        <paragraph>This call updates a valid attachment record to associate with a volume
                            and provide the caller with the proper connection info.  Note that
                            this call requires an <title_reference>attachment_ref</title_reference>.  Itâ€™s expected that prior to
                            this call that the volume and an attachment UUID has been reserved.</paragraph>
                        <paragraph>param: vref: Volume object to create attachment for
                            param: connector: Connector object to use for attachment creation
                            param: attachment_ref: ID of the attachment record to update</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'copy_volume_to_image()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.copy_volume_to_image',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.copy_volume_to_image" ids="cinder.volume.manager.VolumeManager.copy_volume_to_image" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.copy_volume_to_image"><desc_name xml:space="preserve">copy_volume_to_image</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">image_meta</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Uploads the specified volume to Glance.</paragraph>
                        <paragraph>image_meta is a dictionary containing the following keys:
                            â€˜idâ€™, â€˜container_formatâ€™, â€˜disk_formatâ€™</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_group()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.create_group',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.create_group" ids="cinder.volume.manager.VolumeManager.create_group" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.create_group"><desc_name xml:space="preserve">create_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates the group.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_group_from_src()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.create_group_from_src',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.create_group_from_src" ids="cinder.volume.manager.VolumeManager.create_group_from_src" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.create_group_from_src"><desc_name xml:space="preserve">create_group_from_src</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">group_snapshot=None</desc_parameter><desc_parameter xml:space="preserve">source_group=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates the group from source.</paragraph>
                        <paragraph>The source can be a group snapshot or a source group.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_group_snapshot()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.create_group_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.create_group_snapshot" ids="cinder.volume.manager.VolumeManager.create_group_snapshot" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.create_group_snapshot"><desc_name xml:space="preserve">create_group_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates the group_snapshot.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_snapshot()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.create_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.create_snapshot" ids="cinder.volume.manager.VolumeManager.create_snapshot" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.create_snapshot"><desc_name xml:space="preserve">create_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates and exports the snapshot.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_volume()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.create_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.create_volume" ids="cinder.volume.manager.VolumeManager.create_volume" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.create_volume"><desc_name xml:space="preserve">create_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">request_spec=None</desc_parameter><desc_parameter xml:space="preserve">filter_properties=None</desc_parameter><desc_parameter xml:space="preserve">allow_reschedule=True</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates the volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_group()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.delete_group',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.delete_group" ids="cinder.volume.manager.VolumeManager.delete_group" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.delete_group"><desc_name xml:space="preserve">delete_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Deletes group and the volumes in the group.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_group_snapshot()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.delete_group_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.delete_group_snapshot" ids="cinder.volume.manager.VolumeManager.delete_group_snapshot" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.delete_group_snapshot"><desc_name xml:space="preserve">delete_group_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Deletes group_snapshot.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_snapshot()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.delete_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.delete_snapshot" ids="cinder.volume.manager.VolumeManager.delete_snapshot" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.delete_snapshot"><desc_name xml:space="preserve">delete_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">unmanage_only=False</desc_parameter><desc_parameter xml:space="preserve">handle_quota=True</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Deletes and unexports snapshot.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_volume()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.delete_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.delete_volume" ids="cinder.volume.manager.VolumeManager.delete_volume" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.delete_volume"><desc_name xml:space="preserve">delete_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">unmanage_only=False</desc_parameter><desc_parameter xml:space="preserve">cascade=False</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Deletes and unexports volume.</paragraph>
                        <enumerated_list enumtype="arabic" prefix="" suffix=".">
                            <list_item>
                                <paragraph>Delete a volume(normal case)
                                    Delete a volume and update quotas.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Delete a migration volume
                                    If deleting the volume in a migration, we want to skip
                                    quotas but we need database updates for the volume.</paragraph>
                            </list_item>
                        </enumerated_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'detach_volume()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.detach_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.detach_volume" ids="cinder.volume.manager.VolumeManager.detach_volume" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.detach_volume"><desc_name xml:space="preserve">detach_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">attachment_id=None</desc_parameter><desc_parameter xml:space="preserve">volume=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Updates db to show volume is detached.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'disable_replication()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.disable_replication',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.disable_replication" ids="cinder.volume.manager.VolumeManager.disable_replication" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.disable_replication"><desc_name xml:space="preserve">disable_replication</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Disable replication.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'enable_replication()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.enable_replication',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.enable_replication" ids="cinder.volume.manager.VolumeManager.enable_replication" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.enable_replication"><desc_name xml:space="preserve">enable_replication</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Enable replication.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'extend_volume()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.extend_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.extend_volume" ids="cinder.volume.manager.VolumeManager.extend_volume" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.extend_volume"><desc_name xml:space="preserve">extend_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">new_size</desc_parameter><desc_parameter xml:space="preserve">reservations</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'failover()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.failover',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.failover" ids="cinder.volume.manager.VolumeManager.failover" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.failover"><desc_name xml:space="preserve">failover</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">secondary_backend_id=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Failover a backend to a secondary replication target.</paragraph>
                        <paragraph>Instructs a replication capable/configured backend to failover
                            to one of itâ€™s secondary replication targets. host=None is
                            an acceetable input, and leaves it to the driver to failover
                            to the only configured target, or to choose a target on itâ€™s
                            own. All of the hosts volumes will be passed on to the driver
                            in order for it to determine the replicated volumes on the host,
                            if needed.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> â€“ security context</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">secondary_backend_id</literal_strong> â€“ Specifies backend_id to fail over to</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'failover_completed()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.failover_completed',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.failover_completed" ids="cinder.volume.manager.VolumeManager.failover_completed" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.failover_completed"><desc_name xml:space="preserve">failover_completed</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">updates</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Finalize failover of this backend.</paragraph>
                        <paragraph>When a service is clustered and replicated the failover has 2 stages,
                            one that does the failover of the volumes and another that finalizes
                            the failover of the services themselves.</paragraph>
                        <paragraph>This method takes care of the last part and is called from the service
                            doing the failover of the volumes after finished processing the
                            volumes.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'failover_host()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.failover_host',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.failover_host" ids="cinder.volume.manager.VolumeManager.failover_host" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.failover_host"><desc_name xml:space="preserve">failover_host</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">secondary_backend_id=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Failover a backend to a secondary replication target.</paragraph>
                        <paragraph>Instructs a replication capable/configured backend to failover
                            to one of itâ€™s secondary replication targets. host=None is
                            an acceetable input, and leaves it to the driver to failover
                            to the only configured target, or to choose a target on itâ€™s
                            own. All of the hosts volumes will be passed on to the driver
                            in order for it to determine the replicated volumes on the host,
                            if needed.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> â€“ security context</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">secondary_backend_id</literal_strong> â€“ Specifies backend_id to fail over to</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'failover_replication()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.failover_replication',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.failover_replication" ids="cinder.volume.manager.VolumeManager.failover_replication" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.failover_replication"><desc_name xml:space="preserve">failover_replication</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">allow_attached_volume=False</desc_parameter><desc_parameter xml:space="preserve">secondary_backend_id=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Failover replication.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'finish_failover()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.finish_failover',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.finish_failover" ids="cinder.volume.manager.VolumeManager.finish_failover" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.finish_failover"><desc_name xml:space="preserve">finish_failover</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">service</desc_parameter><desc_parameter xml:space="preserve">updates</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Completion of the failover locally or via RPC.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'freeze_host()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.freeze_host',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.freeze_host" ids="cinder.volume.manager.VolumeManager.freeze_host" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.freeze_host"><desc_name xml:space="preserve">freeze_host</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Freeze management plane on this backend.</paragraph>
                        <paragraph>Basically puts the control/management plane into a
                            Read Only state.  We should handle this in the scheduler,
                            however this is provided to let the driver know in case it
                            needs/wants to do something specific on the backend.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">context</literal_strong> â€“ security context</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_backup_device()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.get_backup_device',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.get_backup_device" ids="cinder.volume.manager.VolumeManager.get_backup_device" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.get_backup_device"><desc_name xml:space="preserve">get_backup_device</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">backup</desc_parameter><desc_parameter xml:space="preserve">want_objects=False</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_capabilities()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.get_capabilities',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.get_capabilities" ids="cinder.volume.manager.VolumeManager.get_capabilities" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.get_capabilities"><desc_name xml:space="preserve">get_capabilities</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">discover</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get capabilities of backend storage.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_manageable_snapshots()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.get_manageable_snapshots',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.get_manageable_snapshots" ids="cinder.volume.manager.VolumeManager.get_manageable_snapshots" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.get_manageable_snapshots"><desc_name xml:space="preserve">get_manageable_snapshots</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">marker</desc_parameter><desc_parameter xml:space="preserve">limit</desc_parameter><desc_parameter xml:space="preserve">offset</desc_parameter><desc_parameter xml:space="preserve">sort_keys</desc_parameter><desc_parameter xml:space="preserve">sort_dirs</desc_parameter><desc_parameter xml:space="preserve">want_objects=False</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_manageable_volumes()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.get_manageable_volumes',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.get_manageable_volumes" ids="cinder.volume.manager.VolumeManager.get_manageable_volumes" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.get_manageable_volumes"><desc_name xml:space="preserve">get_manageable_volumes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">marker</desc_parameter><desc_parameter xml:space="preserve">limit</desc_parameter><desc_parameter xml:space="preserve">offset</desc_parameter><desc_parameter xml:space="preserve">sort_keys</desc_parameter><desc_parameter xml:space="preserve">sort_dirs</desc_parameter><desc_parameter xml:space="preserve">want_objects=False</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'init_host()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.init_host',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.init_host" ids="cinder.volume.manager.VolumeManager.init_host" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.init_host"><desc_name xml:space="preserve">init_host</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">added_to_cluster=None</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Perform any required initialization.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'init_host_with_rpc()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.init_host_with_rpc',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.init_host_with_rpc" ids="cinder.volume.manager.VolumeManager.init_host_with_rpc" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.init_host_with_rpc"><desc_name xml:space="preserve">init_host_with_rpc</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'initialize_connection()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.initialize_connection',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.initialize_connection" ids="cinder.volume.manager.VolumeManager.initialize_connection" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.initialize_connection"><desc_name xml:space="preserve">initialize_connection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Prepare volume for connection from host represented by connector.</paragraph>
                        <paragraph>This method calls the driver initialize_connection and returns
                            it to the caller.  The connector parameter is a dictionary with
                            information about the host that will connect to the volume in the
                            following format:</paragraph>
                        <literal_block xml:space="preserve">.. code:: json

  {
      'ip': ip,
      'initiator': initiator,
  }</literal_block>
                        <paragraph>ip: the ip address of the connecting machine</paragraph>
                        <paragraph>initiator: the iscsi initiator name of the connecting machine.
                            This can be None if the connecting machine does not support iscsi
                            connections.</paragraph>
                        <paragraph>driver is responsible for doing any necessary security setup and
                            returning a connection_info dictionary in the following format:</paragraph>
                        <literal_block xml:space="preserve">.. code:: json

  {
      'driver_volume_type': driver_volume_type,
      'data': data,
  }</literal_block>
                        <definition_list>
                            <definition_list_item>
                                <term>driver_volume_type: a string to identify the type of volume.  This</term>
                                <definition>
                                    <paragraph>can be used by the calling code to determine the
                                        strategy for connecting to the volume. This could
                                        be â€˜iscsiâ€™, â€˜rbdâ€™, â€˜sheepdogâ€™, etc.</paragraph>
                                </definition>
                            </definition_list_item>
                            <definition_list_item>
                                <term>data: this is the data that the calling code will use to connect</term>
                                <definition>
                                    <paragraph>to the volume. Keep in mind that this will be serialized to
                                        json in various places, so it should not contain any non-json
                                        data types.</paragraph>
                                </definition>
                            </definition_list_item>
                        </definition_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'initialize_connection_snapshot()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.initialize_connection_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.initialize_connection_snapshot" ids="cinder.volume.manager.VolumeManager.initialize_connection_snapshot" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.initialize_connection_snapshot"><desc_name xml:space="preserve">initialize_connection_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">snapshot_id</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'is_working()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.is_working',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.is_working" ids="cinder.volume.manager.VolumeManager.is_working" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.is_working"><desc_name xml:space="preserve">is_working</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Return if Manager is ready to accept requests.</paragraph>
                        <paragraph>This is to inform Service class that in case of volume driver
                            initialization failure the manager is actually down and not ready to
                            accept any requests.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'list_replication_targets()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.list_replication_targets',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.list_replication_targets" ids="cinder.volume.manager.VolumeManager.list_replication_targets" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.list_replication_targets"><desc_name xml:space="preserve">list_replication_targets</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Provide a means to obtain replication targets for a group.</paragraph>
                        <paragraph>This method is used to find the replication_device config
                            info. â€˜backend_idâ€™ is a required key in â€˜replication_deviceâ€™.</paragraph>
                        <paragraph>Response Example for admin:</paragraph>
                        <literal_block classes="code json" xml:space="preserve"><inline classes="punctuation">{</inline>
    <inline classes="error">'replication_targets':</inline> <inline classes="error">[</inline>
        <inline classes="error">{</inline>
            <inline classes="error">'backend_id':</inline> <inline classes="error">'vendor-id-1',</inline>
            <inline classes="error">'unique_key':</inline> <inline classes="error">'val1',</inline>
            <inline classes="error">......</inline>
        <inline classes="punctuation">}</inline><inline classes="error">,</inline>
        <inline classes="punctuation">{</inline>
            <inline classes="error">'backend_id':</inline> <inline classes="error">'vendor-id-2',</inline>
            <inline classes="error">'unique_key':</inline> <inline classes="error">'val2',</inline>
            <inline classes="error">......</inline>
        <inline classes="punctuation">}</inline>
     <inline classes="error">]</inline>
<inline classes="error">}</inline></literal_block>
                        <paragraph>Response example for non-admin:</paragraph>
                        <comment xml:space="preserve">code json

{
    'replication_targets': [
        {
            'backend_id': 'vendor-id-1'
        },
        {
            'backend_id': 'vendor-id-2'
        }
     ]
}</comment>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.manage_existing',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.manage_existing" ids="cinder.volume.manager.VolumeManager.manage_existing" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.manage_existing"><desc_name xml:space="preserve">manage_existing</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">ref=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing_snapshot()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.manage_existing_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.manage_existing_snapshot" ids="cinder.volume.manager.VolumeManager.manage_existing_snapshot" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.manage_existing_snapshot"><desc_name xml:space="preserve">manage_existing_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">ref=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'migrate_volume()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.migrate_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.migrate_volume" ids="cinder.volume.manager.VolumeManager.migrate_volume" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.migrate_volume"><desc_name xml:space="preserve">migrate_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">host</desc_parameter><desc_parameter xml:space="preserve">force_host_copy=False</desc_parameter><desc_parameter xml:space="preserve">new_type_id=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Migrate the volume to the specified host (called on source host).</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'migrate_volume_completion()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.migrate_volume_completion',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.migrate_volume_completion" ids="cinder.volume.manager.VolumeManager.migrate_volume_completion" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.migrate_volume_completion"><desc_name xml:space="preserve">migrate_volume_completion</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">new_volume</desc_parameter><desc_parameter xml:space="preserve">error=False</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'publish_service_capabilities()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.publish_service_capabilities',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.publish_service_capabilities" ids="cinder.volume.manager.VolumeManager.publish_service_capabilities" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.publish_service_capabilities"><desc_name xml:space="preserve">publish_service_capabilities</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Collect driver status and then publish.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'remove_export()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.remove_export',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.remove_export" ids="cinder.volume.manager.VolumeManager.remove_export" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.remove_export"><desc_name xml:space="preserve">remove_export</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Removes an export for a volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'remove_export_snapshot()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.remove_export_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.remove_export_snapshot" ids="cinder.volume.manager.VolumeManager.remove_export_snapshot" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.remove_export_snapshot"><desc_name xml:space="preserve">remove_export_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">snapshot_id</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Removes an export for a snapshot.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'retype()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.retype',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.retype" ids="cinder.volume.manager.VolumeManager.retype" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.retype"><desc_name xml:space="preserve">retype</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">new_type_id</desc_parameter><desc_parameter xml:space="preserve">host</desc_parameter><desc_parameter xml:space="preserve">migration_policy='never'</desc_parameter><desc_parameter xml:space="preserve">reservations=None</desc_parameter><desc_parameter xml:space="preserve">old_reservations=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'revert_to_snapshot()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.revert_to_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.revert_to_snapshot" ids="cinder.volume.manager.VolumeManager.revert_to_snapshot" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.revert_to_snapshot"><desc_name xml:space="preserve">revert_to_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Revert a volume to a snapshot.</paragraph>
                        <paragraph>The process of reverting to snapshot consists of several steps:
                            1.   create a snapshot for backup (in case of data loss)
                            2.1. use driverâ€™s specific logic to revert volume
                            2.2. try the generic way to revert volume if driverâ€™s method is missing
                            3.   delete the backup snapshot</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'secure_file_operations_enabled()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.secure_file_operations_enabled',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.secure_file_operations_enabled" ids="cinder.volume.manager.VolumeManager.secure_file_operations_enabled" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.secure_file_operations_enabled"><desc_name xml:space="preserve">secure_file_operations_enabled</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'target\ (VolumeManager\ attribute)',\ 'cinder.volume.manager.VolumeManager.target',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.target" ids="cinder.volume.manager.VolumeManager.target" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.target"><desc_name xml:space="preserve">target</desc_name><desc_annotation xml:space="preserve"> = &lt;Target version=3.15&gt;</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'terminate_connection()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.terminate_connection',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.terminate_connection" ids="cinder.volume.manager.VolumeManager.terminate_connection" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.terminate_connection"><desc_name xml:space="preserve">terminate_connection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter><desc_parameter xml:space="preserve">force=False</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Cleanup connection from host represented by connector.</paragraph>
                        <paragraph>The format of connector is the same as for initialize_connection.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'terminate_connection_snapshot()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.terminate_connection_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.terminate_connection_snapshot" ids="cinder.volume.manager.VolumeManager.terminate_connection_snapshot" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.terminate_connection_snapshot"><desc_name xml:space="preserve">terminate_connection_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">snapshot_id</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter><desc_parameter xml:space="preserve">force=False</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'thaw_host()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.thaw_host',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.thaw_host" ids="cinder.volume.manager.VolumeManager.thaw_host" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.thaw_host"><desc_name xml:space="preserve">thaw_host</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>UnFreeze management plane on this backend.</paragraph>
                        <paragraph>Basically puts the control/management plane back into
                            a normal state.  We should handle this in the scheduler,
                            however this is provided to let the driver know in case it
                            needs/wants to do something specific on the backend.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">context</literal_strong> â€“ security context</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'update_group()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.update_group',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.update_group" ids="cinder.volume.manager.VolumeManager.update_group" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.update_group"><desc_name xml:space="preserve">update_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">add_volumes=None</desc_parameter><desc_parameter xml:space="preserve">remove_volumes=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Updates group.</paragraph>
                        <paragraph>Update group by adding volumes to the group,
                            or removing volumes from the group.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'update_migrated_volume()\ (VolumeManager\ method)',\ 'cinder.volume.manager.VolumeManager.update_migrated_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeManager" first="False" fullname="VolumeManager.update_migrated_volume" ids="cinder.volume.manager.VolumeManager.update_migrated_volume" module="cinder.volume.manager" names="cinder.volume.manager.VolumeManager.update_migrated_volume"><desc_name xml:space="preserve">update_migrated_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">new_volume</desc_parameter><desc_parameter xml:space="preserve">volume_status</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Finalize migration process on backend device.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
    </section>
</document>
