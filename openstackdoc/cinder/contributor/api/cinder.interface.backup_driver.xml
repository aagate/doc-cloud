<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api/cinder.interface.backup_driver.rst">
    <section ids="module-cinder.interface.backup_driver the-cinder-interface-backup-driver-module" names="the\ cinder.interface.backup_driver\ module">
        <title>The <reference internal="True" refid="module-cinder.interface.backup_driver" reftitle="cinder.interface.backup_driver"><literal classes="xref py py-mod">cinder.interface.backup_driver</literal></reference> Module</title>
        <index entries="['single',\ 'cinder.interface.backup_driver\ (module)',\ 'module-cinder.interface.backup_driver',\ '',\ None]"></index>
        <paragraph>Core backup driver interface.</paragraph>
        <paragraph>All backup drivers should support this interface as a bare minimum.</paragraph>
        <index entries="['single',\ 'BackupDriver\ (class\ in\ cinder.interface.backup_driver)',\ 'cinder.interface.backup_driver.BackupDriver',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="BackupDriver" ids="cinder.interface.backup_driver.BackupDriver" module="cinder.interface.backup_driver" names="cinder.interface.backup_driver.BackupDriver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">BackupDriver</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" reftitle="cinder.interface.base.CinderInterface" refuri="cinder.interface.base#cinder.interface.base.CinderInterface"><literal classes="xref py py-class">cinder.interface.base.CinderInterface</literal></reference></paragraph>
                <paragraph>Backup driver required interface.</paragraph>
                <index entries="['single',\ 'backup()\ (BackupDriver\ method)',\ 'cinder.interface.backup_driver.BackupDriver.backup',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BackupDriver" first="False" fullname="BackupDriver.backup" ids="cinder.interface.backup_driver.BackupDriver.backup" module="cinder.interface.backup_driver" names="cinder.interface.backup_driver.BackupDriver.backup"><desc_name xml:space="preserve">backup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">backup</desc_parameter><desc_parameter xml:space="preserve">volume_file</desc_parameter><desc_parameter xml:space="preserve">backup_metadata=False</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Start a backup of a specified volume.</paragraph>
                        <paragraph>If backup[‘parent_id’] is given, then an incremental backup
                            should be performed.</paragraph>
                        <paragraph>If the parent backup is of different size, a full backup should be
                            performed to ensure all data is included.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">backup</literal_strong> – The backup information.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume_file</literal_strong> – The volume or file to write the backup to.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">backup_metadata</literal_strong> – Whether to include volume metadata in the
                                                backup.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>The variable structure of backup in the following format:</paragraph>
                        <literal_block xml:space="preserve">{
   'id': id,
   'availability_zone': availability_zone,
   'service': driver_name,
   'user_id': context.user_id,
   'project_id': context.project_id,
   'display_name': name,
   'display_description': description,
   'volume_id': volume_id,
   'status': fields.BackupStatus.CREATING,
   'container': container,
   'parent_id': parent_id,
   'size': size,
   'host': host,
   'snapshot_id': snapshot_id,
   'data_timestamp': data_timestamp,
}</literal_block>
                        <paragraph>service: backup driver
                            parent_id: parent backup id
                            size: equal to volume size
                            data_timestamp: backup creation time</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'check_for_setup_error()\ (BackupDriver\ method)',\ 'cinder.interface.backup_driver.BackupDriver.check_for_setup_error',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BackupDriver" first="False" fullname="BackupDriver.check_for_setup_error" ids="cinder.interface.backup_driver.BackupDriver.check_for_setup_error" module="cinder.interface.backup_driver" names="cinder.interface.backup_driver.BackupDriver.check_for_setup_error"><desc_name xml:space="preserve">check_for_setup_error</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Method for checking if backup backend is successfully installed.</paragraph>
                        <paragraph>Depends on storage backend limitations and driver implementation this
                            method could check if all needed config options are configurated well
                            or try to connect to the storage to verify driver can do it without
                            any issues.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>None</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_backup()\ (BackupDriver\ method)',\ 'cinder.interface.backup_driver.BackupDriver.delete_backup',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BackupDriver" first="False" fullname="BackupDriver.delete_backup" ids="cinder.interface.backup_driver.BackupDriver.delete_backup" module="cinder.interface.backup_driver" names="cinder.interface.backup_driver.BackupDriver.delete_backup"><desc_name xml:space="preserve">delete_backup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">backup</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Delete a backup from the backup store.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">backup</literal_strong> – The backup to be deleted.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'export_record()\ (BackupDriver\ method)',\ 'cinder.interface.backup_driver.BackupDriver.export_record',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BackupDriver" first="False" fullname="BackupDriver.export_record" ids="cinder.interface.backup_driver.BackupDriver.export_record" module="cinder.interface.backup_driver" names="cinder.interface.backup_driver.BackupDriver.export_record"><desc_name xml:space="preserve">export_record</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">backup</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Export driver specific backup record information.</paragraph>
                        <paragraph>If backup backend needs additional driver specific information to
                            import backup record back into the system it must override this method
                            and return it as a dictionary so it can be serialized into a string.</paragraph>
                        <paragraph>Default backup driver implementation has no extra information.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">backup</literal_strong> – backup object to export</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>driver_info - dictionary with extra information</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_metadata()\ (BackupDriver\ method)',\ 'cinder.interface.backup_driver.BackupDriver.get_metadata',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BackupDriver" first="False" fullname="BackupDriver.get_metadata" ids="cinder.interface.backup_driver.BackupDriver.get_metadata" module="cinder.interface.backup_driver" names="cinder.interface.backup_driver.BackupDriver.get_metadata"><desc_name xml:space="preserve">get_metadata</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume_id</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get volume metadata.</paragraph>
                        <paragraph>Returns a json-encoded dict containing all metadata and the restore
                            version i.e. the version used to decide what actually gets restored
                            from this container when doing a backup restore.</paragraph>
                        <paragraph>Typically best to use py:class:<title_reference>BackupMetadataAPI</title_reference> for this.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">volume_id</literal_strong> – The ID of the volume.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>json-encoded dict of metadata.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'import_record()\ (BackupDriver\ method)',\ 'cinder.interface.backup_driver.BackupDriver.import_record',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BackupDriver" first="False" fullname="BackupDriver.import_record" ids="cinder.interface.backup_driver.BackupDriver.import_record" module="cinder.interface.backup_driver" names="cinder.interface.backup_driver.BackupDriver.import_record"><desc_name xml:space="preserve">import_record</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">backup</desc_parameter><desc_parameter xml:space="preserve">driver_info</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Import driver specific backup record information.</paragraph>
                        <paragraph>If backup backend needs additional driver specific information to
                            import backup record back into the system it must override this method
                            since it will be called with the extra information that was provided by
                            export_record when exporting the backup.</paragraph>
                        <paragraph>Default backup driver implementation does nothing since it didn’t
                            export any specific data in export_record.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">backup</literal_strong> – backup object to export</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">driver_info</literal_strong> – dictionary with driver specific backup record
                                                information</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>None</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'put_metadata()\ (BackupDriver\ method)',\ 'cinder.interface.backup_driver.BackupDriver.put_metadata',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BackupDriver" first="False" fullname="BackupDriver.put_metadata" ids="cinder.interface.backup_driver.BackupDriver.put_metadata" module="cinder.interface.backup_driver" names="cinder.interface.backup_driver.BackupDriver.put_metadata"><desc_name xml:space="preserve">put_metadata</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">json_metadata</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Set volume metadata.</paragraph>
                        <paragraph>Typically best to use py:class:<title_reference>BackupMetadataAPI</title_reference> for this.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume_id</literal_strong> – The ID of the volume.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">json_metadata</literal_strong> – The json-encoded dict of metadata.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'restore()\ (BackupDriver\ method)',\ 'cinder.interface.backup_driver.BackupDriver.restore',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BackupDriver" first="False" fullname="BackupDriver.restore" ids="cinder.interface.backup_driver.BackupDriver.restore" module="cinder.interface.backup_driver" names="cinder.interface.backup_driver.BackupDriver.restore"><desc_name xml:space="preserve">restore</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">backup</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">volume_file</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Restore volume from a backup.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">backup</literal_strong> – The backup information.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume_id</literal_strong> – The volume to be restored.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume_file</literal_strong> – The volume or file to read the data from.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
    </section>
</document>
