<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api/cinder.interface.volume_group_driver.rst">
    <section ids="module-cinder.interface.volume_group_driver the-cinder-interface-volume-group-driver-module" names="the\ cinder.interface.volume_group_driver\ module">
        <title>The <reference internal="True" reftitle="cinder.interface.volume_group_driver" refuri="../drivers#module-cinder.interface.volume_group_driver"><literal classes="xref py py-mod">cinder.interface.volume_group_driver</literal></reference> Module</title>
        <index entries="['single',\ 'cinder.interface.volume_group_driver\ (module)',\ 'module-cinder.interface.volume_group_driver',\ '',\ None]"></index>
        <paragraph>Generic volume group volume driver interface.</paragraph>
        <index entries="['single',\ 'VolumeGroupDriver\ (class\ in\ cinder.interface.volume_group_driver)',\ 'cinder.interface.volume_group_driver.VolumeGroupDriver',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="VolumeGroupDriver" ids="cinder.interface.volume_group_driver.VolumeGroupDriver" module="cinder.interface.volume_group_driver" names="cinder.interface.volume_group_driver.VolumeGroupDriver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">VolumeGroupDriver</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" reftitle="cinder.interface.base.CinderInterface" refuri="cinder.interface.base#cinder.interface.base.CinderInterface"><literal classes="xref py py-class">cinder.interface.base.CinderInterface</literal></reference></paragraph>
                <paragraph>Interface for drivers that support groups.</paragraph>
                <index entries="['single',\ 'create_group()\ (VolumeGroupDriver\ method)',\ 'cinder.interface.volume_group_driver.VolumeGroupDriver.create_group',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeGroupDriver" first="False" fullname="VolumeGroupDriver.create_group" ids="cinder.interface.volume_group_driver.VolumeGroupDriver.create_group" module="cinder.interface.volume_group_driver" names="cinder.interface.volume_group_driver.VolumeGroupDriver.create_group"><desc_name xml:space="preserve">create_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a group.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group</literal_strong> – the Group object to be created.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>model_update will be in this format: {‘status’: xxx, ……}.</paragraph>
                        <paragraph>If the status in model_update is ‘error’, the manager will throw
                            an exception and it will be caught in the try-except block in the
                            manager. If the driver throws an exception, the manager will also
                            catch it in the try-except block. The group status in the db will
                            be changed to ‘error’.</paragraph>
                        <paragraph>For a successful operation, the driver can either build the
                            model_update and return it or return None. The group status will
                            be set to ‘available’.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_group_from_src()\ (VolumeGroupDriver\ method)',\ 'cinder.interface.volume_group_driver.VolumeGroupDriver.create_group_from_src',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeGroupDriver" first="False" fullname="VolumeGroupDriver.create_group_from_src" ids="cinder.interface.volume_group_driver.VolumeGroupDriver.create_group_from_src" module="cinder.interface.volume_group_driver" names="cinder.interface.volume_group_driver.VolumeGroupDriver.create_group_from_src"><desc_name xml:space="preserve">create_group_from_src</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">volumes</desc_parameter><desc_parameter xml:space="preserve">group_snapshot=None</desc_parameter><desc_parameter xml:space="preserve">snapshots=None</desc_parameter><desc_parameter xml:space="preserve">source_group=None</desc_parameter><desc_parameter xml:space="preserve">source_vols=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a group from source.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group</literal_strong> – the Group object to be created.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volumes</literal_strong> – a list of Volume objects in the group.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group_snapshot</literal_strong> – the GroupSnapshot object as source.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">snapshots</literal_strong> – a list of Snapshot objects in the group_snapshot.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">source_group</literal_strong> – a Group object as source.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">source_vols</literal_strong> – a list of Volume objects in the source_group.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update, volumes_model_update</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>The source can be group_snapshot or a source group.</paragraph>
                        <paragraph>param volumes is a list of objects retrieved from the db. It cannot
                            be assigned to volumes_model_update. volumes_model_update is a list
                            of dictionaries. It has to be built by the driver. An entry will be
                            in this format: {‘id’: xxx, ‘status’: xxx, ……}. model_update
                            will be in this format: {‘status’: xxx, ……}.</paragraph>
                        <paragraph>To be consistent with other volume operations, the manager will
                            assume the operation is successful if no exception is thrown by
                            the driver. For a successful operation, the driver can either build
                            the model_update and volumes_model_update and return them or
                            return None, None.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_group_snapshot()\ (VolumeGroupDriver\ method)',\ 'cinder.interface.volume_group_driver.VolumeGroupDriver.create_group_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeGroupDriver" first="False" fullname="VolumeGroupDriver.create_group_snapshot" ids="cinder.interface.volume_group_driver.VolumeGroupDriver.create_group_snapshot" module="cinder.interface.volume_group_driver" names="cinder.interface.volume_group_driver.VolumeGroupDriver.create_group_snapshot"><desc_name xml:space="preserve">create_group_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_snapshot</desc_parameter><desc_parameter xml:space="preserve">snapshots</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a group_snapshot.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group_snapshot</literal_strong> – the GroupSnapshot object to be created.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">snapshots</literal_strong> – a list of Snapshot objects in the group_snapshot.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update, snapshots_model_update</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>param snapshots is a list of Snapshot objects. It cannot be assigned
                            to snapshots_model_update. snapshots_model_update is a list of
                            dictionaries. It has to be built by the driver. An entry will be
                            in this format: {‘id’: xxx, ‘status’: xxx, ……}. model_update
                            will be in this format: {‘status’: xxx, ……}.</paragraph>
                        <paragraph>The driver should populate snapshots_model_update and model_update
                            and return them.</paragraph>
                        <paragraph>The manager will check snapshots_model_update and update db accordingly
                            for each snapshot. If the driver successfully deleted some snapshots
                            but failed to delete others, it should set statuses of the snapshots
                            accordingly so that the manager can update db correctly.</paragraph>
                        <paragraph>If the status in any entry of snapshots_model_update is ‘error’, the
                            status in model_update will be set to the same if it is not already
                            ‘error’.</paragraph>
                        <paragraph>If the status in model_update is ‘error’, the manager will raise an
                            exception and the status of group_snapshot will be set to ‘error’ in
                            the db. If snapshots_model_update is not returned by the driver, the
                            manager will set the status of every snapshot to ‘error’ in the except
                            block.</paragraph>
                        <paragraph>If the driver raises an exception during the operation, it will be
                            caught by the try-except block in the manager and the statuses of
                            group_snapshot and all snapshots will be set to ‘error’.</paragraph>
                        <paragraph>For a successful operation, the driver can either build the
                            model_update and snapshots_model_update and return them or
                            return None, None. The statuses of group_snapshot and all snapshots
                            will be set to ‘available’ at the end of the manager function.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_group()\ (VolumeGroupDriver\ method)',\ 'cinder.interface.volume_group_driver.VolumeGroupDriver.delete_group',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeGroupDriver" first="False" fullname="VolumeGroupDriver.delete_group" ids="cinder.interface.volume_group_driver.VolumeGroupDriver.delete_group" module="cinder.interface.volume_group_driver" names="cinder.interface.volume_group_driver.VolumeGroupDriver.delete_group"><desc_name xml:space="preserve">delete_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">volumes</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Deletes a group.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group</literal_strong> – the Group object to be deleted.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volumes</literal_strong> – a list of Volume objects in the group.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update, volumes_model_update</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>param volumes is a list of objects retrieved from the db. It cannot
                            be assigned to volumes_model_update. volumes_model_update is a list
                            of dictionaries. It has to be built by the driver. An entry will be
                            in this format: {‘id’: xxx, ‘status’: xxx, ……}. model_update
                            will be in this format: {‘status’: xxx, ……}.</paragraph>
                        <paragraph>The driver should populate volumes_model_update and model_update
                            and return them.</paragraph>
                        <paragraph>The manager will check volumes_model_update and update db accordingly
                            for each volume. If the driver successfully deleted some volumes
                            but failed to delete others, it should set statuses of the volumes
                            accordingly so that the manager can update db correctly.</paragraph>
                        <paragraph>If the status in any entry of volumes_model_update is ‘error_deleting’
                            or ‘error’, the status in model_update will be set to the same if it
                            is not already ‘error_deleting’ or ‘error’.</paragraph>
                        <paragraph>If the status in model_update is ‘error_deleting’ or ‘error’, the
                            manager will raise an exception and the status of the group will be
                            set to ‘error’ in the db. If volumes_model_update is not returned by
                            the driver, the manager will set the status of every volume in the
                            group to ‘error’ in the except block.</paragraph>
                        <paragraph>If the driver raises an exception during the operation, it will be
                            caught by the try-except block in the manager. The statuses of the
                            group and all volumes in it will be set to ‘error’.</paragraph>
                        <paragraph>For a successful operation, the driver can either build the
                            model_update and volumes_model_update and return them or
                            return None, None. The statuses of the group and all volumes
                            will be set to ‘deleted’ after the manager deletes them from db.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_group_snapshot()\ (VolumeGroupDriver\ method)',\ 'cinder.interface.volume_group_driver.VolumeGroupDriver.delete_group_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeGroupDriver" first="False" fullname="VolumeGroupDriver.delete_group_snapshot" ids="cinder.interface.volume_group_driver.VolumeGroupDriver.delete_group_snapshot" module="cinder.interface.volume_group_driver" names="cinder.interface.volume_group_driver.VolumeGroupDriver.delete_group_snapshot"><desc_name xml:space="preserve">delete_group_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_snapshot</desc_parameter><desc_parameter xml:space="preserve">snapshots</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Deletes a group_snapshot.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group_snapshot</literal_strong> – the GroupSnapshot object to be deleted.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">snapshots</literal_strong> – a list of Snapshot objects in the group_snapshot.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update, snapshots_model_update</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>param snapshots is a list of objects. It cannot be assigned to
                            snapshots_model_update. snapshots_model_update is a list of of
                            dictionaries. It has to be built by the driver. An entry will be
                            in this format: {‘id’: xxx, ‘status’: xxx, ……}. model_update
                            will be in this format: {‘status’: xxx, ……}.</paragraph>
                        <paragraph>The driver should populate snapshots_model_update and model_update
                            and return them.</paragraph>
                        <paragraph>The manager will check snapshots_model_update and update db accordingly
                            for each snapshot. If the driver successfully deleted some snapshots
                            but failed to delete others, it should set statuses of the snapshots
                            accordingly so that the manager can update db correctly.</paragraph>
                        <paragraph>If the status in any entry of snapshots_model_update is
                            ‘error_deleting’ or ‘error’, the status in model_update will be set to
                            the same if it is not already ‘error_deleting’ or ‘error’.</paragraph>
                        <paragraph>If the status in model_update is ‘error_deleting’ or ‘error’, the
                            manager will raise an exception and the status of group_snapshot will
                            be set to ‘error’ in the db. If snapshots_model_update is not returned
                            by the driver, the manager will set the status of every snapshot to
                            ‘error’ in the except block.</paragraph>
                        <paragraph>If the driver raises an exception during the operation, it will be
                            caught by the try-except block in the manager and the statuses of
                            group_snapshot and all snapshots will be set to ‘error’.</paragraph>
                        <paragraph>For a successful operation, the driver can either build the
                            model_update and snapshots_model_update and return them or
                            return None, None. The statuses of group_snapshot and all snapshots
                            will be set to ‘deleted’ after the manager deletes them from db.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'update_group()\ (VolumeGroupDriver\ method)',\ 'cinder.interface.volume_group_driver.VolumeGroupDriver.update_group',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeGroupDriver" first="False" fullname="VolumeGroupDriver.update_group" ids="cinder.interface.volume_group_driver.VolumeGroupDriver.update_group" module="cinder.interface.volume_group_driver" names="cinder.interface.volume_group_driver.VolumeGroupDriver.update_group"><desc_name xml:space="preserve">update_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">add_volumes=None</desc_parameter><desc_parameter xml:space="preserve">remove_volumes=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Updates a group.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group</literal_strong> – the Group object to be updated.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">add_volumes</literal_strong> – a list of Volume objects to be added.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">remove_volumes</literal_strong> – a list of Volume objects to be removed.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update, add_volumes_update, remove_volumes_update</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>model_update is a dictionary that the driver wants the manager
                            to update upon a successful return. If None is returned, the manager
                            will set the status to ‘available’.</paragraph>
                        <paragraph>add_volumes_update and remove_volumes_update are lists of dictionaries
                            that the driver wants the manager to update upon a successful return.
                            Note that each entry requires a {‘id’: xxx} so that the correct
                            volume entry can be updated. If None is returned, the volume will
                            remain its original status. Also note that you cannot directly
                            assign add_volumes to add_volumes_update as add_volumes is a list of
                            volume objects and cannot be used for db update directly. Same with
                            remove_volumes.</paragraph>
                        <paragraph>If the driver throws an exception, the status of the group as well as
                            those of the volumes to be added/removed will be set to ‘error’.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
    </section>
</document>
