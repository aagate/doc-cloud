<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api/cinder.volume.drivers.tintri.rst">
    <section ids="module-cinder.volume.drivers.tintri the-cinder-volume-drivers-tintri-module" names="the\ cinder.volume.drivers.tintri\ module">
        <title>The <reference internal="True" refid="module-cinder.volume.drivers.tintri" reftitle="cinder.volume.drivers.tintri"><literal classes="xref py py-mod">cinder.volume.drivers.tintri</literal></reference> Module</title>
        <index entries="['single',\ 'cinder.volume.drivers.tintri\ (module)',\ 'module-cinder.volume.drivers.tintri',\ '',\ None]"></index>
        <paragraph>Volume driver for Tintri storage.</paragraph>
        <index entries="['single',\ 'TClient\ (class\ in\ cinder.volume.drivers.tintri)',\ 'cinder.volume.drivers.tintri.TClient',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="TClient" ids="cinder.volume.drivers.tintri.TClient" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TClient"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">TClient</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">hostname</desc_parameter><desc_parameter xml:space="preserve">username</desc_parameter><desc_parameter xml:space="preserve">password</desc_parameter><desc_parameter xml:space="preserve">api_version='v310'</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                <paragraph>REST client for Tintri storage.</paragraph>
                <index entries="['single',\ 'clone_volume()\ (TClient\ method)',\ 'cinder.volume.drivers.tintri.TClient.clone_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TClient" first="False" fullname="TClient.clone_volume" ids="cinder.volume.drivers.tintri.TClient.clone_volume" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TClient.clone_volume"><desc_name xml:space="preserve">clone_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot_uuid</desc_parameter><desc_parameter xml:space="preserve">volume_path</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Clones a volume from snapshot.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_snapshot()\ (TClient\ method)',\ 'cinder.volume.drivers.tintri.TClient.create_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TClient" first="False" fullname="TClient.create_snapshot" ids="cinder.volume.drivers.tintri.TClient.create_snapshot" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TClient.create_snapshot"><desc_name xml:space="preserve">create_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume_path</desc_parameter><desc_parameter xml:space="preserve">volume_name</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">snapshot_name</desc_parameter><desc_parameter xml:space="preserve">deletion_policy=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a volume snapshot.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete()\ (TClient\ method)',\ 'cinder.volume.drivers.tintri.TClient.delete',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TClient" first="False" fullname="TClient.delete" ids="cinder.volume.drivers.tintri.TClient.delete" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TClient.delete"><desc_name xml:space="preserve">delete</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">api</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_snapshot()\ (TClient\ method)',\ 'cinder.volume.drivers.tintri.TClient.delete_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TClient" first="False" fullname="TClient.delete_snapshot" ids="cinder.volume.drivers.tintri.TClient.delete_snapshot" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TClient.delete_snapshot"><desc_name xml:space="preserve">delete_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot_uuid</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Deletes a snapshot.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get()\ (TClient\ method)',\ 'cinder.volume.drivers.tintri.TClient.get',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TClient" first="False" fullname="TClient.get" ids="cinder.volume.drivers.tintri.TClient.get" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TClient.get"><desc_name xml:space="preserve">get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">api</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_image_snapshots_to_date()\ (TClient\ method)',\ 'cinder.volume.drivers.tintri.TClient.get_image_snapshots_to_date',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TClient" first="False" fullname="TClient.get_image_snapshots_to_date" ids="cinder.volume.drivers.tintri.TClient.get_image_snapshots_to_date" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TClient.get_image_snapshots_to_date"><desc_name xml:space="preserve">get_image_snapshots_to_date</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">date</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_query()\ (TClient\ method)',\ 'cinder.volume.drivers.tintri.TClient.get_query',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TClient" first="False" fullname="TClient.get_query" ids="cinder.volume.drivers.tintri.TClient.get_query" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TClient.get_query"><desc_name xml:space="preserve">get_query</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">api</desc_parameter><desc_parameter xml:space="preserve">query</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_snapshot()\ (TClient\ method)',\ 'cinder.volume.drivers.tintri.TClient.get_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TClient" first="False" fullname="TClient.get_snapshot" ids="cinder.volume.drivers.tintri.TClient.get_snapshot" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TClient.get_snapshot"><desc_name xml:space="preserve">get_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume_id</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Gets a volume snapshot.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'login()\ (TClient\ method)',\ 'cinder.volume.drivers.tintri.TClient.login',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TClient" first="False" fullname="TClient.login" ids="cinder.volume.drivers.tintri.TClient.login" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TClient.login"><desc_name xml:space="preserve">login</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">username</desc_parameter><desc_parameter xml:space="preserve">password</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'logout()\ (TClient\ method)',\ 'cinder.volume.drivers.tintri.TClient.logout',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TClient" first="False" fullname="TClient.logout" ids="cinder.volume.drivers.tintri.TClient.logout" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TClient.logout"><desc_name xml:space="preserve">logout</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'post()\ (TClient\ method)',\ 'cinder.volume.drivers.tintri.TClient.post',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TClient" first="False" fullname="TClient.post" ids="cinder.volume.drivers.tintri.TClient.post" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TClient.post"><desc_name xml:space="preserve">post</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">api</desc_parameter><desc_parameter xml:space="preserve">payload</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'put()\ (TClient\ method)',\ 'cinder.volume.drivers.tintri.TClient.put',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TClient" first="False" fullname="TClient.put" ids="cinder.volume.drivers.tintri.TClient.put" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TClient.put"><desc_name xml:space="preserve">put</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">api</desc_parameter><desc_parameter xml:space="preserve">payload</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'TintriDriver\ (class\ in\ cinder.volume.drivers.tintri)',\ 'cinder.volume.drivers.tintri.TintriDriver',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="TintriDriver" ids="cinder.volume.drivers.tintri.TintriDriver" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TintriDriver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">TintriDriver</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" reftitle="cinder.volume.driver.ManageableVD" refuri="cinder.volume.driver#cinder.volume.driver.ManageableVD"><literal classes="xref py py-class">cinder.volume.driver.ManageableVD</literal></reference>, <reference internal="True" reftitle="cinder.volume.driver.CloneableImageVD" refuri="cinder.volume.driver#cinder.volume.driver.CloneableImageVD"><literal classes="xref py py-class">cinder.volume.driver.CloneableImageVD</literal></reference>, <reference internal="True" reftitle="cinder.volume.drivers.nfs.NfsDriver" refuri="cinder.volume.drivers.nfs#cinder.volume.drivers.nfs.NfsDriver"><literal classes="xref py py-class">cinder.volume.drivers.nfs.NfsDriver</literal></reference></paragraph>
                <paragraph>Base class for Tintri driver.</paragraph>
                <paragraph>Version History</paragraph>
                <literal_block highlight_args="{}" language="none" linenos="False" xml:space="preserve">2.1.0.1 - Liberty driver
2.2.0.1 - Mitaka driver
        -- Retype
        -- Image cache clean up
        -- Direct image clone fix</literal_block>
                <index entries="['single',\ 'CI_WIKI_NAME\ (TintriDriver\ attribute)',\ 'cinder.volume.drivers.tintri.TintriDriver.CI_WIKI_NAME',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="TintriDriver" first="False" fullname="TintriDriver.CI_WIKI_NAME" ids="cinder.volume.drivers.tintri.TintriDriver.CI_WIKI_NAME" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TintriDriver.CI_WIKI_NAME"><desc_name xml:space="preserve">CI_WIKI_NAME</desc_name><desc_annotation xml:space="preserve"> = 'Tintri_CI'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'REQUIRED_OPTIONS\ (TintriDriver\ attribute)',\ 'cinder.volume.drivers.tintri.TintriDriver.REQUIRED_OPTIONS',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="TintriDriver" first="False" fullname="TintriDriver.REQUIRED_OPTIONS" ids="cinder.volume.drivers.tintri.TintriDriver.REQUIRED_OPTIONS" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TintriDriver.REQUIRED_OPTIONS"><desc_name xml:space="preserve">REQUIRED_OPTIONS</desc_name><desc_annotation xml:space="preserve"> = ['tintri_server_hostname', 'tintri_server_username', 'tintri_server_password']</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'VENDOR\ (TintriDriver\ attribute)',\ 'cinder.volume.drivers.tintri.TintriDriver.VENDOR',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="TintriDriver" first="False" fullname="TintriDriver.VENDOR" ids="cinder.volume.drivers.tintri.TintriDriver.VENDOR" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TintriDriver.VENDOR"><desc_name xml:space="preserve">VENDOR</desc_name><desc_annotation xml:space="preserve"> = 'Tintri'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'VERSION\ (TintriDriver\ attribute)',\ 'cinder.volume.drivers.tintri.TintriDriver.VERSION',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="TintriDriver" first="False" fullname="TintriDriver.VERSION" ids="cinder.volume.drivers.tintri.TintriDriver.VERSION" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TintriDriver.VERSION"><desc_name xml:space="preserve">VERSION</desc_name><desc_annotation xml:space="preserve"> = '2.2.0.1'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'clone_image()\ (TintriDriver\ method)',\ 'cinder.volume.drivers.tintri.TintriDriver.clone_image',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TintriDriver" first="False" fullname="TintriDriver.clone_image" ids="cinder.volume.drivers.tintri.TintriDriver.clone_image" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TintriDriver.clone_image"><desc_name xml:space="preserve">clone_image</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">image_location</desc_parameter><desc_parameter xml:space="preserve">image_meta</desc_parameter><desc_parameter xml:space="preserve">image_service</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a volume efficiently from an existing image.</paragraph>
                        <paragraph>image_location is a string whose format depends on the
                            image service backend in use. The driver should use it
                            to determine whether cloning is possible.</paragraph>
                        <paragraph>Returns a dict of volume properties eg. provider_location,
                            boolean indicating whether cloning occurred.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'copy_image_to_volume()\ (TintriDriver\ method)',\ 'cinder.volume.drivers.tintri.TintriDriver.copy_image_to_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TintriDriver" first="False" fullname="TintriDriver.copy_image_to_volume" ids="cinder.volume.drivers.tintri.TintriDriver.copy_image_to_volume" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TintriDriver.copy_image_to_volume"><desc_name xml:space="preserve">copy_image_to_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">image_service</desc_parameter><desc_parameter xml:space="preserve">image_id</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Fetches the image from image_service and write it to the volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_cloned_volume()\ (TintriDriver\ method)',\ 'cinder.volume.drivers.tintri.TintriDriver.create_cloned_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TintriDriver" first="False" fullname="TintriDriver.create_cloned_volume" ids="cinder.volume.drivers.tintri.TintriDriver.create_cloned_volume" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TintriDriver.create_cloned_volume"><desc_name xml:space="preserve">create_cloned_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">src_vref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a clone of the specified volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_snapshot()\ (TintriDriver\ method)',\ 'cinder.volume.drivers.tintri.TintriDriver.create_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TintriDriver" first="False" fullname="TintriDriver.create_snapshot" ids="cinder.volume.drivers.tintri.TintriDriver.create_snapshot" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TintriDriver.create_snapshot"><desc_name xml:space="preserve">create_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a snapshot.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_volume_from_snapshot()\ (TintriDriver\ method)',\ 'cinder.volume.drivers.tintri.TintriDriver.create_volume_from_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TintriDriver" first="False" fullname="TintriDriver.create_volume_from_snapshot" ids="cinder.volume.drivers.tintri.TintriDriver.create_volume_from_snapshot" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TintriDriver.create_volume_from_snapshot"><desc_name xml:space="preserve">create_volume_from_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a volume from snapshot.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_snapshot()\ (TintriDriver\ method)',\ 'cinder.volume.drivers.tintri.TintriDriver.delete_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TintriDriver" first="False" fullname="TintriDriver.delete_snapshot" ids="cinder.volume.drivers.tintri.TintriDriver.delete_snapshot" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TintriDriver.delete_snapshot"><desc_name xml:space="preserve">delete_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Deletes a snapshot.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'do_setup()\ (TintriDriver\ method)',\ 'cinder.volume.drivers.tintri.TintriDriver.do_setup',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TintriDriver" first="False" fullname="TintriDriver.do_setup" ids="cinder.volume.drivers.tintri.TintriDriver.do_setup" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TintriDriver.do_setup"><desc_name xml:space="preserve">do_setup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_pool()\ (TintriDriver\ method)',\ 'cinder.volume.drivers.tintri.TintriDriver.get_pool',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TintriDriver" first="False" fullname="TintriDriver.get_pool" ids="cinder.volume.drivers.tintri.TintriDriver.get_pool" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TintriDriver.get_pool"><desc_name xml:space="preserve">get_pool</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns pool name where volume resides.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">volume</literal_strong> – The volume hosted by the driver.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>Name of the pool where given volume is hosted.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing()\ (TintriDriver\ method)',\ 'cinder.volume.drivers.tintri.TintriDriver.manage_existing',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TintriDriver" first="False" fullname="TintriDriver.manage_existing" ids="cinder.volume.drivers.tintri.TintriDriver.manage_existing" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TintriDriver.manage_existing"><desc_name xml:space="preserve">manage_existing</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Brings an existing backend storage object under Cinder management.</paragraph>
                        <paragraph>existing_ref is passed straight through from the API request’s
                            manage_existing_ref value, and it is up to the driver how this should
                            be interpreted.  It should be sufficient to identify a storage object
                            that the driver should somehow associate with the newly-created cinder
                            volume structure.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – Cinder volume to manage</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">existing_ref</literal_strong> – Driver-specific information used to identify a
                                                volume</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing_get_size()\ (TintriDriver\ method)',\ 'cinder.volume.drivers.tintri.TintriDriver.manage_existing_get_size',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TintriDriver" first="False" fullname="TintriDriver.manage_existing_get_size" ids="cinder.volume.drivers.tintri.TintriDriver.manage_existing_get_size" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TintriDriver.manage_existing_get_size"><desc_name xml:space="preserve">manage_existing_get_size</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns size of volume to be managed by manage_existing.</paragraph>
                        <paragraph>When calculating the size, round up to the next GB.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – Cinder volume to manage</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">existing_ref</literal_strong> – Driver-specific information used to identify a
                                                volume</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'retype()\ (TintriDriver\ method)',\ 'cinder.volume.drivers.tintri.TintriDriver.retype',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TintriDriver" first="False" fullname="TintriDriver.retype" ids="cinder.volume.drivers.tintri.TintriDriver.retype" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TintriDriver.retype"><desc_name xml:space="preserve">retype</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">new_type</desc_parameter><desc_parameter xml:space="preserve">diff</desc_parameter><desc_parameter xml:space="preserve">host</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Retype from one volume type to another.</paragraph>
                        <paragraph>At this point Tintri VMstore does not differentiate between
                            volume types on the same array. This is a no-op for us.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'unmanage()\ (TintriDriver\ method)',\ 'cinder.volume.drivers.tintri.TintriDriver.unmanage',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TintriDriver" first="False" fullname="TintriDriver.unmanage" ids="cinder.volume.drivers.tintri.TintriDriver.unmanage" module="cinder.volume.drivers.tintri" names="cinder.volume.drivers.tintri.TintriDriver.unmanage"><desc_name xml:space="preserve">unmanage</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Removes the specified volume from Cinder management.</paragraph>
                        <paragraph>Does not delete the underlying backend storage object.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">volume</literal_strong> – Cinder volume to unmanage</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
    </section>
</document>
