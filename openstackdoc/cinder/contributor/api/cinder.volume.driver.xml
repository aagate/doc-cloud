<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api/cinder.volume.driver.rst">
    <section ids="module-cinder.volume.driver the-cinder-volume-driver-module" names="the\ cinder.volume.driver\ module">
        <title>The <reference internal="True" refid="module-cinder.volume.driver" reftitle="cinder.volume.driver"><literal classes="xref py py-mod">cinder.volume.driver</literal></reference> Module</title>
        <index entries="['single',\ 'cinder.volume.driver\ (module)',\ 'module-cinder.volume.driver',\ '',\ None]"></index>
        <paragraph>Drivers for volumes.</paragraph>
        <index entries="['single',\ 'BaseVD\ (class\ in\ cinder.volume.driver)',\ 'cinder.volume.driver.BaseVD',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="BaseVD" ids="cinder.volume.driver.BaseVD" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">BaseVD</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">execute=&lt;function execute&gt;</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                <paragraph>Executes commands relating to Volumes.</paragraph>
                <paragraph>Base Driver for Cinder Volume Control Path,
                    This includes supported/required implementation
                    for API calls.  Also provides <emphasis>generic</emphasis> implementation
                    of core features like cloning, copy_image_to_volume etc,
                    this way drivers that inherit from this base class and
                    don’t offer their own impl can fall back on a general
                    solution here.</paragraph>
                <paragraph>Key thing to keep in mind with this driver is that it’s
                    intended that these drivers ONLY implement Control Path
                    details (create, delete, extend…), while transport or
                    data path related implementation should be a <emphasis>member object</emphasis>
                    that we call a connector.  The point here is that for example
                    don’t allow the LVM driver to implement iSCSI methods, instead
                    call whatever connector it has configured via conf file
                    (iSCSI{LIO, TGT, IET}, FC, etc).</paragraph>
                <paragraph>In the base class and for example the LVM driver we do this via a has-a
                    relationship and just provide an interface to the specific connector
                    methods.  How you do this in your own driver is of course up to you.</paragraph>
                <index entries="['single',\ 'REPLICATION_FEATURE_CHECKERS\ (BaseVD\ attribute)',\ 'cinder.volume.driver.BaseVD.REPLICATION_FEATURE_CHECKERS',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.REPLICATION_FEATURE_CHECKERS" ids="cinder.volume.driver.BaseVD.REPLICATION_FEATURE_CHECKERS" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.REPLICATION_FEATURE_CHECKERS"><desc_name xml:space="preserve">REPLICATION_FEATURE_CHECKERS</desc_name><desc_annotation xml:space="preserve"> = {'v2.1': 'failover_host', 'a/a': 'failover_completed'}</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'SUPPORTED\ (BaseVD\ attribute)',\ 'cinder.volume.driver.BaseVD.SUPPORTED',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.SUPPORTED" ids="cinder.volume.driver.BaseVD.SUPPORTED" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.SUPPORTED"><desc_name xml:space="preserve">SUPPORTED</desc_name><desc_annotation xml:space="preserve"> = True</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'SUPPORTS_ACTIVE_ACTIVE\ (BaseVD\ attribute)',\ 'cinder.volume.driver.BaseVD.SUPPORTS_ACTIVE_ACTIVE',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.SUPPORTS_ACTIVE_ACTIVE" ids="cinder.volume.driver.BaseVD.SUPPORTS_ACTIVE_ACTIVE" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.SUPPORTS_ACTIVE_ACTIVE"><desc_name xml:space="preserve">SUPPORTS_ACTIVE_ACTIVE</desc_name><desc_annotation xml:space="preserve"> = False</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'VERSION\ (BaseVD\ attribute)',\ 'cinder.volume.driver.BaseVD.VERSION',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.VERSION" ids="cinder.volume.driver.BaseVD.VERSION" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.VERSION"><desc_name xml:space="preserve">VERSION</desc_name><desc_annotation xml:space="preserve"> = 'N/A'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'accept_transfer()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.accept_transfer',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.accept_transfer" ids="cinder.volume.driver.BaseVD.accept_transfer" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.accept_transfer"><desc_name xml:space="preserve">accept_transfer</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">new_user</desc_parameter><desc_parameter xml:space="preserve">new_project</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'after_volume_copy()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.after_volume_copy',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.after_volume_copy" ids="cinder.volume.driver.BaseVD.after_volume_copy" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.after_volume_copy"><desc_name xml:space="preserve">after_volume_copy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">src_vol</desc_parameter><desc_parameter xml:space="preserve">dest_vol</desc_parameter><desc_parameter xml:space="preserve">remote=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Driver-specific actions after copyvolume data.</paragraph>
                        <paragraph>This method will be called after _copy_volume_data during volume
                            migration</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'attach_volume()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.attach_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.attach_volume" ids="cinder.volume.driver.BaseVD.attach_volume" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.attach_volume"><desc_name xml:space="preserve">attach_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">instance_uuid</desc_parameter><desc_parameter xml:space="preserve">host_name</desc_parameter><desc_parameter xml:space="preserve">mountpoint</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Callback for volume attached to instance or host.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'backup_use_temp_snapshot()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.backup_use_temp_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.backup_use_temp_snapshot" ids="cinder.volume.driver.BaseVD.backup_use_temp_snapshot" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.backup_use_temp_snapshot"><desc_name xml:space="preserve">backup_use_temp_snapshot</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'before_volume_copy()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.before_volume_copy',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.before_volume_copy" ids="cinder.volume.driver.BaseVD.before_volume_copy" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.before_volume_copy"><desc_name xml:space="preserve">before_volume_copy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">src_vol</desc_parameter><desc_parameter xml:space="preserve">dest_vol</desc_parameter><desc_parameter xml:space="preserve">remote=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Driver-specific actions before copyvolume data.</paragraph>
                        <paragraph>This method will be called before _copy_volume_data during volume
                            migration</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'check_for_setup_error()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.check_for_setup_error',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.check_for_setup_error" ids="cinder.volume.driver.BaseVD.check_for_setup_error" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.check_for_setup_error"><desc_name xml:space="preserve">check_for_setup_error</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'clear_download()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.clear_download',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.clear_download" ids="cinder.volume.driver.BaseVD.clear_download" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.clear_download"><desc_name xml:space="preserve">clear_download</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Clean up after an interrupted image copy.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'clone_image()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.clone_image',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.clone_image" ids="cinder.volume.driver.BaseVD.clone_image" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.clone_image"><desc_name xml:space="preserve">clone_image</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">image_location</desc_parameter><desc_parameter xml:space="preserve">image_meta</desc_parameter><desc_parameter xml:space="preserve">image_service</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'copy_image_to_encrypted_volume()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.copy_image_to_encrypted_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.copy_image_to_encrypted_volume" ids="cinder.volume.driver.BaseVD.copy_image_to_encrypted_volume" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.copy_image_to_encrypted_volume"><desc_name xml:space="preserve">copy_image_to_encrypted_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">image_service</desc_parameter><desc_parameter xml:space="preserve">image_id</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Fetch image from image_service and write to encrypted volume.</paragraph>
                        <paragraph>This attaches the encryptor layer when connecting to the volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'copy_image_to_volume()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.copy_image_to_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.copy_image_to_volume" ids="cinder.volume.driver.BaseVD.copy_image_to_volume" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.copy_image_to_volume"><desc_name xml:space="preserve">copy_image_to_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">image_service</desc_parameter><desc_parameter xml:space="preserve">image_id</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Fetch image from image_service and write to unencrypted volume.</paragraph>
                        <paragraph>This does not attach an encryptor layer when connecting to the volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'copy_volume_to_image()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.copy_volume_to_image',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.copy_volume_to_image" ids="cinder.volume.driver.BaseVD.copy_volume_to_image" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.copy_volume_to_image"><desc_name xml:space="preserve">copy_volume_to_image</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">image_service</desc_parameter><desc_parameter xml:space="preserve">image_meta</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy the volume to the specified image.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_cloned_volume()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.create_cloned_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.create_cloned_volume" ids="cinder.volume.driver.BaseVD.create_cloned_volume" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.create_cloned_volume"><desc_name xml:space="preserve">create_cloned_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">src_vref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a clone of the specified volume.</paragraph>
                        <paragraph>If volume_type extra specs includes ‘replication: &lt;is&gt; True’ the
                            driver needs to create a volume replica (secondary)
                            and setup replication between the newly created volume
                            and the secondary volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_export()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.create_export',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.create_export" ids="cinder.volume.driver.BaseVD.create_export" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.create_export"><desc_name xml:space="preserve">create_export</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Exports the volume.</paragraph>
                        <paragraph>Can optionally return a Dictionary of changes
                            to the volume object to be persisted.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_export_snapshot()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.create_export_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.create_export_snapshot" ids="cinder.volume.driver.BaseVD.create_export_snapshot" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.create_export_snapshot"><desc_name xml:space="preserve">create_export_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Exports the snapshot.</paragraph>
                        <paragraph>Can optionally return a Dictionary of changes
                            to the snapshot object to be persisted.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_group()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.create_group',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.create_group" ids="cinder.volume.driver.BaseVD.create_group" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.create_group"><desc_name xml:space="preserve">create_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a group.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group</literal_strong> – the Group object of the group to be created.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>model_update will be in this format: {‘status’: xxx, ……}.</paragraph>
                        <paragraph>If the status in model_update is ‘error’, the manager will throw
                            an exception and it will be caught in the try-except block in the
                            manager. If the driver throws an exception, the manager will also
                            catch it in the try-except block. The group status in the db will
                            be changed to ‘error’.</paragraph>
                        <paragraph>For a successful operation, the driver can either build the
                            model_update and return it or return None. The group status will
                            be set to ‘available’.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_group_from_src()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.create_group_from_src',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.create_group_from_src" ids="cinder.volume.driver.BaseVD.create_group_from_src" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.create_group_from_src"><desc_name xml:space="preserve">create_group_from_src</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">volumes</desc_parameter><desc_parameter xml:space="preserve">group_snapshot=None</desc_parameter><desc_parameter xml:space="preserve">snapshots=None</desc_parameter><desc_parameter xml:space="preserve">source_group=None</desc_parameter><desc_parameter xml:space="preserve">source_vols=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a group from source.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group</literal_strong> – the Group object to be created.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volumes</literal_strong> – a list of Volume objects in the group.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group_snapshot</literal_strong> – the GroupSnapshot object as source.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">snapshots</literal_strong> – a list of Snapshot objects in group_snapshot.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">source_group</literal_strong> – the Group object as source.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">source_vols</literal_strong> – a list of Volume objects in the source_group.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update, volumes_model_update</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>The source can be group_snapshot or a source_group.</paragraph>
                        <paragraph>param volumes is a list of objects retrieved from the db. It cannot
                            be assigned to volumes_model_update. volumes_model_update is a list
                            of dictionaries. It has to be built by the driver. An entry will be
                            in this format: {‘id’: xxx, ‘status’: xxx, ……}. model_update
                            will be in this format: {‘status’: xxx, ……}.</paragraph>
                        <paragraph>To be consistent with other volume operations, the manager will
                            assume the operation is successful if no exception is thrown by
                            the driver. For a successful operation, the driver can either build
                            the model_update and volumes_model_update and return them or
                            return None, None.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_group_snapshot()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.create_group_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.create_group_snapshot" ids="cinder.volume.driver.BaseVD.create_group_snapshot" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.create_group_snapshot"><desc_name xml:space="preserve">create_group_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_snapshot</desc_parameter><desc_parameter xml:space="preserve">snapshots</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a group_snapshot.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group_snapshot</literal_strong> – the GroupSnapshot object to be created.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">snapshots</literal_strong> – a list of Snapshot objects in the group_snapshot.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update, snapshots_model_update</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>param snapshots is a list of Snapshot objects. It cannot be assigned
                            to snapshots_model_update. snapshots_model_update is a list of
                            dictionaries. It has to be built by the driver. An entry will be
                            in this format: {‘id’: xxx, ‘status’: xxx, ……}. model_update
                            will be in this format: {‘status’: xxx, ……}.</paragraph>
                        <paragraph>The driver should populate snapshots_model_update and model_update
                            and return them.</paragraph>
                        <paragraph>The manager will check snapshots_model_update and update db accordingly
                            for each snapshot. If the driver successfully deleted some snapshots
                            but failed to delete others, it should set statuses of the snapshots
                            accordingly so that the manager can update db correctly.</paragraph>
                        <paragraph>If the status in any entry of snapshots_model_update is ‘error’, the
                            status in model_update will be set to the same if it is not already
                            ‘error’.</paragraph>
                        <paragraph>If the status in model_update is ‘error’, the manager will raise an
                            exception and the status of group_snapshot will be set to ‘error’ in
                            the db. If snapshots_model_update is not returned by the driver, the
                            manager will set the status of every snapshot to ‘error’ in the except
                            block.</paragraph>
                        <paragraph>If the driver raises an exception during the operation, it will be
                            caught by the try-except block in the manager and the statuses of
                            group_snapshot and all snapshots will be set to ‘error’.</paragraph>
                        <paragraph>For a successful operation, the driver can either build the
                            model_update and snapshots_model_update and return them or
                            return None, None. The statuses of group_snapshot and all snapshots
                            will be set to ‘available’ at the end of the manager function.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_volume()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.create_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.create_volume" ids="cinder.volume.driver.BaseVD.create_volume" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.create_volume"><desc_name xml:space="preserve">create_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a volume.</paragraph>
                        <paragraph>Can optionally return a Dictionary of changes to the volume object to
                            be persisted.</paragraph>
                        <paragraph>If volume_type extra specs includes
                            ‘capabilities:replication &lt;is&gt; True’ the driver
                            needs to create a volume replica (secondary), and setup replication
                            between the newly created volume and the secondary volume.
                            Returned dictionary should include:</paragraph>
                        <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">volume['replication_status'] = 'copying'
volume['replication_extended_status'] = &lt;driver specific value&gt;
volume['driver_data'] = &lt;driver specific value&gt;</literal_block>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_group()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.delete_group',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.delete_group" ids="cinder.volume.driver.BaseVD.delete_group" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.delete_group"><desc_name xml:space="preserve">delete_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">volumes</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Deletes a group.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group</literal_strong> – the Group object of the group to be deleted.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volumes</literal_strong> – a list of Volume objects in the group.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update, volumes_model_update</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>param volumes is a list of objects retrieved from the db. It cannot
                            be assigned to volumes_model_update. volumes_model_update is a list
                            of dictionaries. It has to be built by the driver. An entry will be
                            in this format: {‘id’: xxx, ‘status’: xxx, ……}. model_update
                            will be in this format: {‘status’: xxx, ……}.</paragraph>
                        <paragraph>The driver should populate volumes_model_update and model_update
                            and return them.</paragraph>
                        <paragraph>The manager will check volumes_model_update and update db accordingly
                            for each volume. If the driver successfully deleted some volumes
                            but failed to delete others, it should set statuses of the volumes
                            accordingly so that the manager can update db correctly.</paragraph>
                        <paragraph>If the status in any entry of volumes_model_update is ‘error_deleting’
                            or ‘error’, the status in model_update will be set to the same if it
                            is not already ‘error_deleting’ or ‘error’.</paragraph>
                        <paragraph>If the status in model_update is ‘error_deleting’ or ‘error’, the
                            manager will raise an exception and the status of the group will be
                            set to ‘error’ in the db. If volumes_model_update is not returned by
                            the driver, the manager will set the status of every volume in the
                            group to ‘error’ in the except block.</paragraph>
                        <paragraph>If the driver raises an exception during the operation, it will be
                            caught by the try-except block in the manager. The statuses of the
                            group and all volumes in it will be set to ‘error’.</paragraph>
                        <paragraph>For a successful operation, the driver can either build the
                            model_update and volumes_model_update and return them or
                            return None, None. The statuses of the group and all volumes
                            will be set to ‘deleted’ after the manager deletes them from db.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_group_snapshot()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.delete_group_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.delete_group_snapshot" ids="cinder.volume.driver.BaseVD.delete_group_snapshot" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.delete_group_snapshot"><desc_name xml:space="preserve">delete_group_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group_snapshot</desc_parameter><desc_parameter xml:space="preserve">snapshots</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Deletes a group_snapshot.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group_snapshot</literal_strong> – the GroupSnapshot object to be deleted.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">snapshots</literal_strong> – a list of Snapshot objects in the group_snapshot.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update, snapshots_model_update</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>param snapshots is a list of objects. It cannot be assigned to
                            snapshots_model_update. snapshots_model_update is a list of of
                            dictionaries. It has to be built by the driver. An entry will be
                            in this format: {‘id’: xxx, ‘status’: xxx, ……}. model_update
                            will be in this format: {‘status’: xxx, ……}.</paragraph>
                        <paragraph>The driver should populate snapshots_model_update and model_update
                            and return them.</paragraph>
                        <paragraph>The manager will check snapshots_model_update and update db accordingly
                            for each snapshot. If the driver successfully deleted some snapshots
                            but failed to delete others, it should set statuses of the snapshots
                            accordingly so that the manager can update db correctly.</paragraph>
                        <paragraph>If the status in any entry of snapshots_model_update is
                            ‘error_deleting’ or ‘error’, the status in model_update will be set to
                            the same if it is not already ‘error_deleting’ or ‘error’.</paragraph>
                        <paragraph>If the status in model_update is ‘error_deleting’ or ‘error’, the
                            manager will raise an exception and the status of group_snapshot will
                            be set to ‘error’ in the db. If snapshots_model_update is not returned
                            by the driver, the manager will set the status of every snapshot to
                            ‘error’ in the except block.</paragraph>
                        <paragraph>If the driver raises an exception during the operation, it will be
                            caught by the try-except block in the manager and the statuses of
                            group_snapshot and all snapshots will be set to ‘error’.</paragraph>
                        <paragraph>For a successful operation, the driver can either build the
                            model_update and snapshots_model_update and return them or
                            return None, None. The statuses of group_snapshot and all snapshots
                            will be set to ‘deleted’ after the manager deletes them from db.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_volume()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.delete_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.delete_volume" ids="cinder.volume.driver.BaseVD.delete_volume" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.delete_volume"><desc_name xml:space="preserve">delete_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Deletes a volume.</paragraph>
                        <paragraph>If volume_type extra specs includes ‘replication: &lt;is&gt; True’
                            then the driver needs to delete the volume replica too.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'detach_volume()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.detach_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.detach_volume" ids="cinder.volume.driver.BaseVD.detach_volume" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.detach_volume"><desc_name xml:space="preserve">detach_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">attachment=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Callback for volume detached.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'disable_replication()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.disable_replication',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.disable_replication" ids="cinder.volume.driver.BaseVD.disable_replication" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.disable_replication"><desc_name xml:space="preserve">disable_replication</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">volumes</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Disables replication for a group and volumes in the group.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group</literal_strong> – group object</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volumes</literal_strong> – list of volume objects in the group</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update - dict of group updates</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>volume_model_updates - list of dicts of volume updates</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'do_setup()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.do_setup',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.do_setup" ids="cinder.volume.driver.BaseVD.do_setup" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.do_setup"><desc_name xml:space="preserve">do_setup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Any initialization the volume driver does while starting.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'enable_replication()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.enable_replication',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.enable_replication" ids="cinder.volume.driver.BaseVD.enable_replication" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.enable_replication"><desc_name xml:space="preserve">enable_replication</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">volumes</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Enables replication for a group and volumes in the group.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group</literal_strong> – group object</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volumes</literal_strong> – list of volume objects in the group</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update - dict of group updates</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>volume_model_updates - list of dicts of volume updates</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'ensure_export()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.ensure_export',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.ensure_export" ids="cinder.volume.driver.BaseVD.ensure_export" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.ensure_export"><desc_name xml:space="preserve">ensure_export</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Synchronously recreates an export for a volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'extend_volume()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.extend_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.extend_volume" ids="cinder.volume.driver.BaseVD.extend_volume" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.extend_volume"><desc_name xml:space="preserve">extend_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">new_size</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'failover()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.failover',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.failover" ids="cinder.volume.driver.BaseVD.failover" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.failover"><desc_name xml:space="preserve">failover</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volumes</desc_parameter><desc_parameter xml:space="preserve">secondary_id=None</desc_parameter><desc_parameter xml:space="preserve">groups=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Like failover but for a host that is clustered.</paragraph>
                        <paragraph>Most of the time this will be the exact same behavior as failover_host,
                            so if it’s not overwritten, it is assumed to be the case.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'failover_completed()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.failover_completed',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.failover_completed" ids="cinder.volume.driver.BaseVD.failover_completed" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.failover_completed"><desc_name xml:space="preserve">failover_completed</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">active_backend_id=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>This method is called after failover for clustered backends.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'failover_host()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.failover_host',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.failover_host" ids="cinder.volume.driver.BaseVD.failover_host" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.failover_host"><desc_name xml:space="preserve">failover_host</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volumes</desc_parameter><desc_parameter xml:space="preserve">secondary_id=None</desc_parameter><desc_parameter xml:space="preserve">groups=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Failover a backend to a secondary replication target.</paragraph>
                        <paragraph>Instructs a replication capable/configured backend to failover
                            to one of it’s secondary replication targets. host=None is
                            an acceptable input, and leaves it to the driver to failover
                            to the only configured target, or to choose a target on it’s
                            own. All of the hosts volumes will be passed on to the driver
                            in order for it to determine the replicated volumes on the host,
                            if needed.</paragraph>
                        <paragraph>Response is a tuple, including the new target backend_id
                            AND a lit of dictionaries with volume_id and updates.
                            Key things to consider (attaching failed-over volumes):
                            - provider_location
                            - provider_auth
                            - provider_id
                            - replication_status</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – security context</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volumes</literal_strong> – list of volume objects, in case the driver needs
                                                to take action on them in some way</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">secondary_id</literal_strong> – Specifies rep target backend to fail over to</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">groups</literal_strong> – replication groups</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>ID of the backend that was failed-over to,
                                        model update for volumes, and model update for groups</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'failover_replication()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.failover_replication',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.failover_replication" ids="cinder.volume.driver.BaseVD.failover_replication" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.failover_replication"><desc_name xml:space="preserve">failover_replication</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">volumes</desc_parameter><desc_parameter xml:space="preserve">secondary_backend_id=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Fails over replication for a group and volumes in the group.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group</literal_strong> – group object</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volumes</literal_strong> – list of volume objects in the group</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">secondary_backend_id</literal_strong> – backend_id of the secondary site</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update - dict of group updates</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>volume_model_updates - list of dicts of volume updates</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'freeze_backend()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.freeze_backend',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.freeze_backend" ids="cinder.volume.driver.BaseVD.freeze_backend" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.freeze_backend"><desc_name xml:space="preserve">freeze_backend</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Notify the backend that it’s frozen.</paragraph>
                        <paragraph>We use set to prohibit the creation of any new resources
                            on the backend, or any modifications to existing items on
                            a backend.  We set/enforce this by not allowing scheduling
                            of new volumes to the specified backend, and checking at the
                            api for modifications to resources and failing.</paragraph>
                        <paragraph>In most cases the driver may not need to do anything, but
                            this provides a handle if they need it.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – security context</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Response</field_name>
                                <field_body>
                                    <paragraph>True|False</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_backup_device()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.get_backup_device',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.get_backup_device" ids="cinder.volume.driver.BaseVD.get_backup_device" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.get_backup_device"><desc_name xml:space="preserve">get_backup_device</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">backup</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get a backup device from an existing volume.</paragraph>
                        <paragraph>The function returns a volume or snapshot to backup service,
                            and then backup service attaches the device and does backup.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_default_filter_function()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.get_default_filter_function',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.get_default_filter_function" ids="cinder.volume.driver.BaseVD.get_default_filter_function" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.get_default_filter_function"><desc_name xml:space="preserve">get_default_filter_function</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get the default filter_function string.</paragraph>
                        <paragraph>Each driver could overwrite the method to return a well-known
                            default string if it is available.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>None</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_default_goodness_function()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.get_default_goodness_function',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.get_default_goodness_function" ids="cinder.volume.driver.BaseVD.get_default_goodness_function" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.get_default_goodness_function"><desc_name xml:space="preserve">get_default_goodness_function</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get the default goodness_function string.</paragraph>
                        <paragraph>Each driver could overwrite the method to return a well-known
                            default string if it is available.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>None</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_filter_function()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.get_filter_function',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.get_filter_function" ids="cinder.volume.driver.BaseVD.get_filter_function" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.get_filter_function"><desc_name xml:space="preserve">get_filter_function</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get filter_function string.</paragraph>
                        <paragraph>Returns either the string from the driver instance or global section
                            in cinder.conf. If nothing is specified in cinder.conf, then try to
                            find the default filter_function. When None is returned the scheduler
                            will always pass the driver instance.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>a filter_function string or None</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_goodness_function()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.get_goodness_function',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.get_goodness_function" ids="cinder.volume.driver.BaseVD.get_goodness_function" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.get_goodness_function"><desc_name xml:space="preserve">get_goodness_function</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get good_function string.</paragraph>
                        <paragraph>Returns either the string from the driver instance or global section
                            in cinder.conf. If nothing is specified in cinder.conf, then try to
                            find the default goodness_function. When None is returned the scheduler
                            will give the lowest score to the driver instance.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>a goodness_function string or None</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_pool()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.get_pool',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.get_pool" ids="cinder.volume.driver.BaseVD.get_pool" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.get_pool"><desc_name xml:space="preserve">get_pool</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Return pool name where volume reside on.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">volume</literal_strong> – The volume hosted by the driver.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>name of the pool where given volume is in.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_prefixed_property()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.get_prefixed_property',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.get_prefixed_property" ids="cinder.volume.driver.BaseVD.get_prefixed_property" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.get_prefixed_property"><desc_name xml:space="preserve">get_prefixed_property</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">property</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Return prefixed property name</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>a prefixed property name string or None</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_replication_error_status()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.get_replication_error_status',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.get_replication_error_status" ids="cinder.volume.driver.BaseVD.get_replication_error_status" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.get_replication_error_status"><desc_name xml:space="preserve">get_replication_error_status</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">groups</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns error info for replicated groups and its volumes.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>group_model_updates - list of dicts of group updates</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>if error happens. For example, a dict of a group can be as follows:</paragraph>
                        <literal_block classes="code python" xml:space="preserve"><inline classes="punctuation">{</inline><inline classes="literal string single">'group_id'</inline><inline classes="punctuation">:</inline> <inline classes="name">xxxx</inline><inline classes="punctuation">,</inline>
 <inline classes="literal string single">'replication_status'</inline><inline classes="punctuation">:</inline> <inline classes="name">fields</inline><inline classes="operator">.</inline><inline classes="name">ReplicationStatus</inline><inline classes="operator">.</inline><inline classes="name">ERROR</inline><inline classes="punctuation">}</inline></literal_block>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>volume_model_updates - list of dicts of volume updates</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>if error happens. For example, a dict of a volume can be as follows:</paragraph>
                        <literal_block classes="code python" xml:space="preserve"><inline classes="punctuation">{</inline><inline classes="literal string single">'volume_id'</inline><inline classes="punctuation">:</inline> <inline classes="name">xxxx</inline><inline classes="punctuation">,</inline>
 <inline classes="literal string single">'replication_status'</inline><inline classes="punctuation">:</inline> <inline classes="name">fields</inline><inline classes="operator">.</inline><inline classes="name">ReplicationStatus</inline><inline classes="operator">.</inline><inline classes="name">ERROR</inline><inline classes="punctuation">}</inline></literal_block>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_replication_updates()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.get_replication_updates',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.get_replication_updates" ids="cinder.volume.driver.BaseVD.get_replication_updates" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.get_replication_updates"><desc_name xml:space="preserve">get_replication_updates</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Old replication update method, deprecate.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_version()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.get_version',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.get_version" ids="cinder.volume.driver.BaseVD.get_version" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.get_version"><desc_name xml:space="preserve">get_version</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get the current version of this driver.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_volume_stats()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.get_volume_stats',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.get_volume_stats" ids="cinder.volume.driver.BaseVD.get_volume_stats" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.get_volume_stats"><desc_name xml:space="preserve">get_volume_stats</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">refresh=False</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Return the current state of the volume service.</paragraph>
                        <paragraph>If ‘refresh’ is True, run the update first.</paragraph>
                        <paragraph>For replication the following state should be reported:
                            replication = True (None or false disables replication)</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'init_capabilities()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.init_capabilities',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.init_capabilities" ids="cinder.volume.driver.BaseVD.init_capabilities" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.init_capabilities"><desc_name xml:space="preserve">init_capabilities</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Obtain backend volume stats and capabilities list.</paragraph>
                        <paragraph>This stores a dictionary which is consisted of two parts.
                            First part includes static backend capabilities which are
                            obtained by get_volume_stats(). Second part is properties,
                            which includes parameters correspond to extra specs.
                            This properties part is consisted of cinder standard
                            capabilities and vendor unique properties.</paragraph>
                        <paragraph>Using this capabilities list, operator can manage/configure
                            backend using key/value from capabilities without specific
                            knowledge of backend.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'initialize_connection()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.initialize_connection',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.initialize_connection" ids="cinder.volume.driver.BaseVD.initialize_connection" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.initialize_connection"><desc_name xml:space="preserve">initialize_connection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Allow connection to connector and return connection info.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – The volume to be attached</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">connector</literal_strong> – Dictionary containing information about what is being
                                                connected to.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns conn_info</field_name>
                                <field_body>
                                    <paragraph>A dictionary of connection information.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'initialize_connection_snapshot()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.initialize_connection_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.initialize_connection_snapshot" ids="cinder.volume.driver.BaseVD.initialize_connection_snapshot" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.initialize_connection_snapshot"><desc_name xml:space="preserve">initialize_connection_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Allow connection to connector and return connection info.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">snapshot</literal_strong> – The snapshot to be attached</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">connector</literal_strong> – Dictionary containing information about what
                                                is being connected to.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns conn_info</field_name>
                                <field_body>
                                    <paragraph>A dictionary of connection information. This
                                        can optionally include a “initiator_updates”
                                        field.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>The “initiator_updates” field must be a dictionary containing a
                            “set_values” and/or “remove_values” field. The “set_values” field must
                            be a dictionary of key-value pairs to be set/updated in the db. The
                            “remove_values” field must be a list of keys, previously set with
                            “set_values”, that will be deleted from the db.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'initialized\ (BaseVD\ attribute)',\ 'cinder.volume.driver.BaseVD.initialized',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.initialized" ids="cinder.volume.driver.BaseVD.initialized" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.initialized"><desc_name xml:space="preserve">initialized</desc_name></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.manage_existing',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.manage_existing" ids="cinder.volume.driver.BaseVD.manage_existing" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.manage_existing"><desc_name xml:space="preserve">manage_existing</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Manage exiting stub.</paragraph>
                        <paragraph>This is for drivers that don’t implement manage_existing().</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'migrate_volume()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.migrate_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.migrate_volume" ids="cinder.volume.driver.BaseVD.migrate_volume" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.migrate_volume"><desc_name xml:space="preserve">migrate_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">host</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Migrate volume stub.</paragraph>
                        <paragraph>This is for drivers that don’t implement an enhanced version
                            of this operation.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'remove_export()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.remove_export',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.remove_export" ids="cinder.volume.driver.BaseVD.remove_export" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.remove_export"><desc_name xml:space="preserve">remove_export</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Removes an export for a volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'remove_export_snapshot()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.remove_export_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.remove_export_snapshot" ids="cinder.volume.driver.BaseVD.remove_export_snapshot" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.remove_export_snapshot"><desc_name xml:space="preserve">remove_export_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Removes an export for a snapshot.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'retype()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.retype',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.retype" ids="cinder.volume.driver.BaseVD.retype" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.retype"><desc_name xml:space="preserve">retype</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">new_type</desc_parameter><desc_parameter xml:space="preserve">diff</desc_parameter><desc_parameter xml:space="preserve">host</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'secure_file_operations_enabled()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.secure_file_operations_enabled',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.secure_file_operations_enabled" ids="cinder.volume.driver.BaseVD.secure_file_operations_enabled" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.secure_file_operations_enabled"><desc_name xml:space="preserve">secure_file_operations_enabled</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Determine if driver is running in Secure File Operations mode.</paragraph>
                        <paragraph>The Cinder Volume driver needs to query if this driver is running
                            in a secure file operations mode. By default, it is False: any driver
                            that does support secure file operations should override this method.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'set_initialized()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.set_initialized',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.set_initialized" ids="cinder.volume.driver.BaseVD.set_initialized" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.set_initialized"><desc_name xml:space="preserve">set_initialized</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'set_throttle()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.set_throttle',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.set_throttle" ids="cinder.volume.driver.BaseVD.set_throttle" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.set_throttle"><desc_name xml:space="preserve">set_throttle</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'snapshot_remote_attachable()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.snapshot_remote_attachable',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.snapshot_remote_attachable" ids="cinder.volume.driver.BaseVD.snapshot_remote_attachable" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.snapshot_remote_attachable"><desc_name xml:space="preserve">snapshot_remote_attachable</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'supported\ (BaseVD\ attribute)',\ 'cinder.volume.driver.BaseVD.supported',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.supported" ids="cinder.volume.driver.BaseVD.supported" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.supported"><desc_name xml:space="preserve">supported</desc_name></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'supports_replication_feature()\ (cinder.volume.driver.BaseVD\ class\ method)',\ 'cinder.volume.driver.BaseVD.supports_replication_feature',\ '',\ None]"></index>
                <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.supports_replication_feature" ids="cinder.volume.driver.BaseVD.supports_replication_feature" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.supports_replication_feature"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">supports_replication_feature</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">feature</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Check if driver class supports replication features.</paragraph>
                        <definition_list>
                            <definition_list_item>
                                <term>Feature is a string that must be one of:</term>
                                <definition>
                                    <bullet_list bullet="-">
                                        <list_item>
                                            <paragraph>v2.1</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph>a/a</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </definition>
                            </definition_list_item>
                        </definition_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'terminate_connection()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.terminate_connection',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.terminate_connection" ids="cinder.volume.driver.BaseVD.terminate_connection" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.terminate_connection"><desc_name xml:space="preserve">terminate_connection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Disallow connection from connector.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – The volume to be disconnected.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">connector</literal_strong> – A dictionary describing the connection with details
                                                about the initiator. Can be None.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'terminate_connection_snapshot()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.terminate_connection_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.terminate_connection_snapshot" ids="cinder.volume.driver.BaseVD.terminate_connection_snapshot" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.terminate_connection_snapshot"><desc_name xml:space="preserve">terminate_connection_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Disallow connection from connector.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'thaw_backend()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.thaw_backend',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.thaw_backend" ids="cinder.volume.driver.BaseVD.thaw_backend" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.thaw_backend"><desc_name xml:space="preserve">thaw_backend</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Notify the backend that it’s unfrozen/thawed.</paragraph>
                        <paragraph>Returns the backend to a normal state after a freeze
                            operation.</paragraph>
                        <paragraph>In most cases the driver may not need to do anything, but
                            this provides a handle if they need it.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – security context</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Response</field_name>
                                <field_body>
                                    <paragraph>True|False</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'unmanage()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.unmanage',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.unmanage" ids="cinder.volume.driver.BaseVD.unmanage" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.unmanage"><desc_name xml:space="preserve">unmanage</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Unmanage stub.</paragraph>
                        <paragraph>This is for drivers that don’t implement unmanage().</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'update_group()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.update_group',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.update_group" ids="cinder.volume.driver.BaseVD.update_group" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.update_group"><desc_name xml:space="preserve">update_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">add_volumes=None</desc_parameter><desc_parameter xml:space="preserve">remove_volumes=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Updates a group.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group</literal_strong> – the Group object of the group to be updated.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">add_volumes</literal_strong> – a list of Volume objects to be added.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">remove_volumes</literal_strong> – a list of Volume objects to be removed.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update, add_volumes_update, remove_volumes_update</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>model_update is a dictionary that the driver wants the manager
                            to update upon a successful return. If None is returned, the manager
                            will set the status to ‘available’.</paragraph>
                        <paragraph>add_volumes_update and remove_volumes_update are lists of dictionaries
                            that the driver wants the manager to update upon a successful return.
                            Note that each entry requires a {‘id’: xxx} so that the correct
                            volume entry can be updated. If None is returned, the volume will
                            remain its original status. Also note that you cannot directly
                            assign add_volumes to add_volumes_update as add_volumes is a list of
                            volume objects and cannot be used for db update directly. Same with
                            remove_volumes.</paragraph>
                        <paragraph>If the driver throws an exception, the status of the group as well as
                            those of the volumes to be added/removed will be set to ‘error’.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'update_migrated_volume()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.update_migrated_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.update_migrated_volume" ids="cinder.volume.driver.BaseVD.update_migrated_volume" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.update_migrated_volume"><desc_name xml:space="preserve">update_migrated_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">new_volume</desc_parameter><desc_parameter xml:space="preserve">original_volume_status</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Return model update for migrated volume.</paragraph>
                        <paragraph>Each driver implementing this method needs to be responsible for the
                            values of _name_id and provider_location. If None is returned or either
                            key is not set, it means the volume table does not need to change the
                            value(s) for the key(s).
                            The return format is {“_name_id”: value, “provider_location”: value}.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – The original volume that was migrated to this backend</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">new_volume</literal_strong> – The migration volume object that was created on
                                                this backend as part of the migration process</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">original_volume_status</literal_strong> – The status of the original volume</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update to update DB with any needed changes</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'update_provider_info()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.update_provider_info',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.update_provider_info" ids="cinder.volume.driver.BaseVD.update_provider_info" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.update_provider_info"><desc_name xml:space="preserve">update_provider_info</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volumes</desc_parameter><desc_parameter xml:space="preserve">snapshots</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get provider info updates from driver.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volumes</literal_strong> – List of Cinder volumes to check for updates</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">snapshots</literal_strong> – List of Cinder snapshots to check for updates</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>tuple (volume_updates, snapshot_updates)</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>where volume updates {‘id’: uuid, provider_id: &lt;provider-id&gt;}
                            and snapshot updates {‘id’: uuid, provider_id: &lt;provider-id&gt;}</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'validate_connector()\ (BaseVD\ method)',\ 'cinder.volume.driver.BaseVD.validate_connector',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.validate_connector" ids="cinder.volume.driver.BaseVD.validate_connector" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.validate_connector"><desc_name xml:space="preserve">validate_connector</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">connector</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Fail if connector doesn’t contain all the data needed by driver.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'validate_connector_has_setting()\ (BaseVD\ static\ method)',\ 'cinder.volume.driver.BaseVD.validate_connector_has_setting',\ '',\ None]"></index>
                <desc desctype="staticmethod" domain="py" noindex="False" objtype="staticmethod">
                    <desc_signature class="BaseVD" first="False" fullname="BaseVD.validate_connector_has_setting" ids="cinder.volume.driver.BaseVD.validate_connector_has_setting" module="cinder.volume.driver" names="cinder.volume.driver.BaseVD.validate_connector_has_setting"><desc_annotation xml:space="preserve">static </desc_annotation><desc_name xml:space="preserve">validate_connector_has_setting</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">connector</desc_parameter><desc_parameter xml:space="preserve">setting</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'CloneableImageVD\ (class\ in\ cinder.volume.driver)',\ 'cinder.volume.driver.CloneableImageVD',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="CloneableImageVD" ids="cinder.volume.driver.CloneableImageVD" module="cinder.volume.driver" names="cinder.volume.driver.CloneableImageVD"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">CloneableImageVD</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                <index entries="['single',\ 'clone_image()\ (CloneableImageVD\ method)',\ 'cinder.volume.driver.CloneableImageVD.clone_image',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CloneableImageVD" first="False" fullname="CloneableImageVD.clone_image" ids="cinder.volume.driver.CloneableImageVD.clone_image" module="cinder.volume.driver" names="cinder.volume.driver.CloneableImageVD.clone_image"><desc_name xml:space="preserve">clone_image</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">image_location</desc_parameter><desc_parameter xml:space="preserve">image_id</desc_parameter><desc_parameter xml:space="preserve">image_meta</desc_parameter><desc_parameter xml:space="preserve">image_service</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Create a volume efficiently from an existing image.</paragraph>
                        <paragraph>image_location is a string whose format depends on the
                            image service backend in use. The driver should use it
                            to determine whether cloning is possible.</paragraph>
                        <paragraph>image_id is a string which represents id of the image.
                            It can be used by the driver to introspect internal
                            stores or registry to do an efficient image clone.</paragraph>
                        <paragraph>image_meta is a dictionary that includes ‘disk_format’ (e.g.
                            raw, qcow2) and other image attributes that allow drivers to
                            decide whether they can clone the image without first requiring
                            conversion.</paragraph>
                        <paragraph>image_service is the reference of the image_service to use.
                            Note that this is needed to be passed here for drivers that
                            will want to fetch images from the image service directly.</paragraph>
                        <paragraph>Returns a dict of volume properties eg. provider_location,
                            boolean indicating whether cloning occurred</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'ConsistencyGroupVD\ (class\ in\ cinder.volume.driver)',\ 'cinder.volume.driver.ConsistencyGroupVD',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="ConsistencyGroupVD" ids="cinder.volume.driver.ConsistencyGroupVD" module="cinder.volume.driver" names="cinder.volume.driver.ConsistencyGroupVD"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">ConsistencyGroupVD</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                <paragraph>This class has been deprecated and should not be inherited.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'ExtendVD\ (class\ in\ cinder.volume.driver)',\ 'cinder.volume.driver.ExtendVD',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="ExtendVD" ids="cinder.volume.driver.ExtendVD" module="cinder.volume.driver" names="cinder.volume.driver.ExtendVD"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">ExtendVD</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                <paragraph>This class has been deprecated and should not be inherited.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'FibreChannelDriver\ (class\ in\ cinder.volume.driver)',\ 'cinder.volume.driver.FibreChannelDriver',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="FibreChannelDriver" ids="cinder.volume.driver.FibreChannelDriver" module="cinder.volume.driver" names="cinder.volume.driver.FibreChannelDriver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">FibreChannelDriver</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" refid="cinder.volume.driver.VolumeDriver" reftitle="cinder.volume.driver.VolumeDriver"><literal classes="xref py py-class">cinder.volume.driver.VolumeDriver</literal></reference></paragraph>
                <paragraph>Executes commands relating to Fibre Channel volumes.</paragraph>
                <index entries="['single',\ 'get_volume_stats()\ (FibreChannelDriver\ method)',\ 'cinder.volume.driver.FibreChannelDriver.get_volume_stats',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="FibreChannelDriver" first="False" fullname="FibreChannelDriver.get_volume_stats" ids="cinder.volume.driver.FibreChannelDriver.get_volume_stats" module="cinder.volume.driver" names="cinder.volume.driver.FibreChannelDriver.get_volume_stats"><desc_name xml:space="preserve">get_volume_stats</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">refresh=False</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get volume stats.</paragraph>
                        <paragraph>If ‘refresh’ is True, run update the stats first.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'initialize_connection()\ (FibreChannelDriver\ method)',\ 'cinder.volume.driver.FibreChannelDriver.initialize_connection',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="FibreChannelDriver" first="False" fullname="FibreChannelDriver.initialize_connection" ids="cinder.volume.driver.FibreChannelDriver.initialize_connection" module="cinder.volume.driver" names="cinder.volume.driver.FibreChannelDriver.initialize_connection"><desc_name xml:space="preserve">initialize_connection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Initializes the connection and returns connection info.</paragraph>
                        <paragraph>The  driver returns a driver_volume_type of ‘fibre_channel’.
                            The target_wwn can be a single entry or a list of wwns that
                            correspond to the list of remote wwn(s) that will export the volume.
                            Example return values:</paragraph>
                        <literal_block highlight_args="{}" language="default" linenos="False" xml:space="preserve">{
    'driver_volume_type': 'fibre_channel',
    'data': {
        'target_discovered': True,
        'target_lun': 1,
        'target_wwn': '1234567890123',
        'discard': False
    }
}</literal_block>
                        <paragraph>or</paragraph>
                        <literal_block highlight_args="{}" language="default" linenos="False" xml:space="preserve"> {
    'driver_volume_type': 'fibre_channel',
    'data': {
        'target_discovered': True,
        'target_lun': 1,
        'target_wwn': ['1234567890123', '0987654321321'],
        'discard': False
    }
}</literal_block>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'validate_connector()\ (FibreChannelDriver\ method)',\ 'cinder.volume.driver.FibreChannelDriver.validate_connector',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="FibreChannelDriver" first="False" fullname="FibreChannelDriver.validate_connector" ids="cinder.volume.driver.FibreChannelDriver.validate_connector" module="cinder.volume.driver" names="cinder.volume.driver.FibreChannelDriver.validate_connector"><desc_name xml:space="preserve">validate_connector</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">connector</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Fail if connector doesn’t contain all the data needed by driver.</paragraph>
                        <paragraph>Do a check on the connector and ensure that it has wwnns, wwpns.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'validate_connector_has_setting()\ (FibreChannelDriver\ static\ method)',\ 'cinder.volume.driver.FibreChannelDriver.validate_connector_has_setting',\ '',\ None]"></index>
                <desc desctype="staticmethod" domain="py" noindex="False" objtype="staticmethod">
                    <desc_signature class="FibreChannelDriver" first="False" fullname="FibreChannelDriver.validate_connector_has_setting" ids="cinder.volume.driver.FibreChannelDriver.validate_connector_has_setting" module="cinder.volume.driver" names="cinder.volume.driver.FibreChannelDriver.validate_connector_has_setting"><desc_annotation xml:space="preserve">static </desc_annotation><desc_name xml:space="preserve">validate_connector_has_setting</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">connector</desc_parameter><desc_parameter xml:space="preserve">setting</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Test for non-empty setting in connector.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'ISCSIDriver\ (class\ in\ cinder.volume.driver)',\ 'cinder.volume.driver.ISCSIDriver',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="ISCSIDriver" ids="cinder.volume.driver.ISCSIDriver" module="cinder.volume.driver" names="cinder.volume.driver.ISCSIDriver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">ISCSIDriver</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" refid="cinder.volume.driver.VolumeDriver" reftitle="cinder.volume.driver.VolumeDriver"><literal classes="xref py py-class">cinder.volume.driver.VolumeDriver</literal></reference></paragraph>
                <paragraph>Executes commands relating to ISCSI volumes.</paragraph>
                <paragraph>We make use of model provider properties as follows:</paragraph>
                <definition_list>
                    <definition_list_item>
                        <term><literal>provider_location</literal></term>
                        <definition>
                            <paragraph>if present, contains the iSCSI target information in the same
                                format as an ietadm discovery
                                i.e. ‘&lt;ip&gt;:&lt;port&gt;,&lt;portal&gt; &lt;target IQN&gt;’</paragraph>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term><literal>provider_auth</literal></term>
                        <definition>
                            <paragraph>if present, contains a space-separated triple:
                                ‘&lt;auth method&gt; &lt;auth username&gt; &lt;auth password&gt;’.
                                <title_reference>CHAP</title_reference> is the only auth_method in use at the moment.</paragraph>
                        </definition>
                    </definition_list_item>
                </definition_list>
                <index entries="['single',\ 'get_volume_stats()\ (ISCSIDriver\ method)',\ 'cinder.volume.driver.ISCSIDriver.get_volume_stats',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ISCSIDriver" first="False" fullname="ISCSIDriver.get_volume_stats" ids="cinder.volume.driver.ISCSIDriver.get_volume_stats" module="cinder.volume.driver" names="cinder.volume.driver.ISCSIDriver.get_volume_stats"><desc_name xml:space="preserve">get_volume_stats</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">refresh=False</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get volume stats.</paragraph>
                        <paragraph>If ‘refresh’ is True, run update the stats first.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'initialize_connection()\ (ISCSIDriver\ method)',\ 'cinder.volume.driver.ISCSIDriver.initialize_connection',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ISCSIDriver" first="False" fullname="ISCSIDriver.initialize_connection" ids="cinder.volume.driver.ISCSIDriver.initialize_connection" module="cinder.volume.driver" names="cinder.volume.driver.ISCSIDriver.initialize_connection"><desc_name xml:space="preserve">initialize_connection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Initializes the connection and returns connection info.</paragraph>
                        <paragraph>The iscsi driver returns a driver_volume_type of ‘iscsi’.
                            The format of the driver data is defined in _get_iscsi_properties.
                            Example return value:</paragraph>
                        <literal_block xml:space="preserve">{
    'driver_volume_type': 'iscsi'
    'data': {
        'target_discovered': True,
        'target_iqn': 'iqn.2010-10.org.openstack:volume-00000001',
        'target_portal': '127.0.0.0.1:3260',
        'volume_id': 1,
        'discard': False,
    }
}</literal_block>
                        <paragraph>If the backend driver supports multiple connections for multipath and
                            for single path with failover, “target_portals”, “target_iqns”,
                            “target_luns” are also populated:</paragraph>
                        <literal_block xml:space="preserve">{
    'driver_volume_type': 'iscsi'
    'data': {
        'target_discovered': False,
        'target_iqn': 'iqn.2010-10.org.openstack:volume1',
        'target_iqns': ['iqn.2010-10.org.openstack:volume1',
                        'iqn.2010-10.org.openstack:volume1-2'],
        'target_portal': '10.0.0.1:3260',
        'target_portals': ['10.0.0.1:3260', '10.0.1.1:3260']
        'target_lun': 1,
        'target_luns': [1, 1],
        'volume_id': 1,
        'discard': False,
    }
}</literal_block>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'terminate_connection()\ (ISCSIDriver\ method)',\ 'cinder.volume.driver.ISCSIDriver.terminate_connection',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ISCSIDriver" first="False" fullname="ISCSIDriver.terminate_connection" ids="cinder.volume.driver.ISCSIDriver.terminate_connection" module="cinder.volume.driver" names="cinder.volume.driver.ISCSIDriver.terminate_connection"><desc_name xml:space="preserve">terminate_connection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'validate_connector()\ (ISCSIDriver\ method)',\ 'cinder.volume.driver.ISCSIDriver.validate_connector',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ISCSIDriver" first="False" fullname="ISCSIDriver.validate_connector" ids="cinder.volume.driver.ISCSIDriver.validate_connector" module="cinder.volume.driver" names="cinder.volume.driver.ISCSIDriver.validate_connector"><desc_name xml:space="preserve">validate_connector</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">connector</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'ISERDriver\ (class\ in\ cinder.volume.driver)',\ 'cinder.volume.driver.ISERDriver',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="ISERDriver" ids="cinder.volume.driver.ISERDriver" module="cinder.volume.driver" names="cinder.volume.driver.ISERDriver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">ISERDriver</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" refid="cinder.volume.driver.ISCSIDriver" reftitle="cinder.volume.driver.ISCSIDriver"><literal classes="xref py py-class">cinder.volume.driver.ISCSIDriver</literal></reference></paragraph>
                <paragraph>Executes commands relating to ISER volumes.</paragraph>
                <paragraph>We make use of model provider properties as follows:</paragraph>
                <definition_list>
                    <definition_list_item>
                        <term><literal>provider_location</literal></term>
                        <definition>
                            <paragraph>if present, contains the iSER target information in the same
                                format as an ietadm discovery
                                i.e. ‘&lt;ip&gt;:&lt;port&gt;,&lt;portal&gt; &lt;target IQN&gt;’</paragraph>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term><literal>provider_auth</literal></term>
                        <definition>
                            <paragraph>if present, contains a space-separated triple:
                                ‘&lt;auth method&gt; &lt;auth username&gt; &lt;auth password&gt;’.
                                <title_reference>CHAP</title_reference> is the only auth_method in use at the moment.</paragraph>
                        </definition>
                    </definition_list_item>
                </definition_list>
                <index entries="['single',\ 'initialize_connection()\ (ISERDriver\ method)',\ 'cinder.volume.driver.ISERDriver.initialize_connection',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ISERDriver" first="False" fullname="ISERDriver.initialize_connection" ids="cinder.volume.driver.ISERDriver.initialize_connection" module="cinder.volume.driver" names="cinder.volume.driver.ISERDriver.initialize_connection"><desc_name xml:space="preserve">initialize_connection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Initializes the connection and returns connection info.</paragraph>
                        <paragraph>The iser driver returns a driver_volume_type of ‘iser’.
                            The format of the driver data is defined in _get_iser_properties.
                            Example return value:</paragraph>
                        <literal_block highlight_args="{}" language="default" linenos="False" xml:space="preserve">{
    'driver_volume_type': 'iser',
    'data': {
        'target_discovered': True,
        'target_iqn':
        'iqn.2010-10.org.iser.openstack:volume-00000001',
        'target_portal': '127.0.0.0.1:3260',
        'volume_id': 1
    }
}</literal_block>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'LocalVD\ (class\ in\ cinder.volume.driver)',\ 'cinder.volume.driver.LocalVD',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="LocalVD" ids="cinder.volume.driver.LocalVD" module="cinder.volume.driver" names="cinder.volume.driver.LocalVD"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">LocalVD</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                <paragraph>This class has been deprecated and should not be inherited.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'ManageableSnapshotsVD\ (class\ in\ cinder.volume.driver)',\ 'cinder.volume.driver.ManageableSnapshotsVD',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="ManageableSnapshotsVD" ids="cinder.volume.driver.ManageableSnapshotsVD" module="cinder.volume.driver" names="cinder.volume.driver.ManageableSnapshotsVD"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">ManageableSnapshotsVD</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                <index entries="['single',\ 'get_manageable_snapshots()\ (ManageableSnapshotsVD\ method)',\ 'cinder.volume.driver.ManageableSnapshotsVD.get_manageable_snapshots',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ManageableSnapshotsVD" first="False" fullname="ManageableSnapshotsVD.get_manageable_snapshots" ids="cinder.volume.driver.ManageableSnapshotsVD.get_manageable_snapshots" module="cinder.volume.driver" names="cinder.volume.driver.ManageableSnapshotsVD.get_manageable_snapshots"><desc_name xml:space="preserve">get_manageable_snapshots</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">cinder_snapshots</desc_parameter><desc_parameter xml:space="preserve">marker</desc_parameter><desc_parameter xml:space="preserve">limit</desc_parameter><desc_parameter xml:space="preserve">offset</desc_parameter><desc_parameter xml:space="preserve">sort_keys</desc_parameter><desc_parameter xml:space="preserve">sort_dirs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>List snapshots on the backend available for management by Cinder.</paragraph>
                        <paragraph>Returns a list of dictionaries, each specifying a snapshot in the host,
                            with the following keys:
                            - reference (dictionary): The reference for a snapshot, which can be
                            passed to “manage_existing_snapshot”.
                            - size (int): The size of the snapshot according to the storage
                            backend, rounded up to the nearest GB.
                            - safe_to_manage (boolean): Whether or not this snapshot is safe to
                            manage according to the storage backend. For example, is the snapshot
                            in use or invalid for any reason.
                            - reason_not_safe (string): If safe_to_manage is False, the reason why.
                            - cinder_id (string): If already managed, provide the Cinder ID.
                            - extra_info (string): Any extra information to return to the user
                            - source_reference (string): Similar to “reference”, but for the
                            snapshot’s source volume.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">cinder_snapshots</literal_strong> – A list of snapshots in this host that Cinder
                                                currently manages, used to determine if
                                                a snapshot is manageable or not.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">marker</literal_strong> – The last item of the previous page; we return the
                                                next results after this value (after sorting)</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">limit</literal_strong> – Maximum number of items to return</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">offset</literal_strong> – Number of items to skip after marker</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">sort_keys</literal_strong> – List of keys to sort results by (valid keys are
                                                ‘identifier’ and ‘size’)</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">sort_dirs</literal_strong> – List of directions to sort by, corresponding to
                                                sort_keys (valid directions are ‘asc’ and ‘desc’)</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing_snapshot()\ (ManageableSnapshotsVD\ method)',\ 'cinder.volume.driver.ManageableSnapshotsVD.manage_existing_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ManageableSnapshotsVD" first="False" fullname="ManageableSnapshotsVD.manage_existing_snapshot" ids="cinder.volume.driver.ManageableSnapshotsVD.manage_existing_snapshot" module="cinder.volume.driver" names="cinder.volume.driver.ManageableSnapshotsVD.manage_existing_snapshot"><desc_name xml:space="preserve">manage_existing_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Brings an existing backend storage object under Cinder management.</paragraph>
                        <paragraph>existing_ref is passed straight through from the API request’s
                            manage_existing_ref value, and it is up to the driver how this should
                            be interpreted.  It should be sufficient to identify a storage object
                            that the driver should somehow associate with the newly-created cinder
                            snapshot structure.</paragraph>
                        <paragraph>There are two ways to do this:</paragraph>
                        <enumerated_list enumtype="arabic" prefix="" suffix=".">
                            <list_item>
                                <paragraph>Rename the backend storage object so that it matches the
                                    snapshot[‘name’] which is how drivers traditionally map between a
                                    cinder snapshot and the associated backend storage object.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Place some metadata on the snapshot, or somewhere in the backend,
                                    that allows other driver requests (e.g. delete) to locate the
                                    backend storage object when required.</paragraph>
                            </list_item>
                        </enumerated_list>
                        <paragraph>If the existing_ref doesn’t make sense, or doesn’t refer to an existing
                            backend storage object, raise a ManageExistingInvalidReference
                            exception.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">snapshot</literal_strong> – Cinder volume snapshot to manage</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">existing_ref</literal_strong> – Driver-specific information used to identify a
                                                volume snapshot</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing_snapshot_get_size()\ (ManageableSnapshotsVD\ method)',\ 'cinder.volume.driver.ManageableSnapshotsVD.manage_existing_snapshot_get_size',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ManageableSnapshotsVD" first="False" fullname="ManageableSnapshotsVD.manage_existing_snapshot_get_size" ids="cinder.volume.driver.ManageableSnapshotsVD.manage_existing_snapshot_get_size" module="cinder.volume.driver" names="cinder.volume.driver.ManageableSnapshotsVD.manage_existing_snapshot_get_size"><desc_name xml:space="preserve">manage_existing_snapshot_get_size</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Return size of snapshot to be managed by manage_existing.</paragraph>
                        <paragraph>When calculating the size, round up to the next GB.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">snapshot</literal_strong> – Cinder volume snapshot to manage</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">existing_ref</literal_strong> – Driver-specific information used to identify a
                                                volume snapshot</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns size</field_name>
                                <field_body>
                                    <paragraph>Volume snapshot size in GiB (integer)</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'unmanage_snapshot()\ (ManageableSnapshotsVD\ method)',\ 'cinder.volume.driver.ManageableSnapshotsVD.unmanage_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ManageableSnapshotsVD" first="False" fullname="ManageableSnapshotsVD.unmanage_snapshot" ids="cinder.volume.driver.ManageableSnapshotsVD.unmanage_snapshot" module="cinder.volume.driver" names="cinder.volume.driver.ManageableSnapshotsVD.unmanage_snapshot"><desc_name xml:space="preserve">unmanage_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Removes the specified snapshot from Cinder management.</paragraph>
                        <paragraph>Does not delete the underlying backend storage object.</paragraph>
                        <paragraph>For most drivers, this will not need to do anything. However, some
                            drivers might use this call as an opportunity to clean up any
                            Cinder-specific configuration that they have associated with the
                            backend storage object.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">snapshot</literal_strong> – Cinder volume snapshot to unmanage</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'ManageableVD\ (class\ in\ cinder.volume.driver)',\ 'cinder.volume.driver.ManageableVD',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="ManageableVD" ids="cinder.volume.driver.ManageableVD" module="cinder.volume.driver" names="cinder.volume.driver.ManageableVD"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">ManageableVD</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                <index entries="['single',\ 'get_manageable_volumes()\ (ManageableVD\ method)',\ 'cinder.volume.driver.ManageableVD.get_manageable_volumes',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ManageableVD" first="False" fullname="ManageableVD.get_manageable_volumes" ids="cinder.volume.driver.ManageableVD.get_manageable_volumes" module="cinder.volume.driver" names="cinder.volume.driver.ManageableVD.get_manageable_volumes"><desc_name xml:space="preserve">get_manageable_volumes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">cinder_volumes</desc_parameter><desc_parameter xml:space="preserve">marker</desc_parameter><desc_parameter xml:space="preserve">limit</desc_parameter><desc_parameter xml:space="preserve">offset</desc_parameter><desc_parameter xml:space="preserve">sort_keys</desc_parameter><desc_parameter xml:space="preserve">sort_dirs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>List volumes on the backend available for management by Cinder.</paragraph>
                        <paragraph>Returns a list of dictionaries, each specifying a volume in the host,
                            with the following keys:
                            - reference (dictionary): The reference for a volume, which can be
                            passed to “manage_existing”.
                            - size (int): The size of the volume according to the storage
                            backend, rounded up to the nearest GB.
                            - safe_to_manage (boolean): Whether or not this volume is safe to
                            manage according to the storage backend. For example, is the volume
                            in use or invalid for any reason.
                            - reason_not_safe (string): If safe_to_manage is False, the reason why.
                            - cinder_id (string): If already managed, provide the Cinder ID.
                            - extra_info (string): Any extra information to return to the user</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">cinder_volumes</literal_strong> – A list of volumes in this host that Cinder
                                                currently manages, used to determine if
                                                a volume is manageable or not.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">marker</literal_strong> – The last item of the previous page; we return the
                                                next results after this value (after sorting)</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">limit</literal_strong> – Maximum number of items to return</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">offset</literal_strong> – Number of items to skip after marker</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">sort_keys</literal_strong> – List of keys to sort results by (valid keys are
                                                ‘identifier’ and ‘size’)</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">sort_dirs</literal_strong> – List of directions to sort by, corresponding to
                                                sort_keys (valid directions are ‘asc’ and ‘desc’)</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing()\ (ManageableVD\ method)',\ 'cinder.volume.driver.ManageableVD.manage_existing',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ManageableVD" first="False" fullname="ManageableVD.manage_existing" ids="cinder.volume.driver.ManageableVD.manage_existing" module="cinder.volume.driver" names="cinder.volume.driver.ManageableVD.manage_existing"><desc_name xml:space="preserve">manage_existing</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Brings an existing backend storage object under Cinder management.</paragraph>
                        <paragraph>existing_ref is passed straight through from the API request’s
                            manage_existing_ref value, and it is up to the driver how this should
                            be interpreted.  It should be sufficient to identify a storage object
                            that the driver should somehow associate with the newly-created cinder
                            volume structure.</paragraph>
                        <paragraph>There are two ways to do this:</paragraph>
                        <enumerated_list enumtype="arabic" prefix="" suffix=".">
                            <list_item>
                                <paragraph>Rename the backend storage object so that it matches the,
                                    volume[‘name’] which is how drivers traditionally map between a
                                    cinder volume and the associated backend storage object.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Place some metadata on the volume, or somewhere in the backend, that
                                    allows other driver requests (e.g. delete, clone, attach, detach…)
                                    to locate the backend storage object when required.</paragraph>
                            </list_item>
                        </enumerated_list>
                        <paragraph>If the existing_ref doesn’t make sense, or doesn’t refer to an existing
                            backend storage object, raise a ManageExistingInvalidReference
                            exception.</paragraph>
                        <paragraph>The volume may have a volume_type, and the driver can inspect that and
                            compare against the properties of the referenced backend storage
                            object.  If they are incompatible, raise a
                            ManageExistingVolumeTypeMismatch, specifying a reason for the failure.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – Cinder volume to manage</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">existing_ref</literal_strong> – Driver-specific information used to identify a
                                                volume</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing_get_size()\ (ManageableVD\ method)',\ 'cinder.volume.driver.ManageableVD.manage_existing_get_size',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ManageableVD" first="False" fullname="ManageableVD.manage_existing_get_size" ids="cinder.volume.driver.ManageableVD.manage_existing_get_size" module="cinder.volume.driver" names="cinder.volume.driver.ManageableVD.manage_existing_get_size"><desc_name xml:space="preserve">manage_existing_get_size</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Return size of volume to be managed by manage_existing.</paragraph>
                        <paragraph>When calculating the size, round up to the next GB.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – Cinder volume to manage</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">existing_ref</literal_strong> – Driver-specific information used to identify a
                                                volume</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns size</field_name>
                                <field_body>
                                    <paragraph>Volume size in GiB (integer)</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'unmanage()\ (ManageableVD\ method)',\ 'cinder.volume.driver.ManageableVD.unmanage',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ManageableVD" first="False" fullname="ManageableVD.unmanage" ids="cinder.volume.driver.ManageableVD.unmanage" module="cinder.volume.driver" names="cinder.volume.driver.ManageableVD.unmanage"><desc_name xml:space="preserve">unmanage</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Removes the specified volume from Cinder management.</paragraph>
                        <paragraph>Does not delete the underlying backend storage object.</paragraph>
                        <paragraph>For most drivers, this will not need to do anything.  However, some
                            drivers might use this call as an opportunity to clean up any
                            Cinder-specific configuration that they have associated with the
                            backend storage object.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">volume</literal_strong> – Cinder volume to unmanage</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'MigrateVD\ (class\ in\ cinder.volume.driver)',\ 'cinder.volume.driver.MigrateVD',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="MigrateVD" ids="cinder.volume.driver.MigrateVD" module="cinder.volume.driver" names="cinder.volume.driver.MigrateVD"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">MigrateVD</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                <index entries="['single',\ 'migrate_volume()\ (MigrateVD\ method)',\ 'cinder.volume.driver.MigrateVD.migrate_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="MigrateVD" first="False" fullname="MigrateVD.migrate_volume" ids="cinder.volume.driver.MigrateVD.migrate_volume" module="cinder.volume.driver" names="cinder.volume.driver.MigrateVD.migrate_volume"><desc_name xml:space="preserve">migrate_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">host</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Migrate the volume to the specified host.</paragraph>
                        <paragraph>Returns a boolean indicating whether the migration occurred, as well as
                            model_update.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – Context</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – A dictionary describing the volume to migrate</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">host</literal_strong> – A dictionary describing the host to migrate to, where
                                                host[‘host’] is its name, and host[‘capabilities’] is a
                                                dictionary of its reported capabilities.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'ProxyVD\ (class\ in\ cinder.volume.driver)',\ 'cinder.volume.driver.ProxyVD',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="ProxyVD" ids="cinder.volume.driver.ProxyVD" module="cinder.volume.driver" names="cinder.volume.driver.ProxyVD"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">ProxyVD</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                <paragraph>Proxy Volume Driver to mark proxy drivers</paragraph>
                <paragraph>If a driver uses a proxy class (e.g. by using __setattr__ and
                    __getattr__) without directly inheriting from base volume driver this
                    class can help marking them and retrieve the actual used driver object.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'SnapshotVD\ (class\ in\ cinder.volume.driver)',\ 'cinder.volume.driver.SnapshotVD',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="SnapshotVD" ids="cinder.volume.driver.SnapshotVD" module="cinder.volume.driver" names="cinder.volume.driver.SnapshotVD"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">SnapshotVD</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                <paragraph>This class has been deprecated and should not be inherited.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'TransferVD\ (class\ in\ cinder.volume.driver)',\ 'cinder.volume.driver.TransferVD',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="TransferVD" ids="cinder.volume.driver.TransferVD" module="cinder.volume.driver" names="cinder.volume.driver.TransferVD"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">TransferVD</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                <paragraph>This class has been deprecated and should not be inherited.</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'VolumeDriver\ (class\ in\ cinder.volume.driver)',\ 'cinder.volume.driver.VolumeDriver',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="VolumeDriver" ids="cinder.volume.driver.VolumeDriver" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">VolumeDriver</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">execute=&lt;function execute&gt;</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" refid="cinder.volume.driver.ManageableVD" reftitle="cinder.volume.driver.ManageableVD"><literal classes="xref py py-class">cinder.volume.driver.ManageableVD</literal></reference>, <reference internal="True" refid="cinder.volume.driver.CloneableImageVD" reftitle="cinder.volume.driver.CloneableImageVD"><literal classes="xref py py-class">cinder.volume.driver.CloneableImageVD</literal></reference>, <reference internal="True" refid="cinder.volume.driver.ManageableSnapshotsVD" reftitle="cinder.volume.driver.ManageableSnapshotsVD"><literal classes="xref py py-class">cinder.volume.driver.ManageableSnapshotsVD</literal></reference>, <reference internal="True" refid="cinder.volume.driver.MigrateVD" reftitle="cinder.volume.driver.MigrateVD"><literal classes="xref py py-class">cinder.volume.driver.MigrateVD</literal></reference>, <reference internal="True" refid="cinder.volume.driver.BaseVD" reftitle="cinder.volume.driver.BaseVD"><literal classes="xref py py-class">cinder.volume.driver.BaseVD</literal></reference></paragraph>
                <index entries="['single',\ 'accept_transfer()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.accept_transfer',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.accept_transfer" ids="cinder.volume.driver.VolumeDriver.accept_transfer" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.accept_transfer"><desc_name xml:space="preserve">accept_transfer</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">new_user</desc_parameter><desc_parameter xml:space="preserve">new_project</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'check_for_setup_error()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.check_for_setup_error',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.check_for_setup_error" ids="cinder.volume.driver.VolumeDriver.check_for_setup_error" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.check_for_setup_error"><desc_name xml:space="preserve">check_for_setup_error</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'clear_download()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.clear_download',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.clear_download" ids="cinder.volume.driver.VolumeDriver.clear_download" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.clear_download"><desc_name xml:space="preserve">clear_download</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'clone_image()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.clone_image',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.clone_image" ids="cinder.volume.driver.VolumeDriver.clone_image" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.clone_image"><desc_name xml:space="preserve">clone_image</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">image_location</desc_parameter><desc_parameter xml:space="preserve">image_id</desc_parameter><desc_parameter xml:space="preserve">image_meta</desc_parameter><desc_parameter xml:space="preserve">image_service</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_cgsnapshot()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.create_cgsnapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.create_cgsnapshot" ids="cinder.volume.driver.VolumeDriver.create_cgsnapshot" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.create_cgsnapshot"><desc_name xml:space="preserve">create_cgsnapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">cgsnapshot</desc_parameter><desc_parameter xml:space="preserve">snapshots</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a cgsnapshot.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">cgsnapshot</literal_strong> – the dictionary of the cgsnapshot to be created.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">snapshots</literal_strong> – a list of snapshot dictionaries in the cgsnapshot.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update, snapshots_model_update</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>param snapshots is retrieved directly from the db. It is a list of
                            cinder.db.sqlalchemy.models.Snapshot to be precise. It cannot be
                            assigned to snapshots_model_update. snapshots_model_update is a list
                            of dictionaries. It has to be built by the driver. An entry will be
                            in this format: {‘id’: xxx, ‘status’: xxx, ……}. model_update
                            will be in this format: {‘status’: xxx, ……}.</paragraph>
                        <paragraph>The driver should populate snapshots_model_update and model_update
                            and return them.</paragraph>
                        <paragraph>The manager will check snapshots_model_update and update db accordingly
                            for each snapshot. If the driver successfully deleted some snapshots
                            but failed to delete others, it should set statuses of the snapshots
                            accordingly so that the manager can update db correctly.</paragraph>
                        <paragraph>If the status in any entry of snapshots_model_update is ‘error’, the
                            status in model_update will be set to the same if it is not already
                            ‘error’.</paragraph>
                        <paragraph>If the status in model_update is ‘error’, the manager will raise an
                            exception and the status of cgsnapshot will be set to ‘error’ in the
                            db. If snapshots_model_update is not returned by the driver, the
                            manager will set the status of every snapshot to ‘error’ in the except
                            block.</paragraph>
                        <paragraph>If the driver raises an exception during the operation, it will be
                            caught by the try-except block in the manager and the statuses of
                            cgsnapshot and all snapshots will be set to ‘error’.</paragraph>
                        <paragraph>For a successful operation, the driver can either build the
                            model_update and snapshots_model_update and return them or
                            return None, None. The statuses of cgsnapshot and all snapshots
                            will be set to ‘available’ at the end of the manager function.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_consistencygroup()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.create_consistencygroup',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.create_consistencygroup" ids="cinder.volume.driver.VolumeDriver.create_consistencygroup" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.create_consistencygroup"><desc_name xml:space="preserve">create_consistencygroup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a consistencygroup.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group</literal_strong> – the dictionary of the consistency group to be created.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>model_update will be in this format: {‘status’: xxx, ……}.</paragraph>
                        <paragraph>If the status in model_update is ‘error’, the manager will throw
                            an exception and it will be caught in the try-except block in the
                            manager. If the driver throws an exception, the manager will also
                            catch it in the try-except block. The group status in the db will
                            be changed to ‘error’.</paragraph>
                        <paragraph>For a successful operation, the driver can either build the
                            model_update and return it or return None. The group status will
                            be set to ‘available’.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_consistencygroup_from_src()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.create_consistencygroup_from_src',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.create_consistencygroup_from_src" ids="cinder.volume.driver.VolumeDriver.create_consistencygroup_from_src" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.create_consistencygroup_from_src"><desc_name xml:space="preserve">create_consistencygroup_from_src</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">volumes</desc_parameter><desc_parameter xml:space="preserve">cgsnapshot=None</desc_parameter><desc_parameter xml:space="preserve">snapshots=None</desc_parameter><desc_parameter xml:space="preserve">source_cg=None</desc_parameter><desc_parameter xml:space="preserve">source_vols=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a consistencygroup from source.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group</literal_strong> – the dictionary of the consistency group to be created.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volumes</literal_strong> – a list of volume dictionaries in the group.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">cgsnapshot</literal_strong> – the dictionary of the cgsnapshot as source.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">snapshots</literal_strong> – a list of snapshot dictionaries in the cgsnapshot.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">source_cg</literal_strong> – the dictionary of a consistency group as source.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">source_vols</literal_strong> – a list of volume dictionaries in the source_cg.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update, volumes_model_update</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>The source can be cgsnapshot or a source cg.</paragraph>
                        <paragraph>param volumes is retrieved directly from the db. It is a list of
                            cinder.db.sqlalchemy.models.Volume to be precise. It cannot be
                            assigned to volumes_model_update. volumes_model_update is a list of
                            dictionaries. It has to be built by the driver. An entry will be
                            in this format: {‘id’: xxx, ‘status’: xxx, ……}. model_update
                            will be in this format: {‘status’: xxx, ……}.</paragraph>
                        <paragraph>To be consistent with other volume operations, the manager will
                            assume the operation is successful if no exception is thrown by
                            the driver. For a successful operation, the driver can either build
                            the model_update and volumes_model_update and return them or
                            return None, None.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_export()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.create_export',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.create_export" ids="cinder.volume.driver.VolumeDriver.create_export" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.create_export"><desc_name xml:space="preserve">create_export</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_export_snapshot()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.create_export_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.create_export_snapshot" ids="cinder.volume.driver.VolumeDriver.create_export_snapshot" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.create_export_snapshot"><desc_name xml:space="preserve">create_export_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_replica_test_volume()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.create_replica_test_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.create_replica_test_volume" ids="cinder.volume.driver.VolumeDriver.create_replica_test_volume" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.create_replica_test_volume"><desc_name xml:space="preserve">create_replica_test_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">src_vref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_snapshot()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.create_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.create_snapshot" ids="cinder.volume.driver.VolumeDriver.create_snapshot" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.create_snapshot"><desc_name xml:space="preserve">create_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a snapshot.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_volume()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.create_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.create_volume" ids="cinder.volume.driver.VolumeDriver.create_volume" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.create_volume"><desc_name xml:space="preserve">create_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_volume_from_snapshot()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.create_volume_from_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.create_volume_from_snapshot" ids="cinder.volume.driver.VolumeDriver.create_volume_from_snapshot" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.create_volume_from_snapshot"><desc_name xml:space="preserve">create_volume_from_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates a volume from a snapshot.</paragraph>
                        <paragraph>If volume_type extra specs includes ‘replication: &lt;is&gt; True’
                            the driver needs to create a volume replica (secondary),
                            and setup replication between the newly created volume and
                            the secondary volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_cgsnapshot()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.delete_cgsnapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.delete_cgsnapshot" ids="cinder.volume.driver.VolumeDriver.delete_cgsnapshot" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.delete_cgsnapshot"><desc_name xml:space="preserve">delete_cgsnapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">cgsnapshot</desc_parameter><desc_parameter xml:space="preserve">snapshots</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Deletes a cgsnapshot.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">cgsnapshot</literal_strong> – the dictionary of the cgsnapshot to be deleted.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">snapshots</literal_strong> – a list of snapshot dictionaries in the cgsnapshot.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update, snapshots_model_update</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>param snapshots is retrieved directly from the db. It is a list of
                            cinder.db.sqlalchemy.models.Snapshot to be precise. It cannot be
                            assigned to snapshots_model_update. snapshots_model_update is a list
                            of dictionaries. It has to be built by the driver. An entry will be
                            in this format: {‘id’: xxx, ‘status’: xxx, ……}. model_update
                            will be in this format: {‘status’: xxx, ……}.</paragraph>
                        <paragraph>The driver should populate snapshots_model_update and model_update
                            and return them.</paragraph>
                        <paragraph>The manager will check snapshots_model_update and update db accordingly
                            for each snapshot. If the driver successfully deleted some snapshots
                            but failed to delete others, it should set statuses of the snapshots
                            accordingly so that the manager can update db correctly.</paragraph>
                        <paragraph>If the status in any entry of snapshots_model_update is
                            ‘error_deleting’ or ‘error’, the status in model_update will be set to
                            the same if it is not already ‘error_deleting’ or ‘error’.</paragraph>
                        <paragraph>If the status in model_update is ‘error_deleting’ or ‘error’, the
                            manager will raise an exception and the status of cgsnapshot will be
                            set to ‘error’ in the db. If snapshots_model_update is not returned by
                            the driver, the manager will set the status of every snapshot to
                            ‘error’ in the except block.</paragraph>
                        <paragraph>If the driver raises an exception during the operation, it will be
                            caught by the try-except block in the manager and the statuses of
                            cgsnapshot and all snapshots will be set to ‘error’.</paragraph>
                        <paragraph>For a successful operation, the driver can either build the
                            model_update and snapshots_model_update and return them or
                            return None, None. The statuses of cgsnapshot and all snapshots
                            will be set to ‘deleted’ after the manager deletes them from db.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_consistencygroup()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.delete_consistencygroup',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.delete_consistencygroup" ids="cinder.volume.driver.VolumeDriver.delete_consistencygroup" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.delete_consistencygroup"><desc_name xml:space="preserve">delete_consistencygroup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">volumes</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Deletes a consistency group.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group</literal_strong> – the dictionary of the consistency group to be deleted.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volumes</literal_strong> – a list of volume dictionaries in the group.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update, volumes_model_update</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>param volumes is retrieved directly from the db. It is a list of
                            cinder.db.sqlalchemy.models.Volume to be precise. It cannot be
                            assigned to volumes_model_update. volumes_model_update is a list of
                            dictionaries. It has to be built by the driver. An entry will be
                            in this format: {‘id’: xxx, ‘status’: xxx, ……}. model_update
                            will be in this format: {‘status’: xxx, ……}.</paragraph>
                        <paragraph>The driver should populate volumes_model_update and model_update
                            and return them.</paragraph>
                        <paragraph>The manager will check volumes_model_update and update db accordingly
                            for each volume. If the driver successfully deleted some volumes
                            but failed to delete others, it should set statuses of the volumes
                            accordingly so that the manager can update db correctly.</paragraph>
                        <paragraph>If the status in any entry of volumes_model_update is ‘error_deleting’
                            or ‘error’, the status in model_update will be set to the same if it
                            is not already ‘error_deleting’ or ‘error’.</paragraph>
                        <paragraph>If the status in model_update is ‘error_deleting’ or ‘error’, the
                            manager will raise an exception and the status of the group will be
                            set to ‘error’ in the db. If volumes_model_update is not returned by
                            the driver, the manager will set the status of every volume in the
                            group to ‘error’ in the except block.</paragraph>
                        <paragraph>If the driver raises an exception during the operation, it will be
                            caught by the try-except block in the manager. The statuses of the
                            group and all volumes in it will be set to ‘error’.</paragraph>
                        <paragraph>For a successful operation, the driver can either build the
                            model_update and volumes_model_update and return them or
                            return None, None. The statuses of the group and all volumes
                            will be set to ‘deleted’ after the manager deletes them from db.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_snapshot()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.delete_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.delete_snapshot" ids="cinder.volume.driver.VolumeDriver.delete_snapshot" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.delete_snapshot"><desc_name xml:space="preserve">delete_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Deletes a snapshot.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_volume()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.delete_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.delete_volume" ids="cinder.volume.driver.VolumeDriver.delete_volume" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.delete_volume"><desc_name xml:space="preserve">delete_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'ensure_export()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.ensure_export',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.ensure_export" ids="cinder.volume.driver.VolumeDriver.ensure_export" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.ensure_export"><desc_name xml:space="preserve">ensure_export</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'extend_volume()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.extend_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.extend_volume" ids="cinder.volume.driver.VolumeDriver.extend_volume" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.extend_volume"><desc_name xml:space="preserve">extend_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">new_size</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_manageable_snapshots()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.get_manageable_snapshots',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.get_manageable_snapshots" ids="cinder.volume.driver.VolumeDriver.get_manageable_snapshots" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.get_manageable_snapshots"><desc_name xml:space="preserve">get_manageable_snapshots</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">cinder_snapshots</desc_parameter><desc_parameter xml:space="preserve">marker</desc_parameter><desc_parameter xml:space="preserve">limit</desc_parameter><desc_parameter xml:space="preserve">offset</desc_parameter><desc_parameter xml:space="preserve">sort_keys</desc_parameter><desc_parameter xml:space="preserve">sort_dirs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_manageable_volumes()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.get_manageable_volumes',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.get_manageable_volumes" ids="cinder.volume.driver.VolumeDriver.get_manageable_volumes" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.get_manageable_volumes"><desc_name xml:space="preserve">get_manageable_volumes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">cinder_volumes</desc_parameter><desc_parameter xml:space="preserve">marker</desc_parameter><desc_parameter xml:space="preserve">limit</desc_parameter><desc_parameter xml:space="preserve">offset</desc_parameter><desc_parameter xml:space="preserve">sort_keys</desc_parameter><desc_parameter xml:space="preserve">sort_dirs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_pool()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.get_pool',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.get_pool" ids="cinder.volume.driver.VolumeDriver.get_pool" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.get_pool"><desc_name xml:space="preserve">get_pool</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Return pool name where volume reside on.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">volume</literal_strong> – The volume hosted by the driver.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>name of the pool where given volume is in.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'initialize_connection()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.initialize_connection',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.initialize_connection" ids="cinder.volume.driver.VolumeDriver.initialize_connection" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.initialize_connection"><desc_name xml:space="preserve">initialize_connection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'initialize_connection_snapshot()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.initialize_connection_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.initialize_connection_snapshot" ids="cinder.volume.driver.VolumeDriver.initialize_connection_snapshot" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.initialize_connection_snapshot"><desc_name xml:space="preserve">initialize_connection_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Allow connection from connector for a snapshot.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'local_path()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.local_path',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.local_path" ids="cinder.volume.driver.VolumeDriver.local_path" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.local_path"><desc_name xml:space="preserve">local_path</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.manage_existing',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.manage_existing" ids="cinder.volume.driver.VolumeDriver.manage_existing" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.manage_existing"><desc_name xml:space="preserve">manage_existing</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing_get_size()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.manage_existing_get_size',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.manage_existing_get_size" ids="cinder.volume.driver.VolumeDriver.manage_existing_get_size" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.manage_existing_get_size"><desc_name xml:space="preserve">manage_existing_get_size</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing_snapshot()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.manage_existing_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.manage_existing_snapshot" ids="cinder.volume.driver.VolumeDriver.manage_existing_snapshot" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.manage_existing_snapshot"><desc_name xml:space="preserve">manage_existing_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing_snapshot_get_size()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.manage_existing_snapshot_get_size',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.manage_existing_snapshot_get_size" ids="cinder.volume.driver.VolumeDriver.manage_existing_snapshot_get_size" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.manage_existing_snapshot_get_size"><desc_name xml:space="preserve">manage_existing_snapshot_get_size</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">existing_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'migrate_volume()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.migrate_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.migrate_volume" ids="cinder.volume.driver.VolumeDriver.migrate_volume" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.migrate_volume"><desc_name xml:space="preserve">migrate_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">host</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'remove_export()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.remove_export',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.remove_export" ids="cinder.volume.driver.VolumeDriver.remove_export" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.remove_export"><desc_name xml:space="preserve">remove_export</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'remove_export_snapshot()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.remove_export_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.remove_export_snapshot" ids="cinder.volume.driver.VolumeDriver.remove_export_snapshot" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.remove_export_snapshot"><desc_name xml:space="preserve">remove_export_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'retype()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.retype',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.retype" ids="cinder.volume.driver.VolumeDriver.retype" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.retype"><desc_name xml:space="preserve">retype</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">new_type</desc_parameter><desc_parameter xml:space="preserve">diff</desc_parameter><desc_parameter xml:space="preserve">host</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'revert_to_snapshot()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.revert_to_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.revert_to_snapshot" ids="cinder.volume.driver.VolumeDriver.revert_to_snapshot" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.revert_to_snapshot"><desc_name xml:space="preserve">revert_to_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Revert volume to snapshot.</paragraph>
                        <paragraph>Note: the revert process should not change the volume’s
                            current size, that means if the driver shrank
                            the volume during the process, it should extend the
                            volume internally.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'terminate_connection()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.terminate_connection',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.terminate_connection" ids="cinder.volume.driver.VolumeDriver.terminate_connection" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.terminate_connection"><desc_name xml:space="preserve">terminate_connection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Disallow connection from connector</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – The volume to be disconnected.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">connector</literal_strong> – A dictionary describing the connection with details
                                                about the initiator. Can be None.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'terminate_connection_snapshot()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.terminate_connection_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.terminate_connection_snapshot" ids="cinder.volume.driver.VolumeDriver.terminate_connection_snapshot" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.terminate_connection_snapshot"><desc_name xml:space="preserve">terminate_connection_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Disallow connection from connector for a snapshot.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'unmanage()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.unmanage',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.unmanage" ids="cinder.volume.driver.VolumeDriver.unmanage" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.unmanage"><desc_name xml:space="preserve">unmanage</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'unmanage_snapshot()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.unmanage_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.unmanage_snapshot" ids="cinder.volume.driver.VolumeDriver.unmanage_snapshot" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.unmanage_snapshot"><desc_name xml:space="preserve">unmanage_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Unmanage the specified snapshot from Cinder management.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'update_consistencygroup()\ (VolumeDriver\ method)',\ 'cinder.volume.driver.VolumeDriver.update_consistencygroup',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="VolumeDriver" first="False" fullname="VolumeDriver.update_consistencygroup" ids="cinder.volume.driver.VolumeDriver.update_consistencygroup" module="cinder.volume.driver" names="cinder.volume.driver.VolumeDriver.update_consistencygroup"><desc_name xml:space="preserve">update_consistencygroup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">add_volumes=None</desc_parameter><desc_parameter xml:space="preserve">remove_volumes=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Updates a consistency group.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">context</literal_strong> – the context of the caller.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">group</literal_strong> – the dictionary of the consistency group to be updated.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">add_volumes</literal_strong> – a list of volume dictionaries to be added.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">remove_volumes</literal_strong> – a list of volume dictionaries to be removed.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>model_update, add_volumes_update, remove_volumes_update</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <paragraph>model_update is a dictionary that the driver wants the manager
                            to update upon a successful return. If None is returned, the manager
                            will set the status to ‘available’.</paragraph>
                        <paragraph>add_volumes_update and remove_volumes_update are lists of dictionaries
                            that the driver wants the manager to update upon a successful return.
                            Note that each entry requires a {‘id’: xxx} so that the correct
                            volume entry can be updated. If None is returned, the volume will
                            remain its original status. Also note that you cannot directly
                            assign add_volumes to add_volumes_update as add_volumes is a list of
                            cinder.db.sqlalchemy.models.Volume objects and cannot be used for
                            db update directly. Same with remove_volumes.</paragraph>
                        <paragraph>If the driver throws an exception, the status of the group as well as
                            those of the volumes to be added/removed will be set to ‘error’.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
    </section>
</document>
