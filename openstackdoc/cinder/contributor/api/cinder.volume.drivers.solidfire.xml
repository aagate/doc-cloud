<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api/cinder.volume.drivers.solidfire.rst">
    <section ids="module-cinder.volume.drivers.solidfire the-cinder-volume-drivers-solidfire-module" names="the\ cinder.volume.drivers.solidfire\ module">
        <title>The <reference internal="True" refid="module-cinder.volume.drivers.solidfire" reftitle="cinder.volume.drivers.solidfire"><literal classes="xref py py-mod">cinder.volume.drivers.solidfire</literal></reference> Module</title>
        <index entries="['single',\ 'cinder.volume.drivers.solidfire\ (module)',\ 'module-cinder.volume.drivers.solidfire',\ '',\ None]"></index>
        <index entries="['single',\ 'SolidFireDriver\ (class\ in\ cinder.volume.drivers.solidfire)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="SolidFireDriver" ids="cinder.volume.drivers.solidfire.SolidFireDriver" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">SolidFireDriver</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" reftitle="cinder.volume.drivers.san.san.SanISCSIDriver" refuri="cinder.volume.drivers.san.san#cinder.volume.drivers.san.san.SanISCSIDriver"><literal classes="xref py py-class">cinder.volume.drivers.san.san.SanISCSIDriver</literal></reference></paragraph>
                <paragraph>OpenStack driver to enable SolidFire cluster.</paragraph>
                <literal_block highlight_args="{}" language="default" linenos="False" xml:space="preserve">Version history:
    1.0 - Initial driver
    1.1 - Refactor, clone support, qos by type and minor bug fixes
    1.2 - Add xfr and retype support
    1.2.1 - Add export/import support
    1.2.2 - Catch VolumeNotFound on accept xfr
    2.0.0 - Move from httplib to requests
    2.0.1 - Implement SolidFire Snapshots
    2.0.2 - Implement secondary account
    2.0.3 - Implement cluster pairing
    2.0.4 - Implement volume replication
    2.0.5 - Try and deal with the stupid retry/clear issues from objects
            and tflow
    2.0.6 - Add a lock decorator around the clone_image method
    2.0.7 - Add scaled IOPS
    2.0.8 - Add active status filter to get volume ops
    2.0.9 - Always purge on delete volume
    2.0.10 - Add response to debug on retryable errors</literal_block>
                <index entries="['single',\ 'CI_WIKI_NAME\ (SolidFireDriver\ attribute)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.CI_WIKI_NAME',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.CI_WIKI_NAME" ids="cinder.volume.drivers.solidfire.SolidFireDriver.CI_WIKI_NAME" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.CI_WIKI_NAME"><desc_name xml:space="preserve">CI_WIKI_NAME</desc_name><desc_annotation xml:space="preserve"> = 'NetApp_SolidFire_CI'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'VERSION\ (SolidFireDriver\ attribute)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.VERSION',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.VERSION" ids="cinder.volume.drivers.solidfire.SolidFireDriver.VERSION" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.VERSION"><desc_name xml:space="preserve">VERSION</desc_name><desc_annotation xml:space="preserve"> = '2.0.10'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'accept_transfer()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.accept_transfer',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.accept_transfer" ids="cinder.volume.drivers.solidfire.SolidFireDriver.accept_transfer" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.accept_transfer"><desc_name xml:space="preserve">accept_transfer</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">new_user</desc_parameter><desc_parameter xml:space="preserve">new_project</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'attach_volume()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.attach_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.attach_volume" ids="cinder.volume.drivers.solidfire.SolidFireDriver.attach_volume" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.attach_volume"><desc_name xml:space="preserve">attach_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">instance_uuid</desc_parameter><desc_parameter xml:space="preserve">host_name</desc_parameter><desc_parameter xml:space="preserve">mountpoint</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'clone_image()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.clone_image',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.clone_image" ids="cinder.volume.drivers.solidfire.SolidFireDriver.clone_image" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.clone_image"><desc_name xml:space="preserve">clone_image</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">inst</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'cluster_stats\ (SolidFireDriver\ attribute)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.cluster_stats',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.cluster_stats" ids="cinder.volume.drivers.solidfire.SolidFireDriver.cluster_stats" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.cluster_stats"><desc_name xml:space="preserve">cluster_stats</desc_name><desc_annotation xml:space="preserve"> = {}</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_cloned_volume()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.create_cloned_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.create_cloned_volume" ids="cinder.volume.drivers.solidfire.SolidFireDriver.create_cloned_volume" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.create_cloned_volume"><desc_name xml:space="preserve">create_cloned_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">inst</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_group()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.create_group',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.create_group" ids="cinder.volume.drivers.solidfire.SolidFireDriver.create_group" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.create_group"><desc_name xml:space="preserve">create_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_group_from_src()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.create_group_from_src',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.create_group_from_src" ids="cinder.volume.drivers.solidfire.SolidFireDriver.create_group_from_src" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.create_group_from_src"><desc_name xml:space="preserve">create_group_from_src</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">volumes</desc_parameter><desc_parameter xml:space="preserve">group_snapshots=None</desc_parameter><desc_parameter xml:space="preserve">snapshots=None</desc_parameter><desc_parameter xml:space="preserve">source_group=None</desc_parameter><desc_parameter xml:space="preserve">source_vols=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_group_snapshot()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.create_group_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.create_group_snapshot" ids="cinder.volume.drivers.solidfire.SolidFireDriver.create_group_snapshot" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.create_group_snapshot"><desc_name xml:space="preserve">create_group_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">group_snapshot</desc_parameter><desc_parameter xml:space="preserve">snapshots</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_snapshot()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.create_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.create_snapshot" ids="cinder.volume.drivers.solidfire.SolidFireDriver.create_snapshot" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.create_snapshot"><desc_name xml:space="preserve">create_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_volume()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.create_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.create_volume" ids="cinder.volume.drivers.solidfire.SolidFireDriver.create_volume" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.create_volume"><desc_name xml:space="preserve">create_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Create volume on SolidFire device.</paragraph>
                        <paragraph>The account is where CHAP settings are derived from, volume is
                            created and exported.  Note that the new volume is immediately ready
                            for use.</paragraph>
                        <paragraph>One caveat here is that an existing user account must be specified
                            in the API call to create a new volume.  We use a set algorithm to
                            determine account info based on passed in cinder volume object.  First
                            we check to see if the account already exists (and use it), or if it
                            does not already exist, we’ll go ahead and create it.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_volume_from_snapshot()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.create_volume_from_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.create_volume_from_snapshot" ids="cinder.volume.drivers.solidfire.SolidFireDriver.create_volume_from_snapshot" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.create_volume_from_snapshot"><desc_name xml:space="preserve">create_volume_from_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">inst</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_group()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.delete_group',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.delete_group" ids="cinder.volume.drivers.solidfire.SolidFireDriver.delete_group" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.delete_group"><desc_name xml:space="preserve">delete_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">volumes</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_snapshot()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.delete_snapshot',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.delete_snapshot" ids="cinder.volume.drivers.solidfire.SolidFireDriver.delete_snapshot" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.delete_snapshot"><desc_name xml:space="preserve">delete_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Delete the specified snapshot from the SolidFire cluster.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_volume()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.delete_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.delete_volume" ids="cinder.volume.drivers.solidfire.SolidFireDriver.delete_volume" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.delete_volume"><desc_name xml:space="preserve">delete_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Delete SolidFire Volume from device.</paragraph>
                        <paragraph>SolidFire allows multiple volumes with same name,
                            volumeID is what’s guaranteed unique.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'detach_volume()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.detach_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.detach_volume" ids="cinder.volume.drivers.solidfire.SolidFireDriver.detach_volume" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.detach_volume"><desc_name xml:space="preserve">detach_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">attachment=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'driver_prefix\ (SolidFireDriver\ attribute)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.driver_prefix',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.driver_prefix" ids="cinder.volume.drivers.solidfire.SolidFireDriver.driver_prefix" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.driver_prefix"><desc_name xml:space="preserve">driver_prefix</desc_name><desc_annotation xml:space="preserve"> = 'solidfire'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'extend_volume()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.extend_volume',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.extend_volume" ids="cinder.volume.drivers.solidfire.SolidFireDriver.extend_volume" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.extend_volume"><desc_name xml:space="preserve">extend_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">new_size</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Extend an existing volume.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'failover_host()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.failover_host',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.failover_host" ids="cinder.volume.drivers.solidfire.SolidFireDriver.failover_host" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.failover_host"><desc_name xml:space="preserve">failover_host</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volumes</desc_parameter><desc_parameter xml:space="preserve">secondary_id=None</desc_parameter><desc_parameter xml:space="preserve">groups=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Failover to replication target.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'freeze_backend()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.freeze_backend',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.freeze_backend" ids="cinder.volume.drivers.solidfire.SolidFireDriver.freeze_backend" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.freeze_backend"><desc_name xml:space="preserve">freeze_backend</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Freeze backend notification.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_volume_stats()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.get_volume_stats',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.get_volume_stats" ids="cinder.volume.drivers.solidfire.SolidFireDriver.get_volume_stats" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.get_volume_stats"><desc_name xml:space="preserve">get_volume_stats</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">refresh=False</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get volume status.</paragraph>
                        <paragraph>If ‘refresh’ is True, run update first.
                            The name is a bit misleading as
                            the majority of the data here is cluster
                            data</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'initialize_connection()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.initialize_connection',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.initialize_connection" ids="cinder.volume.drivers.solidfire.SolidFireDriver.initialize_connection" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.initialize_connection"><desc_name xml:space="preserve">initialize_connection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Initialize the connection and return connection info.</paragraph>
                        <paragraph>Optionally checks and utilizes volume access groups.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'locked_image_id_operation()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.locked_image_id_operation',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.locked_image_id_operation" ids="cinder.volume.drivers.solidfire.SolidFireDriver.locked_image_id_operation" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.locked_image_id_operation"><desc_name xml:space="preserve">locked_image_id_operation</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">f</desc_parameter><desc_parameter xml:space="preserve">external=False</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'locked_source_id_operation()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.locked_source_id_operation',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.locked_source_id_operation" ids="cinder.volume.drivers.solidfire.SolidFireDriver.locked_source_id_operation" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.locked_source_id_operation"><desc_name xml:space="preserve">locked_source_id_operation</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">f</desc_parameter><desc_parameter xml:space="preserve">external=False</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.manage_existing',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.manage_existing" ids="cinder.volume.drivers.solidfire.SolidFireDriver.manage_existing" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.manage_existing"><desc_name xml:space="preserve">manage_existing</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">external_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Manages an existing SolidFire Volume (import to Cinder).</paragraph>
                        <paragraph>Renames the Volume to match the expected name for the volume.
                            Also need to consider things like QoS, Emulation, account/tenant.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'manage_existing_get_size()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.manage_existing_get_size',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.manage_existing_get_size" ids="cinder.volume.drivers.solidfire.SolidFireDriver.manage_existing_get_size" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.manage_existing_get_size"><desc_name xml:space="preserve">manage_existing_get_size</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">external_ref</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Return size of an existing LV for manage_existing.</paragraph>
                        <paragraph>existing_ref is a dictionary of the form:
                            {‘name’: &lt;name of existing volume on SF Cluster&gt;}</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'retry_exc_tuple\ (SolidFireDriver\ attribute)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.retry_exc_tuple',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.retry_exc_tuple" ids="cinder.volume.drivers.solidfire.SolidFireDriver.retry_exc_tuple" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.retry_exc_tuple"><desc_name xml:space="preserve">retry_exc_tuple</desc_name><desc_annotation xml:space="preserve"> = (&lt;class 'cinder.exception.SolidFireRetryableException'&gt;, &lt;class 'requests.exceptions.ConnectionError'&gt;)</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'retryable_errors\ (SolidFireDriver\ attribute)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.retryable_errors',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.retryable_errors" ids="cinder.volume.drivers.solidfire.SolidFireDriver.retryable_errors" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.retryable_errors"><desc_name xml:space="preserve">retryable_errors</desc_name><desc_annotation xml:space="preserve"> = ['xDBVersionMismatch', 'xMaxSnapshotsPerVolumeExceeded', 'xMaxClonesPerVolumeExceeded', 'xMaxSnapshotsPerNodeExceeded', 'xMaxClonesPerNodeExceeded', 'xSliceNotRegistered', 'xNotReadyForIO']</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'retype()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.retype',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.retype" ids="cinder.volume.drivers.solidfire.SolidFireDriver.retype" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.retype"><desc_name xml:space="preserve">retype</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">new_type</desc_parameter><desc_parameter xml:space="preserve">diff</desc_parameter><desc_parameter xml:space="preserve">host</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Convert the volume to be of the new type.</paragraph>
                        <paragraph>Returns a boolean indicating whether the retype occurred.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">ctxt</literal_strong> – Context</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">volume</literal_strong> – A dictionary describing the volume to migrate</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">new_type</literal_strong> – A dictionary describing the volume type to convert to</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">diff</literal_strong> – A dictionary with the difference between the two types</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">host</literal_strong> – A dictionary describing the host to migrate to, where
                                                host[‘host’] is its name, and host[‘capabilities’] is a
                                                dictionary of its reported capabilities (Not Used).</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'sf_iops_lim_max\ (SolidFireDriver\ attribute)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.sf_iops_lim_max',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.sf_iops_lim_max" ids="cinder.volume.drivers.solidfire.SolidFireDriver.sf_iops_lim_max" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.sf_iops_lim_max"><desc_name xml:space="preserve">sf_iops_lim_max</desc_name><desc_annotation xml:space="preserve"> = {'minIOPS': 15000, 'maxIOPS': 200000, 'burstIOPS': 200000}</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'sf_iops_lim_min\ (SolidFireDriver\ attribute)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.sf_iops_lim_min',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.sf_iops_lim_min" ids="cinder.volume.drivers.solidfire.SolidFireDriver.sf_iops_lim_min" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.sf_iops_lim_min"><desc_name xml:space="preserve">sf_iops_lim_min</desc_name><desc_annotation xml:space="preserve"> = {'minIOPS': 100, 'maxIOPS': 100, 'burstIOPS': 100}</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'sf_qos_dict\ (SolidFireDriver\ attribute)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.sf_qos_dict',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.sf_qos_dict" ids="cinder.volume.drivers.solidfire.SolidFireDriver.sf_qos_dict" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.sf_qos_dict"><desc_name xml:space="preserve">sf_qos_dict</desc_name><desc_annotation xml:space="preserve"> = {'slow': {'minIOPS': 100, 'maxIOPS': 200, 'burstIOPS': 200}, 'medium': {'minIOPS': 200, 'maxIOPS': 400, 'burstIOPS': 400}, 'fast': {'minIOPS': 500, 'maxIOPS': 1000, 'burstIOPS': 1000}, 'performant': {'minIOPS': 2000, 'maxIOPS': 4000, 'burstIOPS': 4000}, 'off': None}</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'sf_qos_keys\ (SolidFireDriver\ attribute)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.sf_qos_keys',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.sf_qos_keys" ids="cinder.volume.drivers.solidfire.SolidFireDriver.sf_qos_keys" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.sf_qos_keys"><desc_name xml:space="preserve">sf_qos_keys</desc_name><desc_annotation xml:space="preserve"> = ['minIOPS', 'maxIOPS', 'burstIOPS']</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'sf_scale_qos_keys\ (SolidFireDriver\ attribute)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.sf_scale_qos_keys',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.sf_scale_qos_keys" ids="cinder.volume.drivers.solidfire.SolidFireDriver.sf_scale_qos_keys" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.sf_scale_qos_keys"><desc_name xml:space="preserve">sf_scale_qos_keys</desc_name><desc_annotation xml:space="preserve"> = ['scaledIOPS', 'scaleMin', 'scaleMax', 'scaleBurst']</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'terminate_connection()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.terminate_connection',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.terminate_connection" ids="cinder.volume.drivers.solidfire.SolidFireDriver.terminate_connection" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.terminate_connection"><desc_name xml:space="preserve">terminate_connection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">properties</desc_parameter><desc_parameter xml:space="preserve">force</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'thaw_backend()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.thaw_backend',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.thaw_backend" ids="cinder.volume.drivers.solidfire.SolidFireDriver.thaw_backend" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.thaw_backend"><desc_name xml:space="preserve">thaw_backend</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Thaw backend notification.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'unmanage()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.unmanage',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.unmanage" ids="cinder.volume.drivers.solidfire.SolidFireDriver.unmanage" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.unmanage"><desc_name xml:space="preserve">unmanage</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Mark SolidFire Volume as unmanaged (export from Cinder).</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'update_group()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.update_group',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.update_group" ids="cinder.volume.drivers.solidfire.SolidFireDriver.update_group" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.update_group"><desc_name xml:space="preserve">update_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter><desc_parameter xml:space="preserve">group</desc_parameter><desc_parameter xml:space="preserve">add_volumes=None</desc_parameter><desc_parameter xml:space="preserve">remove_volumes=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'update_provider_info()\ (SolidFireDriver\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireDriver.update_provider_info',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireDriver" first="False" fullname="SolidFireDriver.update_provider_info" ids="cinder.volume.drivers.solidfire.SolidFireDriver.update_provider_info" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireDriver.update_provider_info"><desc_name xml:space="preserve">update_provider_info</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">vrefs</desc_parameter><desc_parameter xml:space="preserve">snaprefs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'SolidFireISCSI\ (class\ in\ cinder.volume.drivers.solidfire)',\ 'cinder.volume.drivers.solidfire.SolidFireISCSI',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="SolidFireISCSI" ids="cinder.volume.drivers.solidfire.SolidFireISCSI" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireISCSI"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">SolidFireISCSI</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" reftitle="cinder.volume.targets.iscsi.SanISCSITarget" refuri="cinder.volume.targets.iscsi#cinder.volume.targets.iscsi.SanISCSITarget"><literal classes="xref py py-class">cinder.volume.targets.iscsi.SanISCSITarget</literal></reference></paragraph>
                <index entries="['single',\ 'create_export()\ (SolidFireISCSI\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireISCSI.create_export',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireISCSI" first="False" fullname="SolidFireISCSI.create_export" ids="cinder.volume.drivers.solidfire.SolidFireISCSI.create_export" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireISCSI.create_export"><desc_name xml:space="preserve">create_export</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">volume_path</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'ensure_export()\ (SolidFireISCSI\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireISCSI.ensure_export',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireISCSI" first="False" fullname="SolidFireISCSI.ensure_export" ids="cinder.volume.drivers.solidfire.SolidFireISCSI.ensure_export" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireISCSI.ensure_export"><desc_name xml:space="preserve">ensure_export</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">volume_path</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'remove_export()\ (SolidFireISCSI\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireISCSI.remove_export',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireISCSI" first="False" fullname="SolidFireISCSI.remove_export" ids="cinder.volume.drivers.solidfire.SolidFireISCSI.remove_export" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireISCSI.remove_export"><desc_name xml:space="preserve">remove_export</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'terminate_connection()\ (SolidFireISCSI\ method)',\ 'cinder.volume.drivers.solidfire.SolidFireISCSI.terminate_connection',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SolidFireISCSI" first="False" fullname="SolidFireISCSI.terminate_connection" ids="cinder.volume.drivers.solidfire.SolidFireISCSI.terminate_connection" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.SolidFireISCSI.terminate_connection"><desc_name xml:space="preserve">terminate_connection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume</desc_parameter><desc_parameter xml:space="preserve">connector</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'retry()\ (in\ module\ cinder.volume.drivers.solidfire)',\ 'cinder.volume.drivers.solidfire.retry',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="retry" ids="cinder.volume.drivers.solidfire.retry" module="cinder.volume.drivers.solidfire" names="cinder.volume.drivers.solidfire.retry"><desc_name xml:space="preserve">retry</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">exc_tuple</desc_parameter><desc_parameter xml:space="preserve">tries=5</desc_parameter><desc_parameter xml:space="preserve">delay=1</desc_parameter><desc_parameter xml:space="preserve">backoff=2</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
            </desc_content>
        </desc>
    </section>
</document>
