<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api/cinder.backup.chunkeddriver.rst">
    <section ids="module-cinder.backup.chunkeddriver the-cinder-backup-chunkeddriver-module" names="the\ cinder.backup.chunkeddriver\ module">
        <title>The <reference internal="True" refid="module-cinder.backup.chunkeddriver" reftitle="cinder.backup.chunkeddriver"><literal classes="xref py py-mod">cinder.backup.chunkeddriver</literal></reference> Module</title>
        <index entries="['single',\ 'cinder.backup.chunkeddriver\ (module)',\ 'module-cinder.backup.chunkeddriver',\ '',\ None]"></index>
        <paragraph>Generic base class to implement metadata, compression and chunked data
            operations</paragraph>
        <index entries="['single',\ 'ChunkedBackupDriver\ (class\ in\ cinder.backup.chunkeddriver)',\ 'cinder.backup.chunkeddriver.ChunkedBackupDriver',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="ChunkedBackupDriver" ids="cinder.backup.chunkeddriver.ChunkedBackupDriver" module="cinder.backup.chunkeddriver" names="cinder.backup.chunkeddriver.ChunkedBackupDriver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">ChunkedBackupDriver</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">chunk_size_bytes</desc_parameter><desc_parameter xml:space="preserve">sha_block_size_bytes</desc_parameter><desc_parameter xml:space="preserve">backup_default_container</desc_parameter><desc_parameter xml:space="preserve">enable_progress_timer</desc_parameter><desc_parameter xml:space="preserve">db=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" reftitle="cinder.backup.driver.BackupDriver" refuri="cinder.backup.driver#cinder.backup.driver.BackupDriver"><literal classes="xref py py-class">cinder.backup.driver.BackupDriver</literal></reference></paragraph>
                <paragraph>Abstract chunked backup driver.</paragraph>
                <paragraph>Implements common functionality for backup drivers that store volume
                    data in multiple “chunks” in a backup repository when the size of
                    the backed up cinder volume exceeds the size of a backup repository
                    “chunk.”</paragraph>
                <paragraph>Provides abstract methods to be implemented in concrete chunking
                    drivers.</paragraph>
                <index entries="['single',\ 'DRIVER_VERSION\ (ChunkedBackupDriver\ attribute)',\ 'cinder.backup.chunkeddriver.ChunkedBackupDriver.DRIVER_VERSION',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ChunkedBackupDriver" first="False" fullname="ChunkedBackupDriver.DRIVER_VERSION" ids="cinder.backup.chunkeddriver.ChunkedBackupDriver.DRIVER_VERSION" module="cinder.backup.chunkeddriver" names="cinder.backup.chunkeddriver.ChunkedBackupDriver.DRIVER_VERSION"><desc_name xml:space="preserve">DRIVER_VERSION</desc_name><desc_annotation xml:space="preserve"> = '1.0.0'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'DRIVER_VERSION_MAPPING\ (ChunkedBackupDriver\ attribute)',\ 'cinder.backup.chunkeddriver.ChunkedBackupDriver.DRIVER_VERSION_MAPPING',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ChunkedBackupDriver" first="False" fullname="ChunkedBackupDriver.DRIVER_VERSION_MAPPING" ids="cinder.backup.chunkeddriver.ChunkedBackupDriver.DRIVER_VERSION_MAPPING" module="cinder.backup.chunkeddriver" names="cinder.backup.chunkeddriver.ChunkedBackupDriver.DRIVER_VERSION_MAPPING"><desc_name xml:space="preserve">DRIVER_VERSION_MAPPING</desc_name><desc_annotation xml:space="preserve"> = {'1.0.0': '_restore_v1'}</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'backup()\ (ChunkedBackupDriver\ method)',\ 'cinder.backup.chunkeddriver.ChunkedBackupDriver.backup',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ChunkedBackupDriver" first="False" fullname="ChunkedBackupDriver.backup" ids="cinder.backup.chunkeddriver.ChunkedBackupDriver.backup" module="cinder.backup.chunkeddriver" names="cinder.backup.chunkeddriver.ChunkedBackupDriver.backup"><desc_name xml:space="preserve">backup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">backup</desc_parameter><desc_parameter xml:space="preserve">volume_file</desc_parameter><desc_parameter xml:space="preserve">backup_metadata=True</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Backup the given volume.</paragraph>
                        <paragraph>If backup[‘parent_id’] is given, then an incremental backup
                            is performed.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_backup()\ (ChunkedBackupDriver\ method)',\ 'cinder.backup.chunkeddriver.ChunkedBackupDriver.delete_backup',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ChunkedBackupDriver" first="False" fullname="ChunkedBackupDriver.delete_backup" ids="cinder.backup.chunkeddriver.ChunkedBackupDriver.delete_backup" module="cinder.backup.chunkeddriver" names="cinder.backup.chunkeddriver.ChunkedBackupDriver.delete_backup"><desc_name xml:space="preserve">delete_backup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">backup</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Delete the given backup.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_object()\ (ChunkedBackupDriver\ method)',\ 'cinder.backup.chunkeddriver.ChunkedBackupDriver.delete_object',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ChunkedBackupDriver" first="False" fullname="ChunkedBackupDriver.delete_object" ids="cinder.backup.chunkeddriver.ChunkedBackupDriver.delete_object" module="cinder.backup.chunkeddriver" names="cinder.backup.chunkeddriver.ChunkedBackupDriver.delete_object"><desc_name xml:space="preserve">delete_object</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">object_name</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Delete object from container.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_container_entries()\ (ChunkedBackupDriver\ method)',\ 'cinder.backup.chunkeddriver.ChunkedBackupDriver.get_container_entries',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ChunkedBackupDriver" first="False" fullname="ChunkedBackupDriver.get_container_entries" ids="cinder.backup.chunkeddriver.ChunkedBackupDriver.get_container_entries" module="cinder.backup.chunkeddriver" names="cinder.backup.chunkeddriver.ChunkedBackupDriver.get_container_entries"><desc_name xml:space="preserve">get_container_entries</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">prefix</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get container entry names.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_extra_metadata()\ (ChunkedBackupDriver\ method)',\ 'cinder.backup.chunkeddriver.ChunkedBackupDriver.get_extra_metadata',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ChunkedBackupDriver" first="False" fullname="ChunkedBackupDriver.get_extra_metadata" ids="cinder.backup.chunkeddriver.ChunkedBackupDriver.get_extra_metadata" module="cinder.backup.chunkeddriver" names="cinder.backup.chunkeddriver.ChunkedBackupDriver.get_extra_metadata"><desc_name xml:space="preserve">get_extra_metadata</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">backup</desc_parameter><desc_parameter xml:space="preserve">volume</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Return extra metadata to use in prepare_backup.</paragraph>
                        <paragraph>This method allows for collection of extra metadata in prepare_backup()
                            which will be passed to get_object_reader() and get_object_writer().
                            Subclass extensions can use this extra information to optimize
                            data transfers. Return a json serializable object.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_object_reader()\ (ChunkedBackupDriver\ method)',\ 'cinder.backup.chunkeddriver.ChunkedBackupDriver.get_object_reader',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ChunkedBackupDriver" first="False" fullname="ChunkedBackupDriver.get_object_reader" ids="cinder.backup.chunkeddriver.ChunkedBackupDriver.get_object_reader" module="cinder.backup.chunkeddriver" names="cinder.backup.chunkeddriver.ChunkedBackupDriver.get_object_reader"><desc_name xml:space="preserve">get_object_reader</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">object_name</desc_parameter><desc_parameter xml:space="preserve">extra_metadata=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns a reader object for the backed up chunk.</paragraph>
                        <paragraph>The object reader methods must not have any logging calls, as eventlet
                            has a bug (<reference refuri="https://github.com/eventlet/eventlet/issues/432">https://github.com/eventlet/eventlet/issues/432</reference>) that would
                            result in failures.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_object_writer()\ (ChunkedBackupDriver\ method)',\ 'cinder.backup.chunkeddriver.ChunkedBackupDriver.get_object_writer',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ChunkedBackupDriver" first="False" fullname="ChunkedBackupDriver.get_object_writer" ids="cinder.backup.chunkeddriver.ChunkedBackupDriver.get_object_writer" module="cinder.backup.chunkeddriver" names="cinder.backup.chunkeddriver.ChunkedBackupDriver.get_object_writer"><desc_name xml:space="preserve">get_object_writer</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">object_name</desc_parameter><desc_parameter xml:space="preserve">extra_metadata=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns a writer object which stores the chunk data in backup repository.</paragraph>
                        <paragraph>The object returned should be a context handler that can be used in a
                            “with” context.</paragraph>
                        <paragraph>The object writer methods must not have any logging calls, as eventlet
                            has a bug (<reference refuri="https://github.com/eventlet/eventlet/issues/432">https://github.com/eventlet/eventlet/issues/432</reference>) that would
                            result in failures.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'put_container()\ (ChunkedBackupDriver\ method)',\ 'cinder.backup.chunkeddriver.ChunkedBackupDriver.put_container',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ChunkedBackupDriver" first="False" fullname="ChunkedBackupDriver.put_container" ids="cinder.backup.chunkeddriver.ChunkedBackupDriver.put_container" module="cinder.backup.chunkeddriver" names="cinder.backup.chunkeddriver.ChunkedBackupDriver.put_container"><desc_name xml:space="preserve">put_container</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">container</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Create the container if needed. No failure if it pre-exists.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'restore()\ (ChunkedBackupDriver\ method)',\ 'cinder.backup.chunkeddriver.ChunkedBackupDriver.restore',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ChunkedBackupDriver" first="False" fullname="ChunkedBackupDriver.restore" ids="cinder.backup.chunkeddriver.ChunkedBackupDriver.restore" module="cinder.backup.chunkeddriver" names="cinder.backup.chunkeddriver.ChunkedBackupDriver.restore"><desc_name xml:space="preserve">restore</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">backup</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">volume_file</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Restore the given volume backup from backup repository.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'update_container_name()\ (ChunkedBackupDriver\ method)',\ 'cinder.backup.chunkeddriver.ChunkedBackupDriver.update_container_name',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ChunkedBackupDriver" first="False" fullname="ChunkedBackupDriver.update_container_name" ids="cinder.backup.chunkeddriver.ChunkedBackupDriver.update_container_name" module="cinder.backup.chunkeddriver" names="cinder.backup.chunkeddriver.ChunkedBackupDriver.update_container_name"><desc_name xml:space="preserve">update_container_name</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">backup</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Allow sub-classes to override container name.</paragraph>
                        <paragraph>This method exists so that sub-classes can override the container name
                            as it comes in to the driver in the backup object. Implementations
                            should return None if no change to the container name is desired.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
    </section>
</document>
