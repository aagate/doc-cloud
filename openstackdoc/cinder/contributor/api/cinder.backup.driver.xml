<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api/cinder.backup.driver.rst">
    <section ids="module-cinder.backup.driver the-cinder-backup-driver-module" names="the\ cinder.backup.driver\ module">
        <title>The <reference internal="True" refid="module-cinder.backup.driver" reftitle="cinder.backup.driver"><literal classes="xref py py-mod">cinder.backup.driver</literal></reference> Module</title>
        <index entries="['single',\ 'cinder.backup.driver\ (module)',\ 'module-cinder.backup.driver',\ '',\ None]"></index>
        <paragraph>Base class for all backup drivers.</paragraph>
        <index entries="['single',\ 'BackupDriver\ (class\ in\ cinder.backup.driver)',\ 'cinder.backup.driver.BackupDriver',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="BackupDriver" ids="cinder.backup.driver.BackupDriver" module="cinder.backup.driver" names="cinder.backup.driver.BackupDriver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">BackupDriver</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">db=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" reftitle="cinder.db.base.Base" refuri="cinder.db.base#cinder.db.base.Base"><literal classes="xref py py-class">cinder.db.base.Base</literal></reference></paragraph>
                <index entries="['single',\ 'backup()\ (BackupDriver\ method)',\ 'cinder.backup.driver.BackupDriver.backup',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BackupDriver" first="False" fullname="BackupDriver.backup" ids="cinder.backup.driver.BackupDriver.backup" module="cinder.backup.driver" names="cinder.backup.driver.BackupDriver.backup"><desc_name xml:space="preserve">backup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">backup</desc_parameter><desc_parameter xml:space="preserve">volume_file</desc_parameter><desc_parameter xml:space="preserve">backup_metadata=False</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Start a backup of a specified volume.</paragraph>
                        <paragraph>Some I/O operations may block greenthreads, so in order to prevent
                            starvation parameter volume_file will be a proxy that will execute all
                            methods in native threads, so the method implementation doesn’t need to
                            worry about that..</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'check_for_setup_error()\ (BackupDriver\ method)',\ 'cinder.backup.driver.BackupDriver.check_for_setup_error',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BackupDriver" first="False" fullname="BackupDriver.check_for_setup_error" ids="cinder.backup.driver.BackupDriver.check_for_setup_error" module="cinder.backup.driver" names="cinder.backup.driver.BackupDriver.check_for_setup_error"><desc_name xml:space="preserve">check_for_setup_error</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Method for checking if backup backend is successfully installed.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'delete_backup()\ (BackupDriver\ method)',\ 'cinder.backup.driver.BackupDriver.delete_backup',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BackupDriver" first="False" fullname="BackupDriver.delete_backup" ids="cinder.backup.driver.BackupDriver.delete_backup" module="cinder.backup.driver" names="cinder.backup.driver.BackupDriver.delete_backup"><desc_name xml:space="preserve">delete_backup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">backup</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Delete a saved backup.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'export_record()\ (BackupDriver\ method)',\ 'cinder.backup.driver.BackupDriver.export_record',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BackupDriver" first="False" fullname="BackupDriver.export_record" ids="cinder.backup.driver.BackupDriver.export_record" module="cinder.backup.driver" names="cinder.backup.driver.BackupDriver.export_record"><desc_name xml:space="preserve">export_record</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">backup</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Export driver specific backup record information.</paragraph>
                        <paragraph>If backup backend needs additional driver specific information to
                            import backup record back into the system it must overwrite this method
                            and return it here as a dictionary so it can be serialized into a
                            string.</paragraph>
                        <paragraph>Default backup driver implementation has no extra information.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">backup</literal_strong> – backup object to export</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>driver_info - dictionary with extra information</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_metadata()\ (BackupDriver\ method)',\ 'cinder.backup.driver.BackupDriver.get_metadata',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BackupDriver" first="False" fullname="BackupDriver.get_metadata" ids="cinder.backup.driver.BackupDriver.get_metadata" module="cinder.backup.driver" names="cinder.backup.driver.BackupDriver.get_metadata"><desc_name xml:space="preserve">get_metadata</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume_id</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'import_record()\ (BackupDriver\ method)',\ 'cinder.backup.driver.BackupDriver.import_record',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BackupDriver" first="False" fullname="BackupDriver.import_record" ids="cinder.backup.driver.BackupDriver.import_record" module="cinder.backup.driver" names="cinder.backup.driver.BackupDriver.import_record"><desc_name xml:space="preserve">import_record</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">backup</desc_parameter><desc_parameter xml:space="preserve">driver_info</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Import driver specific backup record information.</paragraph>
                        <paragraph>If backup backend needs additional driver specific information to
                            import backup record back into the system it must overwrite this method
                            since it will be called with the extra information that was provided by
                            export_record when exporting the backup.</paragraph>
                        <paragraph>Default backup driver implementation does nothing since it didn’t
                            export any specific data in export_record.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">backup</literal_strong> – backup object to export</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">driver_info</literal_strong> – dictionary with driver specific backup record
                                                information</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>nothing</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'put_metadata()\ (BackupDriver\ method)',\ 'cinder.backup.driver.BackupDriver.put_metadata',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BackupDriver" first="False" fullname="BackupDriver.put_metadata" ids="cinder.backup.driver.BackupDriver.put_metadata" module="cinder.backup.driver" names="cinder.backup.driver.BackupDriver.put_metadata"><desc_name xml:space="preserve">put_metadata</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">json_metadata</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'restore()\ (BackupDriver\ method)',\ 'cinder.backup.driver.BackupDriver.restore',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BackupDriver" first="False" fullname="BackupDriver.restore" ids="cinder.backup.driver.BackupDriver.restore" module="cinder.backup.driver" names="cinder.backup.driver.BackupDriver.restore"><desc_name xml:space="preserve">restore</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">backup</desc_parameter><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">volume_file</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Restore a saved backup.</paragraph>
                        <paragraph>Some I/O operations may block greenthreads, so in order to prevent
                            starvation parameter volume_file will be a proxy that will execute all
                            methods in native threads, so the method implementation doesn’t need to
                            worry about that..</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'BackupDriverWithVerify\ (class\ in\ cinder.backup.driver)',\ 'cinder.backup.driver.BackupDriverWithVerify',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="BackupDriverWithVerify" ids="cinder.backup.driver.BackupDriverWithVerify" module="cinder.backup.driver" names="cinder.backup.driver.BackupDriverWithVerify"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">BackupDriverWithVerify</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">db=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" refid="cinder.backup.driver.BackupDriver" reftitle="cinder.backup.driver.BackupDriver"><literal classes="xref py py-class">cinder.backup.driver.BackupDriver</literal></reference></paragraph>
                <index entries="['single',\ 'verify()\ (BackupDriverWithVerify\ method)',\ 'cinder.backup.driver.BackupDriverWithVerify.verify',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BackupDriverWithVerify" first="False" fullname="BackupDriverWithVerify.verify" ids="cinder.backup.driver.BackupDriverWithVerify.verify" module="cinder.backup.driver" names="cinder.backup.driver.BackupDriverWithVerify.verify"><desc_name xml:space="preserve">verify</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">backup</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Verify that the backup exists on the backend.</paragraph>
                        <paragraph>Verify that the backup is OK, possibly following an import record
                            operation.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">backup</literal_strong> – backup id of the backup to verify</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Raises</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="cinder.exception.InvalidBackup" refuri="cinder.exception#cinder.exception.InvalidBackup"><literal_strong>InvalidBackup</literal_strong></reference><literal_strong>, </literal_strong><literal_strong>NotImplementedError</literal_strong> – </paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'BackupMetadataAPI\ (class\ in\ cinder.backup.driver)',\ 'cinder.backup.driver.BackupMetadataAPI',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="BackupMetadataAPI" ids="cinder.backup.driver.BackupMetadataAPI" module="cinder.backup.driver" names="cinder.backup.driver.BackupMetadataAPI"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">BackupMetadataAPI</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">db=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Bases: <reference internal="True" reftitle="cinder.db.base.Base" refuri="cinder.db.base#cinder.db.base.Base"><literal classes="xref py py-class">cinder.db.base.Base</literal></reference></paragraph>
                <index entries="['single',\ 'TYPE_TAG_VOL_BASE_META\ (BackupMetadataAPI\ attribute)',\ 'cinder.backup.driver.BackupMetadataAPI.TYPE_TAG_VOL_BASE_META',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="BackupMetadataAPI" first="False" fullname="BackupMetadataAPI.TYPE_TAG_VOL_BASE_META" ids="cinder.backup.driver.BackupMetadataAPI.TYPE_TAG_VOL_BASE_META" module="cinder.backup.driver" names="cinder.backup.driver.BackupMetadataAPI.TYPE_TAG_VOL_BASE_META"><desc_name xml:space="preserve">TYPE_TAG_VOL_BASE_META</desc_name><desc_annotation xml:space="preserve"> = 'volume-base-metadata'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'TYPE_TAG_VOL_GLANCE_META\ (BackupMetadataAPI\ attribute)',\ 'cinder.backup.driver.BackupMetadataAPI.TYPE_TAG_VOL_GLANCE_META',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="BackupMetadataAPI" first="False" fullname="BackupMetadataAPI.TYPE_TAG_VOL_GLANCE_META" ids="cinder.backup.driver.BackupMetadataAPI.TYPE_TAG_VOL_GLANCE_META" module="cinder.backup.driver" names="cinder.backup.driver.BackupMetadataAPI.TYPE_TAG_VOL_GLANCE_META"><desc_name xml:space="preserve">TYPE_TAG_VOL_GLANCE_META</desc_name><desc_annotation xml:space="preserve"> = 'volume-glance-metadata'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'TYPE_TAG_VOL_META\ (BackupMetadataAPI\ attribute)',\ 'cinder.backup.driver.BackupMetadataAPI.TYPE_TAG_VOL_META',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="BackupMetadataAPI" first="False" fullname="BackupMetadataAPI.TYPE_TAG_VOL_META" ids="cinder.backup.driver.BackupMetadataAPI.TYPE_TAG_VOL_META" module="cinder.backup.driver" names="cinder.backup.driver.BackupMetadataAPI.TYPE_TAG_VOL_META"><desc_name xml:space="preserve">TYPE_TAG_VOL_META</desc_name><desc_annotation xml:space="preserve"> = 'volume-metadata'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get()\ (BackupMetadataAPI\ method)',\ 'cinder.backup.driver.BackupMetadataAPI.get',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BackupMetadataAPI" first="False" fullname="BackupMetadataAPI.get" ids="cinder.backup.driver.BackupMetadataAPI.get" module="cinder.backup.driver" names="cinder.backup.driver.BackupMetadataAPI.get"><desc_name xml:space="preserve">get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume_id</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get volume metadata.</paragraph>
                        <paragraph>Returns a json-encoded dict containing all metadata and the restore
                            version i.e. the version used to decide what actually gets restored
                            from this container when doing a backup restore.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'put()\ (BackupMetadataAPI\ method)',\ 'cinder.backup.driver.BackupMetadataAPI.put',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BackupMetadataAPI" first="False" fullname="BackupMetadataAPI.put" ids="cinder.backup.driver.BackupMetadataAPI.put" module="cinder.backup.driver" names="cinder.backup.driver.BackupMetadataAPI.put"><desc_name xml:space="preserve">put</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">volume_id</desc_parameter><desc_parameter xml:space="preserve">json_metadata</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Restore volume metadata to a volume.</paragraph>
                        <paragraph>The json container should contain a version that is supported here.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
    </section>
</document>
