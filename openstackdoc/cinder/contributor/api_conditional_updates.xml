<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/api_conditional_updates.rst">
    <section ids="api-races-conditional-updates" names="api\ races\ -\ conditional\ updates">
        <title>API Races - Conditional Updates</title>
        <section ids="background" names="background">
            <title>Background</title>
            <paragraph>On Cinder API nodes we have to check that requested action can be performed by
                checking request arguments and involved resources, and only if everything
                matches required criteria we will proceed with the RPC call to any of the other
                nodes.</paragraph>
            <paragraph>Checking the conditions must be done in a non racy way to ensure that already
                checked requirements don’t change while we check remaining conditions.  This is
                of utter importance, as Cinder uses resource status as a lock to prevent
                concurrent operations on a resource.</paragraph>
            <paragraph>An simple example of this would be extending a volume, where we first check the
                status:</paragraph>
            <literal_block classes="code python" xml:space="preserve"><inline classes="keyword">if</inline> <inline classes="name">volume</inline><inline classes="punctuation">[</inline><inline classes="literal string single">'status'</inline><inline classes="punctuation">]</inline> <inline classes="operator">!=</inline> <inline classes="literal string single">'available'</inline><inline classes="punctuation">:</inline></literal_block>
            <paragraph>Then update the status:</paragraph>
            <literal_block classes="code python" xml:space="preserve"><inline classes="name builtin pseudo">self</inline><inline classes="operator">.</inline><inline classes="name">update</inline><inline classes="punctuation">(</inline><inline classes="name">context</inline><inline classes="punctuation">,</inline> <inline classes="name">volume</inline><inline classes="punctuation">,</inline> <inline classes="punctuation">{</inline><inline classes="literal string single">'status'</inline><inline classes="punctuation">:</inline> <inline classes="literal string single">'extending'</inline><inline classes="punctuation">})</inline></literal_block>
            <paragraph>And finally make the RPC call:</paragraph>
            <literal_block classes="code python" xml:space="preserve"><inline classes="name builtin pseudo">self</inline><inline classes="operator">.</inline><inline classes="name">volume_rpcapi</inline><inline classes="operator">.</inline><inline classes="name">extend_volume</inline><inline classes="punctuation">(</inline><inline classes="name">context</inline><inline classes="punctuation">,</inline> <inline classes="name">volume</inline><inline classes="punctuation">,</inline> <inline classes="name">new_size</inline><inline classes="punctuation">,</inline>
                                 <inline classes="name">reservations</inline><inline classes="punctuation">)</inline></literal_block>
            <paragraph>The problem is that this code would allow races, as other request could
                have already changed the volume status between us getting the value and
                updating the DB.</paragraph>
            <paragraph>There are multiple ways to fix this, such as:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Using a Distributed Locking Mechanism</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Using DB isolation level</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Using SQL SELECT … FOR UPDATE</paragraph>
                </list_item>
                <list_item>
                    <paragraph>USING compare and swap mechanism in SQL query</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Our tests showed that the best alternative was compare and swap and we decided
                to call this mechanism “Conditional Update” as it seemed more appropriate.</paragraph>
        </section>
        <section ids="conditional-update" names="conditional\ update">
            <title>Conditional Update</title>
            <paragraph>Conditional Update is the mechanism we use in Cinder to prevent races when
                updating the DB.  In essence it is the SQL equivalent of an <literal>UPDATE ... FROM
... WHERE;</literal> clause</paragraph>
            <paragraph>It is implemented as an abstraction layer on top of SQLAlchemy ORM engine in
                our DB api layer and exposed for consumption in Cinder’s Persistent Versioned
                Objects through the <literal>conditional_update</literal> method so it can be used from any
                Versioned Object instance that has persistence (Volume, Snapshot, Backup…).</paragraph>
            <paragraph>Method signature is:</paragraph>
            <literal_block classes="code python" xml:space="preserve"><inline classes="keyword">def</inline> <inline classes="name function">conditional_update</inline><inline classes="punctuation">(</inline><inline classes="name builtin pseudo">self</inline><inline classes="punctuation">,</inline> <inline classes="name">values</inline><inline classes="punctuation">,</inline> <inline classes="name">expected_values</inline><inline classes="operator">=</inline><inline classes="name builtin pseudo">None</inline><inline classes="punctuation">,</inline> <inline classes="name">filters</inline><inline classes="operator">=</inline><inline classes="punctuation">(),</inline>
                       <inline classes="name">save_all</inline><inline classes="operator">=</inline><inline classes="name builtin pseudo">False</inline><inline classes="punctuation">,</inline> <inline classes="name">session</inline><inline classes="operator">=</inline><inline classes="name builtin pseudo">None</inline><inline classes="punctuation">,</inline> <inline classes="name">reflect_changes</inline><inline classes="operator">=</inline><inline classes="name builtin pseudo">True</inline><inline classes="punctuation">):</inline></literal_block>
            <field_list>
                <field>
                    <field_name>values</field_name>
                    <field_body>
                        <paragraph>Dictionary of key-value pairs with changes that we want to make to the
                            resource in the DB.</paragraph>
                    </field_body>
                </field>
                <field>
                    <field_name>expected_values</field_name>
                    <field_body>
                        <paragraph>Dictionary with conditions that must be met for the update to be executed.</paragraph>
                        <paragraph>Condition <literal>field.id == resource.id</literal> is implicit and there is no need to add
                            it to the conditions.</paragraph>
                        <paragraph>If no <literal>expected_values</literal> argument is provided update will only go through if
                            no field in the DB has changed. Dirty fields from the Versioned Object are
                            excluded as we don’t know their original value.</paragraph>
                    </field_body>
                </field>
                <field>
                    <field_name>filters</field_name>
                    <field_body>
                        <paragraph>Additional SQLAlchemy filters can be provided for more complex conditions.</paragraph>
                    </field_body>
                </field>
                <field>
                    <field_name>save_all</field_name>
                    <field_body>
                        <paragraph>By default we will only be updating the DB with values provided in the
                            <literal>values</literal> argument, but we can explicitly say that we also want to save
                            object’s current dirty fields.</paragraph>
                    </field_body>
                </field>
                <field>
                    <field_name>session</field_name>
                    <field_body>
                        <paragraph>A SQLAlchemy session can be provided, although it is unlikely to be needed.</paragraph>
                    </field_body>
                </field>
                <field>
                    <field_name>reflect_changes</field_name>
                    <field_body>
                        <paragraph>On a successful update we will also update Versioned Object instance to
                            reflect these changes, but we can prevent this instance update passing False
                            on this argument.</paragraph>
                    </field_body>
                </field>
                <field>
                    <field_name>Return Value</field_name>
                    <field_body>
                        <paragraph>We’ll return the number of changed rows.  So we’ll get a 0 value if the
                            conditional update has not been successful instead of an exception.</paragraph>
                    </field_body>
                </field>
            </field_list>
        </section>
        <section ids="basic-usage" names="basic\ usage">
            <title>Basic Usage</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><strong>Simple match</strong></paragraph>
                    <paragraph>The most basic example is doing a simple match, for example for a <literal>volume</literal>
                        variable that contains a Versioned Object Volume class instance we may want
                        to change the <literal>status</literal> to “deleting” and update the <literal>terminated_at</literal> field
                        with current UTC time only if current <literal>status</literal> is “available” and the
                        volume is not in a consistency group.</paragraph>
                    <literal_block classes="code python" xml:space="preserve"><inline classes="name">values</inline><inline classes="operator">=</inline><inline classes="punctuation">{</inline><inline classes="literal string single">'status'</inline><inline classes="punctuation">:</inline> <inline classes="literal string single">'deleting'</inline><inline classes="punctuation">,</inline>
        <inline classes="literal string single">'terminated_at'</inline><inline classes="punctuation">:</inline> <inline classes="name">timeutils</inline><inline classes="operator">.</inline><inline classes="name">utcnow</inline><inline classes="punctuation">()}</inline>
<inline classes="name">expected_values</inline> <inline classes="operator">=</inline> <inline classes="punctuation">{</inline><inline classes="literal string single">'status'</inline><inline classes="punctuation">:</inline> <inline classes="literal string single">'available'</inline><inline classes="punctuation">,</inline>
                   <inline classes="literal string single">'consistencygroup_id'</inline><inline classes="punctuation">:</inline> <inline classes="name builtin pseudo">None</inline><inline classes="punctuation">}</inline>

<inline classes="name">volume</inline><inline classes="operator">.</inline><inline classes="name">conditional_update</inline><inline classes="punctuation">(</inline><inline classes="name">values</inline><inline classes="punctuation">,</inline> <inline classes="name">expected_values</inline><inline classes="punctuation">)</inline></literal_block>
                </list_item>
                <list_item>
                    <paragraph><strong>Iterable match</strong></paragraph>
                    <paragraph>Conditions can contain not only single values, but also iterables, and the
                        conditional update mechanism will correctly handle the presence of None
                        values in the range, unlike SQL <literal>IN</literal> clause that doesn’t support <literal>NULL</literal>
                        values.</paragraph>
                    <literal_block classes="code python" xml:space="preserve"><inline classes="name">values</inline><inline classes="operator">=</inline><inline classes="punctuation">{</inline><inline classes="literal string single">'status'</inline><inline classes="punctuation">:</inline> <inline classes="literal string single">'deleting'</inline><inline classes="punctuation">,</inline>
        <inline classes="literal string single">'terminated_at'</inline><inline classes="punctuation">:</inline> <inline classes="name">timeutils</inline><inline classes="operator">.</inline><inline classes="name">utcnow</inline><inline classes="punctuation">()}</inline>
<inline classes="name">expected_values</inline><inline classes="operator">=</inline><inline classes="punctuation">{</inline>
    <inline classes="literal string single">'status'</inline><inline classes="punctuation">:</inline> <inline classes="punctuation">(</inline><inline classes="literal string single">'available'</inline><inline classes="punctuation">,</inline> <inline classes="literal string single">'error'</inline><inline classes="punctuation">,</inline> <inline classes="literal string single">'error_restoring'</inline> <inline classes="literal string single">'error_extending'</inline><inline classes="punctuation">),</inline>
    <inline classes="literal string single">'migration_status'</inline><inline classes="punctuation">:</inline> <inline classes="punctuation">(</inline><inline classes="name builtin pseudo">None</inline><inline classes="punctuation">,</inline> <inline classes="literal string single">'deleting'</inline><inline classes="punctuation">,</inline> <inline classes="literal string single">'error'</inline><inline classes="punctuation">,</inline> <inline classes="literal string single">'success'</inline><inline classes="punctuation">),</inline>
    <inline classes="literal string single">'consistencygroup_id'</inline><inline classes="punctuation">:</inline> <inline classes="name builtin pseudo">None</inline>
<inline classes="punctuation">}</inline>

<inline classes="name">volume</inline><inline classes="operator">.</inline><inline classes="name">conditional_update</inline><inline classes="punctuation">(</inline><inline classes="name">values</inline><inline classes="punctuation">,</inline> <inline classes="name">expected_values</inline><inline classes="punctuation">)</inline></literal_block>
                </list_item>
                <list_item>
                    <paragraph><strong>Exclusion</strong></paragraph>
                    <paragraph>In some cases we’ll need to set conditions on what is <emphasis>not</emphasis> in the DB record
                        instead of what is is, for that we will use the exclusion mechanism provided
                        by the <literal>Not</literal> class in all persistent objects.  This class accepts single
                        values as well as iterables.</paragraph>
                    <literal_block classes="code python" xml:space="preserve"><inline classes="name">values</inline><inline classes="operator">=</inline><inline classes="punctuation">{</inline><inline classes="literal string single">'status'</inline><inline classes="punctuation">:</inline> <inline classes="literal string single">'deleting'</inline><inline classes="punctuation">,</inline>
        <inline classes="literal string single">'terminated_at'</inline><inline classes="punctuation">:</inline> <inline classes="name">timeutils</inline><inline classes="operator">.</inline><inline classes="name">utcnow</inline><inline classes="punctuation">()}</inline>
<inline classes="name">expected_values</inline><inline classes="operator">=</inline><inline classes="punctuation">{</inline>
    <inline classes="literal string single">'attach_status'</inline><inline classes="punctuation">:</inline> <inline classes="name">volume</inline><inline classes="operator">.</inline><inline classes="name">Not</inline><inline classes="punctuation">(</inline><inline classes="literal string single">'attached'</inline><inline classes="punctuation">),</inline>
    <inline classes="literal string single">'status'</inline><inline classes="punctuation">:</inline> <inline classes="punctuation">(</inline><inline classes="literal string single">'available'</inline><inline classes="punctuation">,</inline> <inline classes="literal string single">'error'</inline><inline classes="punctuation">,</inline> <inline classes="literal string single">'error_restoring'</inline> <inline classes="literal string single">'error_extending'</inline><inline classes="punctuation">),</inline>
    <inline classes="literal string single">'migration_status'</inline><inline classes="punctuation">:</inline> <inline classes="punctuation">(</inline><inline classes="name builtin pseudo">None</inline><inline classes="punctuation">,</inline> <inline classes="literal string single">'deleting'</inline><inline classes="punctuation">,</inline> <inline classes="literal string single">'error'</inline><inline classes="punctuation">,</inline> <inline classes="literal string single">'success'</inline><inline classes="punctuation">),</inline>
    <inline classes="literal string single">'consistencygroup_id'</inline><inline classes="punctuation">:</inline> <inline classes="name builtin pseudo">None</inline>
<inline classes="punctuation">}</inline>

<inline classes="name">volume</inline><inline classes="operator">.</inline><inline classes="name">conditional_update</inline><inline classes="punctuation">(</inline><inline classes="name">values</inline><inline classes="punctuation">,</inline> <inline classes="name">expected_values</inline><inline classes="punctuation">)</inline></literal_block>
                </list_item>
                <list_item>
                    <paragraph><strong>Filters</strong></paragraph>
                    <paragraph>We can use complex filters in the conditions, but these must be SQLAlchemy
                        queries/conditions and as the rest of the DB methods must be properly
                        abstracted from the API.</paragraph>
                    <paragraph>Therefore we will create the method in cinder/db/sqlalchemy/api.py:</paragraph>
                    <literal_block classes="code python" xml:space="preserve"><inline classes="keyword">def</inline> <inline classes="name function">volume_has_snapshots_filter</inline><inline classes="punctuation">():</inline>
    <inline classes="keyword">return</inline> <inline classes="name">sql</inline><inline classes="operator">.</inline><inline classes="name">exists</inline><inline classes="punctuation">()</inline><inline classes="operator">.</inline><inline classes="name">where</inline><inline classes="punctuation">(</inline>
        <inline classes="name">and_</inline><inline classes="punctuation">(</inline><inline classes="name">models</inline><inline classes="operator">.</inline><inline classes="name">Volume</inline><inline classes="operator">.</inline><inline classes="name">id</inline> <inline classes="operator">==</inline> <inline classes="name">models</inline><inline classes="operator">.</inline><inline classes="name">Snapshot</inline><inline classes="operator">.</inline><inline classes="name">volume_id</inline><inline classes="punctuation">,</inline>
             <inline classes="operator">~</inline><inline classes="name">models</inline><inline classes="operator">.</inline><inline classes="name">Snapshot</inline><inline classes="operator">.</inline><inline classes="name">deleted</inline><inline classes="punctuation">))</inline></literal_block>
                    <paragraph>Then expose this filter through the cinder/db/api.py:</paragraph>
                    <literal_block classes="code python" xml:space="preserve"><inline classes="keyword">def</inline> <inline classes="name function">volume_has_snapshots_filter</inline><inline classes="punctuation">():</inline>
    <inline classes="keyword">return</inline> <inline classes="name">IMPL</inline><inline classes="operator">.</inline><inline classes="name">volume_has_snapshots_filter</inline><inline classes="punctuation">()</inline></literal_block>
                    <paragraph>And finally used in the API (notice how we are negating the filter at the
                        API):</paragraph>
                    <literal_block classes="code python" xml:space="preserve"><inline classes="name">filters</inline> <inline classes="operator">=</inline> <inline classes="punctuation">[</inline><inline classes="operator">~</inline><inline classes="name">db</inline><inline classes="operator">.</inline><inline classes="name">volume_has_snapshots_filter</inline><inline classes="punctuation">()]</inline>
<inline classes="name">values</inline><inline classes="operator">=</inline><inline classes="punctuation">{</inline><inline classes="literal string single">'status'</inline><inline classes="punctuation">:</inline> <inline classes="literal string single">'deleting'</inline><inline classes="punctuation">,</inline>
        <inline classes="literal string single">'terminated_at'</inline><inline classes="punctuation">:</inline> <inline classes="name">timeutils</inline><inline classes="operator">.</inline><inline classes="name">utcnow</inline><inline classes="punctuation">()}</inline>
<inline classes="name">expected_values</inline><inline classes="operator">=</inline><inline classes="punctuation">{</inline>
    <inline classes="literal string single">'attach_status'</inline><inline classes="punctuation">:</inline> <inline classes="name">volume</inline><inline classes="operator">.</inline><inline classes="name">Not</inline><inline classes="punctuation">(</inline><inline classes="literal string single">'attached'</inline><inline classes="punctuation">),</inline>
    <inline classes="literal string single">'status'</inline><inline classes="punctuation">:</inline> <inline classes="punctuation">(</inline><inline classes="literal string single">'available'</inline><inline classes="punctuation">,</inline> <inline classes="literal string single">'error'</inline><inline classes="punctuation">,</inline> <inline classes="literal string single">'error_restoring'</inline> <inline classes="literal string single">'error_extending'</inline><inline classes="punctuation">),</inline>
    <inline classes="literal string single">'migration_status'</inline><inline classes="punctuation">:</inline> <inline classes="punctuation">(</inline><inline classes="name builtin pseudo">None</inline><inline classes="punctuation">,</inline> <inline classes="literal string single">'deleting'</inline><inline classes="punctuation">,</inline> <inline classes="literal string single">'error'</inline><inline classes="punctuation">,</inline> <inline classes="literal string single">'success'</inline><inline classes="punctuation">),</inline>
    <inline classes="literal string single">'consistencygroup_id'</inline><inline classes="punctuation">:</inline> <inline classes="name builtin pseudo">None</inline>
<inline classes="punctuation">}</inline>

<inline classes="name">volume</inline><inline classes="operator">.</inline><inline classes="name">conditional_update</inline><inline classes="punctuation">(</inline><inline classes="name">values</inline><inline classes="punctuation">,</inline> <inline classes="name">expected_values</inline><inline classes="punctuation">,</inline> <inline classes="name">filters</inline><inline classes="punctuation">)</inline></literal_block>
                </list_item>
            </bullet_list>
        </section>
        <section ids="returning-errors" names="returning\ errors">
            <title>Returning Errors</title>
            <paragraph>The most important downside of using conditional updates to remove API races is
                the inherent uncertainty of the cause of failure resulting in more generic
                error messages.</paragraph>
            <paragraph>When we use the <title_reference>conditional_update</title_reference> method we’ll use returned value to
                determine the success of the operation, as a value of 0 indicates that no rows
                have been updated and the conditions were not met.  But we don’t know which
                one, or which ones, were the cause of the failure.</paragraph>
            <paragraph>There are 2 approaches to this issue:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>On failure we go one by one checking the conditions and return the first one
                        that fails.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>We return a generic error message indicating all conditions that must be met
                        for the operation to succeed.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>It was decided that we would go with the second approach, because even though
                the first approach was closer to what we already had and would give a better
                user experience, it had considerable implications such as:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>More code was needed to do individual checks making operations considerable
                        longer and less readable.  This was greatly alleviated using helper methods
                        to return the errors.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Higher number of DB queries required to determine failure cause.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Since there could be races because DB contents could be changed between the
                        failed update and the follow up queries that checked the values for the
                        specific error, a loop would be needed to make sure that either the
                        conditional update succeeds or one of the condition checks fails.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Having such a loop means that a small error in the code could lead to an
                        endless loop in a production environment.  This coding error could be an
                        incorrect conditional update filter that would always fail or a missing or
                        incorrect condition that checked for the specific issue to return the error.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>A simple example of a generic error can be found in <title_reference>begin_detaching</title_reference> code:</paragraph>
            <literal_block classes="code python" xml:space="preserve"><inline classes="name decorator">@wrap_check_policy</inline>
<inline classes="keyword">def</inline> <inline classes="name function">begin_detaching</inline><inline classes="punctuation">(</inline><inline classes="name builtin pseudo">self</inline><inline classes="punctuation">,</inline> <inline classes="name">context</inline><inline classes="punctuation">,</inline> <inline classes="name">volume</inline><inline classes="punctuation">):</inline>
    <inline classes="comment single"># If we are in the middle of a volume migration, we don't want the</inline>
    <inline classes="comment single"># user to see that the volume is 'detaching'. Having</inline>
    <inline classes="comment single"># 'migration_status' set will have the same effect internally.</inline>
    <inline classes="name">expected</inline> <inline classes="operator">=</inline> <inline classes="punctuation">{</inline><inline classes="literal string single">'status'</inline><inline classes="punctuation">:</inline> <inline classes="literal string single">'in-use'</inline><inline classes="punctuation">,</inline>
                <inline classes="literal string single">'attach_status'</inline><inline classes="punctuation">:</inline> <inline classes="literal string single">'attached'</inline><inline classes="punctuation">,</inline>
                <inline classes="literal string single">'migration_status'</inline><inline classes="punctuation">:</inline> <inline classes="name builtin pseudo">self</inline><inline classes="operator">.</inline><inline classes="name">AVAILABLE_MIGRATION_STATUS</inline><inline classes="punctuation">}</inline>

    <inline classes="name">result</inline> <inline classes="operator">=</inline> <inline classes="name">volume</inline><inline classes="operator">.</inline><inline classes="name">conditional_update</inline><inline classes="punctuation">({</inline><inline classes="literal string single">'status'</inline><inline classes="punctuation">:</inline> <inline classes="literal string single">'detaching'</inline><inline classes="punctuation">},</inline> <inline classes="name">expected</inline><inline classes="punctuation">)</inline>

    <inline classes="keyword">if</inline> <inline classes="operator word">not</inline> <inline classes="punctuation">(</inline><inline classes="name">result</inline> <inline classes="operator word">or</inline> <inline classes="name builtin pseudo">self</inline><inline classes="operator">.</inline><inline classes="name">_is_volume_migrating</inline><inline classes="punctuation">(</inline><inline classes="name">volume</inline><inline classes="punctuation">)):</inline>
        <inline classes="name">msg</inline> <inline classes="operator">=</inline> <inline classes="name">_</inline><inline classes="punctuation">(</inline><inline classes="literal string double">"Unable to detach volume. Volume status must be 'in-use' "</inline>
                <inline classes="literal string double">"and attach_status must be 'attached' to detach."</inline><inline classes="punctuation">)</inline>
        <inline classes="name">LOG</inline><inline classes="operator">.</inline><inline classes="name">error</inline><inline classes="punctuation">(</inline><inline classes="name">msg</inline><inline classes="punctuation">)</inline>
        <inline classes="keyword">raise</inline> <inline classes="name">exception</inline><inline classes="operator">.</inline><inline classes="name">InvalidVolume</inline><inline classes="punctuation">(</inline><inline classes="name">reason</inline><inline classes="operator">=</inline><inline classes="name">msg</inline><inline classes="punctuation">)</inline></literal_block>
        </section>
        <section ids="building-filters-on-the-api" names="building\ filters\ on\ the\ api">
            <title>Building filters on the API</title>
            <paragraph>SQLAlchemy filters created as mentioned above can create very powerful and
                complex conditions, but sometimes we may require a condition that, while more
                complex than the basic match and not match on the resource fields, it’s still
                quite simple.  For those cases we can create filters directly on the API using
                the <literal>model</literal> field provided in Versioned Objects.</paragraph>
            <paragraph>This <literal>model</literal> field is a reference to the ORM model that allows us to
                reference ORM fields.</paragraph>
            <paragraph>We’ll use as an example changing the <literal>status</literal> field of a backup to
                “restoring” if the backup status is “available” and the volume where we are
                going to restore the backup is also in “available” state.</paragraph>
            <paragraph>Joining of tables is implicit when using a model different from the one used
                for the Versioned Object instance.</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><strong>As expected_values</strong></paragraph>
                    <paragraph>Since this is a matching case we can use <literal>expected_values</literal> argument to make
                        the condition:</paragraph>
                    <literal_block classes="code python" xml:space="preserve"><inline classes="name">values</inline> <inline classes="operator">=</inline> <inline classes="punctuation">{</inline><inline classes="literal string single">'status'</inline><inline classes="punctuation">:</inline> <inline classes="literal string single">'restoring'</inline><inline classes="punctuation">}</inline>
<inline classes="name">expected_values</inline><inline classes="operator">=</inline><inline classes="punctuation">{</inline><inline classes="literal string single">'status'</inline><inline classes="punctuation">:</inline> <inline classes="literal string single">'available'</inline><inline classes="punctuation">,</inline>
                 <inline classes="name">objects</inline><inline classes="operator">.</inline><inline classes="name">Volume</inline><inline classes="operator">.</inline><inline classes="name">model</inline><inline classes="operator">.</inline><inline classes="name">id</inline><inline classes="punctuation">:</inline> <inline classes="name">volume</inline><inline classes="operator">.</inline><inline classes="name">id</inline><inline classes="punctuation">,</inline>
                 <inline classes="name">objects</inline><inline classes="operator">.</inline><inline classes="name">Volume</inline><inline classes="operator">.</inline><inline classes="name">model</inline><inline classes="operator">.</inline><inline classes="name">status</inline><inline classes="punctuation">:</inline> <inline classes="literal string single">'available'</inline><inline classes="punctuation">}</inline></literal_block>
                </list_item>
                <list_item>
                    <paragraph><strong>As filters</strong></paragraph>
                    <paragraph>We can also use the <literal>filters</literal> argument to achieve the same results:</paragraph>
                    <literal_block classes="code python" xml:space="preserve"><inline classes="name">filters</inline> <inline classes="operator">=</inline> <inline classes="punctuation">[</inline><inline classes="name">objects</inline><inline classes="operator">.</inline><inline classes="name">Volume</inline><inline classes="operator">.</inline><inline classes="name">model</inline><inline classes="operator">.</inline><inline classes="name">id</inline> <inline classes="operator">==</inline> <inline classes="name">volume</inline><inline classes="operator">.</inline><inline classes="name">id</inline><inline classes="punctuation">,</inline>
           <inline classes="name">objects</inline><inline classes="operator">.</inline><inline classes="name">Volume</inline><inline classes="operator">.</inline><inline classes="name">model</inline><inline classes="operator">.</inline><inline classes="name">status</inline> <inline classes="operator">==</inline> <inline classes="literal string single">'available'</inline><inline classes="punctuation">]</inline></literal_block>
                </list_item>
                <list_item>
                    <paragraph><strong>Other filters</strong></paragraph>
                    <paragraph>If we are not doing a match for the condition the only available option will
                        be to use <literal>filters</literal> argument.  For example if we want to do a check on the
                        volume size against the backup size:</paragraph>
                    <literal_block classes="code python" xml:space="preserve"><inline classes="name">filters</inline> <inline classes="operator">=</inline> <inline classes="punctuation">[</inline><inline classes="name">objects</inline><inline classes="operator">.</inline><inline classes="name">Volume</inline><inline classes="operator">.</inline><inline classes="name">model</inline><inline classes="operator">.</inline><inline classes="name">id</inline> <inline classes="operator">==</inline> <inline classes="name">volume</inline><inline classes="operator">.</inline><inline classes="name">id</inline><inline classes="punctuation">,</inline>
           <inline classes="name">objects</inline><inline classes="operator">.</inline><inline classes="name">Volume</inline><inline classes="operator">.</inline><inline classes="name">model</inline><inline classes="operator">.</inline><inline classes="name">size</inline> <inline classes="operator">&gt;=</inline> <inline classes="name">backup</inline><inline classes="operator">.</inline><inline classes="name">model</inline><inline classes="operator">.</inline><inline classes="name">size</inline><inline classes="punctuation">]</inline></literal_block>
                </list_item>
            </bullet_list>
        </section>
        <section ids="using-db-fields-for-assignment" names="using\ db\ fields\ for\ assignment">
            <title>Using DB fields for assignment</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><strong>Using non modified fields</strong></paragraph>
                    <paragraph>Similar to the way we use the fields to specify conditions, we can also use
                        them to set values in the DB.</paragraph>
                    <paragraph>For example when we disable a service we want to keep existing <literal>updated_at</literal>
                        field value:</paragraph>
                    <literal_block classes="code python" xml:space="preserve"><inline classes="name">values</inline> <inline classes="operator">=</inline> <inline classes="punctuation">{</inline><inline classes="literal string single">'disabled'</inline><inline classes="punctuation">:</inline> <inline classes="name builtin pseudo">True</inline><inline classes="punctuation">,</inline>
          <inline classes="literal string single">'updated_at'</inline><inline classes="punctuation">:</inline> <inline classes="name">service</inline><inline classes="operator">.</inline><inline classes="name">model</inline><inline classes="operator">.</inline><inline classes="name">updated_at</inline><inline classes="punctuation">}</inline></literal_block>
                </list_item>
                <list_item>
                    <paragraph><strong>Using modified field</strong></paragraph>
                    <paragraph>In some cases we may need to use a DB field that we are also updating, for
                        example when we are updating the <literal>status</literal> but we also want to keep the old
                        value in the <literal>previous_status</literal> field.</paragraph>
                    <literal_block classes="code python" xml:space="preserve"><inline classes="name">values</inline> <inline classes="operator">=</inline> <inline classes="punctuation">{</inline><inline classes="literal string single">'status'</inline><inline classes="punctuation">:</inline> <inline classes="literal string single">'retyping'</inline><inline classes="punctuation">,</inline>
          <inline classes="literal string single">'previous_status'</inline><inline classes="punctuation">:</inline> <inline classes="name">volume</inline><inline classes="operator">.</inline><inline classes="name">model</inline><inline classes="operator">.</inline><inline classes="name">status</inline><inline classes="punctuation">}</inline></literal_block>
                    <paragraph>Conditional update mechanism takes into account that MySQL does not follow
                        SQL language specs and adjusts the query creation accordingly.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>Together with filters</strong></paragraph>
                    <paragraph>Using DB fields for assignment together with using them for values can give
                        us advanced functionality like for example increasing a quota value based on
                        current value and making sure we don’t exceed our quota limits.</paragraph>
                    <literal_block classes="code python" xml:space="preserve"><inline classes="name">values</inline> <inline classes="operator">=</inline> <inline classes="punctuation">{</inline><inline classes="literal string single">'in_use'</inline><inline classes="punctuation">:</inline> <inline classes="name">quota</inline><inline classes="operator">.</inline><inline classes="name">model</inline><inline classes="operator">.</inline><inline classes="name">in_use</inline> <inline classes="operator">+</inline> <inline classes="name">volume</inline><inline classes="operator">.</inline><inline classes="name">size</inline><inline classes="punctuation">}</inline>
<inline classes="name">filters</inline> <inline classes="operator">=</inline> <inline classes="punctuation">[</inline><inline classes="name">quota</inline><inline classes="operator">.</inline><inline classes="name">model</inline><inline classes="operator">.</inline><inline classes="name">in_use</inline> <inline classes="operator">&lt;=</inline> <inline classes="name">max_usage</inline> <inline classes="operator">-</inline> <inline classes="name">volume</inline><inline classes="operator">.</inline><inline classes="name">size</inline><inline classes="punctuation">]</inline></literal_block>
                </list_item>
            </bullet_list>
        </section>
        <section ids="conditional-value-setting" names="conditional\ value\ setting">
            <title>Conditional value setting</title>
            <paragraph>Under certain circumstances you may not know what value should be set in the DB
                because it depends on another field or on another condition.  For those cases
                we can use the <literal>Case</literal> class present in our persistent Versioned Objects which
                implements the SQL CASE clause.</paragraph>
            <paragraph>The idea is simple, using <literal>Case</literal> class we can say which values to set in a
                field based on conditions and also set a default value if none of the
                conditions are True.</paragraph>
            <definition_list>
                <definition_list_item>
                    <term>Conditions must be SQLAlchemy conditions, so we’ll need to use fields from the</term>
                    <definition>
                        <paragraph><literal>model</literal> attribute.</paragraph>
                    </definition>
                </definition_list_item>
            </definition_list>
            <paragraph>For example setting the status to “maintenance” during migration if current
                status is “available” and leaving it as it was if it’s not can be done using
                the following:</paragraph>
            <literal_block classes="code python" xml:space="preserve"><inline classes="name">values</inline> <inline classes="operator">=</inline> <inline classes="punctuation">{</inline>
    <inline classes="literal string single">'status'</inline><inline classes="punctuation">:</inline> <inline classes="name">volume</inline><inline classes="operator">.</inline><inline classes="name">Case</inline><inline classes="punctuation">(</inline>
        <inline classes="punctuation">[</inline>
            <inline classes="punctuation">(</inline><inline classes="name">volume</inline><inline classes="operator">.</inline><inline classes="name">model</inline><inline classes="operator">.</inline><inline classes="name">status</inline> <inline classes="operator">==</inline> <inline classes="literal string single">'available'</inline><inline classes="punctuation">,</inline> <inline classes="literal string single">'maintenance'</inline><inline classes="punctuation">)</inline>
        <inline classes="punctuation">],</inline>
        <inline classes="name">else_</inline><inline classes="operator">=</inline><inline classes="name">volume</inline><inline classes="operator">.</inline><inline classes="name">model</inline><inline classes="operator">.</inline><inline classes="name">status</inline><inline classes="punctuation">)</inline>
<inline classes="punctuation">}</inline></literal_block>
        </section>
        <section ids="reflect-changes-considerations" names="reflect_changes\ considerations">
            <title>reflect_changes considerations</title>
            <paragraph>As we’ve already mentioned <literal>conditional_update</literal> method will update Versioned
                Object instance with provided values if the row in the DB has been updated, and
                in most cases this is OK since we can set the values directly because we are
                using simple values, but there are cases where we don’t know what value we
                should set in the instance, and is in those cases where the default
                <literal>reflect_changes</literal> value of True has performance implications.</paragraph>
            <paragraph>There are 2 cases where Versioned Object <literal>conditional_update</literal> method doesn’t
                know the value it has to set on the Versioned Object instance, and they are
                when we use a field for assignment and when we are using the <literal>Case</literal> class,
                since in both cases the DB is the one deciding the value that will be set.</paragraph>
            <paragraph>In those cases <literal>conditional_update</literal> will have to retrieve the value from the
                DB using <literal>get_by_id</literal> method, and this has a performance impact and therefore
                should be avoided when possible.</paragraph>
            <paragraph>So the recommendation is to set <literal>reflect_changes</literal> to False when using
                <literal>Case</literal> class or using fields in the <literal>values</literal> argument if we don’t care
                about the stored value.</paragraph>
        </section>
        <section ids="limitations" names="limitations">
            <title>Limitations</title>
            <paragraph>We can only use functionality that works on <strong>all</strong> supported DBs, and that’s
                why we don’t allow multi table updates and will raise ProgrammingError
                exception even when the code is running against a DB engine that supports this
                functionality.</paragraph>
            <paragraph>This way we make sure that we don’t inadvertently add a multi table update that
                works on MySQL but will surely fail on PostgreSQL.</paragraph>
            <paragraph>MySQL DB engine also has some limitations that we should be aware of when
                creating our filters.</paragraph>
            <paragraph>One that is very common is when we are trying to check if there is a row that
                matches a specific criteria in the same table that we are updating.  For
                example, when deleting a Consistency Group we want to check that it is not
                being used as the source for a Consistency Group that is in the process of
                being created.</paragraph>
            <paragraph>The straightforward way of doing this is using the core exists expression and
                use an alias to differentiate general query fields and the exists subquery.
                Code would look like this:</paragraph>
            <literal_block classes="code python" xml:space="preserve"><inline classes="keyword">def</inline> <inline classes="name function">cg_creating_from_src</inline><inline classes="punctuation">(</inline><inline classes="name">cg_id</inline><inline classes="punctuation">):</inline>
   <inline classes="name">model</inline> <inline classes="operator">=</inline> <inline classes="name">aliased</inline><inline classes="punctuation">(</inline><inline classes="name">models</inline><inline classes="operator">.</inline><inline classes="name">ConsistencyGroup</inline><inline classes="punctuation">)</inline>
   <inline classes="keyword">return</inline> <inline classes="name">sql</inline><inline classes="operator">.</inline><inline classes="name">exists</inline><inline classes="punctuation">()</inline><inline classes="operator">.</inline><inline classes="name">where</inline><inline classes="punctuation">(</inline><inline classes="name">and_</inline><inline classes="punctuation">(</inline>
       <inline classes="operator">~</inline><inline classes="name">model</inline><inline classes="operator">.</inline><inline classes="name">deleted</inline><inline classes="punctuation">,</inline>
       <inline classes="name">model</inline><inline classes="operator">.</inline><inline classes="name">status</inline> <inline classes="operator">==</inline> <inline classes="literal string single">'creating'</inline><inline classes="punctuation">,</inline>
       <inline classes="name">conditions</inline><inline classes="operator">.</inline><inline classes="name">append</inline><inline classes="punctuation">(</inline><inline classes="name">model</inline><inline classes="operator">.</inline><inline classes="name">source_cgid</inline> <inline classes="operator">==</inline> <inline classes="name">cg_id</inline><inline classes="punctuation">)))</inline></literal_block>
            <paragraph>While this will work in SQLite and PostgreSQL, it will not work on MySQL and an
                error will be raised when the query is executed: “You can’t specify target
                table ‘consistencygroups’ for update in FROM clause”.</paragraph>
            <paragraph>To solve this we have 2 options:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Create a specific query for MySQL engines using an update with a left self
                        join, which is a feature only available in MySQL.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Use a trick -using a select subquery- that will work on all DBs.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Considering that it’s always better to have only 1 way of doing things and that
                SQLAlchemy doesn’t support MySQL’s non standard behavior we should generate
                these filters using the select subquery method like this:</paragraph>
            <literal_block classes="code python" xml:space="preserve"><inline classes="keyword">def</inline> <inline classes="name function">cg_creating_from_src</inline><inline classes="punctuation">(</inline><inline classes="name">cg_id</inline><inline classes="punctuation">):</inline>
   <inline classes="name">subq</inline> <inline classes="operator">=</inline> <inline classes="name">sql</inline><inline classes="operator">.</inline><inline classes="name">select</inline><inline classes="punctuation">([</inline><inline classes="name">models</inline><inline classes="operator">.</inline><inline classes="name">ConsistencyGroup</inline><inline classes="punctuation">])</inline><inline classes="operator">.</inline><inline classes="name">where</inline><inline classes="punctuation">(</inline><inline classes="name">and_</inline><inline classes="punctuation">(</inline>
       <inline classes="operator">~</inline><inline classes="name">model</inline><inline classes="operator">.</inline><inline classes="name">deleted</inline><inline classes="punctuation">,</inline>
       <inline classes="name">model</inline><inline classes="operator">.</inline><inline classes="name">status</inline> <inline classes="operator">==</inline> <inline classes="literal string single">'creating'</inline><inline classes="punctuation">))</inline><inline classes="operator">.</inline><inline classes="name">alias</inline><inline classes="punctuation">(</inline><inline classes="literal string single">'cg2'</inline><inline classes="punctuation">)</inline>

   <inline classes="keyword">return</inline> <inline classes="name">sql</inline><inline classes="operator">.</inline><inline classes="name">exists</inline><inline classes="punctuation">([</inline><inline classes="name">subq</inline><inline classes="punctuation">])</inline><inline classes="operator">.</inline><inline classes="name">where</inline><inline classes="punctuation">(</inline><inline classes="name">subq</inline><inline classes="operator">.</inline><inline classes="name">c</inline><inline classes="operator">.</inline><inline classes="name">source_cgid</inline> <inline classes="operator">==</inline> <inline classes="name">cgid</inline><inline classes="punctuation">)</inline></literal_block>
        </section>
        <section ids="considerations-for-new-orm-versioned-objects" names="considerations\ for\ new\ orm\ &amp;\ versioned\ objects">
            <title>Considerations for new ORM &amp; Versioned Objects</title>
            <paragraph>Conditional update mechanism works using generic methods for getting an object
                from the DB as well as determining the model for a specific Versioned Object
                instance for field binding.</paragraph>
            <paragraph>These generic methods rely on some naming rules for Versioned Object classes,
                ORM classes, and get methods, so when we are creating a new ORM class and
                adding the matching Versioned Object and access methods we must be careful to
                follow these rules or at least specify exceptions if we have a good reason not
                to follow these conventions.</paragraph>
            <paragraph>Rules:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Versioned Object class name must be the same as the ORM class</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Get method name must be ORM class converted to snake format with postfix
                        “_get”.  For example, for <literal>Volume</literal> ORM class expected method is
                        <literal>volume_get</literal>, and for an imaginary <literal>MyORMClass</literal> it would be
                        <literal>my_orm_class_get</literal>.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Get method must receive the <literal>context</literal> as the first argument and the <literal>id</literal>
                        as the second one, although it may accept more optional arguments.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>We should avoid diverging from these rules whenever is possible, but there are
                cases where this is not possible, for example <literal>BackupImport</literal> Versioned Object
                that really uses <literal>Backup</literal> ORM class.  For cases such as this we have a way to
                set exceptions both for the generic get method and the model for a Versioned
                Object.</paragraph>
            <paragraph>To add exceptions for the get method we have to add a new entry to
                <literal>GET_EXCEPTIONS</literal> dictionary mapping in
                <literal>cinder.db.sqlalchemy.api._get_get_method</literal>.</paragraph>
            <paragraph>And for determining the model for the Versioned Object we have to add a new
                entry to <literal>VO_TO_MODEL_EXCEPTIONS</literal> dictionary mapping in
                <literal>cinder.db.sqlalchemy.api.get_model_for_versioned_object</literal>.</paragraph>
        </section>
    </section>
</document>
