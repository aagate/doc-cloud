<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/i18n.rst">
    <section ids="internationalization" names="internationalization">
        <title>Internationalization</title>
        <paragraph>For internationalization guidelines, see the
            <reference name="oslo.i18n documentation" refuri="http://docs.openstack.org/developer/oslo.i18n/guidelines.html">oslo.i18n documentation</reference><target ids="oslo-i18n-documentation" names="oslo.i18n\ documentation" refuri="http://docs.openstack.org/developer/oslo.i18n/guidelines.html"></target>.
            The information below can be used to get started.</paragraph>
        <paragraph>Cinder uses <reference name="gettext" refuri="http://docs.python.org/library/gettext.html">gettext</reference><target ids="gettext" names="gettext" refuri="http://docs.python.org/library/gettext.html"></target> so that
            user-facing strings such as log messages appear in the appropriate
            language in different locales.</paragraph>
        <paragraph>To use gettext, make sure that the strings passed to the logger are wrapped
            in a <literal>_Lx()</literal> function call. For example:</paragraph>
        <literal_block xml:space="preserve">LOG.info(_LI("block_device_mapping %s"), block_device_mapping)</literal_block>
        <paragraph>There are a few different _() translation markers, depending on the logging
            level of the text:</paragraph>
        <bullet_list bullet="-">
            <list_item>
                <paragraph>_LI() - Used for INFO level log messages</paragraph>
            </list_item>
            <list_item>
                <paragraph>_LW() - Used for WARNING level log messages</paragraph>
            </list_item>
            <list_item>
                <paragraph>_LE() - Used for ERROR level log messages (this includes LOG.exception)</paragraph>
            </list_item>
            <list_item>
                <definition_list>
                    <definition_list_item>
                        <term>_() - Used for any exception messages, including strings used for both</term>
                        <definition>
                            <paragraph>logging and exceptions.</paragraph>
                        </definition>
                    </definition_list_item>
                </definition_list>
            </list_item>
        </bullet_list>
        <note>
            <paragraph>Starting with the Pike series, OpenStack no longer supports log
                translation markers like <literal>_Lx()</literal>, only <literal>_()</literal> should still be used for
                exceptions that could be user facing. It is not necessary to add <literal>_Lx()</literal>
                translation instructions to new code, and the instructions can be removed
                from old code. Refer to the email thread <reference name="understanding log domain change" refuri="http://lists.openstack.org/pipermail/openstack-dev/2017-March/thread.html#113365">understanding log domain change</reference><target ids="understanding-log-domain-change" names="understanding\ log\ domain\ change" refuri="http://lists.openstack.org/pipermail/openstack-dev/2017-March/thread.html#113365"></target>
                on the openstack-dev mailing list for more details.</paragraph>
        </note>
        <paragraph>Do not use <literal>locals()</literal> for formatting messages because:</paragraph>
        <enumerated_list enumtype="arabic" prefix="" suffix=".">
            <list_item>
                <paragraph>It is not as clear as using explicit dicts.</paragraph>
            </list_item>
            <list_item>
                <paragraph>It could produce hidden errors during refactoring.</paragraph>
            </list_item>
            <list_item>
                <paragraph>Changing the name of a variable causes a change in the message.</paragraph>
            </list_item>
            <list_item>
                <paragraph>It creates a lot of otherwise unused variables.</paragraph>
            </list_item>
        </enumerated_list>
        <paragraph>If you do not follow the project conventions, your code may cause pep8 hacking
            check failures.</paragraph>
        <paragraph>For translation to work properly, the top level scripts for Cinder need
            to first do the following before any Cinder modules are imported:</paragraph>
        <literal_block xml:space="preserve">from cinder import i18n
i18n.enable_lazy()</literal_block>
        <paragraph>Note: this should _only_ be called from top level scripts - no library code
            or common modules should call this method.</paragraph>
        <paragraph>Any files that use the _() for translation then must have the following
            lines:</paragraph>
        <literal_block xml:space="preserve">from cinder.i18n import _</literal_block>
        <paragraph>If the above code is missing, it may result in an error that looks
            like:</paragraph>
        <literal_block xml:space="preserve">NameError: name '_' is not defined</literal_block>
    </section>
</document>
