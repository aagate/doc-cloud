<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/development.environment.rst">
    <comment xml:space="preserve">Copyright 2010-2011 United States Government as represented by the
Administrator of the National Aeronautics and Space Administration.
All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.</comment>
    <section ids="setting-up-a-development-environment" names="setting\ up\ a\ development\ environment">
        <title>Setting Up a Development Environment</title>
        <paragraph>This page describes how to setup a working Python development
            environment that can be used in developing cinder on Ubuntu, Fedora or
            Mac OS X. These instructions assume you’re already familiar with
            git. Refer to <reference name="GettingTheCode" refuri="http://wiki.openstack.org/GettingTheCode">GettingTheCode</reference> for additional information.</paragraph>
        <target ids="gettingthecode" names="gettingthecode" refuri="http://wiki.openstack.org/GettingTheCode"></target>
        <paragraph>Following these instructions will allow you to run the cinder unit tests.
            Running cinder is currently only supported on Linux, although you can run the
            unit tests on Mac OS X.</paragraph>
        <section ids="virtual-environments" names="virtual\ environments">
            <title>Virtual environments</title>
            <paragraph>Cinder development uses <reference name="virtualenv" refuri="http://pypi.python.org/pypi/virtualenv">virtualenv</reference> to track and manage Python
                dependencies while in development and testing. This allows you to
                install all of the Python package dependencies in a virtual
                environment or “virtualenv” (a special subdirectory of your cinder
                directory), instead of installing the packages at the system level.</paragraph>
            <note>
                <paragraph>Virtualenv is useful for running the unit tests, but is not
                    typically used for full integration testing or production usage.</paragraph>
            </note>
        </section>
        <section ids="linux-systems" names="linux\ systems">
            <title>Linux Systems</title>
            <note>
                <paragraph>Feel free to add notes and change according to your experiences or operating system.</paragraph>
            </note>
            <paragraph>Install the prerequisite packages.</paragraph>
            <paragraph>On Ubuntu (tested on 12.04-64 and 14.04-64):</paragraph>
            <literal_block xml:space="preserve">sudo apt-get install python-dev libssl-dev python-pip git-core libmysqlclient-dev libpq-dev libffi-dev libxslt-dev</literal_block>
            <paragraph>On Fedora-based distributions e.g., Fedora/RHEL/CentOS/Scientific Linux (tested on CentOS 6.5):</paragraph>
            <literal_block xml:space="preserve">sudo yum install python-virtualenv openssl-devel python-pip git gcc libffi-devel libxslt-devel mysql-devel postgresql-devel</literal_block>
            <paragraph>On openSUSE-based distributions (SLES 12, openSUSE 13.1, Factory or Tumbleweed):</paragraph>
            <literal_block xml:space="preserve">sudo zypper install gcc git libmysqlclient-devel libopenssl-devel postgresql-devel python-devel python-pip</literal_block>
        </section>
        <section ids="mac-os-x-systems" names="mac\ os\ x\ systems">
            <title>Mac OS X Systems</title>
            <paragraph>Install virtualenv:</paragraph>
            <literal_block xml:space="preserve">sudo easy_install virtualenv</literal_block>
            <paragraph>Check the version of OpenSSL you have installed:</paragraph>
            <literal_block xml:space="preserve">openssl version</literal_block>
            <paragraph>If you have installed OpenSSL 1.0.0a, which can happen when installing a
                MacPorts package for OpenSSL, you will see an error when running
                <literal>cinder.tests.auth_unittest.AuthTestCase.test_209_can_generate_x509</literal>.</paragraph>
            <paragraph>The stock version of OpenSSL that ships with Mac OS X 10.6 (OpenSSL 0.9.8l)
                or Mac OS X 10.7 (OpenSSL 0.9.8r) works fine with cinder.</paragraph>
        </section>
        <section ids="getting-the-code" names="getting\ the\ code">
            <title>Getting the code</title>
            <paragraph>Grab the code:</paragraph>
            <literal_block xml:space="preserve">git clone https://github.com/openstack/cinder.git
cd cinder</literal_block>
        </section>
        <section ids="running-unit-tests" names="running\ unit\ tests">
            <title>Running unit tests</title>
            <paragraph>The preferred way to run the unit tests is using <literal>tox</literal>. It executes tests in
                isolated environment, by creating separate virtualenv and installing
                dependencies from the <literal>requirements.txt</literal> and <literal>test-requirements.txt</literal> files,
                so the only package you install is <literal>tox</literal> itself:</paragraph>
            <literal_block xml:space="preserve">sudo pip install tox</literal_block>
            <paragraph>Run the unit tests by doing:</paragraph>
            <literal_block xml:space="preserve">tox -e py35
tox -e py27</literal_block>
            <paragraph>See <reference internal="True" refuri="testing"><inline classes="doc">Testing</inline></reference> for more details.</paragraph>
            <target refid="virtualenv"></target>
        </section>
        <section ids="manually-installing-and-using-the-virtualenv virtualenv" names="manually\ installing\ and\ using\ the\ virtualenv virtualenv">
            <title>Manually installing and using the virtualenv</title>
            <paragraph>You can also manually install the virtual environment:</paragraph>
            <literal_block xml:space="preserve">tox -e py27 --notest</literal_block>
            <paragraph>or:</paragraph>
            <literal_block xml:space="preserve">tox -e py35 --notest</literal_block>
            <paragraph>This will install all of the Python packages listed in the
                <literal>requirements.txt</literal> file into your virtualenv.</paragraph>
            <paragraph>To activate the Cinder virtualenv you can run:</paragraph>
            <literal_block xml:space="preserve">$ source .tox/py27/bin/activate</literal_block>
            <paragraph>or:</paragraph>
            <literal_block xml:space="preserve">$ source .tox/py35/bin/activate</literal_block>
            <paragraph>To exit your virtualenv, just type:</paragraph>
            <literal_block xml:space="preserve">$ deactivate</literal_block>
            <paragraph>Or, if you prefer, you can run commands in the virtualenv on a case by case
                basis by running:</paragraph>
            <literal_block xml:space="preserve">$ tox -e venv -- &lt;your command&gt;</literal_block>
        </section>
        <section ids="contributing-your-work" names="contributing\ your\ work">
            <title>Contributing Your Work</title>
            <paragraph>Once your work is complete you may wish to contribute it to the project.
                Cinder uses the Gerrit code review system. For information on how to submit
                your branch to Gerrit, see <reference name="GerritWorkflow" refuri="http://docs.openstack.org/infra/manual/developers.html#development-workflow">GerritWorkflow</reference>.</paragraph>
            <target ids="gerritworkflow" names="gerritworkflow" refuri="http://docs.openstack.org/infra/manual/developers.html#development-workflow"></target>
        </section>
    </section>
</document>
