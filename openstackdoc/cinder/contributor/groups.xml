<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/groups.rst">
    <section ids="generic-volume-groups" names="generic\ volume\ groups">
        <title>Generic Volume Groups</title>
        <section ids="introduction-to-generic-volume-groups" names="introduction\ to\ generic\ volume\ groups">
            <title>Introduction to generic volume groups</title>
            <paragraph>Generic volume group support was added in cinder in the Newton release.
                There is support for creating group types and group specs, creating
                groups of volumes, and creating snapshots of groups. Detailed information
                on how to create a group type, a group, and a group snapshot can be found
                in <reference name="block storage admin guide" refuri="http://docs.openstack.org/admin-guide/blockstorage-groups.html">block storage admin guide</reference><target ids="block-storage-admin-guide" names="block\ storage\ admin\ guide" refuri="http://docs.openstack.org/admin-guide/blockstorage-groups.html"></target>.</paragraph>
            <paragraph>How is generic volume groups different from consistency groups in cinder?
                The consistency group feature was introduced in cinder in Juno and are
                supported by a few drivers. Currently consistency groups in cinder only
                support consistent group snapshot. It cannot be extended easily to serve
                other purposes. A tenant may want to put volumes used in the same application
                together in a group so that it is easier to manage them together, and this
                group of volumes may or may not support consistent group snapshot. Generic
                volume group is introduced to solve this problem. By decoupling the tight
                relationship between the group construct and the consistency concept,
                generic volume groups can be extended to support other features in the future.</paragraph>
        </section>
        <section ids="action-items-for-drivers-supporting-consistency-groups" names="action\ items\ for\ drivers\ supporting\ consistency\ groups">
            <title>Action items for drivers supporting consistency groups</title>
            <paragraph>Drivers currently supporting consistency groups are in the following:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Juno: EMC VNX</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Kilo: EMC VMAX, IBM (GPFS, Storwize, SVC, and XIV), ProphetStor, Pure</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Liberty: Dell Storage Center, EMC XtremIO, HPE 3Par and LeftHand</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Mitaka: EMC ScaleIO, NetApp Data ONTAP and E-Series, SolidFire</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Newton: CoprHD, FalconStor, Huawei</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Since the addition of generic volume groups, there is plan to migrate
                consistency groups to generic volume groups. A migration command and
                changes in CG APIs to support migrating CGs to groups are developed and
                merged in Ocata [1][2]. In order to support rolling upgrade, it will take
                a couple of releases before consistency groups can be deprecated.</paragraph>
            <paragraph>For drivers planning to add consistency groups support, the new generic
                volume group driver interfaces should be implemented instead of the CG
                interfaces.</paragraph>
            <paragraph>For drivers already supporting consistency groups, the new generic
                volume group driver interfaces should be implemented to include the
                CG support.</paragraph>
            <paragraph>For drivers wanting generic volume groups but not consistent group
                snapshot support, no code changes are necessary. By default, every
                cinder volume driver already supports generic volume groups since
                Newton because the support was added to the common code. Testing
                should be done for every driver to make sure this feature works properly.</paragraph>
            <paragraph>Drivers already supporting CG are expected to add CG support to
                generic volume groups by Pike-1. This is a deadline discussed and
                agreed upon at the Ocata summit in Barcelona.</paragraph>
        </section>
        <section ids="group-type-and-group-specs-volume-types-and-extra-specs" names="group\ type\ and\ group\ specs\ /\ volume\ types\ and\ extra\ specs">
            <title>Group Type and Group Specs / Volume Types and Extra Specs</title>
            <paragraph>The driver interfaces for consistency groups and generic volume groups
                are very similar. One new concept introduced for generic volume groups
                is the group type. Group type is used to categorize a group just like a
                volume type is used to describe a volume. Similar to extra specs for
                a volume type, group specs are also introduced to be associated with a
                group type. Group types allow a user to create different types of groups.</paragraph>
            <paragraph>A group can support multiple volume types and volume types are required
                as input parameters when creating a group. In addition to volume types,
                a group type is also required when creating a group.</paragraph>
            <paragraph>Group types and volume types are created by the Cloud Administrator.
                A tenant uses the group types and volume types to create groups and
                volumes.</paragraph>
            <paragraph>A driver can support both consistent group snapshot and a group of
                snapshots that do not maintain the write order consistency by using
                different group types. In other words, a group supporting consistent
                group snapshot is a special type of generic volume group.</paragraph>
            <paragraph>For a group to support consistent group snapshot, the group specs in the
                corresponding group type should have the following entry:</paragraph>
            <literal_block xml:space="preserve">{'consistent_group_snapshot_enabled': &lt;is&gt; True}</literal_block>
            <paragraph>Similarly, for a volume to be in a group that supports consistent group
                snapshots, the volume type extra specs would also have the following entry:</paragraph>
            <literal_block xml:space="preserve">{'consistent_group_snapshot_enabled': &lt;is&gt; True}</literal_block>
            <paragraph>By requiring the above entry to be in both group specs and volume type
                extra specs, we can make sure the scheduler will choose a backend that
                supports the group type and volume types for a group. It is up to the driver
                to parse the group type info when creating a group, parse the volume type
                info when creating a volume, and set things up as requested.</paragraph>
        </section>
        <section ids="capabilities-reporting" names="capabilities\ reporting">
            <title>Capabilities reporting</title>
            <paragraph>The following entry is expected to be added to the stats/capabilities update
                for drivers supporting consistent group snapshot:</paragraph>
            <literal_block xml:space="preserve">stats["consistent_group_snapshot_enabled"] = True</literal_block>
        </section>
        <section ids="driver-methods" names="driver\ methods">
            <title>Driver methods</title>
            <paragraph>The following driver methods should to be implemented for the driver to
                support consistent group snapshot:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>create_group(context, group)</paragraph>
                </list_item>
                <list_item>
                    <paragraph>delete_group(context, group, volumes)</paragraph>
                </list_item>
                <list_item>
                    <paragraph>update_group(context, group, add_volumes=None, remove_volumes=None)</paragraph>
                </list_item>
                <list_item>
                    <definition_list>
                        <definition_list_item>
                            <term>create_group_from_src(context, group, volumes,</term>
                            <definition>
                                <paragraph>group_snapshot=None, snapshots=None,
                                    source_group=None, source_vols=None)</paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                </list_item>
                <list_item>
                    <paragraph>create_group_snapshot(context, group_snapshot, snapshots)</paragraph>
                </list_item>
                <list_item>
                    <paragraph>delete_group_snapshot(context, group_snapshot, snapshots)</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Here is an example that add CG capability to generic volume groups [3].
                Details of driver interfaces are as follows.</paragraph>
            <paragraph><strong>create_group</strong></paragraph>
            <paragraph>This method creates a group. It has context and group object as input
                parameters. A group object has volume_types and group_type_id that can be used
                by the driver.</paragraph>
            <paragraph>create_group returns model_update. model_update will be in this format:
                {‘status’: xxx, ……}.</paragraph>
            <paragraph>If the status in model_update is ‘error’, the manager will throw
                an exception and it will be caught in the try-except block in the
                manager. If the driver throws an exception, the manager will also
                catch it in the try-except block. The group status in the db will
                be changed to ‘error’.</paragraph>
            <paragraph>For a successful operation, the driver can either build the
                model_update and return it or return None. The group status will
                be set to ‘available’.</paragraph>
            <paragraph><strong>delete_group</strong></paragraph>
            <paragraph>This method deletes a group. It has context, group object, and a list
                of volume objects as input parameters. It returns model_update and
                volumes_model_update.</paragraph>
            <paragraph>volumes_model_update is a list of volume dictionaries. It has to be built
                by the driver. An entry will be in this format: {‘id’: xxx, ‘status’: xxx,
                ……}. model_update will be in this format: {‘status’: xxx, ……}.
                The driver should populate volumes_model_update and model_update
                and return them.</paragraph>
            <paragraph>The manager will check volumes_model_update and update db accordingly
                for each volume. If the driver successfully deleted some volumes
                but failed to delete others, it should set statuses of the volumes
                accordingly so that the manager can update db correctly.</paragraph>
            <paragraph>If the status in any entry of volumes_model_update is ‘error_deleting’
                or ‘error’, the status in model_update will be set to the same if it
                is not already ‘error_deleting’ or ‘error’.</paragraph>
            <paragraph>If the status in model_update is ‘error_deleting’ or ‘error’, the
                manager will raise an exception and the status of the group will be
                set to ‘error’ in the db. If volumes_model_update is not returned by
                the driver, the manager will set the status of every volume in the
                group to ‘error’ in the except block.</paragraph>
            <paragraph>If the driver raises an exception during the operation, it will be
                caught by the try-except block in the manager. The statuses of the
                group and all volumes in it will be set to ‘error’.</paragraph>
            <paragraph>For a successful operation, the driver can either build the
                model_update and volumes_model_update and return them or
                return None, None. The statuses of the group and all volumes
                will be set to ‘deleted’ after the manager deletes them from db.</paragraph>
            <paragraph><strong>update_group</strong></paragraph>
            <paragraph>This method adds existing volumes to a group or removes volumes
                from a group. It has context, group object, a list of volume objects
                to be added to the group, and a list of a volume objects to be
                removed from the group. It returns model_update, add_volumes_update,
                and remove_volumes_update.</paragraph>
            <paragraph>model_update is a dictionary that the driver wants the manager
                to update upon a successful return. If None is returned, the manager
                will set the status to ‘available’.</paragraph>
            <paragraph>add_volumes_update and remove_volumes_update are lists of dictionaries
                that the driver wants the manager to update upon a successful return.
                Note that each entry requires a {‘id’: xxx} so that the correct
                volume entry can be updated. If None is returned, the volume will
                remain its original status.</paragraph>
            <paragraph>If the driver throws an exception, the status of the group as well as
                those of the volumes to be added/removed will be set to ‘error’.</paragraph>
            <paragraph><strong>create_group_from_src</strong></paragraph>
            <paragraph>This method creates a group from source. The source can be a
                group_snapshot or a source group. create_group_from_src has context,
                group object, a list of volume objects, group_snapshot object, a list
                of snapshot objects, source group object, and a list of source volume
                objects as input parameters. It returns model_update and
                volumes_model_update.</paragraph>
            <paragraph>volumes_model_update is a list of dictionaries. It has to be built by
                the driver. An entry will be in this format: {‘id’: xxx, ‘status’: xxx,
                ……}. model_update will be in this format: {‘status’: xxx, ……}.</paragraph>
            <paragraph>To be consistent with other volume operations, the manager will
                assume the operation is successful if no exception is thrown by
                the driver. For a successful operation, the driver can either build
                the model_update and volumes_model_update and return them or
                return None, None.</paragraph>
            <paragraph><strong>create_group_snapshot</strong></paragraph>
            <paragraph>This method creates a group_snapshot. It has context, group_snapshot
                object, and a list of snapshot objects as input parameters. It returns
                model_update and snapshots_model_update.</paragraph>
            <paragraph>snapshots_model_update is a list of dictionaries. It has to be built by the
                driver. An entry will be in this format: {‘id’: xxx, ‘status’: xxx, ……}.
                model_update will be in this format: {‘status’: xxx, ……}. The driver
                should populate snapshots_model_update and model_update and return them.</paragraph>
            <paragraph>The manager will check snapshots_model_update and update db accordingly
                for each snapshot. If the driver successfully created some snapshots
                but failed to create others, it should set statuses of the snapshots
                accordingly so that the manager can update db correctly.</paragraph>
            <paragraph>If the status in any entry of snapshots_model_update is ‘error’, the
                status in model_update will be set to the same if it is not already
                ‘error’.</paragraph>
            <paragraph>If the status in model_update is ‘error’, the manager will raise an
                exception and the status of group_snapshot will be set to ‘error’ in
                the db. If snapshots_model_update is not returned by the driver, the
                manager will set the status of every snapshot to ‘error’ in the except
                block.</paragraph>
            <paragraph>If the driver raises an exception during the operation, it will be
                caught by the try-except block in the manager and the statuses of
                group_snapshot and all snapshots will be set to ‘error’.</paragraph>
            <paragraph>For a successful operation, the driver can either build the
                model_update and snapshots_model_update and return them or
                return None, None. The statuses of group_snapshot and all snapshots
                will be set to ‘available’ at the end of the manager function.</paragraph>
            <paragraph><strong>delete_group_snapshot</strong></paragraph>
            <paragraph>This method deletes a group_snapshot. It has context, group_snapshot
                object, and a list of snapshot objects. It returns model_update and
                snapshots_model_update.</paragraph>
            <paragraph>snapshots_model_update is a list of dictionaries. It has to be built by
                the driver. An entry will be in this format: {‘id’: xxx, ‘status’: xxx,
                ……}. model_update will be in this format: {‘status’: xxx, ……}.
                The driver should populate snapshots_model_update and model_update
                and return them.</paragraph>
            <paragraph>The manager will check snapshots_model_update and update db accordingly
                for each snapshot. If the driver successfully deleted some snapshots
                but failed to delete others, it should set statuses of the snapshots
                accordingly so that the manager can update db correctly.</paragraph>
            <paragraph>If the status in any entry of snapshots_model_update is
                ‘error_deleting’ or ‘error’, the status in model_update will be set to
                the same if it is not already ‘error_deleting’ or ‘error’.</paragraph>
            <paragraph>If the status in model_update is ‘error_deleting’ or ‘error’, the
                manager will raise an exception and the status of group_snapshot will
                be set to ‘error’ in the db. If snapshots_model_update is not returned
                by the driver, the manager will set the status of every snapshot to
                ‘error’ in the except block.</paragraph>
            <paragraph>If the driver raises an exception during the operation, it will be
                caught by the try-except block in the manager and the statuses of
                group_snapshot and all snapshots will be set to ‘error’.</paragraph>
            <paragraph>For a successful operation, the driver can either build the
                model_update and snapshots_model_update and return them or
                return None, None. The statuses of group_snapshot and all snapshots
                will be set to ‘deleted’ after the manager deletes them from db.</paragraph>
        </section>
        <section ids="migrate-cgs-to-generic-volume-groups" names="migrate\ cgs\ to\ generic\ volume\ groups">
            <title>Migrate CGs to Generic Volume Groups</title>
            <paragraph>This section only affects drivers already supporting CGs by the
                Newton release. Drivers planning to add CG support after Newton are
                not affected.</paragraph>
            <paragraph>A group type named default_cgsnapshot_type will be created by the
                migration script. The following command needs to be run to migrate
                migrate data and copy data from consistency groups to groups and
                from cgsnapshots to group_snapshots. Migrated consistency groups
                and cgsnapshots will be removed from the database:</paragraph>
            <literal_block xml:space="preserve">cinder-manage db online_data_migrations
--max_count &lt;max&gt;
--ignore_state</literal_block>
            <paragraph>max_count is optional. Default is 50.
                ignore_state is optional. Default is False.</paragraph>
            <paragraph>After running the above migration command to migrate CGs to generic
                volume groups, CG and group APIs work as follows:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Create CG only creates in the groups table.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Modify CG modifies in the CG table if the CG is in the
                        CG table, otherwise it modifies in the groups table.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Delete CG deletes from the CG or the groups table
                        depending on where the CG is.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>List CG checks both CG and groups tables.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>List CG Snapshots checks both the CG and the groups
                        tables.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Show CG checks both tables.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Show CG Snapshot checks both tables.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Create CG Snapshot creates either in the CG or the groups
                        table depending on where the CG is.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Create CG from Source creates in either the CG or the
                        groups table depending on the source.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Create Volume adds the volume either to the CG or the
                        group.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>default_cgsnapshot_type is reserved for migrating CGs.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Group APIs will only write/read in/from the groups table.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Group APIs will not work on groups with default_cgsnapshot_type.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Groups with default_cgsnapshot_type can only be operated by
                        CG APIs.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>After CG tables are removed, we will allow default_cgsnapshot_type
                        to be used by group APIs.</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="references" names="references">
            <title>References</title>
            <definition_list>
                <definition_list_item>
                    <term>[1] Migration script</term>
                    <definition>
                        <paragraph><reference refuri="https://review.openstack.org/#/c/350350/">https://review.openstack.org/#/c/350350/</reference></paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term>[2] CG APIs changes for migrating CGs</term>
                    <definition>
                        <paragraph><reference refuri="https://review.openstack.org/#/c/401839/">https://review.openstack.org/#/c/401839/</reference></paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term>[3] Example adding CG capability to generic volume groups</term>
                    <definition>
                        <paragraph><reference refuri="https://review.openstack.org/#/c/413927/">https://review.openstack.org/#/c/413927/</reference></paragraph>
                    </definition>
                </definition_list_item>
            </definition_list>
        </section>
    </section>
</document>
