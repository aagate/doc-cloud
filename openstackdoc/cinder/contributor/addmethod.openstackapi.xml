<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/contributor/addmethod.openstackapi.rst">
    <comment xml:space="preserve">Copyright 2010-2011 OpenStack Foundation
All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.</comment>
    <section ids="adding-a-method-to-the-openstack-api" names="adding\ a\ method\ to\ the\ openstack\ api">
        <title>Adding a Method to the OpenStack API</title>
        <paragraph>The interface is a mostly RESTful API. REST stands for Representational State Transfer and provides an architecture “style” for distributed systems using HTTP for transport. Figure out a way to express your request and response in terms of resources that are being created, modified, read, or destroyed.</paragraph>
        <section ids="routing" names="routing">
            <title>Routing</title>
            <paragraph>To map URLs to controllers+actions, OpenStack uses the Routes package, a clone of Rails routes for Python implementations. See <reference refuri="http://routes.groovie.org/">http://routes.groovie.org/</reference> for more information.</paragraph>
            <paragraph>URLs are mapped to “action” methods on “controller” classes in <literal>cinder/api/openstack/__init__/ApiRouter.__init__</literal> .</paragraph>
            <definition_list>
                <definition_list_item>
                    <term>See <reference refuri="http://routes.groovie.org/manual.html">http://routes.groovie.org/manual.html</reference> for all syntax, but you’ll probably just need these two:</term>
                    <definition>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>mapper.connect() lets you map a single URL to a single action on a controller.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>mapper.resource() connects many standard URLs to actions on a controller.</paragraph>
                            </list_item>
                        </bullet_list>
                    </definition>
                </definition_list_item>
            </definition_list>
        </section>
        <section ids="controllers-and-actions" names="controllers\ and\ actions">
            <title>Controllers and actions</title>
            <paragraph>Controllers live in <literal>cinder/api/openstack</literal>, and inherit from cinder.wsgi.Controller.</paragraph>
            <paragraph>See <literal>cinder/api/v2/volumes.py</literal> for an example.</paragraph>
            <paragraph>Action methods take parameters that are sucked out of the URL by mapper.connect() or .resource().  The first two parameters are self and the WebOb request, from which you can get the req.environ, req.body, req.headers, etc.</paragraph>
        </section>
        <section ids="serialization" names="serialization">
            <title>Serialization</title>
            <paragraph>Actions return a dictionary, and wsgi.Controller serializes that to JSON or XML based on the request’s content-type.</paragraph>
        </section>
        <section ids="errors" names="errors">
            <title>Errors</title>
            <paragraph>There will be occasions when you will want to return a REST error response to
                the caller and there are multiple valid ways to do this:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>If you are at the controller level you can use a <literal>faults.Fault</literal> instance to
                        indicate the error.  You can either return the <literal>Fault</literal> instance as the
                        result of the action, or raise it, depending on what’s more convenient:
                        <literal>raise faults.Fault(webob.exc.HTTPBadRequest(explanation=msg))</literal>.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>If you are raising an exception our WSGI middleware exception handler is
                        smart enough to recognize webob exceptions as well, so you don’t really need
                        to wrap the exceptions in a <literal>Fault</literal> class and you can just let the
                        middleware add it for you:
                        <literal>raise webob.exc.HTTPBadRequest(explanation=msg)</literal>.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>While most errors require an explicit webob exception there are some Cinder
                        exceptions (<literal>NotFound</literal> and <literal>Invalid</literal>) that are so common that they are
                        directly handled by the middleware and don’t need us to convert them, we can
                        just raise them at any point in the API service and they will return the
                        appropriate REST error to the caller.  So any <literal>NotFound</literal> exception, or
                        child class, will return a 404 error, and any <literal>Invalid</literal> exception, or
                        child class, will return a 400 error.</paragraph>
                </list_item>
            </bullet_list>
        </section>
    </section>
</document>
