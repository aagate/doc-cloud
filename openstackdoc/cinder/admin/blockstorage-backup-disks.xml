<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/admin/blockstorage-backup-disks.rst">
    <section ids="back-up-block-storage-service-disks" names="back\ up\ block\ storage\ service\ disks">
        <title>Back up Block Storage service disks</title>
        <paragraph>While you can use the LVM snapshot to create snapshots, you can also use
            it to back up your volumes. By using LVM snapshot, you reduce the size
            of the backup; only existing data is backed up instead of the entire
            volume.</paragraph>
        <paragraph>To back up a volume, you must create a snapshot of it. An LVM snapshot
            is the exact copy of a logical volume, which contains data in a frozen
            state. This prevents data corruption because data cannot be manipulated
            during the volume creation process. Remember that the volumes created
            through an <literal_strong classes="command">openstack volume create</literal_strong> command exist in an LVM
            logical volume.</paragraph>
        <paragraph>You must also make sure that the operating system is not using the
            volume and that all data has been flushed on the guest file systems.
            This usually means that those file systems have to be unmounted during
            the snapshot creation. They can be mounted again as soon as the logical
            volume snapshot has been created.</paragraph>
        <paragraph>Before you create the snapshot you must have enough space to save it.
            As a precaution, you should have at least twice as much space as the
            potential snapshot size. If insufficient space is available, the snapshot
            might become corrupted.</paragraph>
        <paragraph>For this example assume that a 100 GB volume named <literal>volume-00000001</literal>
            was created for an instance while only 4 GB are used. This example uses
            these commands to back up only those 4 GB:</paragraph>
        <bullet_list bullet="*">
            <list_item>
                <paragraph><literal_strong classes="command">lvm2</literal_strong> command. Directly manipulates the volumes.</paragraph>
            </list_item>
            <list_item>
                <paragraph><literal_strong classes="command">kpartx</literal_strong> command. Discovers the partition table created inside the
                    instance.</paragraph>
            </list_item>
            <list_item>
                <paragraph><literal_strong classes="command">tar</literal_strong> command. Creates a minimum-sized backup.</paragraph>
            </list_item>
            <list_item>
                <paragraph><literal_strong classes="command">sha1sum</literal_strong> command. Calculates the backup checksum to check its
                    consistency.</paragraph>
            </list_item>
        </bullet_list>
        <paragraph>You can apply this process to volumes of any size.</paragraph>
        <paragraph><strong>To back up Block Storage service disks</strong></paragraph>
        <enumerated_list enumtype="arabic" prefix="" suffix=".">
            <list_item>
                <paragraph>Create a snapshot of a used volume</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Use this command to list all volumes</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve"># lvdisplay</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Create the snapshot; you can do this while the volume is attached
                            to an instance:</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve"># lvcreate --size 10G --snapshot --name volume-00000001-snapshot \
  /dev/cinder-volumes/volume-00000001</literal_block>
                        <paragraph>Use the <literal>--snapshot</literal> configuration option to tell LVM that you want a
                            snapshot of an already existing volume. The command includes the size
                            of the space reserved for the snapshot volume, the name of the snapshot,
                            and the path of an already existing volume. Generally, this path
                            is <literal>/dev/cinder-volumes/VOLUME_NAME</literal>.</paragraph>
                        <paragraph>The size does not have to be the same as the volume of the snapshot.
                            The <literal>--size</literal> parameter defines the space that LVM reserves
                            for the snapshot volume. As a precaution, the size should be the same
                            as that of the original volume, even if the whole space is not
                            currently used by the snapshot.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Run the <literal_strong classes="command">lvdisplay</literal_strong> command again to verify the snapshot:</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">--- Logical volume ---
LV Name                /dev/cinder-volumes/volume-00000001
VG Name                cinder-volumes
LV UUID                gI8hta-p21U-IW2q-hRN1-nTzN-UC2G-dKbdKr
LV Write Access        read/write
LV snapshot status     source of
                       /dev/cinder-volumes/volume-00000026-snap [active]
LV Status              available
# open                 1
LV Size                15,00 GiB
Current LE             3840
Segments               1
Allocation             inherit
Read ahead sectors     auto
- currently set to     256
Block device           251:13

--- Logical volume ---
LV Name                /dev/cinder-volumes/volume-00000001-snap
VG Name                cinder-volumes
LV UUID                HlW3Ep-g5I8-KGQb-IRvi-IRYU-lIKe-wE9zYr
LV Write Access        read/write
LV snapshot status     active destination for /dev/cinder-volumes/volume-00000026
LV Status              available
# open                 0
LV Size                15,00 GiB
Current LE             3840
COW-table size         10,00 GiB
COW-table LE           2560
Allocated to snapshot  0,00%
Snapshot chunk size    4,00 KiB
Segments               1
Allocation             inherit
Read ahead sectors     auto
- currently set to     256
Block device           251:14</literal_block>
                    </list_item>
                </bullet_list>
            </list_item>
            <list_item>
                <paragraph>Partition table discovery</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>To exploit the snapshot with the <literal_strong classes="command">tar</literal_strong> command, mount
                            your partition on the Block Storage service server.</paragraph>
                        <paragraph>The <literal_strong classes="command">kpartx</literal_strong> utility discovers and maps table partitions.
                            You can use it to view partitions that are created inside the
                            instance. Without using the partitions created inside instances,
                            you cannot see its content and create efficient backups.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve"># kpartx -av /dev/cinder-volumes/volume-00000001-snapshot</literal_block>
                        <note>
                            <paragraph>On a Debian-based distribution, you can use the
                                <literal_strong classes="command">apt-get install kpartx</literal_strong> command to install
                                <literal_strong classes="command">kpartx</literal_strong>.</paragraph>
                        </note>
                        <paragraph>If the tools successfully find and map the partition table,
                            no errors are returned.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>To check the partition table map, run this command:</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ ls /dev/mapper/nova*</literal_block>
                        <paragraph>You can see the <literal>cinder--volumes-volume--00000001--snapshot1</literal>
                            partition.</paragraph>
                        <paragraph>If you created more than one partition on that volume, you see
                            several partitions; for example:
                            <literal>cinder--volumes-volume--00000001--snapshot2</literal>,
                            <literal>cinder--volumes-volume--00000001--snapshot3</literal>, and so on.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Mount your partition</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve"># mount /dev/mapper/cinder--volumes-volume--volume--00000001--snapshot1 /mnt</literal_block>
                        <paragraph>If the partition mounts successfully, no errors are returned.</paragraph>
                        <paragraph>You can directly access the data inside the instance. If a message
                            prompts you for a partition or you cannot mount it, determine whether
                            enough space was allocated for the snapshot or the <literal_strong classes="command">kpartx</literal_strong>
                            command failed to discover the partition table.</paragraph>
                        <paragraph>Allocate more space to the snapshot and try the process again.</paragraph>
                    </list_item>
                </bullet_list>
            </list_item>
            <list_item>
                <paragraph>Use the <literal_strong classes="command">tar</literal_strong> command to create archives</paragraph>
                <paragraph>Create a backup of the volume:</paragraph>
                <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ tar --exclude="lost+found" --exclude="some/data/to/exclude" -czf \
  volume-00000001.tar.gz -C /mnt/ /backup/destination</literal_block>
                <paragraph>This command creates a <literal>tar.gz</literal> file that contains the data,
                    <emphasis>and data only</emphasis>. This ensures that you do not waste space by backing
                    up empty sectors.</paragraph>
            </list_item>
            <list_item>
                <paragraph>Checksum calculation I</paragraph>
                <paragraph>You should always have the checksum for your backup files. When you
                    transfer the same file over the network, you can run a checksum
                    calculation to ensure that your file was not corrupted during its
                    transfer. The checksum is a unique ID for a file. If the checksums are
                    different, the file is corrupted.</paragraph>
                <paragraph>Run this command to run a checksum for your file and save the result
                    to a file:</paragraph>
                <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ sha1sum volume-00000001.tar.gz &gt; volume-00000001.checksum</literal_block>
                <note>
                    <paragraph>Use the <literal_strong classes="command">sha1sum</literal_strong> command carefully because the time it
                        takes to complete the calculation is directly proportional to the
                        size of the file.</paragraph>
                    <paragraph>Depending on your CPU, the process might take a long time for
                        files larger than around 4 to 6 GB.</paragraph>
                </note>
            </list_item>
            <list_item>
                <paragraph>After work cleaning</paragraph>
                <paragraph>Now that you have an efficient and consistent backup, use this command
                    to clean up the file system:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Unmount the volume.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ umount /mnt</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Delete the partition table.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ kpartx -dv /dev/cinder-volumes/volume-00000001-snapshot</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Remove the snapshot.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ lvremove -f /dev/cinder-volumes/volume-00000001-snapshot</literal_block>
                    </list_item>
                </bullet_list>
                <paragraph>Repeat these steps for all your volumes.</paragraph>
            </list_item>
            <list_item>
                <paragraph>Automate your backups</paragraph>
                <paragraph>Because more and more volumes might be allocated to your Block Storage
                    service, you might want to automate your backups.
                    The <reference name="SCR_5005_V01_NUAC-OPENSTACK-EBS-volumes-backup.sh" refuri="https://github.com/Razique/BashStuff/blob/master/SYSTEMS/OpenStack/SCR_5005_V01_NUAC-OPENSTACK-EBS-volumes-backup.sh">SCR_5005_V01_NUAC-OPENSTACK-EBS-volumes-backup.sh</reference> script assists
                    you with this task. The script performs the operations from the previous
                    example, but also provides a mail report and runs the backup based on
                    the <literal>backups_retention_days</literal> setting.</paragraph>
                <paragraph>Launch this script from the server that runs the Block Storage service.</paragraph>
                <paragraph>This example shows a mail report:</paragraph>
                <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">Backup Start Time - 07/10 at 01:00:01
Current retention - 7 days

The backup volume is mounted. Proceed...
Removing old backups...  : /BACKUPS/EBS-VOL/volume-00000019/volume-00000019_28_09_2011.tar.gz
     /BACKUPS/EBS-VOL/volume-00000019 - 0 h 1 m and 21 seconds. Size - 3,5G

The backup volume is mounted. Proceed...
Removing old backups...  : /BACKUPS/EBS-VOL/volume-0000001a/volume-0000001a_28_09_2011.tar.gz
     /BACKUPS/EBS-VOL/volume-0000001a - 0 h 4 m and 15 seconds. Size - 6,9G
---------------------------------------
Total backups size - 267G - Used space : 35%
Total execution time - 1 h 75 m and 35 seconds</literal_block>
                <paragraph>The script also enables you to SSH to your instances and run a
                    <literal_strong classes="command">mysqldump</literal_strong> command into them. To make this work, enable
                    the connection to the Compute project keys. If you do not want to
                    run the <literal_strong classes="command">mysqldump</literal_strong> command, you can add
                    <literal>enable_mysql_dump=0</literal> to the script to turn off this functionality.</paragraph>
            </list_item>
        </enumerated_list>
        <comment xml:space="preserve">Links</comment>
        <target ids="scr-5005-v01-nuac-openstack-ebs-volumes-backup-sh" names="scr_5005_v01_nuac-openstack-ebs-volumes-backup.sh" refuri="https://github.com/Razique/BashStuff/blob/master/SYSTEMS/OpenStack/SCR_5005_V01_NUAC-OPENSTACK-EBS-volumes-backup.sh"></target>
    </section>
</document>
