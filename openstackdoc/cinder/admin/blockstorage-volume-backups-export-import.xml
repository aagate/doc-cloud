<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/cinder/doc/source/admin/blockstorage-volume-backups-export-import.rst">
    <target refid="volume-backups-export-import"></target>
    <section ids="export-and-import-backup-metadata volume-backups-export-import" names="export\ and\ import\ backup\ metadata volume_backups_export_import">
        <title>Export and import backup metadata</title>
        <paragraph>A volume backup can only be restored on the same Block Storage service. This
            is because restoring a volume from a backup requires metadata available on
            the database used by the Block Storage service.</paragraph>
        <note>
            <paragraph>For information about how to back up and restore a volume, see
                the section called <reference internal="True" refuri="blockstorage-volume-backups#volume-backups"><inline classes="std std-ref">Back up and restore volumes and snapshots</inline></reference>.</paragraph>
        </note>
        <paragraph>You can, however, export the metadata of a volume backup. To do so, run
            this command as an OpenStack <literal>admin</literal> user (presumably, after creating
            a volume backup):</paragraph>
        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ cinder backup-export BACKUP_ID</literal_block>
        <paragraph>Where <literal>BACKUP_ID</literal> is the volume backup’s ID. This command should return the
            backup’s corresponding database information as encoded string metadata.</paragraph>
        <paragraph>Exporting and storing this encoded string metadata allows you to completely
            restore the backup, even in the event of a catastrophic database failure.
            This will preclude the need to back up the entire Block Storage database,
            particularly if you only need to keep complete backups of a small subset
            of volumes.</paragraph>
        <paragraph>If you have placed encryption on your volumes, the encryption will still be
            in place when you restore the volume if a UUID encryption key is specified
            when creating volumes. Using backup metadata support, UUID keys set up for
            a volume (or volumes) will remain valid when you restore a backed-up volume.
            The restored volume will remain encrypted, and will be accessible with your
            credentials.</paragraph>
        <paragraph>In addition, having a volume backup and its backup metadata also provides
            volume portability. Specifically, backing up a volume and exporting its
            metadata will allow you to restore the volume on a completely different Block
            Storage database, or even on a different cloud service. To do so, first
            import the backup metadata to the Block Storage database and then restore
            the backup.</paragraph>
        <paragraph>To import backup metadata, run the following command as an OpenStack
            <literal>admin</literal>:</paragraph>
        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ cinder backup-import METADATA</literal_block>
        <paragraph>Where <literal>METADATA</literal> is the backup metadata exported earlier.</paragraph>
        <paragraph>Once you have imported the backup metadata into a Block Storage database,
            restore the volume (see the section called <reference internal="True" refuri="blockstorage-volume-backups#volume-backups"><inline classes="std std-ref">Back up and restore volumes and snapshots</inline></reference>).</paragraph>
    </section>
</document>
