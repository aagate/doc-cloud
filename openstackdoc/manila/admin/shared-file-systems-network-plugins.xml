<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/manila/doc/source/admin/shared-file-systems-network-plugins.rst">
    <target refid="shared-file-systems-network-plugins"></target>
    <section ids="network-plug-ins shared-file-systems-network-plugins" names="network\ plug-ins shared_file_systems_network_plugins">
        <title>Network plug-ins</title>
        <paragraph>The Shared File Systems service architecture defines an abstraction layer for
            network resource provisioning and allowing administrators to choose from a
            different options for how network resources are assigned to their projectsâ€™
            networked storage. There are a set of network plug-ins that provide a variety
            of integration approaches with the network services that are available with
            OpenStack.</paragraph>
        <section ids="what-is-a-network-plugin-in-manila" names="what\ is\ a\ network\ plugin\ in\ manila?">
            <title>What is a network plugin in Manila?</title>
            <paragraph>A network plugin is a python class that uses a specific facility (e.g.
                Neutron network) to provide network resources to the
                <reference internal="True" refuri="../reference/glossary#term-manila-share"><inline classes="xref std std-term">manila-share</inline></reference> service.</paragraph>
        </section>
        <section ids="when-to-use-a-network-plugin" names="when\ to\ use\ a\ network\ plugin?">
            <title>When to use a network plugin?</title>
            <paragraph>A Manila <title_reference>share driver</title_reference> may be configured in one of two modes, where it is
                managing the lifecycle of <title_reference>share servers</title_reference> on its own or where it is merely
                providing storage resources on a pre-configured share server. This mode
                is defined using the boolean option <title_reference>driver_handles_share_servers</title_reference> in the
                Manila configuration file. A network plugin is only useful when a driver is
                handling its own share servers.</paragraph>
            <note>
                <paragraph>Not all share drivers support both modes. Each driver must report which
                    mode(s) it supports to the manila-share service.</paragraph>
            </note>
            <paragraph>When <title_reference>driver_handles_share_servers</title_reference> is set to <title_reference>True</title_reference>, a share driver will be
                called to create share servers for shares using information provided within a
                <title_reference>share network</title_reference>. This information will be provided to one of the enabled
                network plugins that will handle reservation, creation and deletion of
                network resources including <title_reference>IP addresses</title_reference> and <title_reference>network interfaces</title_reference>.</paragraph>
            <paragraph>The Shared File Systems service may need a network resource provisioning if
                share service with specified driver works in mode, when a share driver manages
                lifecycle of share servers on its own. This behavior is defined by a flag
                <literal>driver_handles_share_servers</literal> in share service configuration.  When
                <literal>driver_handles_share_servers</literal> is set to <literal>True</literal>, a share driver will be
                called to create share servers for shares using information provided within a
                share network. This information will be provided to one of the enabled network
                plug-ins that will handle reservation, creation and deletion of network
                resources including IP addresses and network interfaces.</paragraph>
        </section>
        <section ids="what-network-plug-ins-are-available" names="what\ network\ plug-ins\ are\ available?">
            <title>What network plug-ins are available?</title>
            <paragraph>There are two network plug-ins and three python classes in the
                Shared File Systems service:</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>Network plug-in for using the OpenStack Networking service. It allows to use
                        any network segmentation that the Networking service supports. It is up to
                        each share driver to support at least one network segmentation type.</paragraph>
                    <enumerated_list enumtype="loweralpha" prefix="" suffix=")">
                        <list_item>
                            <paragraph><literal>manila.network.neutron.neutron_network_plugin.NeutronNetworkPlugin</literal>.
                                This is a default network plug-in. It requires the <literal>neutron_net_id</literal> and
                                the <literal>neutron_subnet_id</literal> to be provided when defining the share network
                                that will be used for the creation of share servers. The user may define
                                any number of share networks corresponding to the various physical
                                network segments in a project environment.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><literal>manila.network.neutron.neutron_network_plugin.NeutronSingleNetworkPlugin</literal>.
                                This is a simplification of the previous case. It accepts values for
                                <literal>neutron_net_id</literal> and <literal>neutron_subnet_id</literal> from the <literal>manila.conf</literal>
                                configuration file and uses one network for all shares.</paragraph>
                        </list_item>
                    </enumerated_list>
                    <paragraph>When only a single network is needed, the NeutronSingleNetworkPlugin (1.b)
                        is a simple solution. Otherwise NeutronNetworkPlugin (1.a) should be chosen.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Network plug-in for specifying networks independently from OpenStack
                        networking services.</paragraph>
                    <enumerated_list enumtype="loweralpha" prefix="" suffix=")">
                        <list_item>
                            <paragraph><literal>manila.network.standalone_network_plugin.StandaloneNetworkPlugin</literal>.
                                This plug-in uses a pre-existing network that is available to the
                                manila-share host. This network may be handled either by OpenStack or be
                                created independently by any other means. The plug-in supports any type
                                of network - flat and segmented. As above, it is completely up to the
                                share driver to support the network type for which the network plug-in is
                                configured.</paragraph>
                        </list_item>
                    </enumerated_list>
                </list_item>
            </enumerated_list>
            <paragraph>More information about network plug-ins can be found in <reference name="Manila developer documentation" refuri="https://docs.openstack.org/developer/manila/adminref/network_plugins.html">Manila developer documentation</reference><target ids="manila-developer-documentation" names="manila\ developer\ documentation" refuri="https://docs.openstack.org/developer/manila/adminref/network_plugins.html"></target></paragraph>
        </section>
    </section>
</document>
