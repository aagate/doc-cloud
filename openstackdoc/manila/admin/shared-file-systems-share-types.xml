<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/manila/doc/source/admin/shared-file-systems-share-types.rst">
    <target refid="shared-file-systems-share-types"></target>
    <section ids="share-types shared-file-systems-share-types" names="share\ types shared_file_systems_share_types">
        <title>Share types</title>
        <paragraph>A share type enables you to filter or choose back ends before you create a
            share and to set data for the share driver. A share type behaves in the same
            way as a Block Storage volume type behaves.</paragraph>
        <paragraph>In the Shared File Systems configuration file <literal>manila.conf</literal>, the
            administrator can set the share type used by default for the share creation
            and then create a default share type.</paragraph>
        <paragraph>To create a share type, use <literal_strong classes="command">manila type-create</literal_strong> command as:</paragraph>
        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">manila type-create [--snapshot_support &lt;snapshot_support&gt;]
                   [--is_public &lt;is_public&gt;]
                   &lt;name&gt; &lt;spec_driver_handles_share_servers&gt;</literal_block>
        <paragraph>where the <literal>name</literal> is the share type name, <literal>--is_public</literal> defines the level of
            the visibility for the share type, <literal>snapshot_support</literal> and
            <literal>spec_driver_handles_share_servers</literal> are the extra specifications used to
            filter back ends. Administrators can create share types with these extra
            specifications for the back ends filtering:</paragraph>
        <bullet_list bullet="-">
            <list_item>
                <paragraph><literal>driver_handles_share_servers</literal>. Required. Defines the driver mode for share
                    server lifecycle management. Valid values are <literal>true</literal>/<literal>1</literal> and
                    <literal>false</literal>/<literal>0</literal>.
                    Set to True when the share driver can manage, or handle, the share server
                    lifecycle.
                    Set to False when an administrator, rather than a share driver, manages
                    the bare metal storage with some net interface instead of the presence
                    of the share servers.</paragraph>
            </list_item>
            <list_item>
                <paragraph><literal>snapshot_support</literal>. Filters back ends by whether they do or do not support
                    share snapshots. Default is <literal>True</literal>.
                    Set to True to find back ends that support share snapshots.
                    Set to False to find back ends that do not support share snapshots.</paragraph>
            </list_item>
        </bullet_list>
        <note>
            <paragraph>The extra specifications set in the share types are operated in the
                <reference internal="True" refuri="shared-file-systems-scheduling#shared-file-systems-scheduling"><inline classes="std std-ref">Scheduling</inline></reference>.</paragraph>
        </note>
        <paragraph>Administrators can also set additional extra specifications for a share type
            for the following purposes:</paragraph>
        <bullet_list bullet="-">
            <list_item>
                <paragraph><emphasis>Filter back ends</emphasis>. Unqualified extra specifications written in
                    this format: <literal>extra_spec=value</literal>. For example, <strong>netapp_raid_type=raid4</strong>.</paragraph>
            </list_item>
            <list_item>
                <paragraph><emphasis>Set data for the driver</emphasis>. Qualified extra specifications always written
                    with the prefix with a colon, except for the special <literal>capabilities</literal>
                    prefix, in this format: <literal>vendor:extra_spec=value</literal>. For example,
                    <strong>netapp:thin_provisioned=true</strong>.</paragraph>
            </list_item>
        </bullet_list>
        <paragraph>The scheduler uses the special capabilities prefix for filtering. The scheduler
            can only create a share on a back end that reports capabilities matching the
            un-scoped extra-spec keys for the share type. For details, see <reference name="Capabilities and Extra-Specs" refuri="https://docs.openstack.org/developer/manila/devref/capabilities_and_extra_specs.html">Capabilities
                and Extra-Specs</reference><target ids="capabilities-and-extra-specs" names="capabilities\ and\ extra-specs" refuri="https://docs.openstack.org/developer/manila/devref/capabilities_and_extra_specs.html"></target>.</paragraph>
        <paragraph>Each driver implementation determines which extra specification keys it uses.
            For details, see the documentation for the driver.</paragraph>
        <paragraph>An administrator can use the <literal>policy.json</literal> file to grant permissions for
            share type creation with extra specifications to other roles.</paragraph>
        <paragraph>You set a share type to private or public and
            <reference internal="True" refid="share-type-access"><inline classes="std std-ref">manage the access</inline></reference> to the private share types. By
            default a share type is created as publicly accessible. Set
            <literal>--is_public</literal> to <literal>False</literal> to make the share type private.</paragraph>
        <section ids="share-type-operations" names="share\ type\ operations">
            <title>Share type operations</title>
            <paragraph>To create a new share type you need to specify the name of the new share
                type. You also require an extra spec <literal>driver_handles_share_servers</literal>.
                The new share type can also be public.</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ manila type-create netapp1 False --is_public True

$ manila type-list
+-----+--------+-----------+-----------+-----------------------------------+-----------------------+
| ID  | Name   | Visibility| is_default| required_extra_specs              | optional_extra_specs  |
+-----+--------+-----------+-----------+-----------------------------------+-----------------------+
| c0..| netapp1| public    | -         | driver_handles_share_servers:False| snapshot_support:True |
+-----+--------+-----------+-----------+-----------------------------------+-----------------------+</literal_block>
            <paragraph>You can set or unset extra specifications for a share type
                using <strong>manila type-key &lt;share_type&gt; set &lt;key=value&gt;</strong> command. Since it is up
                to each driver what extra specification keys it uses, see the documentation
                for the specified driver.</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ manila type-key netapp1 set thin_provisioned=True</literal_block>
            <paragraph>It is also possible to view a list of current share types and extra
                specifications:</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ manila extra-specs-list
+-------------+---------+-------------------------------------+
| ID          | Name    | all_extra_specs                     |
+-------------+---------+-------------------------------------+
| c0086582-...| netapp1 | snapshot_support : True             |
|             |         | thin_provisioned : True             |
|             |         | driver_handles_share_servers : True |
+-------------+---------+-------------------------------------+</literal_block>
            <paragraph>Use <literal_strong classes="command">manila type-key &lt;share_type&gt; unset &lt;key&gt;</literal_strong> to unset an extra
                specification.</paragraph>
            <paragraph>The public or private share type can be deleted with the
                <literal_strong classes="command">manila type-delete &lt;share_type&gt;</literal_strong> command.</paragraph>
            <target refid="share-type-access"></target>
        </section>
        <section ids="share-type-access id1" names="share\ type\ access share_type_access">
            <title>Share type access</title>
            <paragraph>You can manage access to a private share type for different projects.
                Administrators can provide access, remove access, and retrieve
                information about access for a specified private share.</paragraph>
            <paragraph>Create a private type:</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ manila type-create my_type1 True --is_public False
+----------------------+--------------------------------------+
| Property             | Value                                |
+----------------------+--------------------------------------+
| required_extra_specs | driver_handles_share_servers : True  |
| Name                 | my_type1                             |
| Visibility           | private                              |
| is_default           | -                                    |
| ID                   | 06793be5-9a79-4516-89fe-61188cad4d6c |
| optional_extra_specs | snapshot_support : True              |
+----------------------+--------------------------------------+</literal_block>
            <note>
                <paragraph>If you run <literal_strong classes="command">manila type-list</literal_strong> only public share types appear.
                    To see private share types, run <literal_strong classes="command">manila type-list</literal_strong> with
                    <literal>--all</literal> optional argument.</paragraph>
            </note>
            <paragraph>Grant access to created private type for a demo and alt_demo projects
                by providing their IDs:</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ manila type-access-add my_type1 d8f9af6915404114ae4f30668a4f5ba7
$ manila type-access-add my_type1 e4970f57f1824faab2701db61ee7efdf</literal_block>
            <paragraph>To view information about access for a private share, type <literal>my_type1</literal>:</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ manila type-access-list my_type1
+----------------------------------+
| Project_ID                       |
+----------------------------------+
| d8f9af6915404114ae4f30668a4f5ba7 |
| e4970f57f1824faab2701db61ee7efdf |
+----------------------------------+</literal_block>
            <paragraph>After granting access to the share, the target project
                can see the share type in the list, and create private
                shares.</paragraph>
            <paragraph>To deny access for a specified project, use
                <literal_strong classes="command">manila type-access-remove &lt;share_type&gt; &lt;project_id&gt;</literal_strong> command.</paragraph>
        </section>
    </section>
</document>
