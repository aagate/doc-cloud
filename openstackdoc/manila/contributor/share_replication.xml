<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/manila/doc/source/contributor/share_replication.rst">
    <comment xml:space="preserve">Copyright (c) 2016 Goutham Pacha Ravi

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.</comment>
    <section ids="share-replication" names="share\ replication">
        <title>Share Replication</title>
        <paragraph>As of the Mitaka release of OpenStack, <reference internal="True" refuri="../reference/glossary#term-manila"><inline classes="xref std std-term">manila</inline></reference> supports replication of
            shares between different pools for drivers that operate with
            <literal>driver_handles_share_servers=False</literal> mode. These pools may be on different
            backends or within the same backend. This feature can be used as a disaster
            recovery solution or as a load sharing mirroring solution depending upon the
            replication style chosen, the capability of the driver and the configuration
            of backends.</paragraph>
        <paragraph>This feature assumes and relies on the fact that share drivers will be
            responsible for communicating with ALL storage controllers necessary to
            achieve any replication tasks, even if that involves sending commands to
            other storage controllers in other Availability Zones (or AZs).</paragraph>
        <paragraph>End users would be able to create and manage their replicas, alongside their
            shares and snapshots.</paragraph>
        <section ids="storage-availability-zones-and-replication-domains" names="storage\ availability\ zones\ and\ replication\ domains">
            <title>Storage availability zones and replication domains</title>
            <paragraph>Replication is supported within the same availability zone, but in an ideal
                solution, an Availability Zone should be perceived as a single failure domain.
                So this feature provides the most value in an inter-AZ replication use case.</paragraph>
            <paragraph>The <literal>replication_domain</literal> option is a backend specific StrOpt option to be
                used within <literal>manila.conf</literal>. The value can be any ASCII string. Two backends
                that can replicate between each other would have the same
                <literal>replication_domain</literal>. This comes from the premise that manila expects
                Share Replication to be performed between backends that have similar
                characteristics.</paragraph>
            <paragraph>When scheduling new replicas, the scheduler takes into account the
                <literal>replication_domain</literal> option to match similar backends. It also ensures that
                only one replica can be scheduled per pool. When backends report multiple
                pools, manila would allow for replication between two pools on the same
                backend.</paragraph>
            <paragraph>The <literal>replication_domain</literal> option is meant to be used in conjunction with the
                <literal>storage_availability_zone</literal> option to utilize this solution for Data
                Protection/Disaster Recovery.</paragraph>
        </section>
        <section ids="replication-types" names="replication\ types">
            <title>Replication types</title>
            <paragraph>When creating a share that is meant to have replicas in the future, the user
                will use a <literal>share_type</literal> with an extra_spec, <reference internal="True" refuri="../reference/glossary#term-replication-type"><inline classes="xref std std-term">replication_type</inline></reference> set to
                a valid replication type that manila supports. Drivers must report the
                replication type that they support as the <reference internal="True" refuri="../reference/glossary#term-replication-type"><inline classes="xref std std-term">replication_type</inline></reference>
                capability during the <literal>_update_share_stats()</literal> call.</paragraph>
            <paragraph>Three types of replication are currently supported:</paragraph>
            <definition_list>
                <definition_list_item>
                    <term><strong>writable</strong></term>
                    <definition>
                        <paragraph>Synchronously replicated shares where all replicas are writable.
                            Promotion is not supported and not needed.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term><strong>readable</strong></term>
                    <definition>
                        <paragraph>Mirror-style replication with a primary (writable) copy
                            and one or more secondary (read-only) copies which can become writable
                            after a promotion.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term><strong>dr (for Disaster Recovery)</strong></term>
                    <definition>
                        <paragraph>Generalized replication with secondary copies that are inaccessible until
                            they are promoted to become the <literal>active</literal> replica.</paragraph>
                    </definition>
                </definition_list_item>
            </definition_list>
            <note>
                <paragraph>The term <reference internal="True" refuri="../reference/glossary#term-active"><inline classes="xref std std-term">active</inline></reference> replica refers to the <literal>primary</literal> share. In
                    <reference internal="True" refuri="../reference/glossary#term-writable"><inline classes="xref std std-term">writable</inline></reference> style of replication, all replicas are <reference internal="True" refuri="../reference/glossary#term-active"><inline classes="xref std std-term">active</inline></reference>,
                    and there could be no distinction of a <literal>primary</literal> share. In
                    <reference internal="True" refuri="../reference/glossary#term-readable"><inline classes="xref std std-term">readable</inline></reference> and <reference internal="True" refuri="../reference/glossary#term-dr"><inline classes="xref std std-term">dr</inline></reference> styles of replication, a <literal>secondary</literal>
                    replica may be referred to as <literal>passive</literal>, <literal>non-active</literal> or simply
                    <literal>replica</literal>.</paragraph>
            </note>
        </section>
        <section ids="health-of-a-share-replica" names="health\ of\ a\ share\ replica">
            <title>Health of a share replica</title>
            <paragraph>Apart from the <literal>status</literal> attribute, share replicas have the
                <reference internal="True" refuri="../reference/glossary#term-replica-state"><inline classes="xref std std-term">replica_state</inline></reference> attribute to denote the state of the replica. The
                <literal>primary</literal> replica will have itâ€™s <reference internal="True" refuri="../reference/glossary#term-replica-state"><inline classes="xref std std-term">replica_state</inline></reference> attribute set to
                <reference internal="True" refuri="../reference/glossary#term-active"><inline classes="xref std std-term">active</inline></reference>. A <literal>secondary</literal> replica may have one of the following values as
                its <reference internal="True" refuri="../reference/glossary#term-replica-state"><inline classes="xref std std-term">replica_state</inline></reference>:</paragraph>
            <definition_list>
                <definition_list_item>
                    <term><strong>in_sync</strong></term>
                    <definition>
                        <paragraph>The replica is up to date with the active replica
                            (possibly within a backend specific <reference internal="True" refuri="../reference/glossary#term-recovery-point-objective"><inline classes="xref std std-term">recovery point objective</inline></reference>).</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term><strong>out_of_sync</strong></term>
                    <definition>
                        <paragraph>The replica has gone out of date (all new replicas start out in this
                            <reference internal="True" refuri="../reference/glossary#term-replica-state"><inline classes="xref std std-term">replica_state</inline></reference>).</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term><strong>error</strong></term>
                    <definition>
                        <paragraph>When the scheduler failed to schedule this replica or some potentially
                            irrecoverable damage occurred with regard to updating data for this
                            replica.</paragraph>
                    </definition>
                </definition_list_item>
            </definition_list>
            <paragraph>Manila requests periodic update of the <reference internal="True" refuri="../reference/glossary#term-replica-state"><inline classes="xref std std-term">replica_state</inline></reference> of all non-active
                replicas. The update occurs with respect to an interval defined through the
                <literal>replica_state_update_interval</literal> option in <literal>manila.conf</literal>.</paragraph>
            <paragraph>Administrators have an option of initiating a <literal>resync</literal> of a secondary
                replica (for <reference internal="True" refuri="../reference/glossary#term-readable"><inline classes="xref std std-term">readable</inline></reference> and <reference internal="True" refuri="../reference/glossary#term-dr"><inline classes="xref std std-term">dr</inline></reference> types of replication). This could
                be performed before a planned failover operation in order to have the most
                up-to-date data on the replica.</paragraph>
        </section>
        <section ids="promotion" names="promotion">
            <title>Promotion</title>
            <paragraph>For <reference internal="True" refuri="../reference/glossary#term-readable"><inline classes="xref std std-term">readable</inline></reference> and <reference internal="True" refuri="../reference/glossary#term-dr"><inline classes="xref std std-term">dr</inline></reference> styles, we refer to the task of
                switching a <literal>non-active</literal> replica with the <reference internal="True" refuri="../reference/glossary#term-active"><inline classes="xref std std-term">active</inline></reference> replica as
                <title_reference>promotion</title_reference>. For the <reference internal="True" refuri="../reference/glossary#term-writable"><inline classes="xref std std-term">writable</inline></reference> style of replication, promotion does
                not make sense since all replicas are <reference internal="True" refuri="../reference/glossary#term-active"><inline classes="xref std std-term">active</inline></reference> (or writable) at all
                given points of time.</paragraph>
            <paragraph>The <literal>status</literal> attribute of the non-active replica being promoted will be set
                to <reference internal="True" refuri="../reference/glossary#term-replication-change"><inline classes="xref std std-term">replication_change</inline></reference> during its promotion. This has been classified
                as a <literal>busy</literal> state and hence API interactions with the share are restricted
                while one of its replicas is in this state.</paragraph>
            <paragraph>Promotion of replicas with <reference internal="True" refuri="../reference/glossary#term-replica-state"><inline classes="xref std std-term">replica_state</inline></reference> set to <literal>error</literal> may not be
                fully supported by the backend. However, manila allows the action as an
                administrator feature and such an attempt may be honored by backends if
                possible.</paragraph>
            <paragraph>When multiple replicas exist, multiple replication relationships
                between shares may need to be redefined at the backend during the promotion
                operation. If the driver fails at this stage, the replicas may be left in an
                inconsistent state. The share manager will set all replicas to have the
                <literal>status</literal> attribute set to <literal>error</literal>. Recovery from this state would require
                administrator intervention.</paragraph>
        </section>
        <section ids="snapshots" names="snapshots">
            <title>Snapshots</title>
            <paragraph>If the driver supports snapshots, the replication of a snapshot is expected
                to be initiated simultaneously with the creation of the snapshot on the
                <reference internal="True" refuri="../reference/glossary#term-active"><inline classes="xref std std-term">active</inline></reference> replica. Manila tracks snapshots across replicas as separate
                snapshot instances. The aggregate snapshot object itself will be in
                <literal>creating</literal> state until it is <literal>available</literal> across all of the shareâ€™s replicas
                that have their <reference internal="True" refuri="../reference/glossary#term-replica-state"><inline classes="xref std std-term">replica_state</inline></reference> attribute set to <reference internal="True" refuri="../reference/glossary#term-active"><inline classes="xref std std-term">active</inline></reference> or
                <literal>in_sync</literal>.</paragraph>
            <paragraph>Therefore, for a driver that supports snapshots, the definition of being
                <literal>in_sync</literal> with the primary is not only that data is ensured (within the
                <reference internal="True" refuri="../reference/glossary#term-recovery-point-objective"><inline classes="xref std std-term">recovery point objective</inline></reference>), but also that any â€˜availableâ€™ snapshots
                on the primary are ensured on the replica as well. If the snapshots cannot
                be ensured, the <reference internal="True" refuri="../reference/glossary#term-replica-state"><inline classes="xref std std-term">replica_state</inline></reference> <emphasis>must</emphasis> be reported to manila as being
                <literal>out_of_sync</literal> until the snapshots have been replicated.</paragraph>
            <paragraph>When a snapshot instance has its <literal>status</literal> attribute set to <literal>creating</literal> or
                <literal>deleting</literal>, manila will poll the respective drivers for a status update. As
                described earlier, the parent snapshot itself will be <literal>available</literal> only when
                its instances across the <reference internal="True" refuri="../reference/glossary#term-active"><inline classes="xref std std-term">active</inline></reference> and <literal>in_sync</literal> replicas of the share
                are <literal>available</literal>. The polling interval will be the same as
                <literal>replica_state_update_interval</literal>.</paragraph>
        </section>
        <section ids="access-rules" names="access\ rules">
            <title>Access Rules</title>
            <paragraph>Access rules are not meant to be different across the replicas of the share.
                Manila expects drivers to handle these access rules effectively depending on
                the style of replication supported. For example, the <reference internal="True" refuri="../reference/glossary#term-dr"><inline classes="xref std std-term">dr</inline></reference> style of
                replication does mean that the non-active replicas are inaccessible, so if
                read-write rules are expected, then the rules should be applied on the
                <reference internal="True" refuri="../reference/glossary#term-active"><inline classes="xref std std-term">active</inline></reference> replica only. Similarly, drivers that
                support <reference internal="True" refuri="../reference/glossary#term-readable"><inline classes="xref std std-term">readable</inline></reference> replication type should apply any read-write
                rules as read-only for the non-active replicas.</paragraph>
            <paragraph>Drivers will receive all the access rules in <literal>create_replica</literal>,
                <literal>delete_replica</literal> and <literal>update_replica_state</literal> calls and have ample
                opportunity to reconcile these rules effectively across replicas.</paragraph>
        </section>
        <section ids="understanding-replication-workflows" names="understanding\ replication\ workflows">
            <title>Understanding Replication Workflows</title>
            <section ids="creating-a-share-that-supports-replication" names="creating\ a\ share\ that\ supports\ replication">
                <title>Creating a share that supports replication</title>
                <paragraph>Administrators can create a share type with extra-spec
                    <reference internal="True" refuri="../reference/glossary#term-replication-type"><inline classes="xref std std-term">replication_type</inline></reference>, matching the style of replication the desired backend
                    supports. Users can use the share type to create a new share that
                    allows/supports replication. A replicated share always starts out with one
                    replica, the <literal>primary</literal> share itself.</paragraph>
                <paragraph>The <reference internal="True" refuri="../reference/glossary#term-manila-scheduler"><inline classes="xref std std-term">manila-scheduler</inline></reference> service will filter and weigh available pools to
                    find a suitable pool for the share being created. In particular,</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>The <literal>CapabilityFilter</literal> will match the <reference internal="True" refuri="../reference/glossary#term-replication-type"><inline classes="xref std std-term">replication_type</inline></reference> extra_spec
                            in the request share_type with the <literal>replication_type</literal> capability reported
                            by a pool.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The <literal>ShareReplicationFilter</literal> will further ensure that the pool has a
                            non-empty <literal>replication_domain</literal> capability being reported as well.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The <literal>AvailabilityZoneFilter</literal> will ensure that the availability_zone
                            requested matches with the poolâ€™s availability zone.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="creating-a-replica" names="creating\ a\ replica">
                <title>Creating a replica</title>
                <paragraph>The user has to specify the share name/id of the share that is supposed to be
                    replicated and optionally an availability zone for the replica to exist in.
                    The replica inherits the parent shareâ€™s share_type and associated
                    extra_specs. Scheduling of the replica is similar to that of the share.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <definition_list>
                            <definition_list_item>
                                <term>The <title_reference>ShareReplicationFilter</title_reference> will ensure that the pool is within</term>
                                <definition>
                                    <paragraph>the same <literal>replication_domain</literal> as the <reference internal="True" refuri="../reference/glossary#term-active"><inline classes="xref std std-term">active</inline></reference> replica and also
                                        ensures that the pool does not already have a replica for that share.</paragraph>
                                </definition>
                            </definition_list_item>
                        </definition_list>
                    </list_item>
                </bullet_list>
                <paragraph>Drivers supporting <reference internal="True" refuri="../reference/glossary#term-writable"><inline classes="xref std std-term">writable</inline></reference> style <strong>must</strong> set the
                    <reference internal="True" refuri="../reference/glossary#term-replica-state"><inline classes="xref std std-term">replica_state</inline></reference> attribute to <reference internal="True" refuri="../reference/glossary#term-active"><inline classes="xref std std-term">active</inline></reference> when the replica has been
                    created and is <literal>available</literal>.</paragraph>
            </section>
            <section ids="deleting-a-replica" names="deleting\ a\ replica">
                <title>Deleting a replica</title>
                <paragraph>Users can remove replicas that have their <title_reference>status</title_reference> attribute set to
                    <literal>error</literal>, <literal>in_sync</literal> or <literal>out_of_sync</literal>. They could even delete an
                    <reference internal="True" refuri="../reference/glossary#term-active"><inline classes="xref std std-term">active</inline></reference> replica as long as there is another <reference internal="True" refuri="../reference/glossary#term-active"><inline classes="xref std std-term">active</inline></reference> replica
                    (as could be the case with <title_reference>writable</title_reference> replication style). Before the
                    <literal>delete_replica</literal> call is made to the driver, an update_access call is made
                    to ensure access rules are safely removed for the replica.</paragraph>
                <paragraph>Administrators may also <literal>force-delete</literal> replicas. Any driver exceptions will
                    only be logged and not re-raised; the replica will be purged from manilaâ€™s
                    database.</paragraph>
            </section>
            <section ids="promoting-a-replica" names="promoting\ a\ replica">
                <title>Promoting a replica</title>
                <paragraph>Users can promote replicas that have their <reference internal="True" refuri="../reference/glossary#term-replica-state"><inline classes="xref std std-term">replica_state</inline></reference> attribute set
                    to <literal>in_sync</literal>. Administrators can attempt to promote replicas that have their
                    <reference internal="True" refuri="../reference/glossary#term-replica-state"><inline classes="xref std std-term">replica_state</inline></reference> attribute set to <literal>out_of_sync</literal> or <literal>error</literal>. During a
                    promotion, if the driver raises an exception, all replicas will have their
                    <title_reference>status</title_reference> attribute set to <title_reference>error</title_reference> and recovery from this state will require
                    administrator intervention.</paragraph>
            </section>
            <section ids="resyncing-a-replica" names="resyncing\ a\ replica">
                <title>Resyncing a replica</title>
                <paragraph>Prior to a planned failover, an administrator could attempt to update the
                    data on the replica. The <literal>update_replica_state</literal> call will be made during
                    such an action, giving drivers an opportunity to push the latest updates from
                    the <title_reference>active</title_reference> replica to the secondaries.</paragraph>
            </section>
            <section ids="creating-a-snapshot" names="creating\ a\ snapshot">
                <title>Creating a snapshot</title>
                <paragraph>When a user takes a snapshot of a share that has replicas, manila creates as
                    many snapshot instances as there are share replicas. These snapshot
                    instances all begin with their <title_reference>status</title_reference> attribute set to <title_reference>creating</title_reference>. The driver
                    is expected to create the snapshot of the <literal>active</literal> replica and then begin to
                    replicate this snapshot as soon as the <reference internal="True" refuri="../reference/glossary#term-active"><inline classes="xref std std-term">active</inline></reference> replicaâ€™s
                    snapshot instance is created and becomes <literal>available</literal>.</paragraph>
            </section>
            <section ids="deleting-a-snapshot" names="deleting\ a\ snapshot">
                <title>Deleting a snapshot</title>
                <paragraph>When a user deletes a snapshot, the snapshot instances corresponding to each
                    replica of the share have their <literal>status</literal> attribute set to <literal>deleting</literal>.
                    Drivers must update their secondaries as soon as the <reference internal="True" refuri="../reference/glossary#term-active"><inline classes="xref std std-term">active</inline></reference> replicaâ€™s
                    snapshot instance is deleted.</paragraph>
            </section>
        </section>
        <section ids="driver-interfaces" names="driver\ interfaces">
            <title>Driver Interfaces</title>
            <paragraph>As part of the <literal>_update_share_stats()</literal> call, the base driver reports the
                <literal>replication_domain</literal> capability. Drivers are expected to update the
                <reference internal="True" refuri="../reference/glossary#term-replication-type"><inline classes="xref std std-term">replication_type</inline></reference> capability.</paragraph>
            <paragraph>Drivers must implement the methods enumerated below in order to support
                replication. <literal>promote_replica</literal>, <literal>update_replica_state</literal> and
                <literal>update_replicated_snapshot</literal> need not be implemented by drivers that support
                the <reference internal="True" refuri="../reference/glossary#term-writable"><inline classes="xref std std-term">writable</inline></reference> style of replication. The snapshot methods
                <literal>create_replicated_snapshot</literal>, <literal>delete_replicated_snapshot</literal> and
                <literal>update_replicated_snapshot</literal> need not be implemented by a driver that does
                not support snapshots.</paragraph>
            <paragraph>Each driver request is made on a specific host. Create/delete operations
                on secondary replicas are always made on the destination host. Create/delete
                operations on snapshots are always made on the <reference internal="True" refuri="../reference/glossary#term-active"><inline classes="xref std std-term">active</inline></reference> replicaâ€™s host.
                <literal>update_replica_state</literal> and <literal>update_replicated_snapshot</literal> calls are made on
                the host that the replica or snapshot resides on.</paragraph>
            <section ids="share-replica-interfaces" names="share\ replica\ interfaces:">
                <title>Share Replica interfaces:</title>
                <index entries="['single',\ 'ShareDriver\ (class\ in\ manila.share.driver)',\ 'manila.share.driver.ShareDriver',\ '',\ None]"></index>
                <desc desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="" first="False" fullname="ShareDriver" ids="manila.share.driver.ShareDriver" module="manila.share.driver" names="manila.share.driver.ShareDriver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">ShareDriver</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">driver_handles_share_servers</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Class defines interface of NAS driver.</paragraph>
                        <index entries="['single',\ 'create_replica()\ (ShareDriver\ method)',\ 'manila.share.driver.ShareDriver.create_replica',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.create_replica" ids="manila.share.driver.ShareDriver.create_replica" module="manila.share.driver" names="manila.share.driver.ShareDriver.create_replica"><desc_name xml:space="preserve">create_replica</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">replica_list</desc_parameter><desc_parameter xml:space="preserve">new_replica</desc_parameter><desc_parameter xml:space="preserve">access_rules</desc_parameter><desc_parameter xml:space="preserve">replica_snapshots</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Replicate the active replica to a new replica on this backend.</paragraph>
                                <note>
                                    <paragraph>This call is made on the host that the new replica is being created
                                        upon.</paragraph>
                                </note>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> â€“ Current context</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">replica_list</literal_strong> â€“ List of all replicas for a particular share.
                                                        This list also contains the replica to be created. The â€˜activeâ€™
                                                        replica will have its â€˜replica_stateâ€™ attr set to â€˜activeâ€™.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>Example:</paragraph>
                                <literal_block xml:space="preserve">[
    {
    'id': 'd487b88d-e428-4230-a465-a800c2cce5f8',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'in_sync',
        ...
    'share_server_id': '4ce78e7b-0ef6-4730-ac2a-fd2defefbd05',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    {
    'id': '10e49c3e-aca9-483b-8c2d-1c337b38d6af',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'active',
        ...
    'share_server_id': 'f63629b3-e126-4448-bec2-03f788f76094',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    {
    'id': 'e82ff8b6-65f0-11e5-9d70-feff819cdc9f',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'in_sync',
        ...
    'share_server_id': '07574742-67ea-4dfd-9844-9fbd8ada3d87',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    ...
]</literal_block>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">new_replica</literal_strong> â€“ The share replica dictionary.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>Example:</paragraph>
                                <literal_block xml:space="preserve">{
    'id': 'e82ff8b6-65f0-11e5-9d70-feff819cdc9f',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'deleted': False,
    'host': 'openstack2@cmodeSSVMNFS2',
    'status': 'creating',
    'scheduled_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
    'launched_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
    'terminated_at': None,
    'replica_state': 'out_of_sync',
    'availability_zone_id': 'f6e146d0-65f0-11e5-9d70-feff819cdc9f',
    'export_locations': [
        models.ShareInstanceExportLocations,
    ],
    'access_rules_status': 'out_of_sync',
    'share_network_id': '4ccd5318-65f1-11e5-9d70-feff819cdc9f',
    'share_server_id': 'e6155221-ea00-49ef-abf9-9f89b7dd900a',
    'share_server': &lt;models.ShareServer&gt; or None,
}</literal_block>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">access_rules</literal_strong> â€“ A list of access rules.
                                                These are rules that other instances of the share already obey.
                                                Drivers are expected to apply access rules to the new replica or
                                                disregard access rules that donâ€™t apply.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>Example:</paragraph>
                                <literal_block xml:space="preserve">[
 {
    'id': 'f0875f6f-766b-4865-8b41-cccb4cdf1676',
    'deleted' = False,
    'share_id' = 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'access_type' = 'ip',
    'access_to' = '172.16.20.1',
    'access_level' = 'rw',
 }
]</literal_block>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">replica_snapshots</literal_strong> â€“ List of dictionaries of snapshot instances.
                                                This includes snapshot instances of every snapshot of the share
                                                whose â€˜aggregate_statusâ€™ property was reported to be â€˜availableâ€™
                                                when the share manager initiated this request. Each list member
                                                will have two sub dictionaries: â€˜active_replica_snapshotâ€™ and
                                                â€˜share_replica_snapshotâ€™. The â€˜activeâ€™ replica snapshot corresponds
                                                to the instance of the snapshot on any of the â€˜activeâ€™ replicas of
                                                the share while share_replica_snapshot corresponds to the snapshot
                                                instance for the specific replica that will need to exist on the
                                                new share replica that is being created. The driver needs to ensure
                                                that this snapshot instance is truly available before transitioning
                                                the replica from â€˜out_of_syncâ€™ to â€˜in_syncâ€™. Snapshots instances
                                                for snapshots that have an â€˜aggregate_statusâ€™ of â€˜creatingâ€™ or
                                                â€˜deletingâ€™ will be polled for in the <literal>update_replicated_snapshot</literal>
                                                method.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>Example:</paragraph>
                                <literal_block xml:space="preserve">[
 {
 'active_replica_snapshot': {
    'id': '8bda791c-7bb6-4e7b-9b64-fefff85ff13e',
    'share_instance_id': '10e49c3e-aca9-483b-8c2d-1c337b38d6af',
    'status': 'available',
    'provider_location': '/newton/share-snapshot-10e49c3e-aca9',
    ...
    },
 'share_replica_snapshot': {
    'id': '',
    'share_instance_id': 'e82ff8b6-65f0-11e5-9d70-feff819cdc9f',
    'status': 'available',
    'provider_location': None,
        ...
    },
 }
]</literal_block>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">share_server</literal_strong> â€“ &lt;models.ShareServer&gt; or None
                                                Share server of the replica being created.</paragraph>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>None or a dictionary.
                                                The dictionary can contain export_locations replica_state and
                                                access_rules_status. export_locations is a list of paths and
                                                replica_state is one of â€˜activeâ€™, â€˜in_syncâ€™, â€˜out_of_syncâ€™ or
                                                â€˜errorâ€™.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <important>
                                    <paragraph>A backend supporting â€˜writableâ€™ type replication should return
                                        â€˜activeâ€™ as the replica_state.</paragraph>
                                </important>
                                <paragraph>Export locations should be in the same format as returned during the
                                    <literal>create_share</literal> call.</paragraph>
                                <paragraph>Example:</paragraph>
                                <literal_block xml:space="preserve">{
    'export_locations': [
        {
            'path': '172.16.20.22/sample/export/path',
             'is_admin_only': False,
             'metadata': {'some_key': 'some_value'},
        },
    ],
     'replica_state': 'in_sync',
     'access_rules_status': 'in_sync',
}</literal_block>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'delete_replica()\ (ShareDriver\ method)',\ 'manila.share.driver.ShareDriver.delete_replica',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.delete_replica" ids="manila.share.driver.ShareDriver.delete_replica" module="manila.share.driver" names="manila.share.driver.ShareDriver.delete_replica"><desc_name xml:space="preserve">delete_replica</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">replica_list</desc_parameter><desc_parameter xml:space="preserve">replica_snapshots</desc_parameter><desc_parameter xml:space="preserve">replica</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Delete a replica.</paragraph>
                                <note>
                                    <paragraph>This call is made on the host that hosts the replica being
                                        deleted.</paragraph>
                                </note>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> â€“ Current context</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">replica_list</literal_strong> â€“ List of all replicas for a particular share
                                                        This list also contains the replica to be deleted. The â€˜activeâ€™
                                                        replica will have its â€˜replica_stateâ€™ attr set to â€˜activeâ€™.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>Example:</paragraph>
                                <literal_block xml:space="preserve">[
    {
    'id': 'd487b88d-e428-4230-a465-a800c2cce5f8',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'in_sync',
        ...
    'share_server_id': '4ce78e7b-0ef6-4730-ac2a-fd2defefbd05',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    {
    'id': '10e49c3e-aca9-483b-8c2d-1c337b38d6af',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'active',
        ...
    'share_server_id': 'f63629b3-e126-4448-bec2-03f788f76094',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    {
    'id': 'e82ff8b6-65f0-11e5-9d70-feff819cdc9f',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'in_sync',
        ...
    'share_server_id': '07574742-67ea-4dfd-9844-9fbd8ada3d87',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    ...
]</literal_block>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">replica</literal_strong> â€“ Dictionary of the share replica being deleted.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>Example:</paragraph>
                                <literal_block xml:space="preserve">{
    'id': 'e82ff8b6-65f0-11e5-9d70-feff819cdc9f',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'deleted': False,
    'host': 'openstack2@cmodeSSVMNFS2',
    'status': 'available',
    'scheduled_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
    'launched_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
    'terminated_at': None,
    'replica_state': 'in_sync',
    'availability_zone_id': 'f6e146d0-65f0-11e5-9d70-feff819cdc9f',
    'export_locations': [
        models.ShareInstanceExportLocations
    ],
    'access_rules_status': 'out_of_sync',
    'share_network_id': '4ccd5318-65f1-11e5-9d70-feff819cdc9f',
    'share_server_id': '53099868-65f1-11e5-9d70-feff819cdc9f',
    'share_server': &lt;models.ShareServer&gt; or None,
}</literal_block>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">replica_snapshots</literal_strong> â€“ List of dictionaries of snapshot instances.
                                                The dict contains snapshot instances that are associated with the
                                                share replica being deleted.
                                                No model updates to snapshot instances are possible in this method.
                                                The driver should return when the cleanup is completed on the
                                                backend for both, the snapshots and the replica itself. Drivers
                                                must handle situations where the snapshot may not yet have
                                                finished â€˜creatingâ€™ on this replica.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>Example:</paragraph>
                                <literal_block xml:space="preserve">[
    {
    'id': '89dafd00-0999-4d23-8614-13eaa6b02a3b',
    'snapshot_id': '3ce1caf7-0945-45fd-a320-714973e949d3',
    'status: 'available',
    'share_instance_id': 'e82ff8b6-65f0-11e5-9d70-feff819cdc9f'
        ...
    },
    {
    'id': '8bda791c-7bb6-4e7b-9b64-fefff85ff13e',
    'snapshot_id': '13ee5cb5-fc53-4539-9431-d983b56c5c40',
    'status: 'creating',
    'share_instance_id': 'e82ff8b6-65f0-11e5-9d70-feff819cdc9f'
        ...
    },
    ...
]</literal_block>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">share_server</literal_strong> â€“ &lt;models.ShareServer&gt; or None
                                                Share server of the replica to be deleted.</paragraph>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>None.</paragraph>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Raises</field_name>
                                        <field_body>
                                            <paragraph>Exception.
                                                Any exception raised will set the share replicaâ€™s â€˜statusâ€™ and
                                                â€˜replica_stateâ€™ attributes to â€˜error_deletingâ€™. It will not affect
                                                snapshots belonging to this replica.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'promote_replica()\ (ShareDriver\ method)',\ 'manila.share.driver.ShareDriver.promote_replica',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.promote_replica" ids="manila.share.driver.ShareDriver.promote_replica" module="manila.share.driver" names="manila.share.driver.ShareDriver.promote_replica"><desc_name xml:space="preserve">promote_replica</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">replica_list</desc_parameter><desc_parameter xml:space="preserve">replica</desc_parameter><desc_parameter xml:space="preserve">access_rules</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Promote a replica to â€˜activeâ€™ replica state.</paragraph>
                                <note>
                                    <paragraph>This call is made on the host that hosts the replica being
                                        promoted.</paragraph>
                                </note>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> â€“ Current context</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">replica_list</literal_strong> â€“ List of all replicas for a particular share
                                                        This list also contains the replica to be promoted. The â€˜activeâ€™
                                                        replica will have its â€˜replica_stateâ€™ attr set to â€˜activeâ€™.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>Example:</paragraph>
                                <literal_block xml:space="preserve">[
    {
    'id': 'd487b88d-e428-4230-a465-a800c2cce5f8',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'in_sync',
        ...
    'share_server_id': '4ce78e7b-0ef6-4730-ac2a-fd2defefbd05',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    {
    'id': '10e49c3e-aca9-483b-8c2d-1c337b38d6af',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'active',
        ...
    'share_server_id': 'f63629b3-e126-4448-bec2-03f788f76094',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    {
    'id': 'e82ff8b6-65f0-11e5-9d70-feff819cdc9f',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'in_sync',
        ...
    'share_server_id': '07574742-67ea-4dfd-9844-9fbd8ada3d87',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    ...
]</literal_block>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">replica</literal_strong> â€“ Dictionary of the replica to be promoted.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>Example:</paragraph>
                                <literal_block xml:space="preserve">{
    'id': 'e82ff8b6-65f0-11e5-9d70-feff819cdc9f',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'deleted': False,
    'host': 'openstack2@cmodeSSVMNFS2',
    'status': 'available',
    'scheduled_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
    'launched_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
    'terminated_at': None,
    'replica_state': 'in_sync',
    'availability_zone_id': 'f6e146d0-65f0-11e5-9d70-feff819cdc9f',
    'export_locations': [
        models.ShareInstanceExportLocations
    ],
    'access_rules_status': 'in_sync',
    'share_network_id': '4ccd5318-65f1-11e5-9d70-feff819cdc9f',
    'share_server_id': '07574742-67ea-4dfd-9844-9fbd8ada3d87',
    'share_server': &lt;models.ShareServer&gt; or None,
}</literal_block>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">access_rules</literal_strong> â€“ A list of access rules
                                                These access rules are obeyed by other instances of the share</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>Example:</paragraph>
                                <literal_block xml:space="preserve">[
 {
    'id': 'f0875f6f-766b-4865-8b41-cccb4cdf1676',
    'deleted' = False,
    'share_id' = 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'access_type' = 'ip',
    'access_to' = '172.16.20.1',
    'access_level' = 'rw',
 }
]</literal_block>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">share_server</literal_strong> â€“ &lt;models.ShareServer&gt; or None
                                                Share server of the replica to be promoted.</paragraph>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>updated_replica_list or None.
                                                The driver can return the updated list as in the request
                                                parameter. Changes that will be updated to the Database are:
                                                â€˜export_locationsâ€™, â€˜access_rules_statusâ€™ and â€˜replica_stateâ€™.</paragraph>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Raises</field_name>
                                        <field_body>
                                            <paragraph>Exception.
                                                This can be any exception derived from BaseException. This is
                                                re-raised by the manager after some necessary cleanup. If the
                                                driver raises an exception during promotion, it is assumed that
                                                all of the replicas of the share are in an inconsistent state.
                                                Recovery is only possible through the periodic update call and/or
                                                administrator intervention to correct the â€˜statusâ€™ of the affected
                                                replicas if they become healthy again.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'update_replica_state()\ (ShareDriver\ method)',\ 'manila.share.driver.ShareDriver.update_replica_state',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.update_replica_state" ids="manila.share.driver.ShareDriver.update_replica_state" module="manila.share.driver" names="manila.share.driver.ShareDriver.update_replica_state"><desc_name xml:space="preserve">update_replica_state</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">replica_list</desc_parameter><desc_parameter xml:space="preserve">replica</desc_parameter><desc_parameter xml:space="preserve">access_rules</desc_parameter><desc_parameter xml:space="preserve">replica_snapshots</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Update the replica_state of a replica.</paragraph>
                                <note>
                                    <paragraph>This call is made on the host which hosts the replica being
                                        updated.</paragraph>
                                </note>
                                <paragraph>Drivers should fix replication relationships that were broken if
                                    possible inside this method.</paragraph>
                                <paragraph>This method is called periodically by the share manager; and
                                    whenever requested by the administrator through the â€˜resyncâ€™ API.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> â€“ Current context</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">replica_list</literal_strong> â€“ List of all replicas for a particular share
                                                        This list also contains the replica to be updated. The â€˜activeâ€™
                                                        replica will have its â€˜replica_stateâ€™ attr set to â€˜activeâ€™.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>Example:</paragraph>
                                <literal_block xml:space="preserve">[
    {
    'id': 'd487b88d-e428-4230-a465-a800c2cce5f8',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'in_sync',
        ...
    'share_server_id': '4ce78e7b-0ef6-4730-ac2a-fd2defefbd05',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    {
    'id': '10e49c3e-aca9-483b-8c2d-1c337b38d6af',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'active',
        ...
    'share_server_id': 'f63629b3-e126-4448-bec2-03f788f76094',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    {
    'id': 'e82ff8b6-65f0-11e5-9d70-feff819cdc9f',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'in_sync',
        ...
    'share_server_id': '07574742-67ea-4dfd-9844-9fbd8ada3d87',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    ...
]</literal_block>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">replica</literal_strong> â€“ Dictionary of the replica being updated
                                                Replica state will always be â€˜in_syncâ€™, â€˜out_of_syncâ€™, or â€˜errorâ€™.
                                                Replicas in â€˜activeâ€™ state will not be passed via this parameter.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>Example:</paragraph>
                                <literal_block xml:space="preserve">{
    'id': 'd487b88d-e428-4230-a465-a800c2cce5f8',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'deleted': False,
    'host': 'openstack2@cmodeSSVMNFS1',
    'status': 'available',
    'scheduled_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
    'launched_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
    'terminated_at': None,
    'replica_state': 'in_sync',
    'availability_zone_id': 'e2c2db5c-cb2f-4697-9966-c06fb200cb80',
    'export_locations': [
        models.ShareInstanceExportLocations,
    ],
    'access_rules_status': 'in_sync',
    'share_network_id': '4ccd5318-65f1-11e5-9d70-feff819cdc9f',
    'share_server_id': '4ce78e7b-0ef6-4730-ac2a-fd2defefbd05',
}</literal_block>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">access_rules</literal_strong> â€“ A list of access rules
                                                These access rules are obeyed by other instances of the share. The
                                                driver could attempt to sync on any un-applied access_rules.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>Example:</paragraph>
                                <literal_block xml:space="preserve">[
 {
    'id': 'f0875f6f-766b-4865-8b41-cccb4cdf1676',
    'deleted' = False,
    'share_id' = 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'access_type' = 'ip',
    'access_to' = '172.16.20.1',
    'access_level' = 'rw',
 }
]</literal_block>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">replica_snapshots</literal_strong> â€“ List of dictionaries of snapshot instances.
                                                This includes snapshot instances of every snapshot of the share
                                                whose â€˜aggregate_statusâ€™ property was reported to be â€˜availableâ€™
                                                when the share manager initiated this request. Each list member
                                                will have two sub dictionaries: â€˜active_replica_snapshotâ€™ and
                                                â€˜share_replica_snapshotâ€™. The â€˜activeâ€™ replica snapshot corresponds
                                                to the instance of the snapshot on any of the â€˜activeâ€™ replicas of
                                                the share while share_replica_snapshot corresponds to the snapshot
                                                instance for the specific replica being updated. The driver needs
                                                to ensure that this snapshot instance is truly available before
                                                transitioning from â€˜out_of_syncâ€™ to â€˜in_syncâ€™. Snapshots instances
                                                for snapshots that have an â€˜aggregate_statusâ€™ of â€˜creatingâ€™ or
                                                â€˜deletingâ€™ will be polled for in the update_replicated_snapshot
                                                method.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>Example:</paragraph>
                                <literal_block xml:space="preserve"> [
  {
'active_replica_snapshot': {
     'id': '8bda791c-7bb6-4e7b-9b64-fefff85ff13e',
     'share_instance_id': '10e49c3e-aca9-483b-8c2d-1c337b38d6af',
     'status': 'available',
     'provider_location': '/newton/share-snapshot-10e49c3e-aca9',
     ...
    },
 'share_replica_snapshot': {
     'id': '10e49c3e-aca9-483b-8c2d-1c337b38d6af',
     'share_instance_id': 'd487b88d-e428-4230-a465-a800c2cce5f8',
     'status': 'creating',
     'provider_location': None,
        ...
    },
  }
 ]</literal_block>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">share_server</literal_strong> â€“ &lt;models.ShareServer&gt; or None</paragraph>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>replica_state: a str value denoting the replica_state.
                                                Valid values are â€˜in_syncâ€™ and â€˜out_of_syncâ€™ or None (to leave the
                                                current replica_state unchanged).</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
            </section>
            <section ids="replicated-snapshot-interfaces" names="replicated\ snapshot\ interfaces:">
                <title>Replicated Snapshot interfaces:</title>
                <index entries="['single',\ 'ShareDriver\ (class\ in\ manila.share.driver)',\ 'manila.share.driver.ShareDriver',\ '',\ None]"></index>
                <desc desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="" first="False" fullname="ShareDriver" module="manila.share.driver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">ShareDriver</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">driver_handles_share_servers</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Class defines interface of NAS driver.</paragraph>
                        <index entries="['single',\ 'create_replicated_snapshot()\ (ShareDriver\ method)',\ 'manila.share.driver.ShareDriver.create_replicated_snapshot',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.create_replicated_snapshot" ids="manila.share.driver.ShareDriver.create_replicated_snapshot" module="manila.share.driver" names="manila.share.driver.ShareDriver.create_replicated_snapshot"><desc_name xml:space="preserve">create_replicated_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">replica_list</desc_parameter><desc_parameter xml:space="preserve">replica_snapshots</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Create a snapshot on active instance and update across the replicas.</paragraph>
                                <note>
                                    <paragraph>This call is made on the â€˜activeâ€™ replicaâ€™s host. Drivers are
                                        expected to transfer the snapshot created to the respective
                                        replicas.</paragraph>
                                </note>
                                <paragraph>The driver is expected to return model updates to the share manager.
                                    If it was able to confirm the creation of any number of the snapshot
                                    instances passed in this interface, it can set their status to
                                    â€˜availableâ€™ as a cue for the share manager to set the progress attr
                                    to â€˜100%â€™.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> â€“ Current context</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">replica_list</literal_strong> â€“ List of all replicas for a particular share
                                                        The â€˜activeâ€™ replica will have its â€˜replica_stateâ€™ attr set to
                                                        â€˜activeâ€™.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>Example:</paragraph>
                                <literal_block xml:space="preserve">[
    {
    'id': 'd487b88d-e428-4230-a465-a800c2cce5f8',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'in_sync',
        ...
    'share_server_id': '4ce78e7b-0ef6-4730-ac2a-fd2defefbd05',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    {
    'id': '10e49c3e-aca9-483b-8c2d-1c337b38d6af',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'active',
        ...
    'share_server_id': 'f63629b3-e126-4448-bec2-03f788f76094',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    ...
]</literal_block>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">replica_snapshots</literal_strong> â€“ List of dictionaries of snapshot instances.
                                                These snapshot instances track the snapshot across the replicas.
                                                All the instances will have their status attribute set to
                                                â€˜creatingâ€™.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>Example:</paragraph>
                                <literal_block xml:space="preserve"> [
    {
    'id': 'd3931a93-3984-421e-a9e7-d9f71895450a',
    'snapshot_id': '13ee5cb5-fc53-4539-9431-d983b56c5c40',
    'status: 'creating',
    'progress': '0%',
        ...
    },
    {
    'id': '8bda791c-7bb6-4e7b-9b64-fefff85ff13e',
    'snapshot_id': '13ee5cb5-fc53-4539-9431-d983b56c5c40',
    'status: 'creating',
    'progress': '0%',
        ...
    },
    ...
]</literal_block>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">share_server</literal_strong> â€“ &lt;models.ShareServer&gt; or None</paragraph>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>List of dictionaries of snapshot instances.
                                                The dictionaries can contain values that need to be updated on the
                                                database for the snapshot instances being created.</paragraph>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Raises</field_name>
                                        <field_body>
                                            <paragraph>Exception.
                                                Any exception in this method will set all instances to â€˜errorâ€™.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'delete_replicated_snapshot()\ (ShareDriver\ method)',\ 'manila.share.driver.ShareDriver.delete_replicated_snapshot',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.delete_replicated_snapshot" ids="manila.share.driver.ShareDriver.delete_replicated_snapshot" module="manila.share.driver" names="manila.share.driver.ShareDriver.delete_replicated_snapshot"><desc_name xml:space="preserve">delete_replicated_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">replica_list</desc_parameter><desc_parameter xml:space="preserve">replica_snapshots</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Delete a snapshot by deleting its instances across the replicas.</paragraph>
                                <note>
                                    <paragraph>This call is made on the â€˜activeâ€™ replicaâ€™s host, since
                                        drivers may not be able to delete the snapshot from an individual
                                        replica.</paragraph>
                                </note>
                                <paragraph>The driver is expected to return model updates to the share manager.
                                    If it was able to confirm the removal of any number of the snapshot
                                    instances passed in this interface, it can set their status to
                                    â€˜deletedâ€™ as a cue for the share manager to clean up that instance
                                    from the database.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> â€“ Current context</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">replica_list</literal_strong> â€“ List of all replicas for a particular share
                                                        The â€˜activeâ€™ replica will have its â€˜replica_stateâ€™ attr set to
                                                        â€˜activeâ€™.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>Example:</paragraph>
                                <literal_block xml:space="preserve">[
    {
    'id': 'd487b88d-e428-4230-a465-a800c2cce5f8',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'in_sync',
        ...
    'share_server_id': '4ce78e7b-0ef6-4730-ac2a-fd2defefbd05',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    {
    'id': '10e49c3e-aca9-483b-8c2d-1c337b38d6af',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'active',
        ...
    'share_server_id': 'f63629b3-e126-4448-bec2-03f788f76094',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    ...
]</literal_block>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">replica_snapshots</literal_strong> â€“ List of dictionaries of snapshot instances.
                                                These snapshot instances track the snapshot across the replicas.
                                                All the instances will have their status attribute set to
                                                â€˜deletingâ€™.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>Example:</paragraph>
                                <literal_block xml:space="preserve"> [
    {
    'id': 'd3931a93-3984-421e-a9e7-d9f71895450a',
    'snapshot_id': '13ee5cb5-fc53-4539-9431-d983b56c5c40',
    'status': 'deleting',
    'progress': '100%',
        ...
    },
    {
    'id': '8bda791c-7bb6-4e7b-9b64-fefff85ff13e',
    'snapshot_id': '13ee5cb5-fc53-4539-9431-d983b56c5c40',
    'status: 'deleting',
    'progress': '100%',
        ...
    },
    ...
]</literal_block>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">share_server</literal_strong> â€“ &lt;models.ShareServer&gt; or None</paragraph>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>List of dictionaries of snapshot instances.
                                                The dictionaries can contain values that need to be updated on the
                                                database for the snapshot instances being deleted. To confirm the
                                                deletion of the snapshot instance, set the â€˜statusâ€™ attribute of
                                                the instance to â€˜deletedâ€™ (constants.STATUS_DELETED)</paragraph>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Raises</field_name>
                                        <field_body>
                                            <paragraph>Exception.
                                                Any exception in this method will set the status attribute of all
                                                snapshot instances to â€˜error_deletingâ€™.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ 'update_replicated_snapshot()\ (ShareDriver\ method)',\ 'manila.share.driver.ShareDriver.update_replicated_snapshot',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.update_replicated_snapshot" ids="manila.share.driver.ShareDriver.update_replicated_snapshot" module="manila.share.driver" names="manila.share.driver.ShareDriver.update_replicated_snapshot"><desc_name xml:space="preserve">update_replicated_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">replica_list</desc_parameter><desc_parameter xml:space="preserve">share_replica</desc_parameter><desc_parameter xml:space="preserve">replica_snapshots</desc_parameter><desc_parameter xml:space="preserve">replica_snapshot</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Update the status of a snapshot instance that lives on a replica.</paragraph>
                                <note>
                                    <paragraph>For DR and Readable styles of replication, this call is made on
                                        the replicaâ€™s host and not the â€˜activeâ€™ replicaâ€™s host.</paragraph>
                                </note>
                                <paragraph>This method is called periodically by the share manager. It will
                                    query for snapshot instances that track the parent snapshot across
                                    non-â€˜activeâ€™ replicas. Drivers can expect the status of the instance to
                                    be â€˜creatingâ€™ or â€˜deletingâ€™. If the driver sees that a snapshot
                                    instance has been removed from the replicaâ€™s backend and the
                                    instance status was set to â€˜deletingâ€™, it is expected to raise a
                                    SnapshotResourceNotFound exception. All other exceptions will set the
                                    snapshot instance status to â€˜errorâ€™. If the instance was not in
                                    â€˜deletingâ€™ state, raising a SnapshotResourceNotFound will set the
                                    instance status to â€˜errorâ€™.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> â€“ Current context</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">replica_list</literal_strong> â€“ List of all replicas for a particular share
                                                        The â€˜activeâ€™ replica will have its â€˜replica_stateâ€™ attr set to
                                                        â€˜activeâ€™.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>Example:</paragraph>
                                <literal_block xml:space="preserve">[
     {
      'id': 'd487b88d-e428-4230-a465-a800c2cce5f8',
      'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
      'replica_state': 'in_sync',
      ...
      'share_server_id': '4ce78e7b-0ef6-4730-ac2a-fd2defefbd05',
      'share_server': &lt;models.ShareServer&gt; or None,
     },
     {
      'id': '10e49c3e-aca9-483b-8c2d-1c337b38d6af',
      'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
      'replica_state': 'active',
      ...
      'share_server_id': 'f63629b3-e126-4448-bec2-03f788f76094',
      'share_server': &lt;models.ShareServer&gt; or None,
     },
      ...
]</literal_block>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">share_replica</literal_strong> â€“ Share replica dictionary.
                                                This replica is associated with the snapshot instance whose
                                                status is being updated. Replicas in â€˜activeâ€™ replica_state will
                                                not be passed via this parameter.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>Example:</paragraph>
                                <literal_block xml:space="preserve">{
    'id': 'd487b88d-e428-4230-a465-a800c2cce5f8',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'deleted': False,
    'host': 'openstack2@cmodeSSVMNFS1',
    'status': 'available',
    'scheduled_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
    'launched_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
    'terminated_at': None,
    'replica_state': 'in_sync',
    'availability_zone_id': 'e2c2db5c-cb2f-4697-9966-c06fb200cb80',
    'export_locations': [
        models.ShareInstanceExportLocations,
    ],
    'access_rules_status': 'in_sync',
    'share_network_id': '4ccd5318-65f1-11e5-9d70-feff819cdc9f',
    'share_server_id': '4ce78e7b-0ef6-4730-ac2a-fd2defefbd05',
}</literal_block>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">replica_snapshots</literal_strong> â€“ List of dictionaries of snapshot instances.
                                                These snapshot instances track the snapshot across the replicas.
                                                This will include the snapshot instance being updated as well.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>Example:</paragraph>
                                <literal_block xml:space="preserve"> [
    {
    'id': 'd3931a93-3984-421e-a9e7-d9f71895450a',
    'snapshot_id': '13ee5cb5-fc53-4539-9431-d983b56c5c40',
        ...
    },
    {
    'id': '8bda791c-7bb6-4e7b-9b64-fefff85ff13e',
    'snapshot_id': '13ee5cb5-fc53-4539-9431-d983b56c5c40',
        ...
    },
    ...
]</literal_block>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">replica_snapshot</literal_strong> â€“ Dictionary of the snapshot instance.
                                                This is the instance to be updated. It will be in â€˜creatingâ€™ or
                                                â€˜deletingâ€™ state when sent via this parameter.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                                <paragraph>Example:</paragraph>
                                <literal_block xml:space="preserve">{
    'name': 'share-snapshot-18825630-574f-4912-93bb-af4611ef35a2',
    'share_id': 'd487b88d-e428-4230-a465-a800c2cce5f8',
    'share_name': 'share-d487b88d-e428-4230-a465-a800c2cce5f8',
    'status': 'creating',
    'id': '18825630-574f-4912-93bb-af4611ef35a2',
    'deleted': False,
    'created_at': datetime.datetime(2016, 8, 3, 0, 5, 58),
    'share': &lt;models.ShareInstance&gt;,
    'updated_at': datetime.datetime(2016, 8, 3, 0, 5, 58),
    'share_instance_id': 'd487b88d-e428-4230-a465-a800c2cce5f8',
    'snapshot_id': '13ee5cb5-fc53-4539-9431-d983b56c5c40',
    'progress': '0%',
    'deleted_at': None,
    'provider_location': None,
}</literal_block>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">share_server</literal_strong> â€“ &lt;models.ShareServer&gt; or None</paragraph>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>replica_snapshot_model_update: a dictionary.
                                                The dictionary must contain values that need to be updated on the
                                                database for the snapshot instance that represents the snapshot on
                                                the replica.</paragraph>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Raises</field_name>
                                        <field_body>
                                            <paragraph>exception.SnapshotResourceNotFound
                                                Raise this exception for snapshots that are not found on the
                                                backend and their status was â€˜deletingâ€™.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
            </section>
        </section>
    </section>
</document>
