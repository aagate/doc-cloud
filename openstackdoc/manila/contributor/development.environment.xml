<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/manila/doc/source/contributor/development.environment.rst">
    <comment xml:space="preserve">Copyright 2010-2011 United States Government as represented by the
Administrator of the National Aeronautics and Space Administration.
All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.</comment>
    <section ids="setting-up-a-development-environment" names="setting\ up\ a\ development\ environment">
        <title>Setting Up a Development Environment</title>
        <paragraph>This page describes how to setup a working Python development
            environment that can be used in developing manila on Ubuntu, Fedora or
            Mac OS X. These instructions assume you’re already familiar with
            git. Refer to <reference name="Getting the code" refuri="http://wiki.openstack.org/GettingTheCode">Getting the code</reference> for additional information.</paragraph>
        <target ids="getting-the-code" names="getting\ the\ code" refuri="http://wiki.openstack.org/GettingTheCode"></target>
        <paragraph>Following these instructions will allow you to run the manila unit
            tests. If you want to be able to run manila (i.e., create NFS/CIFS shares),
            you will also need to install dependent projects: nova, neutron, cinder and glance.
            For this purpose ‘devstack’ project can be used (A documented shell script to build
            complete OpenStack development environments).
            You can check out <reference name="Setting up a development environment with devstack" refuri="https://docs.openstack.org/manila/latest/devref/development-environment-devstack.html">Setting up a development environment with devstack</reference> for instructions
            on how to enable manila on devstack.</paragraph>
        <target ids="setting-up-a-development-environment-with-devstack" names="setting\ up\ a\ development\ environment\ with\ devstack" refuri="https://docs.openstack.org/manila/latest/devref/development-environment-devstack.html"></target>
        <section ids="virtual-environments" names="virtual\ environments">
            <title>Virtual environments</title>
            <paragraph>Manila development uses <reference name="virtualenv" refuri="http://pypi.python.org/pypi/virtualenv">virtualenv</reference> to track and manage Python
                dependencies while in development and testing. This allows you to
                install all of the Python package dependencies in a virtual
                environment or “virtualenv” (a special subdirectory of your manila
                directory), instead of installing the packages at the system level.</paragraph>
            <note>
                <paragraph>Virtualenv is useful for running the unit tests, but is not
                    typically used for full integration testing or production usage.</paragraph>
            </note>
        </section>
        <section ids="linux-systems" names="linux\ systems">
            <title>Linux Systems</title>
            <note>
                <paragraph>This section is tested for manila on Ubuntu and Fedora-based
                    distributions. Feel free to add notes and change according to
                    your experiences or operating system.</paragraph>
            </note>
            <paragraph>Install the prerequisite packages.</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>On Ubuntu/Debian:</paragraph>
                    <literal_block xml:space="preserve">sudo apt-get install python-dev libssl-dev python-pip \
libmysqlclient-dev libxml2-dev libxslt-dev libpq-dev git \
git-review libffi-dev gettext graphviz libjpeg-dev</literal_block>
                </list_item>
                <list_item>
                    <paragraph>On Fedora 21/RHEL7/Centos7:</paragraph>
                    <literal_block xml:space="preserve">sudo yum install python-devel openssl-devel python-pip mysql-devel \
libxml2-devel libxslt-devel postgresql-devel git git-review \
libffi-devel gettext graphviz gcc libjpeg-turbo-devel \
python-tox python3-devel python3</literal_block>
                </list_item>
            </bullet_list>
            <note>
                <paragraph>If using RHEL and yum reports “No package python-pip available” and “No
                    package git-review available”, use the EPEL software repository.
                    Instructions can be found at <reference name="http://fedoraproject.org/wiki/EPEL/FAQ#howtouse" refuri="http://fedoraproject.org/wiki/EPEL/FAQ#howtouse">http://fedoraproject.org/wiki/EPEL/FAQ#howtouse</reference><target ids="http-fedoraproject-org-wiki-epel-faq-howtouse" names="http://fedoraproject.org/wiki/epel/faq#howtouse" refuri="http://fedoraproject.org/wiki/EPEL/FAQ#howtouse"></target>.</paragraph>
            </note>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>On Fedora 22 and higher:</paragraph>
                    <literal_block xml:space="preserve">sudo dnf install python-devel openssl-devel python-pip mysql-devel \
libxml2-devel libxslt-devel postgresql-devel git git-review \
libffi-devel gettext graphviz gcc libjpeg-turbo-devel \
python-tox python3-devel python3</literal_block>
                </list_item>
            </bullet_list>
            <note>
                <paragraph>Additionally, if using Fedora 23, <literal>redhat-rpm-config</literal> package should be
                    installed so that development virtualenv can be built successfully.</paragraph>
            </note>
        </section>
        <section ids="mac-os-x-systems" names="mac\ os\ x\ systems">
            <title>Mac OS X Systems</title>
            <paragraph>Install virtualenv:</paragraph>
            <literal_block xml:space="preserve">sudo easy_install virtualenv</literal_block>
            <paragraph>Check the version of OpenSSL you have installed:</paragraph>
            <literal_block xml:space="preserve">openssl version</literal_block>
            <paragraph>If you have installed OpenSSL 1.0.0a, which can happen when installing a
                MacPorts package for OpenSSL, you will see an error when running
                <literal>manila.tests.auth_unittest.AuthTestCase.test_209_can_generate_x509</literal>.</paragraph>
            <paragraph>The stock version of OpenSSL that ships with Mac OS X 10.6 (OpenSSL 0.9.8l)
                or Mac OS X 10.7 (OpenSSL 0.9.8r) works fine with manila.</paragraph>
        </section>
        <section dupnames="getting\ the\ code" ids="id1">
            <title>Getting the code</title>
            <paragraph>Grab the code:</paragraph>
            <literal_block xml:space="preserve">git clone https://github.com/openstack/manila.git
cd manila</literal_block>
        </section>
        <section ids="running-unit-tests" names="running\ unit\ tests">
            <title>Running unit tests</title>
            <paragraph>The unit tests will run by default inside a virtualenv in the <literal>.venv</literal>
                directory. Run the unit tests by doing:</paragraph>
            <literal_block xml:space="preserve">./run_tests.sh</literal_block>
            <paragraph>The first time you run them, you will be asked if you want to create a virtual
                environment (hit “y”):</paragraph>
            <literal_block xml:space="preserve">No virtual environment found...create one? (Y/n)</literal_block>
            <paragraph>See <reference internal="True" refuri="unit_tests"><inline classes="doc">Unit Tests</inline></reference> for more details.</paragraph>
            <target refid="virtualenv"></target>
        </section>
        <section ids="manually-installing-and-using-the-virtualenv virtualenv" names="manually\ installing\ and\ using\ the\ virtualenv virtualenv">
            <title>Manually installing and using the virtualenv</title>
            <paragraph>You can manually install the virtual environment instead of having
                <literal>run_tests.sh</literal> do it for you:</paragraph>
            <literal_block xml:space="preserve">python tools/install_venv.py</literal_block>
            <paragraph>This will install all of the Python packages listed in the
                <literal>requirements.txt</literal> file into your virtualenv. There will also be some
                additional packages (pip, distribute, greenlet) that are installed
                by the <literal>tools/install_venv.py</literal> file into the virtualenv.</paragraph>
            <paragraph>If all goes well, you should get a message something like this:</paragraph>
            <literal_block xml:space="preserve">Manila development environment setup is complete.</literal_block>
            <paragraph>To activate the manila virtualenv for the extent of your current shell session
                you can run:</paragraph>
            <literal_block xml:space="preserve">$ source .venv/bin/activate</literal_block>
            <paragraph>Or, if you prefer, you can run commands in the virtualenv on a case by case
                basis by running:</paragraph>
            <literal_block xml:space="preserve">$ tools/with_venv.sh &lt;your command&gt;</literal_block>
        </section>
        <section ids="contributing-your-work" names="contributing\ your\ work">
            <title>Contributing Your Work</title>
            <paragraph>Once your work is complete you may wish to contribute it to the project.  Add
                your name and email address to the <literal>Authors</literal> file, and also to the <literal>.mailmap</literal>
                file if you use multiple email addresses. Your contributions can not be merged
                into trunk unless you are listed in the Authors file. Manila uses the Gerrit
                code review system. For information on how to submit your branch to Gerrit,
                see <reference name="GerritWorkflow" refuri="http://docs.openstack.org/infra/manual/developers.html#development-workflow">GerritWorkflow</reference>.</paragraph>
            <target ids="gerritworkflow" names="gerritworkflow" refuri="http://docs.openstack.org/infra/manual/developers.html#development-workflow"></target>
        </section>
    </section>
</document>
