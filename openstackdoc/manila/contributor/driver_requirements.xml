<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/manila/doc/source/contributor/driver_requirements.rst">
    <comment xml:space="preserve">Copyright (c) 2015 Hitachi Data Systems
All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.</comment>
    <section ids="manila-minimum-requirements-and-features-since-mitaka" names="manila\ minimum\ requirements\ and\ features\ since\ mitaka">
        <title>Manila minimum requirements and features since Mitaka</title>
        <paragraph>In order for a driver to be accepted into manila code base, there are certain
            minimum requirements and features that must be met, in order to ensure
            interoperability and standardized manila functionality among cloud providers.</paragraph>
        <section ids="at-least-one-driver-mode-dhss-true-false" names="at\ least\ one\ driver\ mode\ (dhss\ true/false)">
            <title>At least one driver mode (<reference internal="True" refuri="../reference/glossary#term-dhss"><inline classes="xref std std-term">DHSS</inline></reference> true/false)</title>
            <paragraph>Driver modes determine if the driver is managing network resources
                (<reference internal="True" refuri="../reference/glossary#term-dhss"><inline classes="xref std std-term">DHSS</inline></reference> = true) in an automated way, in order to segregate tenants and
                private networks by making use of manila Share Networks, or if it is up to the
                administrator to manually configure all networks (<reference internal="True" refuri="../reference/glossary#term-dhss"><inline classes="xref std std-term">DHSS</inline></reference> = false) and be
                responsible for segregation, if that is desired. At least one driver mode must
                be supported. In <reference internal="True" refuri="../reference/glossary#term-dhss"><inline classes="xref std std-term">DHSS</inline></reference> = true mode, Share Server entities are used, so
                the driver must implement functions that setup and teardown such servers.</paragraph>
        </section>
        <section ids="at-least-one-file-system-sharing-protocol" names="at\ least\ one\ file\ system\ sharing\ protocol">
            <title>At least one file system sharing protocol</title>
            <paragraph>In order to serve shares as a shared file system service, the driver must
                support at least one file system sharing protocol, which can be a new protocol
                or one of the currently supported protocols. The current list of supported
                protocols is as follows:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>NFS</paragraph>
                </list_item>
                <list_item>
                    <paragraph>CIFS</paragraph>
                </list_item>
                <list_item>
                    <paragraph>GlusterFS</paragraph>
                </list_item>
                <list_item>
                    <paragraph>HDFS</paragraph>
                </list_item>
                <list_item>
                    <paragraph>MapRFS</paragraph>
                </list_item>
                <list_item>
                    <paragraph>CephFS</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="access-rules" names="access\ rules">
            <title>Access rules</title>
            <paragraph>Access rules control how shares are accessible, by whom, and what the level of
                access is. Access rule operations include allowing access and denying access
                to a given share. The authentication type should be based on IP, User and/or
                Certificate. Drivers must support read-write and read-only access levels for each
                supported protocol, either through individual access rules or separate export
                locations.</paragraph>
        </section>
        <section ids="shares" names="shares">
            <title>Shares</title>
            <paragraph>Share servicing is the core functionality of a shared file system service, so
                a driver must be able to create and delete shares.</paragraph>
        </section>
        <section ids="share-extending" names="share\ extending">
            <title>Share extending</title>
            <paragraph>In order to best satisfy cloud service requirements, shares must be elastic, so
                drivers must implement a share extend function that allows shares’ size to be
                increased.</paragraph>
        </section>
        <section ids="capabilities" names="capabilities">
            <title>Capabilities</title>
            <paragraph>In order for manila to function accordingly to the driver being used, the
                driver must provide a set of information to manila, known as capabilities, as
                follows:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>share_backend_name: a name for the backend;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>driver_handles_share_servers: driver mode, whether this driver instance
                        handles share servers, possible values are true or false;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>vendor_name: driver vendor name;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>driver_version: current driver instance version;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>storage_protocol: list of shared file system protocols supported by this
                        driver instance;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>total_capacity_gb: total amount of storage space provided, in GB;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>free_capacity_gb: amount of storage space available for use, in GB;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>reserved_percentage: percentage of total storage space to be kept from being
                        used.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Certain features, if supported by drivers, need to be reported in order to
                function correctly in manila, such as:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>dedupe: whether the backend supports deduplication;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>compression: whether the backend supports compressed shares;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>thin_provisioning: whether the backend is overprovisioning shares;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>pools: list of storage pools managed by this driver instance;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>qos: whether the backend supports quality of service for shares;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>replication_domain: string specifying a common group name for all backends
                        that can replicate between each other;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>replication_type: string specifying the type of replication supported by
                        the driver. Can be one of (‘readable’, ‘writable’ or ‘dr’).</paragraph>
                </list_item>
            </bullet_list>
            <note>
                <paragraph>for more information please see <reference refuri="https://docs.openstack.org/manila/latest/devref/capabilities_and_extra_specs.html">https://docs.openstack.org/manila/latest/devref/capabilities_and_extra_specs.html</reference></paragraph>
            </note>
        </section>
        <section ids="continuous-integration-systems" names="continuous\ integration\ systems">
            <title>Continuous Integration systems</title>
            <paragraph>Every driver vendor must supply a CI system that tests its drivers
                continuously for each patch submitted to OpenStack gerrit. This allows for
                better QA and quicker response and notification for driver vendors when a
                patch submitted affects an existing driver. The CI system must run all
                applicable tempest tests, test all patches Jenkins has posted +1 and post its
                test results.</paragraph>
            <note>
                <paragraph>for more information please see <reference refuri="http://docs.openstack.org/infra/system-config/third_party.html">http://docs.openstack.org/infra/system-config/third_party.html</reference></paragraph>
            </note>
        </section>
        <section ids="unit-tests" names="unit\ tests">
            <title>Unit tests</title>
            <paragraph>All drivers submitted must be contemplated with unit tests covering at least
                90% of the code, preferably 100% if possible. Unit tests must use mock
                framework and be located in-tree using a structure that mirrors the functional
                code, such as directory names and filenames. See template below:</paragraph>
            <block_quote>
                <literal_block xml:space="preserve">manila/[tests/]path/to/brand/new/[test_]driver.py</literal_block>
            </block_quote>
        </section>
        <section ids="documentation" names="documentation">
            <title>Documentation</title>
            <paragraph>Drivers submitted must provide and maintain related documentation on
                openstack-manuals, containing instructions on how to properly install and
                configure. The intended audience for this manual is cloud operators and
                administrators. Also, driver maintainers must update the manila share features
                support mapping documentation found at
                <reference refuri="https://docs.openstack.org/manila/latest/devref/share_back_ends_feature_support_mapping.html">https://docs.openstack.org/manila/latest/devref/share_back_ends_feature_support_mapping.html</reference></paragraph>
        </section>
    </section>
    <section ids="manila-optional-requirements-and-features-since-mitaka" names="manila\ optional\ requirements\ and\ features\ since\ mitaka">
        <title>Manila optional requirements and features since Mitaka</title>
        <paragraph>Additional to the minimum required features supported by manila, other optional
            features can be supported by drivers as they are already supported in manila
            and can be accessed through the API.</paragraph>
        <section ids="snapshots" names="snapshots">
            <title>Snapshots</title>
            <paragraph>Share Snapshots allow for data respective to a particular point in time to be
                saved in order to be used later. In manila API, share snapshots taken can only
                be restored by creating new shares from them, thus the original share remains
                unaffected. If Snapshots are supported by drivers, they must be
                crash-consistent.</paragraph>
        </section>
        <section ids="managing-unmanaging-shares" names="managing/unmanaging\ shares">
            <title>Managing/Unmanaging shares</title>
            <paragraph>If <reference internal="True" refuri="../reference/glossary#term-dhss"><inline classes="xref std std-term">DHSS</inline></reference> = false mode is used, then drivers may implement a function
                that supports reading existing shares in the backend that were not created by
                manila. After the previously existing share is registered in manila, it is
                completely controlled by manila and should not be handled externally anymore.
                Additionally, a function that de-registers such shares from manila but do
                not delete from backend may also be supported.</paragraph>
        </section>
        <section ids="share-shrinking" names="share\ shrinking">
            <title>Share shrinking</title>
            <paragraph>Manila API supports share shrinking, thus a share can be shrunk in a similar
                way it can be extended, but the driver is responsible for making sure no data
                is compromised.</paragraph>
        </section>
        <section ids="share-ensuring" names="share\ ensuring">
            <title>Share ensuring</title>
            <paragraph>In some situations, such as when the driver is restarted, manila attempts to
                perform maintenance on created shares, on the purpose of ensuring previously
                created shares are available and being serviced correctly. The driver can
                implement this function by checking shares’ status and performing maintenance
                operations if needed, such as re-exporting.</paragraph>
        </section>
    </section>
    <section ids="manila-experimental-features-since-mitaka" names="manila\ experimental\ features\ since\ mitaka">
        <title>Manila experimental features since Mitaka</title>
        <paragraph>Some features are initially released as experimental and can be accessed by
            including specific additional HTTP Request headers. Those features are not
            recommended for production cloud environments while in experimental stage.</paragraph>
        <section ids="share-migration" names="share\ migration">
            <title>Share Migration</title>
            <paragraph>Shares can be migrated between different backends and pools. Manila implements
                migration using an approach that works for any manufacturer, but driver vendors
                can implement a better optimized migration function for when migration involves
                backends or pools related to the same vendor.</paragraph>
        </section>
        <section ids="consistency-groups" names="consistency\ groups">
            <title>Consistency Groups</title>
            <paragraph>Shares can be created within Consistency Groups in order to guarantee snapshot
                consistency of multiple shares. In order to make use of this feature, driver
                vendors must report this capability and implement its functions to work
                according to the backend, so the feature can be properly invoked through
                manila API.</paragraph>
        </section>
        <section ids="share-replication" names="share\ replication">
            <title>Share Replication</title>
            <paragraph>Replicas of shares can be created for either data protection (for disaster
                recovery) or for load sharing. In order to utilize this feature, drivers must
                report the <literal>replication_type</literal> they support as a capability and implement
                necessary methods.</paragraph>
            <paragraph>More details can be found at:
                <reference refuri="https://docs.openstack.org/manila/latest/devref/share_replication.html">https://docs.openstack.org/manila/latest/devref/share_replication.html</reference></paragraph>
        </section>
        <section ids="update-used-size-of-shares" names='update\ "used_size"\ of\ shares'>
            <title>Update “used_size” of shares</title>
            <paragraph>Drivers can update, for all the shares created on a particular backend, the
                consumed space in GiB. While the polling interval for drivers to update this
                information is configurable, drivers can choose to submit cached information
                as necessary, but specify a time at which this information was “gathered_at”.</paragraph>
        </section>
    </section>
</document>
