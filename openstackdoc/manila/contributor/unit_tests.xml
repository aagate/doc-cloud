<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/manila/doc/source/contributor/unit_tests.rst">
    <section ids="unit-tests" names="unit\ tests">
        <title>Unit Tests</title>
        <paragraph>Manila contains a suite of unit tests, in the manila/tests directory.</paragraph>
        <paragraph>Any proposed code change will be automatically rejected by the OpenStack
            Jenkins server if the change causes unit test failures.</paragraph>
        <section ids="running-the-tests" names="running\ the\ tests">
            <title>Running the tests</title>
            <paragraph>Run the unit tests by doing:</paragraph>
            <literal_block xml:space="preserve">./run_tests.sh</literal_block>
            <paragraph>This script is a wrapper around the <reference name="nose" refuri="http://code.google.com/p/python-nose/">nose</reference> testrunner and the <reference name="pep8" refuri="https://github.com/jcrocholl/pep8">pep8</reference> checker.</paragraph>
            <target ids="nose" names="nose" refuri="http://code.google.com/p/python-nose/"></target>
            <target ids="pep8" names="pep8" refuri="https://github.com/jcrocholl/pep8"></target>
        </section>
        <section ids="flags" names="flags">
            <title>Flags</title>
            <paragraph>The <literal>run_tests.sh</literal> script supports several flags. You can view a list of
                flags by doing:</paragraph>
            <literal_block xml:space="preserve">run_tests.sh -h</literal_block>
            <paragraph>This will show the following help information:</paragraph>
            <literal_block xml:space="preserve">Usage: ./run_tests.sh [OPTION]...
Run manila's test suite(s)

  -V, --virtual-env        Always use virtualenv.  Install automatically if not present
  -N, --no-virtual-env     Don't use virtualenv.  Run tests in local environment
  -s, --no-site-packages   Isolate the virtualenv from the global Python environment
  -r, --recreate-db        Recreate the test database (deprecated, as this is now the default).
  -n, --no-recreate-db     Don't recreate the test database.
  -x, --stop               Stop running tests after the first error or failure.
  -f, --force              Force a clean re-build of the virtual environment. Useful when dependencies have been added.
  -p, --pep8               Just run pep8
  -P, --no-pep8            Don't run pep8
  -c, --coverage           Generate coverage report
  -h, --help               Print this usage message
  --hide-elapsed           Don't print the elapsed time for each test along with slow test list</literal_block>
            <paragraph>Because <literal>run_tests.sh</literal> is a wrapper around nose, it also accepts the same
                flags as nosetests. See the <reference name="nose options documentation" refuri="http://readthedocs.org/docs/nose/en/latest/usage.html#options">nose options documentation</reference> for details about
                these additional flags.</paragraph>
            <target ids="nose-options-documentation" names="nose\ options\ documentation" refuri="http://readthedocs.org/docs/nose/en/latest/usage.html#options"></target>
        </section>
        <section ids="running-a-subset-of-tests" names="running\ a\ subset\ of\ tests">
            <title>Running a subset of tests</title>
            <paragraph>Instead of running all tests, you can specify an individual directory, file,
                class, or method that contains test code.</paragraph>
            <paragraph>To run the tests in the <literal>manila/tests/scheduler</literal> directory:</paragraph>
            <literal_block xml:space="preserve">./run_tests.sh scheduler</literal_block>
            <paragraph>To run the tests in the <literal>manila/tests/test_libvirt.py</literal> file:</paragraph>
            <literal_block xml:space="preserve">./run_tests.sh test_libvirt</literal_block>
            <paragraph>To run the tests in the <title_reference>HostStateTestCase</title_reference> class in
                <literal>manila/tests/test_libvirt.py</literal>:</paragraph>
            <literal_block xml:space="preserve">./run_tests.sh test_libvirt:HostStateTestCase</literal_block>
            <paragraph>To run the <title_reference>ToPrimitiveTestCase.test_dict</title_reference> test method in
                <literal>manila/tests/test_utils.py</literal>:</paragraph>
            <literal_block xml:space="preserve">./run_tests.sh test_utils:ToPrimitiveTestCase.test_dict</literal_block>
        </section>
        <section ids="suppressing-logging-output-when-tests-fail" names="suppressing\ logging\ output\ when\ tests\ fail">
            <title>Suppressing logging output when tests fail</title>
            <paragraph>By default, when one or more unit test fails, all of the data sent to the
                logger during the failed tests will appear on standard output, which typically
                consists of many lines of texts. The logging output can make it difficult to
                identify which specific tests have failed, unless your terminal has a large
                scrollback buffer or you have redirected output to a file.</paragraph>
            <paragraph>You can suppress the logging output by calling <literal>run_tests.sh</literal> with the nose
                flag:</paragraph>
            <literal_block xml:space="preserve">--nologcapture</literal_block>
        </section>
        <section ids="virtualenv" names="virtualenv">
            <title>Virtualenv</title>
            <paragraph>By default, the tests use the Python packages installed inside a
                virtualenv <footnote_reference auto="1" ids="id1" refid="f1">1</footnote_reference>. (This is equivalent to using the <literal>-V, --virtualenv</literal> flag).
                If the virtualenv does not exist, it will be created the first time the tests are run.</paragraph>
            <paragraph>If you wish to recreate the virtualenv, call <literal>run_tests.sh</literal> with the flag:</paragraph>
            <literal_block xml:space="preserve">-f, --force</literal_block>
            <paragraph>Recreating the virtualenv is useful if the package dependencies have changed
                since the virtualenv was last created. If the <literal>requirements.txt</literal> or
                <literal>tools/install_venv.py</literal> files have changed, it’s a good idea to recreate the
                virtualenv.</paragraph>
            <paragraph>By default, the unit tests will see both the packages in the virtualenv and
                the packages that have been installed in the Python global environment. In
                some cases, the packages in the Python global environment may cause a conflict
                with the packages in the virtualenv. If this occurs, you can isolate the
                virtualenv from the global environment by using the flag:</paragraph>
            <literal_block xml:space="preserve">-s, --no-site packages</literal_block>
            <paragraph>If you do not wish to use a virtualenv at all, use the flag:</paragraph>
            <literal_block xml:space="preserve">-N, --no-virtual-env</literal_block>
        </section>
        <section ids="database" names="database">
            <title>Database</title>
            <paragraph>Some of the unit tests make queries against an sqlite database <footnote_reference auto="1" ids="id2" refid="f2">2</footnote_reference>. By
                default, the test database (<literal>tests.sqlite</literal>) is deleted and recreated each
                time <literal>run_tests.sh</literal> is invoked (This is equivalent to using the
                <literal>-r, --recreate-db</literal> flag). To reduce testing time if a database already
                exists it can be reused by using the flag:</paragraph>
            <literal_block xml:space="preserve">-n, --no-recreate-db</literal_block>
            <paragraph>Reusing an existing database may cause tests to fail if the schema has
                changed. If any files in the <literal>manila/db/sqlalchemy</literal> have changed, it’s a good
                idea to recreate the test database.</paragraph>
        </section>
        <section ids="gotchas" names="gotchas">
            <title>Gotchas</title>
            <paragraph><strong>Running Tests from Shared Folders</strong></paragraph>
            <paragraph>If you are running the unit tests from a shared folder, you may see tests start
                to fail or stop completely as a result of Python lockfile issues <footnote_reference auto="1" ids="id3" refid="f3">3</footnote_reference>. You
                can get around this by manually setting or updating the following line in
                <literal>manila/tests/conf_fixture.py</literal>:</paragraph>
            <literal_block xml:space="preserve">FLAGS['lock_path'].SetDefault('/tmp')</literal_block>
            <paragraph>Note that you may use any location (not just <literal>/tmp</literal>!) as long as it is not
                a shared folder.</paragraph>
            <rubric>Footnotes</rubric>
            <footnote auto="1" backrefs="id1" ids="f1" names="f1">
                <label>1</label>
                <paragraph>See <reference internal="True" refuri="development.environment"><inline classes="doc">Setting Up a Development Environment</inline></reference> for more details about the use of
                    virtualenv.</paragraph>
            </footnote>
            <footnote auto="1" backrefs="id2" ids="f2" names="f2">
                <label>2</label>
                <paragraph>There is an effort underway to use a fake DB implementation for the
                    unit tests. See <reference refuri="https://lists.launchpad.net/openstack/msg05604.html">https://lists.launchpad.net/openstack/msg05604.html</reference></paragraph>
            </footnote>
            <footnote auto="1" backrefs="id3" ids="f3" names="f3">
                <label>3</label>
                <paragraph>See Vish’s comment in this bug report: <reference refuri="https://bugs.launchpad.net/manila/+bug/882933">https://bugs.launchpad.net/manila/+bug/882933</reference></paragraph>
            </footnote>
        </section>
    </section>
</document>
