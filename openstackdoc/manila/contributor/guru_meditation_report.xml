<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/manila/doc/source/contributor/guru_meditation_report.rst">
    <comment xml:space="preserve">Copyright (c) 2017 Fiberhome Telecommunication Technologies Co.,LTD
All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.</comment>
    <section ids="guru-meditation-reports" names="guru\ meditation\ reports">
        <title>Guru Meditation Reports</title>
        <paragraph>Manila contains a mechanism whereby developers and system administrators can
            generate a report about the state of a running Manila executable.
            This report is called a <emphasis>Guru Meditation Report</emphasis> (<emphasis>GMR</emphasis> for short).</paragraph>
        <section ids="generating-a-gmr" names="generating\ a\ gmr">
            <title>Generating a GMR</title>
            <paragraph>A <emphasis>GMR</emphasis> can be generated by sending the <emphasis>SIGUSR1/SIGUSR2</emphasis> signal to any Manila
                process with support (see below).
                The <emphasis>GMR</emphasis> will then output to standard error for that particular process.</paragraph>
            <paragraph>For example, suppose that <literal>manila-api</literal> has process id <literal>8675</literal>, and was run
                with <literal>2&gt;/var/log/manila/manila-api-err.log</literal>.
                Then, <literal>kill -SIGUSR1 8675</literal> will trigger the Guru Meditation report to be
                printed to <literal>/var/log/manila/manila-api-err.log</literal>.</paragraph>
            <paragraph>It could save these reports to a well known directory for later analysis by
                the sysadmin or automated bug analysis tools. To configure <emphasis>GMR</emphasis> you have to
                add the following section to manila.conf:</paragraph>
            <paragraph>[oslo_reports]
                log_dir = ‘/path/to/logs/dir’</paragraph>
            <paragraph>There is other way to trigger a generation of report, user should add
                a configuration in Manila’s conf file:</paragraph>
            <literal_block xml:space="preserve">[oslo_reports]
file_event_handler=['The path to a file to watch for changes to trigger '
                    'the reports, instead of signals. Setting this option '
                    'disables the signal trigger for the reports.']
file_event_handler_interval=['How many seconds to wait between polls when '
                             'file_event_handler is set, default value '
                             'is 1']</literal_block>
            <paragraph>a <emphasis>GMR</emphasis> can be generated by “touch”ing the file which was specified in
                file_event_handler. The <emphasis>GMR</emphasis> will then output to standard error for
                that particular process.</paragraph>
            <paragraph>For example, suppose that <literal>manila-api</literal> was run with
                <literal>2&gt;/var/log/manila/manila-api-err.log</literal>, and the file path is
                <literal>/tmp/guru_report</literal>.
                Then, <literal>touch /tmp/guru_report</literal> will trigger the Guru Meditation report to be
                printed to <literal>/var/log/manila/manila-api-err.log</literal>.</paragraph>
        </section>
        <section ids="structure-of-a-gmr" names="structure\ of\ a\ gmr">
            <title>Structure of a GMR</title>
            <paragraph>The <emphasis>GMR</emphasis> is designed to be extensible; any particular executable may add
                its own sections.  However, the base <emphasis>GMR</emphasis> consists of several sections:</paragraph>
            <definition_list>
                <definition_list_item>
                    <term>Package</term>
                    <definition>
                        <paragraph>Shows information about the package to which this process belongs,
                            including version information</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term>Threads</term>
                    <definition>
                        <paragraph>Shows stack traces and thread ids for each of the threads within this process</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term>Green Threads</term>
                    <definition>
                        <paragraph>Shows stack traces for each of the green threads within this process
                            (green threads don’t have thread ids)</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term>Configuration</term>
                    <definition>
                        <paragraph>Lists all the configuration options currently accessible via the CONF object
                            for the current process</paragraph>
                    </definition>
                </definition_list_item>
            </definition_list>
        </section>
        <section ids="adding-support-for-gmrs-to-new-executables" names="adding\ support\ for\ gmrs\ to\ new\ executables">
            <title>Adding Support for GMRs to New Executables</title>
            <paragraph>Adding support for a <emphasis>GMR</emphasis> to a given executable is fairly easy.</paragraph>
            <paragraph>First import the module (currently residing in oslo.reports), as well as the
                Manila version module:</paragraph>
            <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">from oslo_reports import guru_meditation_report as gmr
from manila import version</literal_block>
            <paragraph>Then, register any additional sections (optional):</paragraph>
            <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">TextGuruMeditation.register_section('Some Special Section',
                                    some_section_generator)</literal_block>
            <paragraph>Finally (under main), before running the “main loop” of the executable
                (usually <literal>service.server(server)</literal> or something similar), register the <emphasis>GMR</emphasis>
                hook:</paragraph>
            <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">TextGuruMeditation.setup_autorun(version)</literal_block>
        </section>
        <section ids="extending-the-gmr" names="extending\ the\ gmr">
            <title>Extending the GMR</title>
            <paragraph>As mentioned above, additional sections can be added to the GMR for a
                particular executable.  For more information, see the inline documentation
                about oslo.reports:
                <reference name="oslo.reports" refuri="https://docs.openstack.org/oslo.reports/latest/">oslo.reports</reference><target ids="oslo-reports" names="oslo.reports" refuri="https://docs.openstack.org/oslo.reports/latest/"></target></paragraph>
        </section>
    </section>
</document>
