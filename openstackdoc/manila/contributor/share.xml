<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/manila/doc/source/contributor/share.rst">
    <comment xml:space="preserve">Copyright 2010-2011 United States Government as represented by the
Administrator of the National Aeronautics and Space Administration.
All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.</comment>
    <section ids="shared-filesystems" names="shared\ filesystems">
        <title>Shared Filesystems</title>
        <section ids="the-manila-share-manager-module" names="the\ manila.share.manager\ module">
            <title>The <literal classes="xref py py-mod">manila.share.manager</literal> Module</title>
            <paragraph>NAS share manager managers creating shares and access rights.</paragraph>
            <paragraph><strong>Related Flags</strong></paragraph>
            <field_list>
                <field>
                    <field_name>share_driver</field_name>
                    <field_body>
                        <paragraph>Used by <literal classes="xref py py-class">ShareManager</literal>.</paragraph>
                    </field_body>
                </field>
            </field_list>
            <index entries=""></index>
            <desc desctype="class" domain="py" noindex="True" objtype="class">
                <desc_signature class="" first="False" fullname="ShareManager" module="manila.share.manager"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">ShareManager</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">share_driver=None</desc_parameter><desc_parameter xml:space="preserve">service_name=None</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">manila.manager.SchedulerDependentManager</literal></paragraph>
                    <paragraph>Manages NAS storages.</paragraph>
                    <index entries=""></index>
                    <desc desctype="attribute" domain="py" noindex="True" objtype="attribute">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.RPC_API_VERSION" module="manila.share.manager"><desc_name xml:space="preserve">RPC_API_VERSION</desc_name><desc_annotation xml:space="preserve"> = '1.18'</desc_annotation></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.connection_get_info" module="manila.share.manager"><desc_name xml:space="preserve">connection_get_info</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_instance_id</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.create_replicated_snapshot" module="manila.share.manager"><desc_name xml:space="preserve">create_replicated_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.create_share_group" module="manila.share.manager"><desc_name xml:space="preserve">create_share_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_group_id</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.create_share_group_snapshot" module="manila.share.manager"><desc_name xml:space="preserve">create_share_group_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_group_snapshot_id</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.create_share_instance" module="manila.share.manager"><desc_name xml:space="preserve">create_share_instance</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_instance_id</desc_parameter><desc_parameter xml:space="preserve">request_spec=None</desc_parameter><desc_parameter xml:space="preserve">filter_properties=None</desc_parameter><desc_parameter xml:space="preserve">snapshot_id=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Creates a share instance.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.create_share_replica" module="manila.share.manager"><desc_name xml:space="preserve">create_share_replica</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.create_share_server" module="manila.share.manager"><desc_name xml:space="preserve">create_share_server</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_server_id</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Invoked to create a share server in this backend.</paragraph>
                            <paragraph>This method is invoked to create the share server defined in the model
                                obtained by the supplied id.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – The ‘context.RequestContext’ object for the request.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_server_id</literal_strong> – The id of the server to be created.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.create_snapshot" module="manila.share.manager"><desc_name xml:space="preserve">create_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_id</desc_parameter><desc_parameter xml:space="preserve">snapshot_id</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create snapshot for share.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.delete_free_share_servers" module="manila.share.manager"><desc_name xml:space="preserve">delete_free_share_servers</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctxt</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.delete_replicated_snapshot" module="manila.share.manager"><desc_name xml:space="preserve">delete_replicated_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.delete_share_group" module="manila.share.manager"><desc_name xml:space="preserve">delete_share_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_group_id</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.delete_share_group_snapshot" module="manila.share.manager"><desc_name xml:space="preserve">delete_share_group_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_group_snapshot_id</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.delete_share_instance" module="manila.share.manager"><desc_name xml:space="preserve">delete_share_instance</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_instance_id</desc_parameter><desc_parameter xml:space="preserve">force=False</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Delete a share instance.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.delete_share_replica" module="manila.share.manager"><desc_name xml:space="preserve">delete_share_replica</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.delete_share_server" module="manila.share.manager"><desc_name xml:space="preserve">delete_share_server</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_server</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.delete_snapshot" module="manila.share.manager"><desc_name xml:space="preserve">delete_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot_id</desc_parameter><desc_parameter xml:space="preserve">force=False</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Delete share snapshot.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.extend_share" module="manila.share.manager"><desc_name xml:space="preserve">extend_share</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_id</desc_parameter><desc_parameter xml:space="preserve">new_size</desc_parameter><desc_parameter xml:space="preserve">reservations</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.init_host" module="manila.share.manager"><desc_name xml:space="preserve">init_host</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Initialization for a standalone service.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.manage_share" module="manila.share.manager"><desc_name xml:space="preserve">manage_share</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_id</desc_parameter><desc_parameter xml:space="preserve">driver_options</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.manage_snapshot" module="manila.share.manager"><desc_name xml:space="preserve">manage_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot_id</desc_parameter><desc_parameter xml:space="preserve">driver_options</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.migration_cancel" module="manila.share.manager"><desc_name xml:space="preserve">migration_cancel</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">src_instance_id</desc_parameter><desc_parameter xml:space="preserve">dest_instance_id</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.migration_complete" module="manila.share.manager"><desc_name xml:space="preserve">migration_complete</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">src_instance_id</desc_parameter><desc_parameter xml:space="preserve">dest_instance_id</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.migration_driver_continue" module="manila.share.manager"><desc_name xml:space="preserve">migration_driver_continue</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Invokes driver to continue migration of shares.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.migration_get_progress" module="manila.share.manager"><desc_name xml:space="preserve">migration_get_progress</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">src_instance_id</desc_parameter><desc_parameter xml:space="preserve">dest_instance_id</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.migration_start" module="manila.share.manager"><desc_name xml:space="preserve">migration_start</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_id</desc_parameter><desc_parameter xml:space="preserve">dest_host</desc_parameter><desc_parameter xml:space="preserve">force_host_assisted_migration</desc_parameter><desc_parameter xml:space="preserve">preserve_metadata</desc_parameter><desc_parameter xml:space="preserve">writable</desc_parameter><desc_parameter xml:space="preserve">nondisruptive</desc_parameter><desc_parameter xml:space="preserve">preserve_snapshots</desc_parameter><desc_parameter xml:space="preserve">new_share_network_id=None</desc_parameter><desc_parameter xml:space="preserve">new_share_type_id=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Migrates a share from current host to another host.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.periodic_share_replica_snapshot_update" module="manila.share.manager"><desc_name xml:space="preserve">periodic_share_replica_snapshot_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.periodic_share_replica_update" module="manila.share.manager"><desc_name xml:space="preserve">periodic_share_replica_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.promote_share_replica" module="manila.share.manager"><desc_name xml:space="preserve">promote_share_replica</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.provide_share_server" module="manila.share.manager"><desc_name xml:space="preserve">provide_share_server</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_instance_id</desc_parameter><desc_parameter xml:space="preserve">share_network_id</desc_parameter><desc_parameter xml:space="preserve">snapshot_id=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Invoked to provide a compatible share server.</paragraph>
                            <paragraph>This method is invoked to find a compatible share server among the
                                existing ones or create a share server database instance with the share
                                server properties that will be used to create the share server later.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – The ‘context.RequestContext’ object for the request.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_instance_id</literal_strong> – The id of the share instance whose model
                                                    attributes will be used to provide the share server.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_network_id</literal_strong> – The id of the share network the share server
                                                    to be provided has to be related to.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">snapshot_id</literal_strong> – The id of the snapshot to be used to obtain the
                                                    share server if applicable.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The id of the share server that is being provided.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.publish_service_capabilities" module="manila.share.manager"><desc_name xml:space="preserve">publish_service_capabilities</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Collect driver status and then publish it.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.revert_to_snapshot" module="manila.share.manager"><desc_name xml:space="preserve">revert_to_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot_id</desc_parameter><desc_parameter xml:space="preserve">reservations</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.shrink_share" module="manila.share.manager"><desc_name xml:space="preserve">shrink_share</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_id</desc_parameter><desc_parameter xml:space="preserve">new_size</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.snapshot_update_access" module="manila.share.manager"><desc_name xml:space="preserve">snapshot_update_access</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot_instance_id</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.unmanage_share" module="manila.share.manager"><desc_name xml:space="preserve">unmanage_share</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_id</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.unmanage_snapshot" module="manila.share.manager"><desc_name xml:space="preserve">unmanage_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot_id</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.update_access" module="manila.share.manager"><desc_name xml:space="preserve">update_access</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_instance_id</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Allow/Deny access to some share.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.update_share_replica" module="manila.share.manager"><desc_name xml:space="preserve">update_share_replica</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_replica_id</desc_parameter><desc_parameter xml:space="preserve">share_id=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Initiated by the force_update API.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareManager" first="False" fullname="ShareManager.update_share_usage_size" module="manila.share.manager"><desc_name xml:space="preserve">update_share_usage_size</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Invokes driver to gather usage size of shares.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="function" domain="py" noindex="True" objtype="function">
                <desc_signature class="" first="False" fullname="add_hooks" module="manila.share.manager"><desc_name xml:space="preserve">add_hooks</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">f</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Hook decorator to perform action before and after a share method call</paragraph>
                    <paragraph>The hook decorator can perform actions before some share driver methods
                        calls and after a call with results of driver call and preceding hook call.</paragraph>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="function" domain="py" noindex="True" objtype="function">
                <desc_signature class="" first="False" fullname="locked_share_replica_operation" module="manila.share.manager"><desc_name xml:space="preserve">locked_share_replica_operation</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">operation</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Lock decorator for share replica operations.</paragraph>
                    <paragraph>Takes a named lock prior to executing the operation. The lock is named with
                        the id of the share to which the replica belongs.</paragraph>
                    <paragraph>Intended use:
                        If a replica operation uses this decorator, it will block actions on
                        all share replicas of the share until the named lock is free. This is
                        used to protect concurrent operations on replicas of the same share e.g.
                        promote ReplicaA while deleting ReplicaB, both belonging to the same share.</paragraph>
                </desc_content>
            </desc>
        </section>
        <section ids="the-manila-share-driver-module" names="the\ manila.share.driver\ module">
            <title>The <literal classes="xref py py-mod">manila.share.driver</literal> Module</title>
            <paragraph>Drivers for shares.</paragraph>
            <index entries=""></index>
            <desc desctype="class" domain="py" noindex="True" objtype="class">
                <desc_signature class="" first="False" fullname="ExecuteMixin" module="manila.share.driver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">ExecuteMixin</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Provides an executable functionality to a driver class.</paragraph>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ExecuteMixin" first="False" fullname="ExecuteMixin.init_execute_mixin" module="manila.share.driver"><desc_name xml:space="preserve">init_execute_mixin</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ExecuteMixin" first="False" fullname="ExecuteMixin.set_execute" module="manila.share.driver"><desc_name xml:space="preserve">set_execute</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">execute</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="class" domain="py" noindex="True" objtype="class">
                <desc_signature class="" first="False" fullname="GaneshaMixin" module="manila.share.driver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">GaneshaMixin</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Augment derived classes with Ganesha configuration.</paragraph>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="GaneshaMixin" first="False" fullname="GaneshaMixin.init_ganesha_mixin" module="manila.share.driver"><desc_name xml:space="preserve">init_ganesha_mixin</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="class" domain="py" noindex="True" objtype="class">
                <desc_signature class="" first="False" fullname="ShareDriver" module="manila.share.driver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">ShareDriver</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">driver_handles_share_servers</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Class defines interface of NAS driver.</paragraph>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.add_ip_version_capability" module="manila.share.driver"><desc_name xml:space="preserve">add_ip_version_capability</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">data</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Add IP version support capabilities.</paragraph>
                            <paragraph>When DHSS is true, the capabilities are determined by driver
                                and configured network plugin.
                                When DHSS is false, the capabilities are determined by driver and its
                                configuration.
                                :param data: the capability dictionary
                                :returns: capability data</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="attribute" domain="py" noindex="True" objtype="attribute">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.admin_network_api" module="manila.share.driver"><desc_name xml:space="preserve">admin_network_api</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.allocate_admin_network" module="manila.share.driver"><desc_name xml:space="preserve">allocate_admin_network</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_server</desc_parameter><desc_parameter xml:space="preserve">count=None</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Allocate admin network resources using given network information.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.allocate_network" module="manila.share.driver"><desc_name xml:space="preserve">allocate_network</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_server</desc_parameter><desc_parameter xml:space="preserve">share_network</desc_parameter><desc_parameter xml:space="preserve">count=None</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Allocate network resources using given network information.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.allow_access" module="manila.share.driver"><desc_name xml:space="preserve">allow_access</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share</desc_parameter><desc_parameter xml:space="preserve">access</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Allow access to the share.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.check_for_setup_error" module="manila.share.driver"><desc_name xml:space="preserve">check_for_setup_error</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Check for setup error.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.choose_share_server_compatible_with_share" module="manila.share.driver"><desc_name xml:space="preserve">choose_share_server_compatible_with_share</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_servers</desc_parameter><desc_parameter xml:space="preserve">share</desc_parameter><desc_parameter xml:space="preserve">snapshot=None</desc_parameter><desc_parameter xml:space="preserve">share_group=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Method that allows driver to choose share server for provided share.</paragraph>
                            <paragraph>If compatible share-server is not found, method should return None.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – Current context</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_servers</literal_strong> – list with share-server models</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share</literal_strong> – share model</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">snapshot</literal_strong> – snapshot model</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_group</literal_strong> – ShareGroup model with shares</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>share-server or None</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.choose_share_server_compatible_with_share_group" module="manila.share.driver"><desc_name xml:space="preserve">choose_share_server_compatible_with_share_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_servers</desc_parameter><desc_parameter xml:space="preserve">share_group_ref</desc_parameter><desc_parameter xml:space="preserve">share_group_snapshot=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.connection_get_info" module="manila.share.driver"><desc_name xml:space="preserve">connection_get_info</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Is called to provide necessary generic migration logic.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – The ‘context.RequestContext’ object for the request.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share</literal_strong> – Reference to the share being migrated.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_server</literal_strong> – Share server model or None.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>A dictionary with migration information.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.create_replica" module="manila.share.driver"><desc_name xml:space="preserve">create_replica</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">replica_list</desc_parameter><desc_parameter xml:space="preserve">new_replica</desc_parameter><desc_parameter xml:space="preserve">access_rules</desc_parameter><desc_parameter xml:space="preserve">replica_snapshots</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Replicate the active replica to a new replica on this backend.</paragraph>
                            <note>
                                <paragraph>This call is made on the host that the new replica is being created
                                    upon.</paragraph>
                            </note>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – Current context</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">replica_list</literal_strong> – List of all replicas for a particular share.
                                                    This list also contains the replica to be created. The ‘active’
                                                    replica will have its ‘replica_state’ attr set to ‘active’.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve">[
    {
    'id': 'd487b88d-e428-4230-a465-a800c2cce5f8',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'in_sync',
        ...
    'share_server_id': '4ce78e7b-0ef6-4730-ac2a-fd2defefbd05',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    {
    'id': '10e49c3e-aca9-483b-8c2d-1c337b38d6af',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'active',
        ...
    'share_server_id': 'f63629b3-e126-4448-bec2-03f788f76094',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    {
    'id': 'e82ff8b6-65f0-11e5-9d70-feff819cdc9f',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'in_sync',
        ...
    'share_server_id': '07574742-67ea-4dfd-9844-9fbd8ada3d87',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    ...
]</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">new_replica</literal_strong> – The share replica dictionary.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve">{
    'id': 'e82ff8b6-65f0-11e5-9d70-feff819cdc9f',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'deleted': False,
    'host': 'openstack2@cmodeSSVMNFS2',
    'status': 'creating',
    'scheduled_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
    'launched_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
    'terminated_at': None,
    'replica_state': 'out_of_sync',
    'availability_zone_id': 'f6e146d0-65f0-11e5-9d70-feff819cdc9f',
    'export_locations': [
        models.ShareInstanceExportLocations,
    ],
    'access_rules_status': 'out_of_sync',
    'share_network_id': '4ccd5318-65f1-11e5-9d70-feff819cdc9f',
    'share_server_id': 'e6155221-ea00-49ef-abf9-9f89b7dd900a',
    'share_server': &lt;models.ShareServer&gt; or None,
}</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">access_rules</literal_strong> – A list of access rules.
                                            These are rules that other instances of the share already obey.
                                            Drivers are expected to apply access rules to the new replica or
                                            disregard access rules that don’t apply.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve">[
 {
    'id': 'f0875f6f-766b-4865-8b41-cccb4cdf1676',
    'deleted' = False,
    'share_id' = 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'access_type' = 'ip',
    'access_to' = '172.16.20.1',
    'access_level' = 'rw',
 }
]</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">replica_snapshots</literal_strong> – List of dictionaries of snapshot instances.
                                            This includes snapshot instances of every snapshot of the share
                                            whose ‘aggregate_status’ property was reported to be ‘available’
                                            when the share manager initiated this request. Each list member
                                            will have two sub dictionaries: ‘active_replica_snapshot’ and
                                            ‘share_replica_snapshot’. The ‘active’ replica snapshot corresponds
                                            to the instance of the snapshot on any of the ‘active’ replicas of
                                            the share while share_replica_snapshot corresponds to the snapshot
                                            instance for the specific replica that will need to exist on the
                                            new share replica that is being created. The driver needs to ensure
                                            that this snapshot instance is truly available before transitioning
                                            the replica from ‘out_of_sync’ to ‘in_sync’. Snapshots instances
                                            for snapshots that have an ‘aggregate_status’ of ‘creating’ or
                                            ‘deleting’ will be polled for in the <literal>update_replicated_snapshot</literal>
                                            method.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve">[
 {
 'active_replica_snapshot': {
    'id': '8bda791c-7bb6-4e7b-9b64-fefff85ff13e',
    'share_instance_id': '10e49c3e-aca9-483b-8c2d-1c337b38d6af',
    'status': 'available',
    'provider_location': '/newton/share-snapshot-10e49c3e-aca9',
    ...
    },
 'share_replica_snapshot': {
    'id': '',
    'share_instance_id': 'e82ff8b6-65f0-11e5-9d70-feff819cdc9f',
    'status': 'available',
    'provider_location': None,
        ...
    },
 }
]</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">share_server</literal_strong> – &lt;models.ShareServer&gt; or None
                                            Share server of the replica being created.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>None or a dictionary.
                                            The dictionary can contain export_locations replica_state and
                                            access_rules_status. export_locations is a list of paths and
                                            replica_state is one of ‘active’, ‘in_sync’, ‘out_of_sync’ or
                                            ‘error’.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <important>
                                <paragraph>A backend supporting ‘writable’ type replication should return
                                    ‘active’ as the replica_state.</paragraph>
                            </important>
                            <paragraph>Export locations should be in the same format as returned during the
                                <literal>create_share</literal> call.</paragraph>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve">{
    'export_locations': [
        {
            'path': '172.16.20.22/sample/export/path',
             'is_admin_only': False,
             'metadata': {'some_key': 'some_value'},
        },
    ],
     'replica_state': 'in_sync',
     'access_rules_status': 'in_sync',
}</literal_block>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.create_replicated_snapshot" module="manila.share.driver"><desc_name xml:space="preserve">create_replicated_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">replica_list</desc_parameter><desc_parameter xml:space="preserve">replica_snapshots</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create a snapshot on active instance and update across the replicas.</paragraph>
                            <note>
                                <paragraph>This call is made on the ‘active’ replica’s host. Drivers are
                                    expected to transfer the snapshot created to the respective
                                    replicas.</paragraph>
                            </note>
                            <paragraph>The driver is expected to return model updates to the share manager.
                                If it was able to confirm the creation of any number of the snapshot
                                instances passed in this interface, it can set their status to
                                ‘available’ as a cue for the share manager to set the progress attr
                                to ‘100%’.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – Current context</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">replica_list</literal_strong> – List of all replicas for a particular share
                                                    The ‘active’ replica will have its ‘replica_state’ attr set to
                                                    ‘active’.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve">[
    {
    'id': 'd487b88d-e428-4230-a465-a800c2cce5f8',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'in_sync',
        ...
    'share_server_id': '4ce78e7b-0ef6-4730-ac2a-fd2defefbd05',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    {
    'id': '10e49c3e-aca9-483b-8c2d-1c337b38d6af',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'active',
        ...
    'share_server_id': 'f63629b3-e126-4448-bec2-03f788f76094',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    ...
]</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">replica_snapshots</literal_strong> – List of dictionaries of snapshot instances.
                                            These snapshot instances track the snapshot across the replicas.
                                            All the instances will have their status attribute set to
                                            ‘creating’.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve"> [
    {
    'id': 'd3931a93-3984-421e-a9e7-d9f71895450a',
    'snapshot_id': '13ee5cb5-fc53-4539-9431-d983b56c5c40',
    'status: 'creating',
    'progress': '0%',
        ...
    },
    {
    'id': '8bda791c-7bb6-4e7b-9b64-fefff85ff13e',
    'snapshot_id': '13ee5cb5-fc53-4539-9431-d983b56c5c40',
    'status: 'creating',
    'progress': '0%',
        ...
    },
    ...
]</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">share_server</literal_strong> – &lt;models.ShareServer&gt; or None</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>List of dictionaries of snapshot instances.
                                            The dictionaries can contain values that need to be updated on the
                                            database for the snapshot instances being created.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph>Exception.
                                            Any exception in this method will set all instances to ‘error’.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.create_share" module="manila.share.driver"><desc_name xml:space="preserve">create_share</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Is called to create share.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.create_share_from_snapshot" module="manila.share.driver"><desc_name xml:space="preserve">create_share_from_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share</desc_parameter><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Is called to create share from snapshot.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.create_share_group" module="manila.share.driver"><desc_name xml:space="preserve">create_share_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_group_dict</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create a share group.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – </paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_group_dict</literal_strong> – The share group details
                                                    EXAMPLE:
                                                    {
                                                    ‘status’: ‘creating’,
                                                    ‘project_id’: ‘13c0be6290934bd98596cfa004650049’,
                                                    ‘user_id’: ‘a0314a441ca842019b0952224aa39192’,
                                                    ‘description’: None,
                                                    ‘deleted’: ‘False’,
                                                    ‘created_at’: datetime.datetime(2015, 8, 10, 15, 14, 6),
                                                    ‘updated_at’: None,
                                                    ‘source_share_group_snapshot_id’: ‘some_fake_uuid’,
                                                    ‘share_group_type_id’: ‘some_fake_uuid’,
                                                    ‘host’: <reference refuri="mailto:'hostname@backend_name">‘hostname@backend_name</reference>’,
                                                    ‘share_network_id’: None,
                                                    ‘share_server_id’: None,
                                                    ‘deleted_at’: None,
                                                    ‘share_types’: [&lt;models.ShareGroupShareTypeMapping&gt;],
                                                    ‘id’: ‘some_fake_uuid’,
                                                    ‘name’: None
                                                    }</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>(share_group_model_update, share_update_list)
                                            share_group_model_update - a dict containing any values to be
                                            updated for the SG in the database. This value may be None.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.create_share_group_from_share_group_snapshot" module="manila.share.driver"><desc_name xml:space="preserve">create_share_group_from_share_group_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_group_dict</desc_parameter><desc_parameter xml:space="preserve">share_group_snapshot_dict</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create a share group from a share group snapshot.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – </paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_group_dict</literal_strong> – <paragraph>The share group details
                                                        EXAMPLE:
                                                        .. code:</paragraph><literal_block xml:space="preserve">{
'status': 'creating',
'project_id': '13c0be6290934bd98596cfa004650049',
'user_id': 'a0314a441ca842019b0952224aa39192',
'description': None,
'deleted': 'False',
'created_at': datetime.datetime(2015, 8, 10, 15, 14, 6),
'updated_at': None,
'source_share_group_snapshot_id':
    'f6aa3b59-57eb-421e-965c-4e182538e36a',
'host': 'hostname@backend_name',
'deleted_at': None,
'shares': [&lt;models.Share&gt;], # The new shares being created
'share_types': [&lt;models.ShareGroupShareTypeMapping&gt;],
'id': 'some_fake_uuid',
'name': None
}</literal_block></paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_group_snapshot_dict</literal_strong> – <paragraph>The share group snapshot details
                                                        EXAMPLE:
                                                        .. code:</paragraph><literal_block xml:space="preserve">{
'status': 'available',
'project_id': '13c0be6290934bd98596cfa004650049',
'user_id': 'a0314a441ca842019b0952224aa39192',
'description': None,
'deleted': '0',
'created_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
'updated_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
'share_group_id': 'some_fake_uuid',
'share_share_group_snapshot_members': [
    {
     'status': 'available',
     'user_id': 'a0314a441ca842019b0952224aa39192',
     'deleted': 'False',
     'created_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
     'share': &lt;models.Share&gt;,
     'updated_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
     'share_proto': 'NFS',
     'project_id': '13c0be6290934bd98596cfa004650049',
     'share_group_snapshot_id': 'some_fake_uuid',
     'deleted_at': None,
     'id': 'some_fake_uuid',
     'size': 1
    }
],
'deleted_at': None,
'id': 'f6aa3b59-57eb-421e-965c-4e182538e36a',
'name': None
}</literal_block></paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph><paragraph>(share_group_model_update, share_update_list)
                                                share_group_model_update - a dict containing any values to be
                                                updated for the share group in the database. This value may be None</paragraph><paragraph>share_update_list - a list of dictionaries containing dicts for
                                                every share created in the share group. Any share dicts should at a
                                                minimum contain the ‘id’ key and ‘export_locations’.
                                                Export locations should be in the same format as returned by
                                                a share_create. This list may be empty or None. EXAMPLE:
                                                .. code:</paragraph><literal_block xml:space="preserve">[{'id': 'uuid', 'export_locations': [{...}, {...}]}]</literal_block></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.create_share_group_snapshot" module="manila.share.driver"><desc_name xml:space="preserve">create_share_group_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snap_dict</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create a share group snapshot.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – </paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">snap_dict</literal_strong> – <paragraph>The share group snapshot details
                                                        EXAMPLE:
                                                        .. code:</paragraph><literal_block xml:space="preserve">{
'status': 'available',
'project_id': '13c0be6290934bd98596cfa004650049',
'user_id': 'a0314a441ca842019b0952224aa39192',
'description': None,
'deleted': '0',
'created_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
'updated_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
'share_group_id': 'some_fake_uuid',
'share_group_snapshot_members': [
    {
     'status': 'available',
     'share_type_id': 'some_fake_uuid',
     'user_id': 'a0314a441ca842019b0952224aa39192',
     'deleted': 'False',
     'created_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
     'share': &lt;models.Share&gt;,
     'updated_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
     'share_proto': 'NFS',
     'project_id': '13c0be6290934bd98596cfa004650049',
     'share_group_snapshot_id': 'some_fake_uuid',
     'deleted_at': None,
     'share_id': 'some_fake_uuid',
     'id': 'some_fake_uuid',
     'size': 1,
     'provider_location': None,
    }
],
'deleted_at': None,
'id': 'some_fake_uuid',
'name': None
}</literal_block></paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph><paragraph>(share_group_snapshot_update, member_update_list)
                                                share_group_snapshot_update - a dict containing any values to be
                                                updated for the CGSnapshot in the database. This value may be None.</paragraph><paragraph>member_update_list -  a list of dictionaries containing for every
                                                member of the share group snapshot. Each dict should contains
                                                values to be updated for the ShareGroupSnapshotMember in
                                                the database. This list may be empty or None.</paragraph></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.create_snapshot" module="manila.share.driver"><desc_name xml:space="preserve">create_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Is called to create snapshot.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – Current context</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">snapshot</literal_strong> – Snapshot model. Share model could be
                                                    retrieved through snapshot[‘share’].</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_server</literal_strong> – Share server model or None.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>None or a dictionary with key ‘export_locations’ containing
                                            a list of export locations, if snapshots can be mounted.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="attribute" domain="py" noindex="True" objtype="attribute">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.creating_shares_from_snapshots_is_supported" module="manila.share.driver"><desc_name xml:space="preserve">creating_shares_from_snapshots_is_supported</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Calculate default value for create_share_from_snapshot_support.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.deallocate_network" module="manila.share.driver"><desc_name xml:space="preserve">deallocate_network</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_server_id</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Deallocate network resources for the given share server.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.delete_replica" module="manila.share.driver"><desc_name xml:space="preserve">delete_replica</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">replica_list</desc_parameter><desc_parameter xml:space="preserve">replica_snapshots</desc_parameter><desc_parameter xml:space="preserve">replica</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Delete a replica.</paragraph>
                            <note>
                                <paragraph>This call is made on the host that hosts the replica being
                                    deleted.</paragraph>
                            </note>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – Current context</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">replica_list</literal_strong> – List of all replicas for a particular share
                                                    This list also contains the replica to be deleted. The ‘active’
                                                    replica will have its ‘replica_state’ attr set to ‘active’.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve">[
    {
    'id': 'd487b88d-e428-4230-a465-a800c2cce5f8',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'in_sync',
        ...
    'share_server_id': '4ce78e7b-0ef6-4730-ac2a-fd2defefbd05',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    {
    'id': '10e49c3e-aca9-483b-8c2d-1c337b38d6af',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'active',
        ...
    'share_server_id': 'f63629b3-e126-4448-bec2-03f788f76094',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    {
    'id': 'e82ff8b6-65f0-11e5-9d70-feff819cdc9f',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'in_sync',
        ...
    'share_server_id': '07574742-67ea-4dfd-9844-9fbd8ada3d87',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    ...
]</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">replica</literal_strong> – Dictionary of the share replica being deleted.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve">{
    'id': 'e82ff8b6-65f0-11e5-9d70-feff819cdc9f',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'deleted': False,
    'host': 'openstack2@cmodeSSVMNFS2',
    'status': 'available',
    'scheduled_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
    'launched_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
    'terminated_at': None,
    'replica_state': 'in_sync',
    'availability_zone_id': 'f6e146d0-65f0-11e5-9d70-feff819cdc9f',
    'export_locations': [
        models.ShareInstanceExportLocations
    ],
    'access_rules_status': 'out_of_sync',
    'share_network_id': '4ccd5318-65f1-11e5-9d70-feff819cdc9f',
    'share_server_id': '53099868-65f1-11e5-9d70-feff819cdc9f',
    'share_server': &lt;models.ShareServer&gt; or None,
}</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">replica_snapshots</literal_strong> – List of dictionaries of snapshot instances.
                                            The dict contains snapshot instances that are associated with the
                                            share replica being deleted.
                                            No model updates to snapshot instances are possible in this method.
                                            The driver should return when the cleanup is completed on the
                                            backend for both, the snapshots and the replica itself. Drivers
                                            must handle situations where the snapshot may not yet have
                                            finished ‘creating’ on this replica.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve">[
    {
    'id': '89dafd00-0999-4d23-8614-13eaa6b02a3b',
    'snapshot_id': '3ce1caf7-0945-45fd-a320-714973e949d3',
    'status: 'available',
    'share_instance_id': 'e82ff8b6-65f0-11e5-9d70-feff819cdc9f'
        ...
    },
    {
    'id': '8bda791c-7bb6-4e7b-9b64-fefff85ff13e',
    'snapshot_id': '13ee5cb5-fc53-4539-9431-d983b56c5c40',
    'status: 'creating',
    'share_instance_id': 'e82ff8b6-65f0-11e5-9d70-feff819cdc9f'
        ...
    },
    ...
]</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">share_server</literal_strong> – &lt;models.ShareServer&gt; or None
                                            Share server of the replica to be deleted.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>None.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph>Exception.
                                            Any exception raised will set the share replica’s ‘status’ and
                                            ‘replica_state’ attributes to ‘error_deleting’. It will not affect
                                            snapshots belonging to this replica.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.delete_replicated_snapshot" module="manila.share.driver"><desc_name xml:space="preserve">delete_replicated_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">replica_list</desc_parameter><desc_parameter xml:space="preserve">replica_snapshots</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Delete a snapshot by deleting its instances across the replicas.</paragraph>
                            <note>
                                <paragraph>This call is made on the ‘active’ replica’s host, since
                                    drivers may not be able to delete the snapshot from an individual
                                    replica.</paragraph>
                            </note>
                            <paragraph>The driver is expected to return model updates to the share manager.
                                If it was able to confirm the removal of any number of the snapshot
                                instances passed in this interface, it can set their status to
                                ‘deleted’ as a cue for the share manager to clean up that instance
                                from the database.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – Current context</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">replica_list</literal_strong> – List of all replicas for a particular share
                                                    The ‘active’ replica will have its ‘replica_state’ attr set to
                                                    ‘active’.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve">[
    {
    'id': 'd487b88d-e428-4230-a465-a800c2cce5f8',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'in_sync',
        ...
    'share_server_id': '4ce78e7b-0ef6-4730-ac2a-fd2defefbd05',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    {
    'id': '10e49c3e-aca9-483b-8c2d-1c337b38d6af',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'active',
        ...
    'share_server_id': 'f63629b3-e126-4448-bec2-03f788f76094',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    ...
]</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">replica_snapshots</literal_strong> – List of dictionaries of snapshot instances.
                                            These snapshot instances track the snapshot across the replicas.
                                            All the instances will have their status attribute set to
                                            ‘deleting’.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve"> [
    {
    'id': 'd3931a93-3984-421e-a9e7-d9f71895450a',
    'snapshot_id': '13ee5cb5-fc53-4539-9431-d983b56c5c40',
    'status': 'deleting',
    'progress': '100%',
        ...
    },
    {
    'id': '8bda791c-7bb6-4e7b-9b64-fefff85ff13e',
    'snapshot_id': '13ee5cb5-fc53-4539-9431-d983b56c5c40',
    'status: 'deleting',
    'progress': '100%',
        ...
    },
    ...
]</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">share_server</literal_strong> – &lt;models.ShareServer&gt; or None</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>List of dictionaries of snapshot instances.
                                            The dictionaries can contain values that need to be updated on the
                                            database for the snapshot instances being deleted. To confirm the
                                            deletion of the snapshot instance, set the ‘status’ attribute of
                                            the instance to ‘deleted’ (constants.STATUS_DELETED)</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph>Exception.
                                            Any exception in this method will set the status attribute of all
                                            snapshot instances to ‘error_deleting’.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.delete_share" module="manila.share.driver"><desc_name xml:space="preserve">delete_share</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Is called to remove share.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.delete_share_group" module="manila.share.driver"><desc_name xml:space="preserve">delete_share_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_group_dict</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Delete a share group</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – The request context</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_group_dict</literal_strong> – <paragraph>The share group details
                                                        EXAMPLE:
                                                        .. code:</paragraph><literal_block xml:space="preserve">{
'status': 'creating',
'project_id': '13c0be6290934bd98596cfa004650049',
'user_id': 'a0314a441ca842019b0952224aa39192',
'description': None,
'deleted': 'False',
'created_at': datetime.datetime(2015, 8, 10, 15, 14, 6),
'updated_at': None,
'source_share_group_snapshot_id': 'some_fake_uuid',
'share_share_group_type_id': 'some_fake_uuid',
'host': 'hostname@backend_name',
'deleted_at': None,
'shares': [&lt;models.Share&gt;], # The new shares being created
'share_types': [&lt;models.ShareGroupShareTypeMapping&gt;],
'id': 'some_fake_uuid',
'name': None
}</literal_block></paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>share_group_model_update
                                            share_group_model_update - a dict containing any values to be
                                            updated for the group in the database. This value may be None.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.delete_share_group_snapshot" module="manila.share.driver"><desc_name xml:space="preserve">delete_share_group_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snap_dict</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Delete a share group snapshot</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – </paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">snap_dict</literal_strong> – <paragraph>The share group snapshot details
                                                        EXAMPLE:
                                                        .. code:</paragraph><literal_block xml:space="preserve">{
'status': 'available',
'project_id': '13c0be6290934bd98596cfa004650049',
'user_id': 'a0314a441ca842019b0952224aa39192',
'description': None,
'deleted': '0',
'created_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
'updated_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
'share_group_id': 'some_fake_uuid',
'share_group_snapshot_members': [
    {
     'status': 'available',
     'share_type_id': 'some_fake_uuid',
     'share_id': 'some_fake_uuid',
     'user_id': 'a0314a441ca842019b0952224aa39192',
     'deleted': 'False',
     'created_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
     'share': &lt;models.Share&gt;,
     'updated_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
     'share_proto': 'NFS',
     'project_id': '13c0be6290934bd98596cfa004650049',
     'share_group_snapshot_id': 'some_fake_uuid',
     'deleted_at': None,
     'id': 'some_fake_uuid',
     'size': 1,
     'provider_location': 'fake_provider_location_value',
    }
],
'deleted_at': None,
'id': 'f6aa3b59-57eb-421e-965c-4e182538e36a',
'name': None
}</literal_block></paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>(share_group_snapshot_update, member_update_list)
                                            share_group_snapshot_update - a dict containing any values
                                            to be updated for the ShareGroupSnapshot in the database.
                                            This value may be None.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.delete_snapshot" module="manila.share.driver"><desc_name xml:space="preserve">delete_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Is called to remove snapshot.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – Current context</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">snapshot</literal_strong> – Snapshot model. Share model could be
                                                    retrieved through snapshot[‘share’].</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_server</literal_strong> – Share server model or None.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.deny_access" module="manila.share.driver"><desc_name xml:space="preserve">deny_access</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share</desc_parameter><desc_parameter xml:space="preserve">access</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Deny access to the share.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.do_setup" module="manila.share.driver"><desc_name xml:space="preserve">do_setup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Any initialization the share driver does while starting.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="attribute" domain="py" noindex="True" objtype="attribute">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.driver_handles_share_servers" module="manila.share.driver"><desc_name xml:space="preserve">driver_handles_share_servers</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.ensure_share" module="manila.share.driver"><desc_name xml:space="preserve">ensure_share</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Invoked to ensure that share is exported.</paragraph>
                            <paragraph>Driver can use this method to update the list of export locations of
                                the share if it changes. To do that, you should return list with
                                export locations.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>None or list with export locations</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.extend_share" module="manila.share.driver"><desc_name xml:space="preserve">extend_share</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">share</desc_parameter><desc_parameter xml:space="preserve">new_size</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Extends size of existing share.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share</literal_strong> – Share model</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">new_size</literal_strong> – New size of share (new_size &gt; share[‘size’])</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_server</literal_strong> – Optional – Share server model</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.get_admin_network_allocations_number" module="manila.share.driver"><desc_name xml:space="preserve">get_admin_network_allocations_number</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.get_configured_ip_version" module="manila.share.driver"><desc_name xml:space="preserve">get_configured_ip_version</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>“Get Configured IP versions when DHSS is false.</paragraph>
                            <paragraph>The supported versions are returned with list, possible
                                values are: [4], [6] or [4, 6]
                                Each driver could override the method to return the IP version
                                which represents its self configuration.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.get_default_filter_function" module="manila.share.driver"><desc_name xml:space="preserve">get_default_filter_function</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get the default filter_function string.</paragraph>
                            <paragraph>Each driver could overwrite the method to return a well-known
                                default string if it is available.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>None</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.get_default_goodness_function" module="manila.share.driver"><desc_name xml:space="preserve">get_default_goodness_function</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get the default goodness_function string.</paragraph>
                            <paragraph>Each driver could overwrite the method to return a well-known
                                default string if it is available.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>None</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.get_filter_function" module="manila.share.driver"><desc_name xml:space="preserve">get_filter_function</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get filter_function string.</paragraph>
                            <paragraph>Returns either the string from the driver instance or global section
                                in manila.conf. If nothing is specified in manila.conf, then try to
                                find the default filter_function. When None is returned the scheduler
                                will always pass the driver instance.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a filter_function string or None</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.get_goodness_function" module="manila.share.driver"><desc_name xml:space="preserve">get_goodness_function</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get good_function string.</paragraph>
                            <paragraph>Returns either the string from the driver instance or global section
                                in manila.conf. If nothing is specified in manila.conf, then try to
                                find the default goodness_function. When None is returned the scheduler
                                will give the lowest score to the driver instance.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a goodness_function string or None</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.get_network_allocations_number" module="manila.share.driver"><desc_name xml:space="preserve">get_network_allocations_number</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns number of network allocations for creating VIFs.</paragraph>
                            <paragraph>Drivers that use Nova for share servers should return zero (0) here
                                same as Generic driver does.
                                Because Nova will handle network resources allocation.
                                Drivers that handle networking itself should calculate it according
                                to their own requirements. It can have 1+ network interfaces.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.get_periodic_hook_data" module="manila.share.driver"><desc_name xml:space="preserve">get_periodic_hook_data</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_instances</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Dedicated for update/extend of data for existing share instances.</paragraph>
                            <paragraph>Redefine this method in share driver to be able to update/change/extend
                                share instances data that will be used by periodic hook action.
                                One of possible updates is add-on of “automount” CLI commands for each
                                share instance for case of notification is enabled using ‘hook’
                                approach.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – Current context</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_instances</literal_strong> – share instances list provided by share manager</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>list of share instances.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.get_pool" module="manila.share.driver"><desc_name xml:space="preserve">get_pool</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">share</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return pool name where the share resides on.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">share</literal_strong> – The share hosted by the driver.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.get_share_server_pools" module="manila.share.driver"><desc_name xml:space="preserve">get_share_server_pools</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">share_server</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return list of pools related to a particular share server.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">share_server</literal_strong> – ShareServer class instance.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.get_share_stats" module="manila.share.driver"><desc_name xml:space="preserve">get_share_stats</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">refresh=False</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get share status.</paragraph>
                            <paragraph>If ‘refresh’ is True, run update the stats first.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.manage_existing" module="manila.share.driver"><desc_name xml:space="preserve">manage_existing</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">share</desc_parameter><desc_parameter xml:space="preserve">driver_options</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Brings an existing share under Manila management.</paragraph>
                            <paragraph>If the provided share is not valid, then raise a
                                ManageInvalidShare exception, specifying a reason for the failure.</paragraph>
                            <paragraph>If the provided share is not in a state that can be managed, such as
                                being replicated on the backend, the driver <emphasis>MUST</emphasis> raise
                                ManageInvalidShare exception with an appropriate message.</paragraph>
                            <paragraph>The share has a share_type, and the driver can inspect that and
                                compare against the properties of the referenced backend share.
                                If they are incompatible, raise a
                                ManageExistingShareTypeMismatch, specifying a reason for the failure.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share</literal_strong> – Share model</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">driver_options</literal_strong> – Driver-specific options provided by admin.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>share_update dictionary with required key ‘size’,
                                            which should contain size of the share.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.manage_existing_snapshot" module="manila.share.driver"><desc_name xml:space="preserve">manage_existing_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">driver_options</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Brings an existing snapshot under Manila management.</paragraph>
                            <paragraph>If provided snapshot is not valid, then raise a
                                ManageInvalidShareSnapshot exception, specifying a reason for
                                the failure.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">snapshot</literal_strong> – ShareSnapshotInstance model with ShareSnapshot data.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <definition_list>
                                <definition_list_item>
                                    <term>Example::</term>
                                    <definition>
                                        <paragraph>{
                                            ‘id’: &lt;instance id&gt;,
                                            ‘snapshot_id’: &lt; snapshot id&gt;,
                                            ‘provider_location’: &lt;location&gt;,
                                            …
                                            }</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">driver_options</literal_strong> – Optional driver-specific options provided
                                            by admin.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve">{
'key': 'value',
...
}</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>model_update dictionary with required key ‘size’,
                                            which should contain size of the share snapshot, and key
                                            ‘export_locations’ containing a list of export locations, if
                                            snapshots can be mounted.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.migration_cancel" module="manila.share.driver"><desc_name xml:space="preserve">migration_cancel</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">source_share</desc_parameter><desc_parameter xml:space="preserve">destination_share</desc_parameter><desc_parameter xml:space="preserve">source_snapshots</desc_parameter><desc_parameter xml:space="preserve">snapshot_mappings</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter><desc_parameter xml:space="preserve">destination_share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Cancels migration of a given share to another host.</paragraph>
                            <note>
                                <paragraph>Is called in source share’s backend to cancel migration.</paragraph>
                            </note>
                            <paragraph>If possible, driver can implement a way to cancel an in-progress
                                migration.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – The ‘context.RequestContext’ object for the request.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">source_share</literal_strong> – Reference to the original share model.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">destination_share</literal_strong> – Reference to the share model to be used by
                                                    migrated share.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">source_snapshots</literal_strong> – List of snapshots owned by the source share.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">snapshot_mappings</literal_strong> – Mapping of source snapshot IDs to
                                                    destination snapshot models.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_server</literal_strong> – Share server model or None.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">destination_share_server</literal_strong> – Destination Share server model or
                                                    None.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.migration_check_compatibility" module="manila.share.driver"><desc_name xml:space="preserve">migration_check_compatibility</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">source_share</desc_parameter><desc_parameter xml:space="preserve">destination_share</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter><desc_parameter xml:space="preserve">destination_share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Checks destination compatibility for migration of a given share.</paragraph>
                            <note>
                                <paragraph>Is called to test compatibility with destination backend.</paragraph>
                            </note>
                            <paragraph>Driver should check if it is compatible with destination backend so
                                driver-assisted migration can proceed.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – The ‘context.RequestContext’ object for the request.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">source_share</literal_strong> – Reference to the share to be migrated.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">destination_share</literal_strong> – Reference to the share model to be used by
                                                    migrated share.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_server</literal_strong> – Share server model or None.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">destination_share_server</literal_strong> – Destination Share server model or
                                                    None.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph><paragraph>A dictionary containing values indicating if destination
                                                backend is compatible, if share can remain writable during
                                                migration, if it can preserve all file metadata and if it can
                                                perform migration of given share non-disruptively.</paragraph><paragraph>Example:</paragraph><literal_block xml:space="preserve">{
    'compatible': True,
    'writable': True,
    'preserve_metadata': True,
    'nondisruptive': True,
    'preserve_snapshots': True,
}</literal_block></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.migration_complete" module="manila.share.driver"><desc_name xml:space="preserve">migration_complete</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">source_share</desc_parameter><desc_parameter xml:space="preserve">destination_share</desc_parameter><desc_parameter xml:space="preserve">source_snapshots</desc_parameter><desc_parameter xml:space="preserve">snapshot_mappings</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter><desc_parameter xml:space="preserve">destination_share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Completes migration of a given share to another host.</paragraph>
                            <note>
                                <paragraph>Is called in source share’s backend to complete migration.</paragraph>
                            </note>
                            <paragraph>If driver is implementing 2-phase migration, this method should
                                perform the disruptive tasks related to the 2nd phase of migration,
                                thus completing it. Driver should also delete all original share data
                                from source backend.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – The ‘context.RequestContext’ object for the request.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">source_share</literal_strong> – Reference to the original share model.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">destination_share</literal_strong> – Reference to the share model to be used by
                                                    migrated share.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">source_snapshots</literal_strong> – List of snapshots owned by the source share.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">snapshot_mappings</literal_strong> – Mapping of source snapshot IDs to
                                                    destination snapshot models.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_server</literal_strong> – Share server model or None.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">destination_share_server</literal_strong> – Destination Share server model or
                                                    None.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph><paragraph>If the migration changes the share export locations, snapshot
                                                provider locations or snapshot export locations, this method should
                                                return a dictionary with the relevant info. In such case, a
                                                dictionary containing a list of export locations and a list of
                                                model updates for each snapshot indexed by their IDs.</paragraph><paragraph>Example:</paragraph><literal_block xml:space="preserve">{
    'export_locations':
    [
        {
        'path': '1.2.3.4:/foo',
        'metadata': {},
        'is_admin_only': False
        },
        {
        'path': '5.6.7.8:/foo',
        'metadata': {},
        'is_admin_only': True
        },
    ],
    'snapshot_updates':
    {
        'bc4e3b28-0832-4168-b688-67fdc3e9d408':
        {
        'provider_location': '/snapshots/foo/bar_1',
        'export_locations':
        [
            {
            'path': '1.2.3.4:/snapshots/foo/bar_1',
            'is_admin_only': False,
            },
            {
            'path': '5.6.7.8:/snapshots/foo/bar_1',
            'is_admin_only': True,
            },
        ],
        },
        '2e62b7ea-4e30-445f-bc05-fd523ca62941':
        {
        'provider_location': '/snapshots/foo/bar_2',
        'export_locations':
        [
            {
            'path': '1.2.3.4:/snapshots/foo/bar_2',
            'is_admin_only': False,
            },
            {
            'path': '5.6.7.8:/snapshots/foo/bar_2',
            'is_admin_only': True,
            },
        ],
        },
    },
}</literal_block></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.migration_continue" module="manila.share.driver"><desc_name xml:space="preserve">migration_continue</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">source_share</desc_parameter><desc_parameter xml:space="preserve">destination_share</desc_parameter><desc_parameter xml:space="preserve">source_snapshots</desc_parameter><desc_parameter xml:space="preserve">snapshot_mappings</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter><desc_parameter xml:space="preserve">destination_share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Continues migration of a given share to another host.</paragraph>
                            <note>
                                <paragraph>Is called in source share’s backend to continue migration.</paragraph>
                            </note>
                            <paragraph>Driver should implement this method to continue monitor the migration
                                progress in storage and perform following steps until 1st phase is
                                completed.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – The ‘context.RequestContext’ object for the request.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">source_share</literal_strong> – Reference to the original share model.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">destination_share</literal_strong> – Reference to the share model to be used by
                                                    migrated share.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">source_snapshots</literal_strong> – List of snapshots owned by the source share.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">snapshot_mappings</literal_strong> – Mapping of source snapshot IDs to
                                                    destination snapshot models.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_server</literal_strong> – Share server model or None.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">destination_share_server</literal_strong> – Destination Share server model or
                                                    None.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>Boolean value to indicate if 1st phase is finished.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.migration_get_progress" module="manila.share.driver"><desc_name xml:space="preserve">migration_get_progress</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">source_share</desc_parameter><desc_parameter xml:space="preserve">destination_share</desc_parameter><desc_parameter xml:space="preserve">source_snapshots</desc_parameter><desc_parameter xml:space="preserve">snapshot_mappings</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter><desc_parameter xml:space="preserve">destination_share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Obtains progress of migration of a given share to another host.</paragraph>
                            <note>
                                <paragraph>Is called in source share’s backend to obtain migration progress.</paragraph>
                            </note>
                            <paragraph>If possible, driver can implement a way to return migration progress
                                information.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – The ‘context.RequestContext’ object for the request.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">source_share</literal_strong> – Reference to the original share model.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">destination_share</literal_strong> – Reference to the share model to be used by
                                                    migrated share.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">source_snapshots</literal_strong> – List of snapshots owned by the source share.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">snapshot_mappings</literal_strong> – Mapping of source snapshot IDs to
                                                    destination snapshot models.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_server</literal_strong> – Share server model or None.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">destination_share_server</literal_strong> – Destination Share server model or
                                                    None.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>A dictionary with at least ‘total_progress’ field containing
                                            the percentage value.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.migration_start" module="manila.share.driver"><desc_name xml:space="preserve">migration_start</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">source_share</desc_parameter><desc_parameter xml:space="preserve">destination_share</desc_parameter><desc_parameter xml:space="preserve">source_snapshots</desc_parameter><desc_parameter xml:space="preserve">snapshot_mappings</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter><desc_parameter xml:space="preserve">destination_share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Starts migration of a given share to another host.</paragraph>
                            <note>
                                <paragraph>Is called in source share’s backend to start migration.</paragraph>
                            </note>
                            <paragraph>Driver should implement this method if willing to perform migration
                                in a driver-assisted way, useful for when source share’s backend driver
                                is compatible with destination backend driver. This method should
                                start the migration procedure in the backend and end. Following steps
                                should be done in ‘migration_continue’.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – The ‘context.RequestContext’ object for the request.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">source_share</literal_strong> – Reference to the original share model.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">destination_share</literal_strong> – Reference to the share model to be used by
                                                    migrated share.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">source_snapshots</literal_strong> – List of snapshots owned by the source share.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">snapshot_mappings</literal_strong> – Mapping of source snapshot IDs to
                                                    destination snapshot models.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_server</literal_strong> – Share server model or None.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">destination_share_server</literal_strong> – Destination Share server model or
                                                    None.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.promote_replica" module="manila.share.driver"><desc_name xml:space="preserve">promote_replica</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">replica_list</desc_parameter><desc_parameter xml:space="preserve">replica</desc_parameter><desc_parameter xml:space="preserve">access_rules</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Promote a replica to ‘active’ replica state.</paragraph>
                            <note>
                                <paragraph>This call is made on the host that hosts the replica being
                                    promoted.</paragraph>
                            </note>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – Current context</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">replica_list</literal_strong> – List of all replicas for a particular share
                                                    This list also contains the replica to be promoted. The ‘active’
                                                    replica will have its ‘replica_state’ attr set to ‘active’.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve">[
    {
    'id': 'd487b88d-e428-4230-a465-a800c2cce5f8',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'in_sync',
        ...
    'share_server_id': '4ce78e7b-0ef6-4730-ac2a-fd2defefbd05',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    {
    'id': '10e49c3e-aca9-483b-8c2d-1c337b38d6af',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'active',
        ...
    'share_server_id': 'f63629b3-e126-4448-bec2-03f788f76094',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    {
    'id': 'e82ff8b6-65f0-11e5-9d70-feff819cdc9f',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'in_sync',
        ...
    'share_server_id': '07574742-67ea-4dfd-9844-9fbd8ada3d87',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    ...
]</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">replica</literal_strong> – Dictionary of the replica to be promoted.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve">{
    'id': 'e82ff8b6-65f0-11e5-9d70-feff819cdc9f',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'deleted': False,
    'host': 'openstack2@cmodeSSVMNFS2',
    'status': 'available',
    'scheduled_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
    'launched_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
    'terminated_at': None,
    'replica_state': 'in_sync',
    'availability_zone_id': 'f6e146d0-65f0-11e5-9d70-feff819cdc9f',
    'export_locations': [
        models.ShareInstanceExportLocations
    ],
    'access_rules_status': 'in_sync',
    'share_network_id': '4ccd5318-65f1-11e5-9d70-feff819cdc9f',
    'share_server_id': '07574742-67ea-4dfd-9844-9fbd8ada3d87',
    'share_server': &lt;models.ShareServer&gt; or None,
}</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">access_rules</literal_strong> – A list of access rules
                                            These access rules are obeyed by other instances of the share</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve">[
 {
    'id': 'f0875f6f-766b-4865-8b41-cccb4cdf1676',
    'deleted' = False,
    'share_id' = 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'access_type' = 'ip',
    'access_to' = '172.16.20.1',
    'access_level' = 'rw',
 }
]</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">share_server</literal_strong> – &lt;models.ShareServer&gt; or None
                                            Share server of the replica to be promoted.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>updated_replica_list or None.
                                            The driver can return the updated list as in the request
                                            parameter. Changes that will be updated to the Database are:
                                            ‘export_locations’, ‘access_rules_status’ and ‘replica_state’.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph>Exception.
                                            This can be any exception derived from BaseException. This is
                                            re-raised by the manager after some necessary cleanup. If the
                                            driver raises an exception during promotion, it is assumed that
                                            all of the replicas of the share are in an inconsistent state.
                                            Recovery is only possible through the periodic update call and/or
                                            administrator intervention to correct the ‘status’ of the affected
                                            replicas if they become healthy again.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="attribute" domain="py" noindex="True" objtype="attribute">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.replication_domain" module="manila.share.driver"><desc_name xml:space="preserve">replication_domain</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.revert_to_replicated_snapshot" module="manila.share.driver"><desc_name xml:space="preserve">revert_to_replicated_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">active_replica</desc_parameter><desc_parameter xml:space="preserve">replica_list</desc_parameter><desc_parameter xml:space="preserve">active_replica_snapshot</desc_parameter><desc_parameter xml:space="preserve">replica_snapshots</desc_parameter><desc_parameter xml:space="preserve">share_access_rules</desc_parameter><desc_parameter xml:space="preserve">snapshot_access_rules</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Reverts a replicated share (in place) to the specified snapshot.</paragraph>
                            <note>
                                <paragraph>This call is made on the ‘active’ replica’s host, since drivers may
                                    not be able to revert snapshots on individual replicas.</paragraph>
                            </note>
                            <paragraph>Does not delete the share snapshot.  The share and snapshot must both
                                be ‘available’ for the restore to be attempted.  The snapshot must be
                                the most recent one taken by Manila; the API layer performs this check
                                so the driver doesn’t have to.</paragraph>
                            <paragraph>The share must be reverted in place to the contents of the snapshot.
                                Application admins should quiesce or otherwise prepare the application
                                for the shared file system contents to change suddenly.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – Current context</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">active_replica</literal_strong> – The current active replica</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">replica_list</literal_strong> – List of all replicas for a particular share
                                                    The ‘active’ replica will have its ‘replica_state’ attr set to
                                                    ‘active’ and its ‘status’ set to ‘reverting’.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">active_replica_snapshot</literal_strong> – snapshot to be restored</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">replica_snapshots</literal_strong> – List of dictionaries of snapshot instances.
                                                    These snapshot instances track the snapshot across the replicas.
                                                    The snapshot of the active replica to be restored with have its
                                                    status attribute set to ‘restoring’.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_access_rules</literal_strong> – List of access rules for the affected share.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">snapshot_access_rules</literal_strong> – List of access rules for the affected
                                                    snapshot.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_server</literal_strong> – Optional – Share server model</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.revert_to_snapshot" module="manila.share.driver"><desc_name xml:space="preserve">revert_to_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">share_access_rules</desc_parameter><desc_parameter xml:space="preserve">snapshot_access_rules</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Reverts a share (in place) to the specified snapshot.</paragraph>
                            <paragraph>Does not delete the share snapshot.  The share and snapshot must both
                                be ‘available’ for the restore to be attempted.  The snapshot must be
                                the most recent one taken by Manila; the API layer performs this check
                                so the driver doesn’t have to.</paragraph>
                            <paragraph>The share must be reverted in place to the contents of the snapshot.
                                Application admins should quiesce or otherwise prepare the application
                                for the shared file system contents to change suddenly.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – Current context</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">snapshot</literal_strong> – The snapshot to be restored</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_access_rules</literal_strong> – List of all access rules for the affected
                                                    share</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">snapshot_access_rules</literal_strong> – List of all access rules for the affected
                                                    snapshot</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_server</literal_strong> – Optional – Share server model or None</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.setup_server" module="manila.share.driver"><desc_name xml:space="preserve">setup_server</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.shrink_share" module="manila.share.driver"><desc_name xml:space="preserve">shrink_share</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">share</desc_parameter><desc_parameter xml:space="preserve">new_size</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Shrinks size of existing share.</paragraph>
                            <paragraph>If consumed space on share larger than new_size driver should raise
                                ShareShrinkingPossibleDataLoss exception:
                                raise ShareShrinkingPossibleDataLoss(share_id=share[‘id’])</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share</literal_strong> – Share model</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">new_size</literal_strong> – New size of share (new_size &lt; share[‘size’])</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_server</literal_strong> – Optional – Share server model</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>:raises ShareShrinkingPossibleDataLoss, NotImplementedError</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.snapshot_update_access" module="manila.share.driver"><desc_name xml:space="preserve">snapshot_update_access</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">snapshot</desc_parameter><desc_parameter xml:space="preserve">access_rules</desc_parameter><desc_parameter xml:space="preserve">add_rules</desc_parameter><desc_parameter xml:space="preserve">delete_rules</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Update access rules for given snapshot.</paragraph>
                            <paragraph><literal>access_rules</literal> contains all access_rules that need to be on the
                                share. If the driver can make bulk access rule updates, it can
                                safely ignore the <literal>add_rules</literal> and <literal>delete_rules</literal> parameters.</paragraph>
                            <paragraph>If the driver cannot make bulk access rule changes, it can rely on
                                new rules to be present in <literal>add_rules</literal> and rules that need to be
                                removed to be present in <literal>delete_rules</literal>.</paragraph>
                            <paragraph>When a rule in <literal>add_rules</literal> already exists in the back end, drivers
                                must not raise an exception. When a rule in <literal>delete_rules</literal> was never
                                applied, drivers must not raise an exception, or attempt to set the
                                rule to <literal>error</literal> state.</paragraph>
                            <paragraph><literal>add_rules</literal> and <literal>delete_rules</literal> can be empty lists, in this
                                situation, drivers should ensure that the rules present in
                                <literal>access_rules</literal> are the same as those on the back end.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – Current context</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">snapshot</literal_strong> – Snapshot model with snapshot data.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">access_rules</literal_strong> – All access rules for given snapshot</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">add_rules</literal_strong> – Empty List or List of access rules which should be
                                                    added. access_rules already contains these rules.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">delete_rules</literal_strong> – Empty List or List of access rules which should be
                                                    removed. access_rules doesn’t contain these rules.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_server</literal_strong> – None or Share server model</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="attribute" domain="py" noindex="True" objtype="attribute">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.snapshots_are_supported" module="manila.share.driver"><desc_name xml:space="preserve">snapshots_are_supported</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.teardown_server" module="manila.share.driver"><desc_name xml:space="preserve">teardown_server</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.unmanage" module="manila.share.driver"><desc_name xml:space="preserve">unmanage</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">share</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Removes the specified share from Manila management.</paragraph>
                            <paragraph>Does not delete the underlying backend share.</paragraph>
                            <paragraph>For most drivers, this will not need to do anything.  However, some
                                drivers might use this call as an opportunity to clean up any
                                Manila-specific configuration that they have associated with the
                                backend share.</paragraph>
                            <paragraph>If provided share cannot be unmanaged, then raise an
                                UnmanageInvalidShare exception, specifying a reason for the failure.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.unmanage_snapshot" module="manila.share.driver"><desc_name xml:space="preserve">unmanage_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">snapshot</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Removes the specified snapshot from Manila management.</paragraph>
                            <paragraph>Does not delete the underlying backend share snapshot.</paragraph>
                            <paragraph>For most drivers, this will not need to do anything.  However, some
                                drivers might use this call as an opportunity to clean up any
                                Manila-specific configuration that they have associated with the
                                backend share snapshot.</paragraph>
                            <paragraph>If provided share snapshot cannot be unmanaged, then raise an
                                UnmanageInvalidShareSnapshot exception, specifying a reason for
                                the failure.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.update_access" module="manila.share.driver"><desc_name xml:space="preserve">update_access</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share</desc_parameter><desc_parameter xml:space="preserve">access_rules</desc_parameter><desc_parameter xml:space="preserve">add_rules</desc_parameter><desc_parameter xml:space="preserve">delete_rules</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Update access rules for given share.</paragraph>
                            <paragraph><literal>access_rules</literal> contains all access_rules that need to be on the
                                share. If the driver can make bulk access rule updates, it can
                                safely ignore the <literal>add_rules</literal> and <literal>delete_rules</literal> parameters.</paragraph>
                            <paragraph>If the driver cannot make bulk access rule changes, it can rely on
                                new rules to be present in <literal>add_rules</literal> and rules that need to be
                                removed to be present in <literal>delete_rules</literal>.</paragraph>
                            <paragraph>When a rule in <literal>delete_rules</literal> was never applied, drivers must not
                                raise an exception, or attempt to set the rule to <literal>error</literal> state.</paragraph>
                            <paragraph><literal>add_rules</literal> and <literal>delete_rules</literal> can be empty lists, in this
                                situation, drivers should ensure that the rules present in
                                <literal>access_rules</literal> are the same as those on the back end. One scenario
                                where this situation is forced is when the access_level is changed for
                                all existing rules (share migration and for readable replicas).</paragraph>
                            <paragraph>Drivers must be mindful of this call for share replicas. When
                                ‘update_access’ is called on one of the replicas, the call is likely
                                propagated to all replicas belonging to the share, especially when
                                individual rules are added or removed. If a particular access rule
                                does not make sense to the driver in the context of a given replica,
                                the driver should be careful to report a correct behavior, and take
                                meaningful action. For example, if R/W access is requested on a
                                replica that is part of a “readable” type replication; R/O access
                                may be added by the driver instead of R/W. Note that raising an
                                exception <emphasis>will</emphasis> result in the access_rules_status on the replica,
                                and the share itself being “out_of_sync”. Drivers can sync on the
                                valid access rules that are provided on the <literal>create_replica</literal> and
                                <literal>promote_replica</literal> calls.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – Current context</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share</literal_strong> – Share model with share data.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">access_rules</literal_strong> – A list of access rules for given share</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">add_rules</literal_strong> – Empty List or List of access rules which should be
                                                    added. access_rules already contains these rules.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">delete_rules</literal_strong> – Empty List or List of access rules which should be
                                                    removed. access_rules doesn’t contain these rules.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">share_server</literal_strong> – None or Share server model</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph><paragraph>None, or a dictionary of updates in the format:</paragraph><literal_block xml:space="preserve">{</literal_block><block_quote><paragraph>‘09960614-8574-4e03-89cf-7cf267b0bd08’: {</paragraph><block_quote><paragraph>‘access_key’: ‘alice31493e5441b8171d2310d80e37e’,
                                                        ‘state’: ‘error’,</paragraph></block_quote><paragraph>},</paragraph><paragraph>‘28f6eabb-4342-486a-a7f4-45688f0c0295’: {</paragraph><block_quote><paragraph>‘access_key’: ‘bob0078aa042d5a7325480fd13228b’,
                                                        ‘state’: ‘active’,</paragraph></block_quote><paragraph>},</paragraph></block_quote><paragraph>}</paragraph></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>The top level keys are ‘access_id’ fields of the access rules that
                                need to be updated. <literal>access_key``s are credentials (str) of the
entities granted access. Any rule in the ``access_rules</literal> parameter
                                can be updated.</paragraph>
                            <important>
                                <paragraph>Raising an exception in this method will force <emphasis>all</emphasis> rules in
                                    ‘applying’ and ‘denying’ states to ‘error’.</paragraph>
                                <paragraph>An access rule can be set to ‘error’ state, either explicitly
                                    via this return parameter or because of an exception raised in
                                    this method. Such an access rule will no longer be sent to the
                                    driver on subsequent access rule updates. When users deny that
                                    rule however, the driver will be asked to deny access to the
                                    client/s represented by the rule. We expect that a
                                    rule that was error-ed at the driver should never exist on the
                                    back end. So, do not fail the deletion request.</paragraph>
                                <paragraph>Also, it is possible that the driver may receive a request to
                                    add a rule that is already present on the back end.
                                    This can happen if the share manager service goes down
                                    while the driver is committing access rule changes. Since we
                                    cannot determine if the rule was applied successfully by the driver
                                    before the disruption, we will treat all ‘applying’ transitional
                                    rules as new rules and repeat the request.</paragraph>
                            </important>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.update_admin_network_allocation" module="manila.share.driver"><desc_name xml:space="preserve">update_admin_network_allocation</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_server</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Update admin network allocation after share server creation.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.update_network_allocation" module="manila.share.driver"><desc_name xml:space="preserve">update_network_allocation</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share_server</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Update network allocation after share server creation.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.update_replica_state" module="manila.share.driver"><desc_name xml:space="preserve">update_replica_state</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">replica_list</desc_parameter><desc_parameter xml:space="preserve">replica</desc_parameter><desc_parameter xml:space="preserve">access_rules</desc_parameter><desc_parameter xml:space="preserve">replica_snapshots</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Update the replica_state of a replica.</paragraph>
                            <note>
                                <paragraph>This call is made on the host which hosts the replica being
                                    updated.</paragraph>
                            </note>
                            <paragraph>Drivers should fix replication relationships that were broken if
                                possible inside this method.</paragraph>
                            <paragraph>This method is called periodically by the share manager; and
                                whenever requested by the administrator through the ‘resync’ API.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – Current context</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">replica_list</literal_strong> – List of all replicas for a particular share
                                                    This list also contains the replica to be updated. The ‘active’
                                                    replica will have its ‘replica_state’ attr set to ‘active’.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve">[
    {
    'id': 'd487b88d-e428-4230-a465-a800c2cce5f8',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'in_sync',
        ...
    'share_server_id': '4ce78e7b-0ef6-4730-ac2a-fd2defefbd05',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    {
    'id': '10e49c3e-aca9-483b-8c2d-1c337b38d6af',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'active',
        ...
    'share_server_id': 'f63629b3-e126-4448-bec2-03f788f76094',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    {
    'id': 'e82ff8b6-65f0-11e5-9d70-feff819cdc9f',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'replica_state': 'in_sync',
        ...
    'share_server_id': '07574742-67ea-4dfd-9844-9fbd8ada3d87',
    'share_server': &lt;models.ShareServer&gt; or None,
    },
    ...
]</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">replica</literal_strong> – Dictionary of the replica being updated
                                            Replica state will always be ‘in_sync’, ‘out_of_sync’, or ‘error’.
                                            Replicas in ‘active’ state will not be passed via this parameter.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve">{
    'id': 'd487b88d-e428-4230-a465-a800c2cce5f8',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'deleted': False,
    'host': 'openstack2@cmodeSSVMNFS1',
    'status': 'available',
    'scheduled_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
    'launched_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
    'terminated_at': None,
    'replica_state': 'in_sync',
    'availability_zone_id': 'e2c2db5c-cb2f-4697-9966-c06fb200cb80',
    'export_locations': [
        models.ShareInstanceExportLocations,
    ],
    'access_rules_status': 'in_sync',
    'share_network_id': '4ccd5318-65f1-11e5-9d70-feff819cdc9f',
    'share_server_id': '4ce78e7b-0ef6-4730-ac2a-fd2defefbd05',
}</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">access_rules</literal_strong> – A list of access rules
                                            These access rules are obeyed by other instances of the share. The
                                            driver could attempt to sync on any un-applied access_rules.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve">[
 {
    'id': 'f0875f6f-766b-4865-8b41-cccb4cdf1676',
    'deleted' = False,
    'share_id' = 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'access_type' = 'ip',
    'access_to' = '172.16.20.1',
    'access_level' = 'rw',
 }
]</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">replica_snapshots</literal_strong> – List of dictionaries of snapshot instances.
                                            This includes snapshot instances of every snapshot of the share
                                            whose ‘aggregate_status’ property was reported to be ‘available’
                                            when the share manager initiated this request. Each list member
                                            will have two sub dictionaries: ‘active_replica_snapshot’ and
                                            ‘share_replica_snapshot’. The ‘active’ replica snapshot corresponds
                                            to the instance of the snapshot on any of the ‘active’ replicas of
                                            the share while share_replica_snapshot corresponds to the snapshot
                                            instance for the specific replica being updated. The driver needs
                                            to ensure that this snapshot instance is truly available before
                                            transitioning from ‘out_of_sync’ to ‘in_sync’. Snapshots instances
                                            for snapshots that have an ‘aggregate_status’ of ‘creating’ or
                                            ‘deleting’ will be polled for in the update_replicated_snapshot
                                            method.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve"> [
  {
'active_replica_snapshot': {
     'id': '8bda791c-7bb6-4e7b-9b64-fefff85ff13e',
     'share_instance_id': '10e49c3e-aca9-483b-8c2d-1c337b38d6af',
     'status': 'available',
     'provider_location': '/newton/share-snapshot-10e49c3e-aca9',
     ...
    },
 'share_replica_snapshot': {
     'id': '10e49c3e-aca9-483b-8c2d-1c337b38d6af',
     'share_instance_id': 'd487b88d-e428-4230-a465-a800c2cce5f8',
     'status': 'creating',
     'provider_location': None,
        ...
    },
  }
 ]</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">share_server</literal_strong> – &lt;models.ShareServer&gt; or None</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>replica_state: a str value denoting the replica_state.
                                            Valid values are ‘in_sync’ and ‘out_of_sync’ or None (to leave the
                                            current replica_state unchanged).</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.update_replicated_snapshot" module="manila.share.driver"><desc_name xml:space="preserve">update_replicated_snapshot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">replica_list</desc_parameter><desc_parameter xml:space="preserve">share_replica</desc_parameter><desc_parameter xml:space="preserve">replica_snapshots</desc_parameter><desc_parameter xml:space="preserve">replica_snapshot</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Update the status of a snapshot instance that lives on a replica.</paragraph>
                            <note>
                                <paragraph>For DR and Readable styles of replication, this call is made on
                                    the replica’s host and not the ‘active’ replica’s host.</paragraph>
                            </note>
                            <paragraph>This method is called periodically by the share manager. It will
                                query for snapshot instances that track the parent snapshot across
                                non-‘active’ replicas. Drivers can expect the status of the instance to
                                be ‘creating’ or ‘deleting’. If the driver sees that a snapshot
                                instance has been removed from the replica’s backend and the
                                instance status was set to ‘deleting’, it is expected to raise a
                                SnapshotResourceNotFound exception. All other exceptions will set the
                                snapshot instance status to ‘error’. If the instance was not in
                                ‘deleting’ state, raising a SnapshotResourceNotFound will set the
                                instance status to ‘error’.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">context</literal_strong> – Current context</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">replica_list</literal_strong> – List of all replicas for a particular share
                                                    The ‘active’ replica will have its ‘replica_state’ attr set to
                                                    ‘active’.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve">[
     {
      'id': 'd487b88d-e428-4230-a465-a800c2cce5f8',
      'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
      'replica_state': 'in_sync',
      ...
      'share_server_id': '4ce78e7b-0ef6-4730-ac2a-fd2defefbd05',
      'share_server': &lt;models.ShareServer&gt; or None,
     },
     {
      'id': '10e49c3e-aca9-483b-8c2d-1c337b38d6af',
      'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
      'replica_state': 'active',
      ...
      'share_server_id': 'f63629b3-e126-4448-bec2-03f788f76094',
      'share_server': &lt;models.ShareServer&gt; or None,
     },
      ...
]</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">share_replica</literal_strong> – Share replica dictionary.
                                            This replica is associated with the snapshot instance whose
                                            status is being updated. Replicas in ‘active’ replica_state will
                                            not be passed via this parameter.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve">{
    'id': 'd487b88d-e428-4230-a465-a800c2cce5f8',
    'share_id': 'f0e4bb5e-65f0-11e5-9d70-feff819cdc9f',
    'deleted': False,
    'host': 'openstack2@cmodeSSVMNFS1',
    'status': 'available',
    'scheduled_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
    'launched_at': datetime.datetime(2015, 8, 10, 0, 5, 58),
    'terminated_at': None,
    'replica_state': 'in_sync',
    'availability_zone_id': 'e2c2db5c-cb2f-4697-9966-c06fb200cb80',
    'export_locations': [
        models.ShareInstanceExportLocations,
    ],
    'access_rules_status': 'in_sync',
    'share_network_id': '4ccd5318-65f1-11e5-9d70-feff819cdc9f',
    'share_server_id': '4ce78e7b-0ef6-4730-ac2a-fd2defefbd05',
}</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">replica_snapshots</literal_strong> – List of dictionaries of snapshot instances.
                                            These snapshot instances track the snapshot across the replicas.
                                            This will include the snapshot instance being updated as well.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve"> [
    {
    'id': 'd3931a93-3984-421e-a9e7-d9f71895450a',
    'snapshot_id': '13ee5cb5-fc53-4539-9431-d983b56c5c40',
        ...
    },
    {
    'id': '8bda791c-7bb6-4e7b-9b64-fefff85ff13e',
    'snapshot_id': '13ee5cb5-fc53-4539-9431-d983b56c5c40',
        ...
    },
    ...
]</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">replica_snapshot</literal_strong> – Dictionary of the snapshot instance.
                                            This is the instance to be updated. It will be in ‘creating’ or
                                            ‘deleting’ state when sent via this parameter.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve">{
    'name': 'share-snapshot-18825630-574f-4912-93bb-af4611ef35a2',
    'share_id': 'd487b88d-e428-4230-a465-a800c2cce5f8',
    'share_name': 'share-d487b88d-e428-4230-a465-a800c2cce5f8',
    'status': 'creating',
    'id': '18825630-574f-4912-93bb-af4611ef35a2',
    'deleted': False,
    'created_at': datetime.datetime(2016, 8, 3, 0, 5, 58),
    'share': &lt;models.ShareInstance&gt;,
    'updated_at': datetime.datetime(2016, 8, 3, 0, 5, 58),
    'share_instance_id': 'd487b88d-e428-4230-a465-a800c2cce5f8',
    'snapshot_id': '13ee5cb5-fc53-4539-9431-d983b56c5c40',
    'progress': '0%',
    'deleted_at': None,
    'provider_location': None,
}</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">share_server</literal_strong> – &lt;models.ShareServer&gt; or None</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>replica_snapshot_model_update: a dictionary.
                                            The dictionary must contain values that need to be updated on the
                                            database for the snapshot instance that represents the snapshot on
                                            the replica.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph>exception.SnapshotResourceNotFound
                                            Raise this exception for snapshots that are not found on the
                                            backend and their status was ‘deleting’.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.update_share_usage_size" module="manila.share.driver"><desc_name xml:space="preserve">update_share_usage_size</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">shares</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Invoked to get the usage size of given shares.</paragraph>
                            <paragraph>Driver can use this method to update the share usage size of
                                the shares. To do that, a dictionary of shares should be
                                returned.
                                :param shares: None or a list of all shares for updates.
                                :returns: An empty list or a list of dictionary of updates in the
                                following format. The value of “used_size” can be specified in GiB
                                units, as a floating point number:</paragraph>
                            <literal_block xml:space="preserve">[
    {
        'id': '09960614-8574-4e03-89cf-7cf267b0bd08',
        'used_size': '200',
        'gathered_at': datetime.datetime(2017, 8, 10, 15, 14, 6),
    },
]</literal_block>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
        </section>
    </section>
</document>
