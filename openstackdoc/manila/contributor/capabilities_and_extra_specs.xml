<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/manila/doc/source/contributor/capabilities_and_extra_specs.rst">
    <target refid="capabilities-and-extra-specs"></target>
    <section ids="capabilities-and-extra-specs id1" names="capabilities\ and\ extra-specs capabilities_and_extra_specs">
        <title>Capabilities and Extra-Specs</title>
        <paragraph>Manila Administrators create share types with extra-specs to allow users
            to request a type of share to create. The Administrator chooses a name
            for the share type and decides how to communicate the significance of
            the different share types in terms that the users should understand or
            need to know. By design, most of the details of a share type (the extra-
            specs) are not exposed to users – only Administrators.</paragraph>
        <section ids="share-types" names="share\ types">
            <title>Share Types</title>
            <paragraph>Refer to the manila client command-line help for information on how to
                create a share type and set “extra-spec” key/value pairs for a share type.</paragraph>
        </section>
        <section ids="extra-specs" names="extra-specs">
            <title>Extra-Specs</title>
            <paragraph>There are 3 types of extra-specs: required, scoped, and un-scoped.</paragraph>
            <paragraph>Manila <emphasis>requires</emphasis> the driver_handles_share_servers extra-spec.</paragraph>
            <paragraph><emphasis>Scoped</emphasis> extra-specs use a prefix followed by a colon to define a namespace
                for scoping the extra-spec. A prefix could be a vendor name or acronym
                and is a hint that this extra-spec key/value only applies to that vendor’s
                driver. Scoped extra-specs are not used by the scheduler to determine
                where a share is created (except for the special <title_reference>capabilities</title_reference> prefix).
                It is up to each driver implementation to determine how to use scoped
                extra-specs and to document them.</paragraph>
            <paragraph>The prefix “capabilities” is a special prefix to indicate extra-specs that
                are treated like un-scoped extra-specs. In the CapabilitiesFilter the
                “capabilities:” is stripped from the key and then the extra-spec key and
                value are used as an un-scoped extra-spec.</paragraph>
            <paragraph><emphasis>Un-scoped</emphasis> extra-specs have a key that either starts with “capabilities:” or
                does not contain a colon. When the CapabilitiesFilter is enabled (it is
                enabled by default), the scheduler will only create a share on a backend
                that reports capabilities that match the share type’s un-scoped extra-spec
                keys.</paragraph>
            <paragraph>The CapabilitiesFilter uses the following for matching operators:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>No operator
                        This defaults to doing a python ==. Additionally it will match boolean values.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>&lt;=, &gt;=, ==, !=</strong></paragraph>
                    <paragraph>This does a float conversion and then uses the python operators as expected.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>&lt;in&gt;</strong></paragraph>
                    <paragraph>This either chooses a host that has partially matching string in the capability
                        or chooses a host if it matches any value in a list. For example, if “&lt;in&gt; sse4”
                        is used, it will match a host that reports capability of “sse4_1” or “sse4_2”.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>&lt;or&gt;</strong></paragraph>
                    <paragraph>This chooses a host that has one of the items specified. If the first word in
                        the string is &lt;or&gt;, another &lt;or&gt; and value pair can be concatenated. Examples
                        are “&lt;or&gt; 3”, “&lt;or&gt; 3 &lt;or&gt; 5”, and “&lt;or&gt; 1 &lt;or&gt; 3 &lt;or&gt; 7”. This is for
                        string values only.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>&lt;is&gt;</strong></paragraph>
                    <paragraph>This chooses a host that matches a boolean capability. An example extra-spec value
                        would be “&lt;is&gt; True”.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>=</strong></paragraph>
                    <paragraph>This does a float conversion and chooses a host that has equal to or greater
                        than the resource specified. This operator behaves this way for historical
                        reasons.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>s==, s!=, s&gt;=, s&gt;, s&lt;=, s&lt;</strong></paragraph>
                    <paragraph>The “s” indicates it is a string comparison. These choose a host that satisfies
                        the comparison of strings in capability and specification. For example,
                        if “capabilities:replication_type s== dr”, a host that reports
                        replication_type of “dr” will be chosen.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>For vendor-specific capabilities (which need to be visible to the
                CapabilityFilter), it is recommended to use the vendor prefix followed
                by an underscore. This is not a strict requirement, but will provide a
                consistent look along-side the scoped extra-specs and will be a clear
                indicator of vendor capabilities vs. common capabilities.</paragraph>
        </section>
        <section ids="common-capabilities" names="common\ capabilities">
            <title>Common Capabilities</title>
            <paragraph>For capabilities that apply to multiple backends a common capability can
                be created. Like all other backend reported capabilities, these capabilities
                can be used verbatim as extra_specs in share types used to create shares.</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph><title_reference>driver_handles_share_servers</title_reference> is a special, required, user-visible common
                        capability. Added in Kilo.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><title_reference>dedupe</title_reference> - indicates that a backend/pool can provide shares using some
                        deduplication technology. The default value of the dedupe capability (if a
                        driver doesn’t report it) is False. In Liberty, drivers cannot report to the
                        scheduler that they support both dedupe and non-deduped share. For each pool
                        it’s either always on or always off, even if the drivers can technically
                        support both dedupe and non-deduped in a pool. Since Mitaka, the logic is
                        changed to allow a driver to report dedupe=[True, False] if it can support
                        both dedupe and non-deduped in a pool. Administrators can make a share type
                        use deduplication by setting this extra-spec to ‘&lt;is&gt; True’. Administrators
                        can prevent a share type from using deduplication by setting this extra-spec
                        to ‘&lt;is&gt; False’. Added in Liberty.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><title_reference>compression</title_reference> - indicates that a backend/pool can provide shares using some
                        compression technology. The default value of the compression capability (if a
                        driver doesn’t report it) is False. In Liberty, drivers cannot report to the
                        scheduler that they support both compression and non-compression. For each
                        pool it’s either always on or always off, even if the drivers can technically
                        support both compression and non-compression in a pool. Since Mitaka, the
                        logic is changed to allow a driver to report compression=[True, False] if it
                        can support both compression and non-compression in a pool. Administrators
                        can make a share type use compression by setting this extra-spec to
                        ‘&lt;is&gt; True’. Administrators can prevent a share type from using compression
                        by setting this extra-spec to ‘&lt;is&gt; False’. Added in Liberty.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><title_reference>thin_provisioning</title_reference> - shares will not be space guaranteed and
                        overprovisioning will be enabled. This capability defaults to False.
                        Backends/pools that support thin provisioning must report True for this
                        capability. Administrators can make a share type use thin provisioned shares
                        by setting this extra-spec to ‘&lt;is&gt; True’. If a driver reports
                        thin_provisioning=False (the default) then it’s assumed that the driver is
                        doing thick provisioning and overprovisioning is turned off.
                        This was added in Liberty. In Liberty and Mitaka, the driver was required
                        to configure one pool for thin and another pool for thick and report
                        thin_provisioning as either True or False even if an array can technically
                        support both thin and thick provisioning in a pool. In Newton, the logic is
                        changed to allow a driver to report thin_provisioning=[True, False] if it
                        can support both thin and thick provisioning in a pool. To provision a thick
                        share on a back end that supports both thin and thick provisioning, set one
                        of the following in extra specs:</paragraph>
                </list_item>
            </bullet_list>
            <literal_block xml:space="preserve">{'thin_provisioning': 'False'}
{'thin_provisioning': '&lt;is&gt; False'}
{'capabilities:thin_provisioning': 'False'}
{'capabilities:thin_provisioning': '&lt;is&gt; False'}</literal_block>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph><title_reference>qos</title_reference> - indicates that a backend/pool can provide shares using some
                        QoS (Quality of Service) specification. The default value of the qos
                        capability (if a driver doesn’t report it) is False. Administrators
                        can make a share type use QoS by setting this extra-spec to ‘&lt;is&gt; True’ and
                        also setting the relevant QoS-related extra specs for the drivers being used.
                        Administrators can prevent a share type from using QoS by setting this
                        extra-spec to ‘&lt;is&gt; False’. Different drivers have different ways of specifying
                        QoS limits (or guarantees) and this extra spec merely allows the scheduler to
                        filter by pools that either have or don’t have QoS support enabled. Added in
                        Mitaka.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><title_reference>replication_type</title_reference> - indicates the style of replication supported for the
                        backend/pool. This extra_spec will have a string value and could be one
                        of <reference internal="True" refuri="../reference/glossary#term-writable"><inline classes="xref std std-term">writable</inline></reference>, <reference internal="True" refuri="../reference/glossary#term-readable"><inline classes="xref std std-term">readable</inline></reference> or <reference internal="True" refuri="../reference/glossary#term-dr"><inline classes="xref std std-term">dr</inline></reference>. <title_reference>writable</title_reference> replication
                        type involves synchronously replicated shares where all replicas are
                        writable. Promotion is not supported and not needed. <title_reference>readable</title_reference> and <title_reference>dr</title_reference>
                        replication types involve a single <title_reference>active</title_reference> or <title_reference>primary</title_reference> replica and one or
                        more <title_reference>non-active</title_reference> or secondary replicas per share. In <title_reference>readable</title_reference> type of
                        replication, <title_reference>non-active</title_reference> replicas have one or more export_locations and
                        can thus be mounted and read while the <title_reference>active</title_reference> replica is the only one
                        that can be written into. In <title_reference>dr</title_reference> style of replication, only
                        the <title_reference>active</title_reference> replica can be mounted, read from and written into. Added in
                        Mitaka.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><title_reference>snapshot_support</title_reference> - indicates whether snapshots are supported for shares
                        created on the pool/backend. When administrators do not set this capability
                        as an extra-spec in a share type, the scheduler can place new shares of that
                        type in pools without regard for whether snapshots are supported, and those
                        shares will not support snapshots.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><title_reference>create_share_from_snapshot_support</title_reference> - indicates whether a backend can create
                        a new share from a snapshot. When administrators do not set this capability
                        as an extra-spec in a share type, the scheduler can place new shares of that
                        type in pools without regard for whether creating shares from snapshots is
                        supported, and those shares will not support creating shares from snapshots.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><title_reference>revert_to_snapshot_support</title_reference> - indicates that a driver is capable of
                        reverting a share in place to its most recent snapshot. When administrators
                        do not set this capability as an extra-spec in a share type, the scheduler
                        can place new shares of that type in pools without regard for whether
                        reverting shares to snapshots is supported, and those shares will not support
                        reverting shares to snapshots.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><title_reference>ipv4_support</title_reference> - indicates whether a back end can create a share that can be
                        accessed via IPv4 protocol. If administrators do not set this capability
                        as an extra-spec in a share type, the scheduler can place new shares of that
                        type in pools without regard for whether IPv4 is supported.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><title_reference>ipv6_support</title_reference> - indicates whether a back end can create a share that can be
                        accessed via IPv6 protocol. If administrators do not set this capability
                        as an extra-spec in a share type, the scheduler can place new shares of that
                        type in pools without regard for whether IPv6 is supported.</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="reporting-capabilities" names="reporting\ capabilities">
            <title>Reporting Capabilities</title>
            <paragraph>Drivers report capabilities as part of the updated stats (e.g. capacity)
                for their backend/pools. This is how a backend/pool advertizes its ability
                to provide a share that matches the capabilities requested in the share
                type extra-specs.</paragraph>
        </section>
        <section ids="developer-impact" names="developer\ impact">
            <title>Developer impact</title>
            <paragraph>Developers should update their drivers to include all backend and pool
                capacities and capabilities in the share stats it reports to scheduler.
                Below is an example having multiple pools. “my” is used as an
                example vendor prefix:</paragraph>
            <literal_block xml:space="preserve">{
    'driver_handles_share_servers': 'False',  #\
    'share_backend_name': 'My Backend',       # backend level
    'vendor_name': 'MY',                      # mandatory/fixed
    'driver_version': '1.0',                  # stats &amp; capabilities
    'storage_protocol': 'NFS_CIFS',           #/
                                              #\
    'my_capability_1': 'custom_val',          # "my" optional vendor
    'my_capability_2': True,                  # stats &amp; capabilities
                                              #/
    'pools': [
        {'pool_name':
           'thin-dedupe-compression pool',    #\
         'total_capacity_gb': 500,            #  mandatory stats for
         'free_capacity_gb': 230,             #  pools
         'reserved_percentage': 0,            #/
                                              #\
         'dedupe': True,                      # common capabilities
         'compression': True,                 #
         'snapshot_support': True,            #
         'create_share_from_snapshot_support': True,
         'revert_to_snapshot_support': True,
         'qos': True,                         # this backend supports QoS
         'thin_provisioning': True,           #
         'max_over_subscription_ratio': 10,   # (mandatory for thin)
         'provisioned_capacity_gb': 270,      # (mandatory for thin)
                                              #
                                              #
         'replication_type': 'dr',            # this backend supports
                                              # replication_type 'dr'
                                              #/
         'my_dying_disks': 100,               #\
         'my_super_hero_1': 'Hulk',           #  "my" optional vendor
         'my_super_hero_2': 'Spider-Man',     #  stats &amp; capabilities
                                              #/
                                              #\
                                              # can replicate to other
         'replication_domain': 'asgard',      # backends in
                                              # replication_domain 'asgard'
                                              #/
         'ipv4_support': True,
         'ipv6_support': True,

        },
        {'pool_name': 'thick pool',
         'total_capacity_gb': 1024,
         'free_capacity_gb': 1024,
         'qos': False,
         'snapshot_support': True,
         'create_share_from_snapshot_support': False, # this pool does not
                                                      # allow creating
                                                      # shares from
                                                      # snapshots
         'revert_to_snapshot_support': True,
         'reserved_percentage': 0,
         'dedupe': False,
         'compression': False,
         'thin_provisioning': False,
         'replication_type': None,
         'my_dying_disks': 200,
         'my_super_hero_1': 'Batman',
         'my_super_hero_2': 'Robin',
         'ipv4_support': True,
         'ipv6_support': True,
        },
     ]
}</literal_block>
        </section>
        <section ids="work-flow" names="work\ flow">
            <title>Work Flow</title>
            <enumerated_list enumtype="arabic" prefix="" suffix=")">
                <list_item>
                    <paragraph>Share Backends report how many pools and what those pools look like and
                        are capable of to scheduler;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>When request comes in, scheduler picks a pool that fits the need best to
                        serve the request, it passes the request to the backend where the target
                        pool resides;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Share driver gets the message and lets the target pool serve the request
                        as scheduler instructed. Share type extra-specs (scoped and un-scoped)
                        are available for the driver implementation to use as-needed.</paragraph>
                </list_item>
            </enumerated_list>
        </section>
    </section>
</document>
