<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/manila/doc/source/contributor/architecture.rst">
    <comment xml:space="preserve">Copyright 2010-2011 United States Government as represented by the
Administrator of the National Aeronautics and Space Administration.
Copyright 2014 Mirantis, Inc.
All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.</comment>
    <section ids="manila-system-architecture" names="manila\ system\ architecture">
        <title>Manila System Architecture</title>
        <paragraph>The Shared File Systems service is intended to be ran on one or more nodes.</paragraph>
        <paragraph>Manila uses a sql-based central database that is shared by all manila services in the system.  The amount and depth of the data fits into a sql database quite well.  For small deployments this seems like an optimal solution.  For larger deployments, and especially if security is a concern, manila will be moving towards multiple data stores with some kind of aggregation system.</paragraph>
        <section ids="components" names="components">
            <title>Components</title>
            <paragraph>Below you will a brief explanation of the different components.</paragraph>
            <literal_block xml:space="preserve">                                                    /- ( LDAP )
                                [ Auth Manager ] ---
                                       |            \- ( DB )
                                       |
                                       |

                                       |
[ Web Dashboard ]- manilaclient -[ manila-api ] -- &lt; AMQP &gt; -- [ manila-scheduler ] -- [ manila-share ] -- ( shared filesystem )
                                       |
                                       |
                                       |
                                       |
                                       |
                                    &lt; REST &gt;</literal_block>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>DB: sql database for data storage. Used by all components (LINKS NOT SHOWN)</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Web Dashboard: external component that talks to the api. Beta extended Horizon available here: <reference refuri="https://github.com/NetApp/horizon/tree/manila">https://github.com/NetApp/horizon/tree/manila</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../reference/glossary#term-manila-api"><inline classes="xref std std-term">manila-api</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph>Auth Manager: component responsible for users/projects/and roles.  Can backend to DB or LDAP.  This is not a separate binary, but rather a python class that is used by most components in the system.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../reference/glossary#term-manila-scheduler"><inline classes="xref std std-term">manila-scheduler</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../reference/glossary#term-manila-share"><inline classes="xref std std-term">manila-share</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="further-challenges" names="further\ challenges">
            <title>Further Challenges</title>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>More efficient share/snapshot size calculation</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Create a notion of “attached” shares with automation of mount operations</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Support for Nova-network as an alternative to Neutron</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Support for standalone operation (no dependency on Neutron/Nova-network)</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Allow admin-created share-servers and share-networks to be used by multiple tenants</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Support creation of new subnets for share servers (to connect VLANs with VXLAN/GRE/etc)</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Gateway mediated networking model with NFS-Ganesha</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Add support for more backends</paragraph>
                </list_item>
            </bullet_list>
        </section>
    </section>
</document>
