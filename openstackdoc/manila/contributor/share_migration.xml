<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/manila/doc/source/contributor/share_migration.rst">
    <comment xml:space="preserve">Copyright (c) 2016 Hitachi Data Systems

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.</comment>
    <section ids="share-migration" names="share\ migration">
        <title>Share Migration</title>
        <paragraph>As of the Ocata release of OpenStack, <reference internal="True" refuri="../reference/glossary#term-manila"><inline classes="xref std std-term">manila</inline></reference> supports migration of
            shares across different pools through an experimental API. Since it was first
            introduced, several enhancements have been made through the subsequent
            releases while still in experimental state. This developer document reflects
            the latest version of the experimental Share Migration API.</paragraph>
        <section ids="feature-definition" names="feature\ definition">
            <title>Feature definition</title>
            <paragraph>The Share Migration API is an administrator-only experimental API that allows
                the invoker to select a destination pool to migrate a share to, while still
                allowing clients to access the source share instance during the migration.
                Migration of data is generally expected to be disruptive for users accessing
                the source, because at some point it will cease to exist. For this reason,
                the share migration feature is implemented in a 2-phase approach, for the
                purpose of controlling the timing of that expected disruption of migrating
                shares.</paragraph>
            <paragraph>The first phase of migration is when operations that take the longest are
                performed, such as data copying or replication. After the first pass of data
                copying is complete, it is up to the administrator to trigger the second phase,
                often referred to as switchover phase, which may perform operations such as a
                last sync and deleting the source share instance.</paragraph>
            <paragraph>During the data copy phase, users remain connected to the source, and may have
                to reconnect after the switchover phase. In order to migrate a share, manila
                may employ one of two mechanisms which provide different capabilities and
                affect how the disruption occurs with regards to user access during data copy
                phase and disconnection during switchover phase. Those two mechanisms are:</paragraph>
            <definition_list>
                <definition_list_item>
                    <term><strong>driver-assisted migration</strong></term>
                    <definition>
                        <paragraph>This mechanism uses the underlying driver running in the manila-share
                            service node to coordinate the migration. The migration itself is performed
                            directly on the storage. In order for this mechanism to be used, it
                            requires the driver to implement this functionality, while also requiring
                            that the driver which manages the destination pool is compatible with
                            driver-assisted migration. Typically, drivers would be able to assist
                            migration of shares within storage systems from the same vendor. It is
                            likely that this will be the most efficient and reliable mechanism to
                            migrate a given share, as the storage back end may be able to migrate the
                            share while remaining writable, preserving all file system metadata,
                            snapshots, and possibly perform this operation non-disruptively. When this
                            mechanism cannot be used, the host-assisted migration will be attempted.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term><strong>host-assisted migration</strong></term>
                    <definition>
                        <paragraph>This mechanism uses the Data Service (manila-data) to copy the source
                            share’s data to a new destination share created in the given destination
                            pool. For this mechanism to work, it is required that the Data Service is
                            properly configured in the cloud environment and the migration operation
                            for the source share’s protocol and access rule type combination is
                            supported by the Data Service. This is the most suited mechanism to migrate
                            shares when the two pools are from different storage vendors. Given that
                            this mechanism is a rough copy of files and the back ends are unaware that
                            their share contents are being copied over, the optimizations found in the
                            driver-assisted migration are not present here, thus the source share
                            remains read-only, snapshots cannot be transferred, some file system
                            metadata such as permissions and ownership may be lost, and users are
                            expected to be disconnected by the end of migration.</paragraph>
                    </definition>
                </definition_list_item>
            </definition_list>
            <paragraph>Note that during a share migration, access rules cannot be added or removed.</paragraph>
            <paragraph>As of Ocata release, this feature allows several concurrent migrations
                (driver-assisted or host-assisted) to be performed, having a best-effort type
                of scalability.</paragraph>
        </section>
        <section ids="api-description" names="api\ description">
            <title>API description</title>
            <paragraph>The migration of a share is started by invoking the <literal>migration_start</literal> API.
                The parameters are:</paragraph>
            <definition_list>
                <definition_list_item>
                    <term><strong>share</strong></term>
                    <definition>
                        <paragraph>The share to be migrated. This parameter is mandatory.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term><strong>destination</strong></term>
                    <definition>
                        <paragraph>The destination pool in <literal>host@backend#pool</literal> representation. This
                            parameter is mandatory.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term><strong>force_host_assisted_migration</strong></term>
                    <definition>
                        <paragraph>Forces the host-assisted mechanism to be used, thus using the Data Service
                            to copy data across back ends. This parameter value defaults to <title_reference>False</title_reference>.
                            When set to <title_reference>True</title_reference>, it skips the driver-assisted approach which would
                            otherwise be attempted first. This parameter is optional.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term><strong>preserve_metadata</strong></term>
                    <definition>
                        <paragraph>Specifies whether migration should enforce the preservation of all file
                            system metadata. When this behavior is expected (i.e, this parameter is set
                            to <title_reference>True</title_reference>) and drivers are not capable of ensuring preservation of file
                            system metadata, migration will result in an error status. As of Ocata
                            release, host-assisted migration cannot provide any guarantees of
                            preserving file system metadata. This parameter is mandatory.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term><strong>preserve_snapshots</strong></term>
                    <definition>
                        <paragraph>Specifies whether migration should enforce the preservation of all existing
                            snapshots at the destination. In other words, the existing snapshots must
                            be migrated along with the share data. When this behavior is expected (i.e,
                            this parameter is set to <title_reference>True</title_reference>) and drivers are not capable of migrating
                            the snapshots, migration will result in an error status. As of Ocata
                            release, host-assisted migration cannot provide this capability. This
                            parameter is mandatory.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term><strong>nondisruptive</strong></term>
                    <definition>
                        <paragraph>Specifies whether migration should only be performed without disrupting
                            clients during migration. For such, it is also expected that the export
                            location does not change.  When this behavior is expected (i.e, this
                            parameter is set to <title_reference>True</title_reference>) and drivers are not capable of allowing the
                            share to remain accessible through the two phases of the migration,
                            migration will result in an error status. As of Ocata release,
                            host-assisted migration cannot provide this capability. This parameter is
                            mandatory.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term><strong>writable</strong></term>
                    <definition>
                        <paragraph>Specifies whether migration should only be performed if the share can
                            remain writable. When this behavior is expected (i.e, this parameter is set
                            to <title_reference>True</title_reference>) and drivers are not capable of allowing the share to remain
                            writable, migration will result in an error status. If drivers are not
                            capable of performing a nondisruptive migration, manila will ensure that
                            the share will remain writable through the data copy phase of migration.
                            However, during the switchover phase the share will be re-exported at the
                            destination, causing the share to be rendered inaccessible for the duration
                            of this phase. As of Ocata release, host-assisted migration cannot provide
                            this capability. This parameter is mandatory.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term><strong>new_share_type</strong></term>
                    <definition>
                        <paragraph>If willing to retype the share so it can be allocated in the desired
                            destination pool, the invoker may supply a new share type to be used. This
                            is often suited when the share is to be migrated to a pool which operates
                            in the opposite driver mode. This parameter is optional.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term><strong>new_share_network</strong></term>
                    <definition>
                        <paragraph>If willing to change the share’s share-network so it can be allocated in
                            the desired destination pool, the invoker may supply a new share network to
                            be used. This is often suited when the share is to be migrated to a pool
                            which operates in a different availability zone or managed by a driver that
                            handles share servers. This parameter is optional.</paragraph>
                    </definition>
                </definition_list_item>
            </definition_list>
            <paragraph>After started, a migration may be cancelled through the <literal>migration_cancel</literal>
                API, have its status obtained through the <literal>migration_get_progress</literal> API, and
                completed through the <literal>migration_complete</literal> API after reaching a certain
                state (see <literal>Workflows</literal> section below).</paragraph>
        </section>
        <section ids="workflows" names="workflows">
            <title>Workflows</title>
            <paragraph>Upon invoking <literal>migration_start</literal>, several validations will be performed by the
                API layer, such as:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>If supplied API parameters are valid.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>If the share does not have replicas.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>If the share is not member of a share group.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>If the access rules of the given share are not in error status.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>If the driver-assisted parameters specified do not conflict with
                        <title_reference>force_host_assisted_migration</title_reference> parameter.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>If <title_reference>force_host_assisted_migration</title_reference> parameter is set to True while snapshots
                        do not exist.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>If share status is <title_reference>available</title_reference> and is not busy with other tasks.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>If the destination pool chosen to migrate the share to exists and is
                        running.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>If share service or Data Service responsible for performing the migration
                        exists and is running.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>If the combination of share network and share type resulting is compatible
                        with regards to driver modes.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>If any of the above validations fail, the API will return an error. Otherwise,
                the <title_reference>task_state</title_reference> field value will transition to <title_reference>migration_starting</title_reference> and the
                share’s status will transition to <title_reference>migrating</title_reference>. Past this point, all
                validations, state transitions and errors will not produce any notifications to
                the user. Instead, the given share’s <title_reference>task_state</title_reference> field value will transition
                to <title_reference>migration_error</title_reference>.</paragraph>
            <paragraph>Following API validation, the scheduler will validate if the supplied
                destination is compatible with the desired share type according to the pool’s
                capabilities. If this validation fails, the <title_reference>task_state</title_reference> field value will
                transition to <title_reference>migration_error</title_reference>.</paragraph>
            <paragraph>The scheduler then invokes the source share pool’s manager to proceed with the
                migration, transitioning the <title_reference>task_state</title_reference> field value to
                <title_reference>migration_in_progress</title_reference>. If <title_reference>force-host-assisted-migration</title_reference> API parameter is
                not set, then a driver-assisted migration will be attempted first.</paragraph>
            <paragraph>Note that whichever mechanism is employed, there will be a new share instance
                created in the database, referred to as the “destination instance”, with a
                status field value <title_reference>migrating_to</title_reference>. This share instance will not have its
                export location displayed during migration and will prevail instead of the
                original instance database entry when migration is complete.</paragraph>
            <section ids="driver-assisted-migration-data-copy-phase" names="driver-assisted\ migration\ data\ copy\ phase">
                <title>Driver-assisted migration data copy phase</title>
                <paragraph>A share server will be created as needed at the destination pool. Then, the
                    share server details are provided to the driver to report the set of migration
                    capabilities for this destination. If the API parameters <title_reference>writable</title_reference>,
                    <title_reference>nondisruptive</title_reference>, <title_reference>preserve_metadata</title_reference> and <title_reference>preserve_snapshots</title_reference> are satisfied by
                    the reported migration capabilities, the <title_reference>task_state</title_reference> field value transitions
                    to <title_reference>migration_driver_starting</title_reference> and the driver is invoked to start the
                    migration.</paragraph>
                <paragraph>The driver’s migration_start method should start a job in the storage back end
                    and return, allowing the <title_reference>task_state</title_reference> field value to transition to
                    <title_reference>migration_driver_in_progress</title_reference>. If any of the API parameters described
                    previously are not satisfied, or the driver raises an exception in
                    <title_reference>migration_start</title_reference>, the driver-assisted migration ends setting the <title_reference>task_state</title_reference>
                    field value to <title_reference>migration_error</title_reference>, all allocated resources will be cleaned up
                    and migration will proceed to the host-assisted migration mechanism.</paragraph>
                <paragraph>Once the <title_reference>migration_start</title_reference> driver method succeeds, a periodic task that checks
                    for shares with <title_reference>task_state</title_reference> field value <title_reference>migration_driver_in_progress</title_reference> will
                    invoke the driver’s <title_reference>migration_continue</title_reference> method, responsible for executing the
                    next steps of migration until the data copy phase is completed, transitioning
                    the <title_reference>task_state</title_reference> field value to <title_reference>migration_driver_phase1_done</title_reference>. If this step
                    fails, the <title_reference>task_state</title_reference> field value transitions to <title_reference>migration_error</title_reference> and all
                    allocated resources will be cleaned up.</paragraph>
            </section>
            <section ids="host-assisted-migration-data-copy-phase" names="host-assisted\ migration\ data\ copy\ phase">
                <title>Host-assisted migration data copy phase</title>
                <paragraph>A new share will be created at the destination pool and the source share’s
                    access rules will be changed to read-only. The <title_reference>task_state</title_reference> field value
                    transitions to <title_reference>data_copying_starting</title_reference> and the Data Service is then invoked to
                    mount both shares and copy data from the source to the destination.</paragraph>
                <paragraph>In order for the Data Service to mount the shares, it will ask the storage
                    driver to allow access to the node where the Data Service is running. It will
                    then attempt to mount the shares via their respective adminstrator-only export
                    locations that are served in the administrator network when available,
                    otherwise the regular export locations will be used.</paragraph>
                <paragraph>In order for the access and mount procedures to succeed, the administrator-only
                    export location must be reachable from the Data Service and the access
                    parameter properly configured in the Data Service configuration file. For
                    instance, a NFS share should require an IP configuration, whereas a CIFS share
                    should require a username credential. Those parameters should be previously
                    set in the Data Service configuration file by the administrator.</paragraph>
                <paragraph>The data copy routine runs commands as root user for the purpose of setting the
                    correct file metadata to the newly created files at the destination share. It
                    can optionally verify the integrity of all files copied through a configuration
                    parameter. Once copy is completed, the shares are unmounted, their access
                    from the Data Service are removed and the <title_reference>task_state</title_reference> field value transitions
                    to <title_reference>data_copying_completed</title_reference>, allowing the switchover phase to be invoked.</paragraph>
            </section>
            <section ids="share-migration-switchover-phase" names="share\ migration\ switchover\ phase">
                <title>Share migration switchover phase</title>
                <paragraph>When invoked, the <title_reference>task_state</title_reference> field value transitions to
                    <title_reference>migration_completing</title_reference>. Whichever migration mechanism is used, the source share
                    instance is deleted and the access rules are applied to the destination share
                    instance. In the driver-assisted migration, the driver is first invoked to
                    perform a final sync.</paragraph>
                <paragraph>The last step is to update the share model’s optional capability fields, such
                    as <title_reference>create_share_from_snapshot_support</title_reference>, <title_reference>revert_to_snapshot_support</title_reference> and
                    <title_reference>mount_snapshot_support</title_reference>, according to the <title_reference>new_share_type</title_reference>, if it had been
                    specified when the migration was initiated.</paragraph>
                <paragraph>At last, the <title_reference>task_state</title_reference> field value transitions to
                    <title_reference>migration_success</title_reference>. If the <title_reference>nondisruptive</title_reference> driver-assisted capability is not
                    supported or the host-assisted migration mechanism is used, the export location
                    will change and clients will need to remount the share.</paragraph>
            </section>
        </section>
        <section ids="driver-interfaces" names="driver\ interfaces">
            <title>Driver interfaces</title>
            <paragraph>All drivers that implement the driver-assisted migration mechanism should be
                able to perform all required steps from the source share instance back end
                within the implementation of the interfaces listed in the section below.
                Those steps include:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Validating compatibility and connectivity between the source and destination
                        back end;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Start the migration job in the storage back end. Return after the job request
                        has been submitted;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Subsequent invocations to the driver to monitor the job status, cancel it and
                        obtain its progress in percentage value;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Complete migration by performing a last sync if necessary and delete the
                        original share from the source back end.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>For host-assisted migration, drivers may override some methods defined in the
                base class in case it is necessary to support it.</paragraph>
        </section>
        <section ids="additional-notes" names="additional\ notes">
            <title>Additional notes</title>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>In case of an error in the storage back end during the execution of the
                        migration job, the driver should raise an exception within the
                        <literal>migration_continue</literal> method.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>If the manila-share service is restarted during a migration, in case it is a
                        driver-assisted migration, the driver’s <literal>migration_continue</literal> will be
                        invoked continuously with an interval configured in the share manager service
                        (<literal>migration_driver_continue_interval</literal>). The invocation will stop when the
                        driver finishes the data copy phase. In case of host-assisted migration, the
                        migration job is disrupted only if the manila-data service is restarted. In
                        such event, the migration has to be restarted from the beginning.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>To be compatible with host-assisted migration, drivers must also support
                        the <literal>update_access</literal> interface, along with its <title_reference>recovery mode</title_reference> mechanism.</paragraph>
                </list_item>
            </bullet_list>
            <section ids="share-migration-driver-assisted-interfaces" names="share\ migration\ driver-assisted\ interfaces:">
                <title>Share Migration driver-assisted interfaces:</title>
                <index entries=""></index>
                <desc desctype="class" domain="py" noindex="True" objtype="class">
                    <desc_signature class="" first="False" fullname="ShareDriver" module="manila.share.driver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">ShareDriver</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">driver_handles_share_servers</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Class defines interface of NAS driver.</paragraph>
                        <index entries=""></index>
                        <desc desctype="method" domain="py" noindex="True" objtype="method">
                            <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.migration_cancel" module="manila.share.driver"><desc_name xml:space="preserve">migration_cancel</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">source_share</desc_parameter><desc_parameter xml:space="preserve">destination_share</desc_parameter><desc_parameter xml:space="preserve">source_snapshots</desc_parameter><desc_parameter xml:space="preserve">snapshot_mappings</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter><desc_parameter xml:space="preserve">destination_share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Cancels migration of a given share to another host.</paragraph>
                                <note>
                                    <paragraph>Is called in source share’s backend to cancel migration.</paragraph>
                                </note>
                                <paragraph>If possible, driver can implement a way to cancel an in-progress
                                    migration.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – The ‘context.RequestContext’ object for the request.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">source_share</literal_strong> – Reference to the original share model.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">destination_share</literal_strong> – Reference to the share model to be used by
                                                        migrated share.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">source_snapshots</literal_strong> – List of snapshots owned by the source share.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">snapshot_mappings</literal_strong> – Mapping of source snapshot IDs to
                                                        destination snapshot models.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">share_server</literal_strong> – Share server model or None.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">destination_share_server</literal_strong> – Destination Share server model or
                                                        None.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries=""></index>
                        <desc desctype="method" domain="py" noindex="True" objtype="method">
                            <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.migration_check_compatibility" module="manila.share.driver"><desc_name xml:space="preserve">migration_check_compatibility</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">source_share</desc_parameter><desc_parameter xml:space="preserve">destination_share</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter><desc_parameter xml:space="preserve">destination_share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Checks destination compatibility for migration of a given share.</paragraph>
                                <note>
                                    <paragraph>Is called to test compatibility with destination backend.</paragraph>
                                </note>
                                <paragraph>Driver should check if it is compatible with destination backend so
                                    driver-assisted migration can proceed.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – The ‘context.RequestContext’ object for the request.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">source_share</literal_strong> – Reference to the share to be migrated.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">destination_share</literal_strong> – Reference to the share model to be used by
                                                        migrated share.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">share_server</literal_strong> – Share server model or None.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">destination_share_server</literal_strong> – Destination Share server model or
                                                        None.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph><paragraph>A dictionary containing values indicating if destination
                                                    backend is compatible, if share can remain writable during
                                                    migration, if it can preserve all file metadata and if it can
                                                    perform migration of given share non-disruptively.</paragraph><paragraph>Example:</paragraph><literal_block xml:space="preserve">{
    'compatible': True,
    'writable': True,
    'preserve_metadata': True,
    'nondisruptive': True,
    'preserve_snapshots': True,
}</literal_block></paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries=""></index>
                        <desc desctype="method" domain="py" noindex="True" objtype="method">
                            <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.migration_complete" module="manila.share.driver"><desc_name xml:space="preserve">migration_complete</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">source_share</desc_parameter><desc_parameter xml:space="preserve">destination_share</desc_parameter><desc_parameter xml:space="preserve">source_snapshots</desc_parameter><desc_parameter xml:space="preserve">snapshot_mappings</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter><desc_parameter xml:space="preserve">destination_share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Completes migration of a given share to another host.</paragraph>
                                <note>
                                    <paragraph>Is called in source share’s backend to complete migration.</paragraph>
                                </note>
                                <paragraph>If driver is implementing 2-phase migration, this method should
                                    perform the disruptive tasks related to the 2nd phase of migration,
                                    thus completing it. Driver should also delete all original share data
                                    from source backend.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – The ‘context.RequestContext’ object for the request.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">source_share</literal_strong> – Reference to the original share model.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">destination_share</literal_strong> – Reference to the share model to be used by
                                                        migrated share.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">source_snapshots</literal_strong> – List of snapshots owned by the source share.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">snapshot_mappings</literal_strong> – Mapping of source snapshot IDs to
                                                        destination snapshot models.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">share_server</literal_strong> – Share server model or None.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">destination_share_server</literal_strong> – Destination Share server model or
                                                        None.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph><paragraph>If the migration changes the share export locations, snapshot
                                                    provider locations or snapshot export locations, this method should
                                                    return a dictionary with the relevant info. In such case, a
                                                    dictionary containing a list of export locations and a list of
                                                    model updates for each snapshot indexed by their IDs.</paragraph><paragraph>Example:</paragraph><literal_block xml:space="preserve">{
    'export_locations':
    [
        {
        'path': '1.2.3.4:/foo',
        'metadata': {},
        'is_admin_only': False
        },
        {
        'path': '5.6.7.8:/foo',
        'metadata': {},
        'is_admin_only': True
        },
    ],
    'snapshot_updates':
    {
        'bc4e3b28-0832-4168-b688-67fdc3e9d408':
        {
        'provider_location': '/snapshots/foo/bar_1',
        'export_locations':
        [
            {
            'path': '1.2.3.4:/snapshots/foo/bar_1',
            'is_admin_only': False,
            },
            {
            'path': '5.6.7.8:/snapshots/foo/bar_1',
            'is_admin_only': True,
            },
        ],
        },
        '2e62b7ea-4e30-445f-bc05-fd523ca62941':
        {
        'provider_location': '/snapshots/foo/bar_2',
        'export_locations':
        [
            {
            'path': '1.2.3.4:/snapshots/foo/bar_2',
            'is_admin_only': False,
            },
            {
            'path': '5.6.7.8:/snapshots/foo/bar_2',
            'is_admin_only': True,
            },
        ],
        },
    },
}</literal_block></paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries=""></index>
                        <desc desctype="method" domain="py" noindex="True" objtype="method">
                            <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.migration_continue" module="manila.share.driver"><desc_name xml:space="preserve">migration_continue</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">source_share</desc_parameter><desc_parameter xml:space="preserve">destination_share</desc_parameter><desc_parameter xml:space="preserve">source_snapshots</desc_parameter><desc_parameter xml:space="preserve">snapshot_mappings</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter><desc_parameter xml:space="preserve">destination_share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Continues migration of a given share to another host.</paragraph>
                                <note>
                                    <paragraph>Is called in source share’s backend to continue migration.</paragraph>
                                </note>
                                <paragraph>Driver should implement this method to continue monitor the migration
                                    progress in storage and perform following steps until 1st phase is
                                    completed.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – The ‘context.RequestContext’ object for the request.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">source_share</literal_strong> – Reference to the original share model.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">destination_share</literal_strong> – Reference to the share model to be used by
                                                        migrated share.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">source_snapshots</literal_strong> – List of snapshots owned by the source share.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">snapshot_mappings</literal_strong> – Mapping of source snapshot IDs to
                                                        destination snapshot models.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">share_server</literal_strong> – Share server model or None.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">destination_share_server</literal_strong> – Destination Share server model or
                                                        None.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>Boolean value to indicate if 1st phase is finished.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries=""></index>
                        <desc desctype="method" domain="py" noindex="True" objtype="method">
                            <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.migration_get_progress" module="manila.share.driver"><desc_name xml:space="preserve">migration_get_progress</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">source_share</desc_parameter><desc_parameter xml:space="preserve">destination_share</desc_parameter><desc_parameter xml:space="preserve">source_snapshots</desc_parameter><desc_parameter xml:space="preserve">snapshot_mappings</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter><desc_parameter xml:space="preserve">destination_share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Obtains progress of migration of a given share to another host.</paragraph>
                                <note>
                                    <paragraph>Is called in source share’s backend to obtain migration progress.</paragraph>
                                </note>
                                <paragraph>If possible, driver can implement a way to return migration progress
                                    information.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – The ‘context.RequestContext’ object for the request.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">source_share</literal_strong> – Reference to the original share model.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">destination_share</literal_strong> – Reference to the share model to be used by
                                                        migrated share.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">source_snapshots</literal_strong> – List of snapshots owned by the source share.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">snapshot_mappings</literal_strong> – Mapping of source snapshot IDs to
                                                        destination snapshot models.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">share_server</literal_strong> – Share server model or None.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">destination_share_server</literal_strong> – Destination Share server model or
                                                        None.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>A dictionary with at least ‘total_progress’ field containing
                                                the percentage value.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries=""></index>
                        <desc desctype="method" domain="py" noindex="True" objtype="method">
                            <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.migration_start" module="manila.share.driver"><desc_name xml:space="preserve">migration_start</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">source_share</desc_parameter><desc_parameter xml:space="preserve">destination_share</desc_parameter><desc_parameter xml:space="preserve">source_snapshots</desc_parameter><desc_parameter xml:space="preserve">snapshot_mappings</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter><desc_parameter xml:space="preserve">destination_share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Starts migration of a given share to another host.</paragraph>
                                <note>
                                    <paragraph>Is called in source share’s backend to start migration.</paragraph>
                                </note>
                                <paragraph>Driver should implement this method if willing to perform migration
                                    in a driver-assisted way, useful for when source share’s backend driver
                                    is compatible with destination backend driver. This method should
                                    start the migration procedure in the backend and end. Following steps
                                    should be done in ‘migration_continue’.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – The ‘context.RequestContext’ object for the request.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">source_share</literal_strong> – Reference to the original share model.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">destination_share</literal_strong> – Reference to the share model to be used by
                                                        migrated share.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">source_snapshots</literal_strong> – List of snapshots owned by the source share.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">snapshot_mappings</literal_strong> – Mapping of source snapshot IDs to
                                                        destination snapshot models.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">share_server</literal_strong> – Share server model or None.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">destination_share_server</literal_strong> – Destination Share server model or
                                                        None.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
            </section>
            <section ids="share-migration-host-assisted-interfaces" names="share\ migration\ host-assisted\ interfaces:">
                <title>Share Migration host-assisted interfaces:</title>
                <index entries=""></index>
                <desc desctype="class" domain="py" noindex="True" objtype="class">
                    <desc_signature class="" first="False" fullname="ShareDriver" module="manila.share.driver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">ShareDriver</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">driver_handles_share_servers</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Class defines interface of NAS driver.</paragraph>
                        <index entries=""></index>
                        <desc desctype="method" domain="py" noindex="True" objtype="method">
                            <desc_signature class="ShareDriver" first="False" fullname="ShareDriver.connection_get_info" module="manila.share.driver"><desc_name xml:space="preserve">connection_get_info</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">share</desc_parameter><desc_parameter xml:space="preserve">share_server=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Is called to provide necessary generic migration logic.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">context</literal_strong> – The ‘context.RequestContext’ object for the request.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">share</literal_strong> – Reference to the share being migrated.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">share_server</literal_strong> – Share server model or None.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>A dictionary with migration information.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
            </section>
        </section>
    </section>
</document>
