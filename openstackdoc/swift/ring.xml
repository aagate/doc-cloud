<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/swift/doc/source/ring.rst">
    <target refid="consistent-hashing-ring"></target>
    <section ids="partitioned-consistent-hash-ring consistent-hashing-ring" names="partitioned\ consistent\ hash\ ring consistent_hashing_ring">
        <title>Partitioned Consistent Hash Ring</title>
        <target refid="ring"></target>
        <section dupnames="ring" ids="ring id1" names="ring">
            <title>Ring</title>
            <target ids="module-swift.common.ring.ring" ismod="True"></target>
            <index entries="['single',\ u'swift.common.ring.ring\ (module)',\ u'module-swift.common.ring.ring',\ '',\ None]"></index>
            <index entries="['single',\ u'Ring\ (class\ in\ swift.common.ring.ring)',\ u'swift.common.ring.ring.Ring',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="Ring" ids="swift.common.ring.ring.Ring" module="swift.common.ring.ring" names="swift.common.ring.ring.Ring"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.ring.ring.</desc_addname><desc_name xml:space="preserve">Ring</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">serialized_path</desc_parameter><desc_parameter xml:space="preserve">reload_time=15</desc_parameter><desc_parameter xml:space="preserve">ring_name=None</desc_parameter><desc_parameter xml:space="preserve">validation_hook=&lt;function &lt;lambda&gt;&gt;</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Partitioned consistent hashing ring.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">serialized_path</literal_strong> – path to serialized RingData instance</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">reload_time</literal_strong> – time interval in seconds to check for a ring change</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">ring_name</literal_strong> – ring name string (basically specified from policy)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">validation_hook</literal_strong> – hook point to validate ring configuration ontime</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><reference internal="True" reftitle="swift.common.exceptions.RingLoadError" refuri="misc#swift.common.exceptions.RingLoadError"><literal_strong>RingLoadError</literal_strong></reference> – if the loaded ring data violates its constraint</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                    <index entries="['single',\ u'devs\ (swift.common.ring.ring.Ring\ attribute)',\ u'swift.common.ring.ring.Ring.devs',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Ring" first="False" fullname="Ring.devs" ids="swift.common.ring.ring.Ring.devs" module="swift.common.ring.ring" names="swift.common.ring.ring.Ring.devs"><desc_name xml:space="preserve">devs</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>devices in the ring</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_more_nodes()\ (swift.common.ring.ring.Ring\ method)',\ u'swift.common.ring.ring.Ring.get_more_nodes',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Ring" first="False" fullname="Ring.get_more_nodes" ids="swift.common.ring.ring.Ring.get_more_nodes" module="swift.common.ring.ring" names="swift.common.ring.ring.Ring.get_more_nodes"><desc_name xml:space="preserve">get_more_nodes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">part</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Generator to get extra nodes for a partition for hinted handoff.</paragraph>
                            <paragraph>The handoff nodes will try to be in zones other than the
                                primary zones, will take into account the device weights, and
                                will usually keep the same sequences of handoffs even with
                                ring changes.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">part</literal_strong> – partition to get handoff nodes for</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>generator of node dicts</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>See <reference internal="True" refid="swift.common.ring.ring.Ring.get_nodes" reftitle="swift.common.ring.ring.Ring.get_nodes"><literal classes="xref py py-func">get_nodes()</literal></reference> for a description of the node dicts.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_nodes()\ (swift.common.ring.ring.Ring\ method)',\ u'swift.common.ring.ring.Ring.get_nodes',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Ring" first="False" fullname="Ring.get_nodes" ids="swift.common.ring.ring.Ring.get_nodes" module="swift.common.ring.ring" names="swift.common.ring.ring.Ring.get_nodes"><desc_name xml:space="preserve">get_nodes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container=None</desc_parameter><desc_parameter xml:space="preserve">obj=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get the partition and nodes for an account/container/object.
                                If a node is responsible for more than one replica, it will
                                only appear in the output once.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – account name</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> – container name</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">obj</literal_strong> – object name</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a tuple of (partition, list of node dicts)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>Each node dict will have at least the following keys:</paragraph>
                            <table>
                                <tgroup cols="2">
                                    <colspec colwidth="6"></colspec>
                                    <colspec colwidth="63"></colspec>
                                    <tbody>
                                        <row>
                                            <entry>
                                                <paragraph>id</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>unique integer identifier amongst devices</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>index</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>offset into the primary node list for the partition</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>weight</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>a float of the relative weight of this device as compared to
                                                    others; this indicates how many partitions the builder will try
                                                    to assign to this device</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>zone</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>integer indicating which zone the device is in; a given
                                                    partition will not be assigned to multiple devices within the
                                                    same zone</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>ip</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>the ip address of the device</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>port</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>the tcp port of the device</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>device</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>the device’s name on disk (sdb1, for example)</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>meta</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>general use ‘extra’ field; for example: the online date, the
                                                    hardware description</paragraph>
                                            </entry>
                                        </row>
                                    </tbody>
                                </tgroup>
                            </table>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_part()\ (swift.common.ring.ring.Ring\ method)',\ u'swift.common.ring.ring.Ring.get_part',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Ring" first="False" fullname="Ring.get_part" ids="swift.common.ring.ring.Ring.get_part" module="swift.common.ring.ring" names="swift.common.ring.ring.Ring.get_part"><desc_name xml:space="preserve">get_part</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container=None</desc_parameter><desc_parameter xml:space="preserve">obj=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get the partition for an account/container/object.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – account name</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> – container name</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">obj</literal_strong> – object name</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>the partition number</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_part_nodes()\ (swift.common.ring.ring.Ring\ method)',\ u'swift.common.ring.ring.Ring.get_part_nodes',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Ring" first="False" fullname="Ring.get_part_nodes" ids="swift.common.ring.ring.Ring.get_part_nodes" module="swift.common.ring.ring" names="swift.common.ring.ring.Ring.get_part_nodes"><desc_name xml:space="preserve">get_part_nodes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">part</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get the nodes that are responsible for the partition. If one
                                node is responsible for more than one replica of the same
                                partition, it will only appear in the output once.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">part</literal_strong> – partition to get nodes for</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>list of node dicts</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <paragraph>See <reference internal="True" refid="swift.common.ring.ring.Ring.get_nodes" reftitle="swift.common.ring.ring.Ring.get_nodes"><literal classes="xref py py-func">get_nodes()</literal></reference> for a description of the node dicts.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'has_changed()\ (swift.common.ring.ring.Ring\ method)',\ u'swift.common.ring.ring.Ring.has_changed',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Ring" first="False" fullname="Ring.has_changed" ids="swift.common.ring.ring.Ring.has_changed" module="swift.common.ring.ring" names="swift.common.ring.ring.Ring.has_changed"><desc_name xml:space="preserve">has_changed</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Check to see if the ring on disk is different than the current one in
                                memory.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>True if the ring on disk has changed, False otherwise</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'next_part_power\ (swift.common.ring.ring.Ring\ attribute)',\ u'swift.common.ring.ring.Ring.next_part_power',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Ring" first="False" fullname="Ring.next_part_power" ids="swift.common.ring.ring.Ring.next_part_power" module="swift.common.ring.ring" names="swift.common.ring.ring.Ring.next_part_power"><desc_name xml:space="preserve">next_part_power</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'part_power\ (swift.common.ring.ring.Ring\ attribute)',\ u'swift.common.ring.ring.Ring.part_power',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Ring" first="False" fullname="Ring.part_power" ids="swift.common.ring.ring.Ring.part_power" module="swift.common.ring.ring" names="swift.common.ring.ring.Ring.part_power"><desc_name xml:space="preserve">part_power</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'partition_count\ (swift.common.ring.ring.Ring\ attribute)',\ u'swift.common.ring.ring.Ring.partition_count',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Ring" first="False" fullname="Ring.partition_count" ids="swift.common.ring.ring.Ring.partition_count" module="swift.common.ring.ring" names="swift.common.ring.ring.Ring.partition_count"><desc_name xml:space="preserve">partition_count</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Number of partitions in the ring.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'replica_count\ (swift.common.ring.ring.Ring\ attribute)',\ u'swift.common.ring.ring.Ring.replica_count',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Ring" first="False" fullname="Ring.replica_count" ids="swift.common.ring.ring.Ring.replica_count" module="swift.common.ring.ring" names="swift.common.ring.ring.Ring.replica_count"><desc_name xml:space="preserve">replica_count</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Number of replicas (full or partial) used in the ring.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'RingData\ (class\ in\ swift.common.ring.ring)',\ u'swift.common.ring.ring.RingData',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="RingData" ids="swift.common.ring.ring.RingData" module="swift.common.ring.ring" names="swift.common.ring.ring.RingData"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.ring.ring.</desc_addname><desc_name xml:space="preserve">RingData</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">replica2part2dev_id</desc_parameter><desc_parameter xml:space="preserve">devs</desc_parameter><desc_parameter xml:space="preserve">part_shift</desc_parameter><desc_parameter xml:space="preserve">next_part_power=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Partitioned consistent hashing ring data (used for serialization).</paragraph>
                    <index entries="['single',\ u'deserialize_v1()\ (swift.common.ring.ring.RingData\ class\ method)',\ u'swift.common.ring.ring.RingData.deserialize_v1',\ '',\ None]"></index>
                    <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                        <desc_signature class="RingData" first="False" fullname="RingData.deserialize_v1" ids="swift.common.ring.ring.RingData.deserialize_v1" module="swift.common.ring.ring" names="swift.common.ring.ring.RingData.deserialize_v1"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">deserialize_v1</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">gz_file</desc_parameter><desc_parameter xml:space="preserve">metadata_only=False</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Deserialize a v1 ring file into a dictionary with <title_reference>devs</title_reference>, <title_reference>part_shift</title_reference>,
                                and <title_reference>replica2part2dev_id</title_reference> keys.</paragraph>
                            <paragraph>If the optional kwarg <title_reference>metadata_only</title_reference> is True, then the
                                <title_reference>replica2part2dev_id</title_reference> is not loaded and that key in the returned
                                dictionary just has the value <title_reference>[]</title_reference>.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">gz_file</literal_strong> (<literal_emphasis>file</literal_emphasis>) – An opened file-like object which has already
                                                    consumed the 6 bytes of magic and version.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">metadata_only</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – If True, only load <title_reference>devs</title_reference> and <title_reference>part_shift</title_reference></paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>A dict containing <title_reference>devs</title_reference>, <title_reference>part_shift</title_reference>, and
                                            <title_reference>replica2part2dev_id</title_reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'load()\ (swift.common.ring.ring.RingData\ class\ method)',\ u'swift.common.ring.ring.RingData.load',\ '',\ None]"></index>
                    <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                        <desc_signature class="RingData" first="False" fullname="RingData.load" ids="swift.common.ring.ring.RingData.load" module="swift.common.ring.ring" names="swift.common.ring.ring.RingData.load"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">load</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">filename</desc_parameter><desc_parameter xml:space="preserve">metadata_only=False</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Load ring data from a file.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">filename</literal_strong> – Path to a file serialized by the save() method.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">metadata_only</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – If True, only load <title_reference>devs</title_reference> and <title_reference>part_shift</title_reference>.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>A RingData instance containing the loaded data.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'save()\ (swift.common.ring.ring.RingData\ method)',\ u'swift.common.ring.ring.RingData.save',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingData" first="False" fullname="RingData.save" ids="swift.common.ring.ring.RingData.save" module="swift.common.ring.ring" names="swift.common.ring.ring.RingData.save"><desc_name xml:space="preserve">save</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">filename</desc_parameter><desc_parameter xml:space="preserve">mtime=1300507380.0</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Serialize this RingData instance to disk.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">filename</literal_strong> – File into which this instance should be serialized.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">mtime</literal_strong> – time used to override mtime for gzip, default or None
                                                    if the caller wants to include time</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'serialize_v1()\ (swift.common.ring.ring.RingData\ method)',\ u'swift.common.ring.ring.RingData.serialize_v1',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingData" first="False" fullname="RingData.serialize_v1" ids="swift.common.ring.ring.RingData.serialize_v1" module="swift.common.ring.ring" names="swift.common.ring.ring.RingData.serialize_v1"><desc_name xml:space="preserve">serialize_v1</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">file_obj</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'to_dict()\ (swift.common.ring.ring.RingData\ method)',\ u'swift.common.ring.ring.RingData.to_dict',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingData" first="False" fullname="RingData.to_dict" ids="swift.common.ring.ring.RingData.to_dict" module="swift.common.ring.ring" names="swift.common.ring.ring.RingData.to_dict"><desc_name xml:space="preserve">to_dict</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <target refid="ring-builder"></target>
        </section>
        <section ids="module-swift.common.ring.builder id2 ring-builder" names="ring\ builder ring-builder">
            <title>Ring Builder</title>
            <index entries="['single',\ u'swift.common.ring.builder\ (module)',\ u'module-swift.common.ring.builder',\ '',\ None]"></index>
            <index entries="['single',\ u'RingBuilder\ (class\ in\ swift.common.ring.builder)',\ u'swift.common.ring.builder.RingBuilder',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="RingBuilder" ids="swift.common.ring.builder.RingBuilder" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.ring.builder.</desc_addname><desc_name xml:space="preserve">RingBuilder</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">part_power</desc_parameter><desc_parameter xml:space="preserve">replicas</desc_parameter><desc_parameter xml:space="preserve">min_part_hours</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Used to build swift.common.ring.RingData instances to be written to disk
                        and used with swift.common.ring.Ring instances. See bin/swift-ring-builder
                        for example usage.</paragraph>
                    <paragraph>The instance variable devs_changed indicates if the device information has
                        changed since the last balancing. This can be used by tools to know whether
                        a rebalance request is an isolated request or due to added, changed, or
                        removed devices.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">part_power</literal_strong> – number of partitions = 2**part_power.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">replicas</literal_strong> – number of replicas for each partition</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">min_part_hours</literal_strong> – minimum number of hours between partition changes</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                    <index entries="['single',\ u'add_dev()\ (swift.common.ring.builder.RingBuilder\ method)',\ u'swift.common.ring.builder.RingBuilder.add_dev',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.add_dev" ids="swift.common.ring.builder.RingBuilder.add_dev" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.add_dev"><desc_name xml:space="preserve">add_dev</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">dev</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Add a device to the ring. This device dict should have a minimum of the
                                following keys:</paragraph>
                            <table>
                                <tgroup cols="2">
                                    <colspec colwidth="6"></colspec>
                                    <colspec colwidth="63"></colspec>
                                    <tbody>
                                        <row>
                                            <entry>
                                                <paragraph>id</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>unique integer identifier amongst devices. Defaults to the next
                                                    id if the ‘id’ key is not provided in the dict</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>weight</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>a float of the relative weight of this device as compared to
                                                    others; this indicates how many partitions the builder will try
                                                    to assign to this device</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>region</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>integer indicating which region the device is in</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>zone</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>integer indicating which zone the device is in; a given
                                                    partition will not be assigned to multiple devices within the
                                                    same (region, zone) pair if there is any alternative</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>ip</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>the ip address of the device</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>port</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>the tcp port of the device</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>device</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>the device’s name on disk (sdb1, for example)</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>meta</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>general use ‘extra’ field; for example: the online date, the
                                                    hardware description</paragraph>
                                            </entry>
                                        </row>
                                    </tbody>
                                </tgroup>
                            </table>
                            <note>
                                <paragraph>This will not rebalance the ring immediately as you may want to
                                    make multiple changes for a single rebalance.</paragraph>
                            </note>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">dev</literal_strong> – device dict</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>id of device (not used in the tree anymore, but unknown
                                            users may depend on it)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'cancel_increase_partition_power()\ (swift.common.ring.builder.RingBuilder\ method)',\ u'swift.common.ring.builder.RingBuilder.cancel_increase_partition_power',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.cancel_increase_partition_power" ids="swift.common.ring.builder.RingBuilder.cancel_increase_partition_power" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.cancel_increase_partition_power"><desc_name xml:space="preserve">cancel_increase_partition_power</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Cancels a ring partition power increasement.</paragraph>
                            <paragraph>This sets the next_part_power to the current part_power. Object
                                replicators will still skip replication, and a cleanup is still
                                required. Finally, a finish_increase_partition_power needs to be run.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>False if next_part_power was not set or is equal to current
                                            part_power, otherwise True.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'change_min_part_hours()\ (swift.common.ring.builder.RingBuilder\ method)',\ u'swift.common.ring.builder.RingBuilder.change_min_part_hours',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.change_min_part_hours" ids="swift.common.ring.builder.RingBuilder.change_min_part_hours" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.change_min_part_hours"><desc_name xml:space="preserve">change_min_part_hours</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">min_part_hours</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Changes the value used to decide if a given partition can be moved
                                again. This restriction is to give the overall system enough time to
                                settle a partition to its new location before moving it to yet another
                                location. While no data would be lost if a partition is moved several
                                times quickly, it could make that data unreachable for a short period
                                of time.</paragraph>
                            <paragraph>This should be set to at least the average full partition replication
                                time. Starting it at 24 hours and then lowering it to what the
                                replicator reports as the longest partition cycle is best.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">min_part_hours</literal_strong> – new value for min_part_hours</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'copy_from()\ (swift.common.ring.builder.RingBuilder\ method)',\ u'swift.common.ring.builder.RingBuilder.copy_from',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.copy_from" ids="swift.common.ring.builder.RingBuilder.copy_from" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.copy_from"><desc_name xml:space="preserve">copy_from</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">builder</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Reinitializes this RingBuilder instance from data obtained from the
                                builder dict given. Code example:</paragraph>
                            <literal_block xml:space="preserve">b = RingBuilder(1, 1, 1)  # Dummy values
b.copy_from(builder)</literal_block>
                            <paragraph>This is to restore a RingBuilder that has had its b.to_dict()
                                previously saved.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'debug()\ (swift.common.ring.builder.RingBuilder\ method)',\ u'swift.common.ring.builder.RingBuilder.debug',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.debug" ids="swift.common.ring.builder.RingBuilder.debug" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.debug"><desc_name xml:space="preserve">debug</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwds</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Temporarily enables debug logging, useful in tests, e.g.</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>with rb.debug():</term>
                                        <definition>
                                            <paragraph>rb.rebalance()</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'ever_rebalanced\ (swift.common.ring.builder.RingBuilder\ attribute)',\ u'swift.common.ring.builder.RingBuilder.ever_rebalanced',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.ever_rebalanced" ids="swift.common.ring.builder.RingBuilder.ever_rebalanced" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.ever_rebalanced"><desc_name xml:space="preserve">ever_rebalanced</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'finish_increase_partition_power()\ (swift.common.ring.builder.RingBuilder\ method)',\ u'swift.common.ring.builder.RingBuilder.finish_increase_partition_power',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.finish_increase_partition_power" ids="swift.common.ring.builder.RingBuilder.finish_increase_partition_power" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.finish_increase_partition_power"><desc_name xml:space="preserve">finish_increase_partition_power</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Finish the partition power increase.</paragraph>
                            <paragraph>The hard links from the old object locations should be removed by now.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'from_dict()\ (swift.common.ring.builder.RingBuilder\ class\ method)',\ u'swift.common.ring.builder.RingBuilder.from_dict',\ '',\ None]"></index>
                    <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.from_dict" ids="swift.common.ring.builder.RingBuilder.from_dict" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.from_dict"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">from_dict</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">builder_data</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_balance()\ (swift.common.ring.builder.RingBuilder\ method)',\ u'swift.common.ring.builder.RingBuilder.get_balance',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.get_balance" ids="swift.common.ring.builder.RingBuilder.get_balance" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.get_balance"><desc_name xml:space="preserve">get_balance</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get the balance of the ring. The balance value is the highest
                                percentage of the desired amount of partitions a given device
                                wants. For instance, if the “worst” device wants (based on its
                                weight relative to the sum of all the devices’ weights) 123
                                partitions and it has 124 partitions, the balance value would
                                be 0.83 (1 extra / 123 wanted * 100 for percentage).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>balance of the ring</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_part_devices()\ (swift.common.ring.builder.RingBuilder\ method)',\ u'swift.common.ring.builder.RingBuilder.get_part_devices',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.get_part_devices" ids="swift.common.ring.builder.RingBuilder.get_part_devices" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.get_part_devices"><desc_name xml:space="preserve">get_part_devices</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">part</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get the devices that are responsible for the partition,
                                filtering out duplicates.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">part</literal_strong> – partition to get devices for</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>list of device dicts</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_required_overload()\ (swift.common.ring.builder.RingBuilder\ method)',\ u'swift.common.ring.builder.RingBuilder.get_required_overload',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.get_required_overload" ids="swift.common.ring.builder.RingBuilder.get_required_overload" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.get_required_overload"><desc_name xml:space="preserve">get_required_overload</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">weighted=None</desc_parameter><desc_parameter xml:space="preserve">wanted=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns the minimum overload value required to make the ring maximally
                                dispersed.</paragraph>
                            <paragraph>The required overload is the largest percentage change of any single
                                device from its weighted replicanth to its wanted replicanth (note:
                                under weighted devices have a negative percentage change) to archive
                                dispersion - that is to say a single device that must be overloaded by
                                5% is worse than 5 devices in a single tier overloaded by 1%.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_ring()\ (swift.common.ring.builder.RingBuilder\ method)',\ u'swift.common.ring.builder.RingBuilder.get_ring',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.get_ring" ids="swift.common.ring.builder.RingBuilder.get_ring" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.get_ring"><desc_name xml:space="preserve">get_ring</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get the ring, or more specifically, the swift.common.ring.RingData.
                                This ring data is the minimum required for use of the ring. The ring
                                builder itself keeps additional data such as when partitions were last
                                moved.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'id\ (swift.common.ring.builder.RingBuilder\ attribute)',\ u'swift.common.ring.builder.RingBuilder.id',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.id" ids="swift.common.ring.builder.RingBuilder.id" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.id"><desc_name xml:space="preserve">id</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'increase_partition_power()\ (swift.common.ring.builder.RingBuilder\ method)',\ u'swift.common.ring.builder.RingBuilder.increase_partition_power',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.increase_partition_power" ids="swift.common.ring.builder.RingBuilder.increase_partition_power" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.increase_partition_power"><desc_name xml:space="preserve">increase_partition_power</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Increases ring partition power by one.</paragraph>
                            <paragraph>Devices will be assigned to partitions like this:</paragraph>
                            <paragraph>OLD: 0, 3, 7, 5, 2, 1, …
                                NEW: 0, 0, 3, 3, 7, 7, 5, 5, 2, 2, 1, 1, …</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>False if next_part_power was not set or is equal to current
                                            part_power, None if something went wrong, otherwise True.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'load()\ (swift.common.ring.builder.RingBuilder\ class\ method)',\ u'swift.common.ring.builder.RingBuilder.load',\ '',\ None]"></index>
                    <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.load" ids="swift.common.ring.builder.RingBuilder.load" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.load"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">load</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">builder_file</desc_parameter><desc_parameter xml:space="preserve">open=&lt;built-in function open&gt;</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Obtain RingBuilder instance of the provided builder file</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">builder_file</literal_strong> – path to builder file to load</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>RingBuilder instance</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'min_part_seconds_left\ (swift.common.ring.builder.RingBuilder\ attribute)',\ u'swift.common.ring.builder.RingBuilder.min_part_seconds_left',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.min_part_seconds_left" ids="swift.common.ring.builder.RingBuilder.min_part_seconds_left" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.min_part_seconds_left"><desc_name xml:space="preserve">min_part_seconds_left</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Get the total seconds until a rebalance can be performed</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'part_shift\ (swift.common.ring.builder.RingBuilder\ attribute)',\ u'swift.common.ring.builder.RingBuilder.part_shift',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.part_shift" ids="swift.common.ring.builder.RingBuilder.part_shift" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.part_shift"><desc_name xml:space="preserve">part_shift</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'prepare_increase_partition_power()\ (swift.common.ring.builder.RingBuilder\ method)',\ u'swift.common.ring.builder.RingBuilder.prepare_increase_partition_power',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.prepare_increase_partition_power" ids="swift.common.ring.builder.RingBuilder.prepare_increase_partition_power" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.prepare_increase_partition_power"><desc_name xml:space="preserve">prepare_increase_partition_power</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Prepares a ring for partition power increase.</paragraph>
                            <paragraph>This makes it possible to compute the future location of any object
                                based on the next partition power.</paragraph>
                            <paragraph>In this phase object servers should create hard links when finalizing a
                                write to the new location as well. A relinker will be run after
                                restarting object-servers, creating hard links to all existing objects
                                in their future location.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>False if next_part_power was not set, otherwise True.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'pretend_min_part_hours_passed()\ (swift.common.ring.builder.RingBuilder\ method)',\ u'swift.common.ring.builder.RingBuilder.pretend_min_part_hours_passed',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.pretend_min_part_hours_passed" ids="swift.common.ring.builder.RingBuilder.pretend_min_part_hours_passed" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.pretend_min_part_hours_passed"><desc_name xml:space="preserve">pretend_min_part_hours_passed</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Override min_part_hours by marking all partitions as having been moved
                                255 hours ago and last move epoch to ‘the beginning of time’. This can
                                be used to force a full rebalance on the next call to rebalance.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'rebalance()\ (swift.common.ring.builder.RingBuilder\ method)',\ u'swift.common.ring.builder.RingBuilder.rebalance',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.rebalance" ids="swift.common.ring.builder.RingBuilder.rebalance" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.rebalance"><desc_name xml:space="preserve">rebalance</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">seed=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Rebalance the ring.</paragraph>
                            <paragraph>This is the main work function of the builder, as it will assign and
                                reassign partitions to devices in the ring based on weights, distinct
                                zones, recent reassignments, etc.</paragraph>
                            <paragraph>The process doesn’t always perfectly assign partitions (that’d take a
                                lot more analysis and therefore a lot more time – I had code that did
                                that before). Because of this, it keeps rebalancing until the device
                                skew (number of partitions a device wants compared to what it has) gets
                                below 1% or doesn’t change by more than 1% (only happens with a ring
                                that can’t be balanced no matter what).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">seed</literal_strong> – a value for the random seed (optional)</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>(number_of_partitions_altered, resulting_balance,
                                            number_of_removed_devices)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'remove_dev()\ (swift.common.ring.builder.RingBuilder\ method)',\ u'swift.common.ring.builder.RingBuilder.remove_dev',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.remove_dev" ids="swift.common.ring.builder.RingBuilder.remove_dev" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.remove_dev"><desc_name xml:space="preserve">remove_dev</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">dev_id</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Remove a device from the ring.</paragraph>
                            <note>
                                <paragraph>This will not rebalance the ring immediately as you may want to
                                    make multiple changes for a single rebalance.</paragraph>
                            </note>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">dev_id</literal_strong> – device id</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'save()\ (swift.common.ring.builder.RingBuilder\ method)',\ u'swift.common.ring.builder.RingBuilder.save',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.save" ids="swift.common.ring.builder.RingBuilder.save" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.save"><desc_name xml:space="preserve">save</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">builder_file</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Serialize this RingBuilder instance to disk.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">builder_file</literal_strong> – path to builder file to save</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'search_devs()\ (swift.common.ring.builder.RingBuilder\ method)',\ u'swift.common.ring.builder.RingBuilder.search_devs',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.search_devs" ids="swift.common.ring.builder.RingBuilder.search_devs" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.search_devs"><desc_name xml:space="preserve">search_devs</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">search_values</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Search devices by parameters.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">search_values</literal_strong> – a dictionary with search values to filter
                                            devices, supported parameters are id,
                                            region, zone, ip, port, replication_ip,
                                            replication_port, device, weight, meta</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>list of device dicts</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_dev_weight()\ (swift.common.ring.builder.RingBuilder\ method)',\ u'swift.common.ring.builder.RingBuilder.set_dev_weight',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.set_dev_weight" ids="swift.common.ring.builder.RingBuilder.set_dev_weight" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.set_dev_weight"><desc_name xml:space="preserve">set_dev_weight</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">dev_id</desc_parameter><desc_parameter xml:space="preserve">weight</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Set the weight of a device. This should be called rather than just
                                altering the weight key in the device dict directly, as the builder
                                will need to rebuild some internal state to reflect the change.</paragraph>
                            <note>
                                <paragraph>This will not rebalance the ring immediately as you may want to
                                    make multiple changes for a single rebalance.</paragraph>
                            </note>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">dev_id</literal_strong> – device id</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">weight</literal_strong> – new weight for device</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_overload()\ (swift.common.ring.builder.RingBuilder\ method)',\ u'swift.common.ring.builder.RingBuilder.set_overload',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.set_overload" ids="swift.common.ring.builder.RingBuilder.set_overload" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.set_overload"><desc_name xml:space="preserve">set_overload</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">overload</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_replicas()\ (swift.common.ring.builder.RingBuilder\ method)',\ u'swift.common.ring.builder.RingBuilder.set_replicas',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.set_replicas" ids="swift.common.ring.builder.RingBuilder.set_replicas" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.set_replicas"><desc_name xml:space="preserve">set_replicas</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">new_replica_count</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Changes the number of replicas in this ring.</paragraph>
                            <paragraph>If the new replica count is sufficiently different that
                                self._replica2part2dev will change size, sets
                                self.devs_changed. This is so tools like
                                bin/swift-ring-builder can know to write out the new ring
                                rather than bailing out due to lack of balance change.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'to_dict()\ (swift.common.ring.builder.RingBuilder\ method)',\ u'swift.common.ring.builder.RingBuilder.to_dict',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.to_dict" ids="swift.common.ring.builder.RingBuilder.to_dict" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.to_dict"><desc_name xml:space="preserve">to_dict</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns a dict that can be used later with copy_from to
                                restore a RingBuilder. swift-ring-builder uses this to
                                pickle.dump the dict to a file and later load that dict into
                                copy_from.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'validate()\ (swift.common.ring.builder.RingBuilder\ method)',\ u'swift.common.ring.builder.RingBuilder.validate',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.validate" ids="swift.common.ring.builder.RingBuilder.validate" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.validate"><desc_name xml:space="preserve">validate</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">stats=False</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Validate the ring.</paragraph>
                            <paragraph>This is a safety function to try to catch any bugs in the building
                                process. It ensures partitions have been assigned to real devices,
                                aren’t doubly assigned, etc. It can also optionally check the even
                                distribution of partitions across devices.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">stats</literal_strong> – if True, check distribution of partitions across devices</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>if stats is True, a tuple of (device_usage, worst_stat), else
                                            (None, None). device_usage[dev_id] will equal the number of
                                            partitions assigned to that device. worst_stat will equal the
                                            number of partitions the worst device is skewed from the
                                            number it should have.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.RingValidationError" refuri="misc#swift.common.exceptions.RingValidationError"><literal_strong>RingValidationError</literal_strong></reference> – problem was found with the ring.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'weight_of_one_part()\ (swift.common.ring.builder.RingBuilder\ method)',\ u'swift.common.ring.builder.RingBuilder.weight_of_one_part',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RingBuilder" first="False" fullname="RingBuilder.weight_of_one_part" ids="swift.common.ring.builder.RingBuilder.weight_of_one_part" module="swift.common.ring.builder" names="swift.common.ring.builder.RingBuilder.weight_of_one_part"><desc_name xml:space="preserve">weight_of_one_part</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns the weight of each partition as calculated from the
                                total weight of all the devices.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'RingValidationWarning',\ u'swift.common.ring.builder.RingValidationWarning',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="RingValidationWarning" ids="swift.common.ring.builder.RingValidationWarning" module="swift.common.ring.builder" names="swift.common.ring.builder.RingValidationWarning"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.ring.builder.</desc_addname><desc_name xml:space="preserve">RingValidationWarning</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">exceptions.Warning</literal></paragraph>
                </desc_content>
            </desc>
        </section>
        <section ids="module-swift.common.ring.composite_builder composite-ring-builder" names="composite\ ring\ builder">
            <title>Composite Ring Builder</title>
            <index entries="['single',\ u'swift.common.ring.composite_builder\ (module)',\ u'module-swift.common.ring.composite_builder',\ '',\ None]"></index>
            <paragraph>A standard ring built using the <reference internal="True" refuri="overview_ring#ring-builder"><inline classes="std std-ref">ring-builder</inline></reference> will attempt
                to randomly disperse replicas or erasure-coded fragments across failure
                domains, but does not provide any guarantees such as placing at least one
                replica of every partition into each region. Composite rings are intended to
                provide operators with greater control over the dispersion of object replicas
                or fragments across a cluster, in particular when there is a desire to
                have strict guarantees that some replicas or fragments are placed in certain
                failure domains. This is particularly important for policies with duplicated
                erasure-coded fragments.</paragraph>
            <paragraph>A composite ring comprises two or more component rings that are combined to
                form a single ring with a replica count equal to the sum of replica counts
                from the component rings. The component rings are built independently, using
                distinct devices in distinct regions, which means that the dispersion of
                replicas between the components can be guaranteed. The <literal>composite_builder</literal>
                utilities may then be used to combine components into a composite ring.</paragraph>
            <paragraph>For example, consider a normal ring <literal>ring0</literal> with replica count of 4 and
                devices in two regions <literal>r1</literal> and <literal>r2</literal>. Despite the best efforts of the
                ring-builder, it is possible for there to be three replicas of a particular
                partition placed in one region and only one replica placed in the other region.
                For example:</paragraph>
            <literal_block xml:space="preserve">part_n -&gt; r1z1h110/sdb r1z2h12/sdb r1z3h13/sdb r2z1h21/sdb</literal_block>
            <paragraph>Now consider two normal rings each with replica count of 2: <literal>ring1</literal> has
                devices in only <literal>r1</literal>; <literal>ring2</literal> has devices in only <literal>r2</literal>.
                When these rings are combined into a composite ring then every partition is
                guaranteed to be mapped to two devices in each of <literal>r1</literal> and <literal>r2</literal>, for
                example:</paragraph>
            <literal_block xml:space="preserve">part_n -&gt; r1z1h10/sdb r1z2h20/sdb  r2z1h21/sdb r2z2h22/sdb
          |_____________________|  |_____________________|
                     |                        |
                   ring1                    ring2</literal_block>
            <paragraph>The dispersion of partition replicas across failure domains within each of the
                two component rings may change as they are modified and rebalanced, but the
                dispersion of replicas between the two regions is guaranteed by the use of a
                composite ring.</paragraph>
            <paragraph>For rings to be formed into a composite they must satisfy the following
                requirements:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>All component rings must have the same part power (and therefore number of
                        partitions)</paragraph>
                </list_item>
                <list_item>
                    <paragraph>All component rings must have an integer replica count</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Each region may only be used in one component ring</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Each device may only be used in one component ring</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Under the hood, the composite ring has a <literal>_replica2part2dev_id</literal> table that is
                the union of the tables from the component rings. Whenever the component rings
                are rebalanced, the composite ring must be rebuilt. There is no dynamic
                rebuilding of the composite ring.</paragraph>
            <note>
                <paragraph>The order in which component rings are combined into a composite ring is
                    very significant because it determines the order in which the
                    Ring.get_part_nodes() method will provide primary nodes for the composite
                    ring and consequently the node indexes assigned to the primary nodes. For
                    an erasure-coded policy, inadvertent changes to the primary node indexes
                    could result in large amounts of data movement due to fragments being moved
                    to their new correct primary.</paragraph>
                <paragraph>The <literal>id</literal> of each component RingBuilder is therefore stored in metadata of
                    the composite and used to check for the component ordering when the same
                    composite ring is re-composed. RingBuilder <literal>id</literal>s are normally assigned
                    when a RingBuilder instance is first saved. Older RingBuilder instances
                    loaded from file may not have an <literal>id</literal> assigned and will need to be saved
                    before they can be used as components of a composite ring. This can be
                    achieved by, for example:</paragraph>
                <literal_block xml:space="preserve">swift-ring-builder &lt;builder-file&gt; rebalance --force</literal_block>
            </note>
            <index entries="['single',\ u'CompositeRingBuilder\ (class\ in\ swift.common.ring.composite_builder)',\ u'swift.common.ring.composite_builder.CompositeRingBuilder',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="CompositeRingBuilder" ids="swift.common.ring.composite_builder.CompositeRingBuilder" module="swift.common.ring.composite_builder" names="swift.common.ring.composite_builder.CompositeRingBuilder"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.ring.composite_builder.</desc_addname><desc_name xml:space="preserve">CompositeRingBuilder</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">builder_files=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Provides facility to create, persist, load, rebalance  and update composite
                        rings, for example:</paragraph>
                    <literal_block xml:space="preserve"># create a CompositeRingBuilder instance with a list of
# component builder files
crb = CompositeRingBuilder(["region1.builder", "region2.builder"])

# perform a cooperative rebalance of the component builders
crb.rebalance()

# call compose which will make a new RingData instance
ring_data = crb.compose()

# save the composite ring file
ring_data.save("composite_ring.gz")

# save the composite metadata file
crb.save("composite_builder.composite")

# load the persisted composite metadata file
crb = CompositeRingBuilder.load("composite_builder.composite")

# compose (optionally update the paths to the component builder files)
crb.compose(["/path/to/region1.builder", "/path/to/region2.builder"])</literal_block>
                    <paragraph>Composite ring metadata is persisted to file in JSON format. The metadata
                        has the structure shown below (using example values):</paragraph>
                    <literal_block xml:space="preserve">{
  "version": 4,
  "components": [
    {
      "version": 3,
      "id": "8e56f3b692d43d9a666440a3d945a03a",
      "replicas": 1
    },
    {
      "version": 5,
      "id": "96085923c2b644999dbfd74664f4301b",
      "replicas": 1
    }
  ]
  "component_builder_files": {
      "8e56f3b692d43d9a666440a3d945a03a": "/etc/swift/region1.builder",
      "96085923c2b644999dbfd74664f4301b": "/etc/swift/region2.builder",
  }
  "serialization_version": 1,
  "saved_path": "/etc/swift/multi-ring-1.composite",
}</literal_block>
                    <paragraph><title_reference>version</title_reference> is an integer representing the current version of the composite
                        ring, which increments each time the ring is successfully (re)composed.</paragraph>
                    <paragraph><title_reference>components</title_reference> is a list of dicts, each of which describes relevant
                        properties of a component ring</paragraph>
                    <paragraph><title_reference>component_builder_files</title_reference> is a dict that maps component ring builder ids to
                        the file from which that component ring builder was loaded.</paragraph>
                    <paragraph><title_reference>serialization_version</title_reference> is an integer constant.</paragraph>
                    <paragraph><title_reference>saved_path</title_reference> is the path to which the metadata was written.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Params builder_files</field_name>
                            <field_body>
                                <paragraph>a list of paths to builder files that will be used
                                    as components of the composite ring.</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                    <index entries="['single',\ u'can_part_move()\ (swift.common.ring.composite_builder.CompositeRingBuilder\ method)',\ u'swift.common.ring.composite_builder.CompositeRingBuilder.can_part_move',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="CompositeRingBuilder" first="False" fullname="CompositeRingBuilder.can_part_move" ids="swift.common.ring.composite_builder.CompositeRingBuilder.can_part_move" module="swift.common.ring.composite_builder" names="swift.common.ring.composite_builder.CompositeRingBuilder.can_part_move"><desc_name xml:space="preserve">can_part_move</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">part</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Check with all component builders that it is ok to move a partition.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">part</literal_strong> – The partition to check.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>True if all component builders agree that the partition can be
                                            moved, False otherwise.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'compose()\ (swift.common.ring.composite_builder.CompositeRingBuilder\ method)',\ u'swift.common.ring.composite_builder.CompositeRingBuilder.compose',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="CompositeRingBuilder" first="False" fullname="CompositeRingBuilder.compose" ids="swift.common.ring.composite_builder.CompositeRingBuilder.compose" module="swift.common.ring.composite_builder" names="swift.common.ring.composite_builder.CompositeRingBuilder.compose"><desc_name xml:space="preserve">compose</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">builder_files=None</desc_parameter><desc_parameter xml:space="preserve">force=False</desc_parameter><desc_parameter xml:space="preserve">require_modified=False</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Builds a composite ring using component ring builders loaded from a
                                list of builder files and updates composite ring metadata.</paragraph>
                            <paragraph>If a list of component ring builder files is given then that will be
                                used to load component ring builders. Otherwise, component ring
                                builders will be loaded using the list of builder files that was set
                                when the instance was constructed.</paragraph>
                            <paragraph>In either case, if metadata for an existing composite ring has been
                                loaded then the component ring builders are verified for consistency
                                with the existing composition of builders, unless the optional
                                <literal>force</literal> flag if set True.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">builder_files</literal_strong> – Optional list of paths to ring builder
                                                    files that will be used to load the component ring builders.
                                                    Typically the list of component builder files will have been set
                                                    when the instance was constructed, for example when using the
                                                    load() class method. However, this parameter may be used if the
                                                    component builder file paths have moved, or, in conjunction with
                                                    the <literal>force</literal> parameter, if a new list of component builders is to
                                                    be used.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">force</literal_strong> – if True then do not verify given builders are
                                                    consistent with any existing composite ring (default is False).</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">require_modified</literal_strong> – if True and <literal>force</literal> is False, then
                                                    verify that at least one of the given builders has been modified
                                                    since the composite ring was last built (default is False).</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>An instance of <reference internal="True" refid="swift.common.ring.ring.RingData" reftitle="swift.common.ring.ring.RingData"><literal classes="xref py py-class">swift.common.ring.ring.RingData</literal></reference></paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph>ValueError if the component ring builders are not suitable for
                                            composing with each other, or are inconsistent with any existing
                                            composite ring, or if require_modified is True and there has been
                                            no change with respect to the existing ring.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'load()\ (swift.common.ring.composite_builder.CompositeRingBuilder\ class\ method)',\ u'swift.common.ring.composite_builder.CompositeRingBuilder.load',\ '',\ None]"></index>
                    <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                        <desc_signature class="CompositeRingBuilder" first="False" fullname="CompositeRingBuilder.load" ids="swift.common.ring.composite_builder.CompositeRingBuilder.load" module="swift.common.ring.composite_builder" names="swift.common.ring.composite_builder.CompositeRingBuilder.load"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">load</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">path_to_file</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Load composite ring metadata.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">path_to_file</literal_strong> – Absolute path to a composite ring JSON file.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>an instance of <reference internal="True" refid="swift.common.ring.composite_builder.CompositeRingBuilder" reftitle="swift.common.ring.composite_builder.CompositeRingBuilder"><literal classes="xref py py-class">CompositeRingBuilder</literal></reference></paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong>IOError</literal_strong> – if there is a problem opening the file</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong>ValueError</literal_strong> – if the file does not contain valid composite ring
                                                    metadata</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'load_components()\ (swift.common.ring.composite_builder.CompositeRingBuilder\ method)',\ u'swift.common.ring.composite_builder.CompositeRingBuilder.load_components',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="CompositeRingBuilder" first="False" fullname="CompositeRingBuilder.load_components" ids="swift.common.ring.composite_builder.CompositeRingBuilder.load_components" module="swift.common.ring.composite_builder" names="swift.common.ring.composite_builder.CompositeRingBuilder.load_components"><desc_name xml:space="preserve">load_components</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">builder_files=None</desc_parameter><desc_parameter xml:space="preserve">force=False</desc_parameter><desc_parameter xml:space="preserve">require_modified=False</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Loads component ring builders from builder files. Previously loaded
                                component ring builders will discarded and reloaded.</paragraph>
                            <paragraph>If a list of component ring builder files is given then that will be
                                used to load component ring builders. Otherwise, component ring
                                builders will be loaded using the list of builder files that was set
                                when the instance was constructed.</paragraph>
                            <paragraph>In either case, if metadata for an existing composite ring has been
                                loaded then the component ring builders are verified for consistency
                                with the existing composition of builders, unless the optional
                                <literal>force</literal> flag if set True.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">builder_files</literal_strong> – Optional list of paths to ring builder
                                                    files that will be used to load the component ring builders.
                                                    Typically the list of component builder files will have been set
                                                    when the instance was constructed, for example when using the
                                                    load() class method. However, this parameter may be used if the
                                                    component builder file paths have moved, or, in conjunction with
                                                    the <literal>force</literal> parameter, if a new list of component builders is to
                                                    be used.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">force</literal_strong> – if True then do not verify given builders are
                                                    consistent with any existing composite ring (default is False).</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">require_modified</literal_strong> – if True and <literal>force</literal> is False, then
                                                    verify that at least one of the given builders has been modified
                                                    since the composite ring was last built (default is False).</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>A tuple of (builder files, loaded builders)</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph>ValueError if the component ring builders are not suitable for
                                            composing with each other, or are inconsistent with any existing
                                            composite ring, or if require_modified is True and there has been
                                            no change with respect to the existing ring.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'rebalance()\ (swift.common.ring.composite_builder.CompositeRingBuilder\ method)',\ u'swift.common.ring.composite_builder.CompositeRingBuilder.rebalance',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="CompositeRingBuilder" first="False" fullname="CompositeRingBuilder.rebalance" ids="swift.common.ring.composite_builder.CompositeRingBuilder.rebalance" module="swift.common.ring.composite_builder" names="swift.common.ring.composite_builder.CompositeRingBuilder.rebalance"><desc_name xml:space="preserve">rebalance</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Cooperatively rebalances all component ring builders.</paragraph>
                            <paragraph>This method does not change the state of the composite ring; a
                                subsequent call to <reference internal="True" refid="swift.common.ring.composite_builder.CompositeRingBuilder.compose" reftitle="swift.common.ring.composite_builder.CompositeRingBuilder.compose"><literal classes="xref py py-meth">compose()</literal></reference> is required to generate updated
                                composite <literal classes="xref py py-class">RingData</literal>.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph><paragraph>A list of dicts, one per component builder, each having the
                                                following keys:</paragraph><bullet_list bullet="*"><list_item><paragraph>’builder_file’ maps to the component builder file;</paragraph></list_item><list_item><paragraph>’builder’ maps to the corresponding instance of
                                                        <reference internal="True" refid="swift.common.ring.builder.RingBuilder" reftitle="swift.common.ring.builder.RingBuilder"><literal classes="xref py py-class">swift.common.ring.builder.RingBuilder</literal></reference>;</paragraph></list_item><list_item><paragraph>’result’ maps to the results of the rebalance of that component
                                                        i.e. a tuple of: <title_reference>(number_of_partitions_altered,
                                                            resulting_balance, number_of_removed_devices)</title_reference></paragraph></list_item></bullet_list><paragraph>The list has the same order as components in the composite ring.</paragraph></paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.RingBuilderError" refuri="misc#swift.common.exceptions.RingBuilderError"><literal_strong>RingBuilderError</literal_strong></reference> – if there is an error while rebalancing any
                                            component builder.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'save()\ (swift.common.ring.composite_builder.CompositeRingBuilder\ method)',\ u'swift.common.ring.composite_builder.CompositeRingBuilder.save',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="CompositeRingBuilder" first="False" fullname="CompositeRingBuilder.save" ids="swift.common.ring.composite_builder.CompositeRingBuilder.save" module="swift.common.ring.composite_builder" names="swift.common.ring.composite_builder.CompositeRingBuilder.save"><desc_name xml:space="preserve">save</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">path_to_file</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Save composite ring metadata to given file. See
                                <reference internal="True" refid="swift.common.ring.composite_builder.CompositeRingBuilder" reftitle="swift.common.ring.composite_builder.CompositeRingBuilder"><literal classes="xref py py-class">CompositeRingBuilder</literal></reference> for details of the persisted metadata
                                format.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">path_to_file</literal_strong> – Absolute path to a composite ring file</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><literal_strong>ValueError</literal_strong> – if no composite ring has been built yet with this
                                            instance</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'to_dict()\ (swift.common.ring.composite_builder.CompositeRingBuilder\ method)',\ u'swift.common.ring.composite_builder.CompositeRingBuilder.to_dict',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="CompositeRingBuilder" first="False" fullname="CompositeRingBuilder.to_dict" ids="swift.common.ring.composite_builder.CompositeRingBuilder.to_dict" module="swift.common.ring.composite_builder" names="swift.common.ring.composite_builder.CompositeRingBuilder.to_dict"><desc_name xml:space="preserve">to_dict</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Transform the composite ring attributes to a dict. See
                                <reference internal="True" refid="swift.common.ring.composite_builder.CompositeRingBuilder" reftitle="swift.common.ring.composite_builder.CompositeRingBuilder"><literal classes="xref py py-class">CompositeRingBuilder</literal></reference> for details of the persisted metadata
                                format.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a composite ring metadata dict</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'update_last_part_moves()\ (swift.common.ring.composite_builder.CompositeRingBuilder\ method)',\ u'swift.common.ring.composite_builder.CompositeRingBuilder.update_last_part_moves',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="CompositeRingBuilder" first="False" fullname="CompositeRingBuilder.update_last_part_moves" ids="swift.common.ring.composite_builder.CompositeRingBuilder.update_last_part_moves" module="swift.common.ring.composite_builder" names="swift.common.ring.composite_builder.CompositeRingBuilder.update_last_part_moves"><desc_name xml:space="preserve">update_last_part_moves</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Updates the record of how many hours ago each partition was moved in
                                all component builders.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'CooperativeRingBuilder\ (class\ in\ swift.common.ring.composite_builder)',\ u'swift.common.ring.composite_builder.CooperativeRingBuilder',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="CooperativeRingBuilder" ids="swift.common.ring.composite_builder.CooperativeRingBuilder" module="swift.common.ring.composite_builder" names="swift.common.ring.composite_builder.CooperativeRingBuilder"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.ring.composite_builder.</desc_addname><desc_name xml:space="preserve">CooperativeRingBuilder</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">part_power</desc_parameter><desc_parameter xml:space="preserve">replicas</desc_parameter><desc_parameter xml:space="preserve">min_part_hours</desc_parameter><desc_parameter xml:space="preserve">parent_builder</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.ring.builder.RingBuilder" reftitle="swift.common.ring.builder.RingBuilder"><literal classes="xref py py-class">swift.common.ring.builder.RingBuilder</literal></reference></paragraph>
                    <paragraph>A subclass of <literal classes="xref py py-class">RingBuilder</literal> that participates in cooperative
                        rebalance.</paragraph>
                    <paragraph>During rebalance this subclass will consult with its <title_reference>parent_builder</title_reference>
                        before moving a partition. The <title_reference>parent_builder</title_reference> may in turn check with
                        co-builders (including this instance) to verify that none have moved that
                        partition in the last <title_reference>min_part_hours</title_reference>.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">part_power</literal_strong> – number of partitions = 2**part_power.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">replicas</literal_strong> – number of replicas for each partition.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">min_part_hours</literal_strong> – minimum number of hours between partition changes.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">parent_builder</literal_strong> – an instance of <reference internal="True" refid="swift.common.ring.composite_builder.CompositeRingBuilder" reftitle="swift.common.ring.composite_builder.CompositeRingBuilder"><literal classes="xref py py-class">CompositeRingBuilder</literal></reference>.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                    <index entries="['single',\ u'can_part_move()\ (swift.common.ring.composite_builder.CooperativeRingBuilder\ method)',\ u'swift.common.ring.composite_builder.CooperativeRingBuilder.can_part_move',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="CooperativeRingBuilder" first="False" fullname="CooperativeRingBuilder.can_part_move" ids="swift.common.ring.composite_builder.CooperativeRingBuilder.can_part_move" module="swift.common.ring.composite_builder" names="swift.common.ring.composite_builder.CooperativeRingBuilder.can_part_move"><desc_name xml:space="preserve">can_part_move</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">part</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Check that in the context of this builder alone it is ok to move a
                                partition.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">part</literal_strong> – The partition to check.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>True if the partition can be moved, False otherwise.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'update_last_part_moves()\ (swift.common.ring.composite_builder.CooperativeRingBuilder\ method)',\ u'swift.common.ring.composite_builder.CooperativeRingBuilder.update_last_part_moves',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="CooperativeRingBuilder" first="False" fullname="CooperativeRingBuilder.update_last_part_moves" ids="swift.common.ring.composite_builder.CooperativeRingBuilder.update_last_part_moves" module="swift.common.ring.composite_builder" names="swift.common.ring.composite_builder.CooperativeRingBuilder.update_last_part_moves"><desc_name xml:space="preserve">update_last_part_moves</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Updates the record of how many hours ago each partition was moved in
                                in this builder.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'check_against_existing()\ (in\ module\ swift.common.ring.composite_builder)',\ u'swift.common.ring.composite_builder.check_against_existing',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="check_against_existing" ids="swift.common.ring.composite_builder.check_against_existing" module="swift.common.ring.composite_builder" names="swift.common.ring.composite_builder.check_against_existing"><desc_addname xml:space="preserve">swift.common.ring.composite_builder.</desc_addname><desc_name xml:space="preserve">check_against_existing</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">old_composite_meta</desc_parameter><desc_parameter xml:space="preserve">new_composite_meta</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Check that the given builders and their order are the same as that
                        used to build an existing composite ring. Return True if any of the given
                        builders has been modified with respect to its state when the given
                        component_meta was created.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">old_composite_meta</literal_strong> – a dict of the form returned by
                                            <literal classes="xref py py-func">_make_composite_meta()</literal></paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">new_composite_meta</literal_strong> – a dict of the form returned by
                                            <literal classes="xref py py-func">_make_composite_meta()</literal></paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>True if any of the components has been modified, False otherwise.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>Value Error</literal_strong> – if proposed new components do not match any existing
                                    components.</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'check_builder_ids()\ (in\ module\ swift.common.ring.composite_builder)',\ u'swift.common.ring.composite_builder.check_builder_ids',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="check_builder_ids" ids="swift.common.ring.composite_builder.check_builder_ids" module="swift.common.ring.composite_builder" names="swift.common.ring.composite_builder.check_builder_ids"><desc_addname xml:space="preserve">swift.common.ring.composite_builder.</desc_addname><desc_name xml:space="preserve">check_builder_ids</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">builders</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Check that all builders in the given list have id’s assigned and that no
                        id appears more than once in the list.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">builders</literal_strong> – a list instances of
                                    <reference internal="True" refid="swift.common.ring.builder.RingBuilder" reftitle="swift.common.ring.builder.RingBuilder"><literal classes="xref py py-class">swift.common.ring.builder.RingBuilder</literal></reference></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph>ValueError if any builder id is missing or repeated</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'check_for_dev_uniqueness()\ (in\ module\ swift.common.ring.composite_builder)',\ u'swift.common.ring.composite_builder.check_for_dev_uniqueness',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="check_for_dev_uniqueness" ids="swift.common.ring.composite_builder.check_for_dev_uniqueness" module="swift.common.ring.composite_builder" names="swift.common.ring.composite_builder.check_for_dev_uniqueness"><desc_addname xml:space="preserve">swift.common.ring.composite_builder.</desc_addname><desc_name xml:space="preserve">check_for_dev_uniqueness</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">builders</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Check that no device appears in more than one of the given list of
                        builders.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">builders</literal_strong> – a list of <reference internal="True" refid="swift.common.ring.builder.RingBuilder" reftitle="swift.common.ring.builder.RingBuilder"><literal classes="xref py py-class">swift.common.ring.builder.RingBuilder</literal></reference>
                                    instances</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>ValueError</literal_strong> – if the same device is found in more than one builder</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'check_same_builder()\ (in\ module\ swift.common.ring.composite_builder)',\ u'swift.common.ring.composite_builder.check_same_builder',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="check_same_builder" ids="swift.common.ring.composite_builder.check_same_builder" module="swift.common.ring.composite_builder" names="swift.common.ring.composite_builder.check_same_builder"><desc_addname xml:space="preserve">swift.common.ring.composite_builder.</desc_addname><desc_name xml:space="preserve">check_same_builder</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">old_component</desc_parameter><desc_parameter xml:space="preserve">new_component</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Check that the given new_component metadata describes the same builder as
                        the given old_component metadata. The new_component builder does not
                        necessarily need to be in the same state as when the old_component metadata
                        was created to satisfy this check e.g. it may have changed devs and been
                        rebalanced.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">old_component</literal_strong> – a dict of metadata describing a component builder</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">new_component</literal_strong> – a dict of metadata describing a component builder</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>ValueError</literal_strong> – if the new_component is not the same as that described
                                    by the old_component</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'compose_rings()\ (in\ module\ swift.common.ring.composite_builder)',\ u'swift.common.ring.composite_builder.compose_rings',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="compose_rings" ids="swift.common.ring.composite_builder.compose_rings" module="swift.common.ring.composite_builder" names="swift.common.ring.composite_builder.compose_rings"><desc_addname xml:space="preserve">swift.common.ring.composite_builder.</desc_addname><desc_name xml:space="preserve">compose_rings</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">builders</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Given a list of component ring builders, perform validation on the list of
                        builders and return a composite RingData instance.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">builders</literal_strong> – a list of
                                    <reference internal="True" refid="swift.common.ring.builder.RingBuilder" reftitle="swift.common.ring.builder.RingBuilder"><literal classes="xref py py-class">swift.common.ring.builder.RingBuilder</literal></reference> instances</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a new RingData instance built from the component builders</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>ValueError</literal_strong> – if the builders are invalid with respect to each other</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'is_builder_newer()\ (in\ module\ swift.common.ring.composite_builder)',\ u'swift.common.ring.composite_builder.is_builder_newer',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="is_builder_newer" ids="swift.common.ring.composite_builder.is_builder_newer" module="swift.common.ring.composite_builder" names="swift.common.ring.composite_builder.is_builder_newer"><desc_addname xml:space="preserve">swift.common.ring.composite_builder.</desc_addname><desc_name xml:space="preserve">is_builder_newer</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">old_component</desc_parameter><desc_parameter xml:space="preserve">new_component</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Return True if the given builder has been modified with respect to its
                        state when the given component_meta was created.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">old_component</literal_strong> – a dict of metadata describing a component ring</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">new_component</literal_strong> – a dict of metadata describing a component ring</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>True if the builder has been modified, False otherwise.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>ValueError</literal_strong> – if the version of the new_component is older than the
                                    version of the existing component.</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'pre_validate_all_builders()\ (in\ module\ swift.common.ring.composite_builder)',\ u'swift.common.ring.composite_builder.pre_validate_all_builders',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="pre_validate_all_builders" ids="swift.common.ring.composite_builder.pre_validate_all_builders" module="swift.common.ring.composite_builder" names="swift.common.ring.composite_builder.pre_validate_all_builders"><desc_addname xml:space="preserve">swift.common.ring.composite_builder.</desc_addname><desc_name xml:space="preserve">pre_validate_all_builders</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">builders</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Pre-validation for all component ring builders that are to be included in
                        the composite ring. Checks that all component rings are valid with respect
                        to each other.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">builders</literal_strong> – a list of <reference internal="True" refid="swift.common.ring.builder.RingBuilder" reftitle="swift.common.ring.builder.RingBuilder"><literal classes="xref py py-class">swift.common.ring.builder.RingBuilder</literal></reference>
                                    instances</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>ValueError</literal_strong> – if the builders are invalid with respect to each other</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
        </section>
    </section>
</document>
