<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/swift/doc/source/proxy.rst">
    <target refid="proxy"></target>
    <section dupnames="proxy" ids="proxy id1" names="proxy">
        <title>Proxy</title>
        <target refid="proxy-controllers"></target>
        <section ids="proxy-controllers id2" names="proxy\ controllers proxy-controllers">
            <title>Proxy Controllers</title>
            <section ids="module-swift.proxy.controllers.base base" names="base">
                <title>Base</title>
                <index entries="['single',\ u'swift.proxy.controllers.base\ (module)',\ u'module-swift.proxy.controllers.base',\ '',\ None]"></index>
                <index entries="['single',\ u'Controller\ (class\ in\ swift.proxy.controllers.base)',\ u'swift.proxy.controllers.base.Controller',\ '',\ None]"></index>
                <desc desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="" first="False" fullname="Controller" ids="swift.proxy.controllers.base.Controller" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.Controller"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.proxy.controllers.base.</desc_addname><desc_name xml:space="preserve">Controller</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">app</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                        <paragraph>Base WSGI controller class for the proxy</paragraph>
                        <index entries="['single',\ u'GET()\ (swift.proxy.controllers.base.Controller\ method)',\ u'swift.proxy.controllers.base.Controller.GET',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="Controller" first="False" fullname="Controller.GET" ids="swift.proxy.controllers.base.Controller.GET" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.Controller.GET"><desc_name xml:space="preserve">GET</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Handler for HTTP GET requests.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">req</literal_strong> – The client request</paragraph>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>the response to the client</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'GETorHEAD_base()\ (swift.proxy.controllers.base.Controller\ method)',\ u'swift.proxy.controllers.base.Controller.GETorHEAD_base',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="Controller" first="False" fullname="Controller.GETorHEAD_base" ids="swift.proxy.controllers.base.Controller.GETorHEAD_base" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.Controller.GETorHEAD_base"><desc_name xml:space="preserve">GETorHEAD_base</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter><desc_parameter xml:space="preserve">server_type</desc_parameter><desc_parameter xml:space="preserve">node_iter</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">path</desc_parameter><desc_parameter xml:space="preserve">concurrency=1</desc_parameter><desc_parameter xml:space="preserve">client_chunk_size=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Base handler for HTTP GET or HEAD requests.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">req</literal_strong> – swob.Request object</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">server_type</literal_strong> – server type used in logging</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">node_iter</literal_strong> – an iterator to obtain nodes from</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">partition</literal_strong> – partition</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">path</literal_strong> – path for the request</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">concurrency</literal_strong> – number of requests to run concurrently</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">client_chunk_size</literal_strong> – chunk size for response body iterator</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>swob.Response object</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'HEAD()\ (swift.proxy.controllers.base.Controller\ method)',\ u'swift.proxy.controllers.base.Controller.HEAD',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="Controller" first="False" fullname="Controller.HEAD" ids="swift.proxy.controllers.base.Controller.HEAD" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.Controller.HEAD"><desc_name xml:space="preserve">HEAD</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Handler for HTTP HEAD requests.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">req</literal_strong> – The client request</paragraph>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>the response to the client</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'OPTIONS()\ (swift.proxy.controllers.base.Controller\ method)',\ u'swift.proxy.controllers.base.Controller.OPTIONS',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="Controller" first="False" fullname="Controller.OPTIONS" ids="swift.proxy.controllers.base.Controller.OPTIONS" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.Controller.OPTIONS"><desc_name xml:space="preserve">OPTIONS</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Base handler for OPTIONS requests</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">req</literal_strong> – swob.Request object</paragraph>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>swob.Response object</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'account_info()\ (swift.proxy.controllers.base.Controller\ method)',\ u'swift.proxy.controllers.base.Controller.account_info',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="Controller" first="False" fullname="Controller.account_info" ids="swift.proxy.controllers.base.Controller.account_info" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.Controller.account_info"><desc_name xml:space="preserve">account_info</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">req=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Get account information, and also verify that the account exists.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">account</literal_strong> – name of the account to get the info for</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">req</literal_strong> – caller’s HTTP request context object (optional)</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>tuple of (account partition, account nodes, container_count)
                                                or (None, None, None) if it does not exist</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'allowed_methods\ (swift.proxy.controllers.base.Controller\ attribute)',\ u'swift.proxy.controllers.base.Controller.allowed_methods',\ '',\ None]"></index>
                        <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                            <desc_signature class="Controller" first="False" fullname="Controller.allowed_methods" ids="swift.proxy.controllers.base.Controller.allowed_methods" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.Controller.allowed_methods"><desc_name xml:space="preserve">allowed_methods</desc_name></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'autocreate_account()\ (swift.proxy.controllers.base.Controller\ method)',\ u'swift.proxy.controllers.base.Controller.autocreate_account',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="Controller" first="False" fullname="Controller.autocreate_account" ids="swift.proxy.controllers.base.Controller.autocreate_account" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.Controller.autocreate_account"><desc_name xml:space="preserve">autocreate_account</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Autocreate an account</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">req</literal_strong> – request leading to this autocreate</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">account</literal_strong> – the unquoted account name</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'best_response()\ (swift.proxy.controllers.base.Controller\ method)',\ u'swift.proxy.controllers.base.Controller.best_response',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="Controller" first="False" fullname="Controller.best_response" ids="swift.proxy.controllers.base.Controller.best_response" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.Controller.best_response"><desc_name xml:space="preserve">best_response</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter><desc_parameter xml:space="preserve">statuses</desc_parameter><desc_parameter xml:space="preserve">reasons</desc_parameter><desc_parameter xml:space="preserve">bodies</desc_parameter><desc_parameter xml:space="preserve">server_type</desc_parameter><desc_parameter xml:space="preserve">etag=None</desc_parameter><desc_parameter xml:space="preserve">headers=None</desc_parameter><desc_parameter xml:space="preserve">overrides=None</desc_parameter><desc_parameter xml:space="preserve">quorum_size=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Given a list of responses from several servers, choose the best to
                                    return to the API.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">req</literal_strong> – swob.Request object</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">statuses</literal_strong> – list of statuses returned</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">reasons</literal_strong> – list of reasons for each status</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">bodies</literal_strong> – bodies of each response</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">server_type</literal_strong> – type of server the responses came from</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">etag</literal_strong> – etag</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">headers</literal_strong> – headers of each response</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">overrides</literal_strong> – overrides to apply when lacking quorum</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">quorum_size</literal_strong> – quorum size to use</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>swob.Response object with the correct status, body, etc. set</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'container_info()\ (swift.proxy.controllers.base.Controller\ method)',\ u'swift.proxy.controllers.base.Controller.container_info',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="Controller" first="False" fullname="Controller.container_info" ids="swift.proxy.controllers.base.Controller.container_info" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.Controller.container_info"><desc_name xml:space="preserve">container_info</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">req=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Get container information and thusly verify container existence.
                                    This will also verify account existence.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">account</literal_strong> – account name for the container</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">container</literal_strong> – container name to look up</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">req</literal_strong> – caller’s HTTP request context object (optional)</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>dict containing at least container partition (‘partition’),
                                                container nodes (‘containers’), container read
                                                acl (‘read_acl’), container write acl (‘write_acl’),
                                                and container sync key (‘sync_key’).
                                                Values are set to None if the container does not exist.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'generate_request_headers()\ (swift.proxy.controllers.base.Controller\ method)',\ u'swift.proxy.controllers.base.Controller.generate_request_headers',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="Controller" first="False" fullname="Controller.generate_request_headers" ids="swift.proxy.controllers.base.Controller.generate_request_headers" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.Controller.generate_request_headers"><desc_name xml:space="preserve">generate_request_headers</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">orig_req=None</desc_parameter><desc_parameter xml:space="preserve">additional=None</desc_parameter><desc_parameter xml:space="preserve">transfer=False</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Create a list of headers to be used in backend requests</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">orig_req</literal_strong> – the original request sent by the client to the proxy</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">additional</literal_strong> – additional headers to send to the backend</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">transfer</literal_strong> – If True, transfer headers from original client request</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>a dictionary of headers</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'have_quorum()\ (swift.proxy.controllers.base.Controller\ method)',\ u'swift.proxy.controllers.base.Controller.have_quorum',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="Controller" first="False" fullname="Controller.have_quorum" ids="swift.proxy.controllers.base.Controller.have_quorum" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.Controller.have_quorum"><desc_name xml:space="preserve">have_quorum</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">statuses</desc_parameter><desc_parameter xml:space="preserve">node_count</desc_parameter><desc_parameter xml:space="preserve">quorum=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Given a list of statuses from several requests, determine if
                                    a quorum response can already be decided.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">statuses</literal_strong> – list of statuses returned</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">node_count</literal_strong> – number of nodes being queried (basically ring count)</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">quorum</literal_strong> – number of statuses required for quorum</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>True or False, depending on if quorum is established</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'is_origin_allowed()\ (swift.proxy.controllers.base.Controller\ method)',\ u'swift.proxy.controllers.base.Controller.is_origin_allowed',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="Controller" first="False" fullname="Controller.is_origin_allowed" ids="swift.proxy.controllers.base.Controller.is_origin_allowed" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.Controller.is_origin_allowed"><desc_name xml:space="preserve">is_origin_allowed</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">cors_info</desc_parameter><desc_parameter xml:space="preserve">origin</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Is the given Origin allowed to make requests to this resource</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">cors_info</literal_strong> – the resource’s CORS related metadata headers</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">origin</literal_strong> – the origin making the request</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>True or False</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'make_requests()\ (swift.proxy.controllers.base.Controller\ method)',\ u'swift.proxy.controllers.base.Controller.make_requests',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="Controller" first="False" fullname="Controller.make_requests" ids="swift.proxy.controllers.base.Controller.make_requests" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.Controller.make_requests"><desc_name xml:space="preserve">make_requests</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter><desc_parameter xml:space="preserve">ring</desc_parameter><desc_parameter xml:space="preserve">part</desc_parameter><desc_parameter xml:space="preserve">method</desc_parameter><desc_parameter xml:space="preserve">path</desc_parameter><desc_parameter xml:space="preserve">headers</desc_parameter><desc_parameter xml:space="preserve">query_string=''</desc_parameter><desc_parameter xml:space="preserve">overrides=None</desc_parameter><desc_parameter xml:space="preserve">node_count=None</desc_parameter><desc_parameter xml:space="preserve">node_iterator=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Sends an HTTP request to multiple nodes and aggregates the results.
                                    It attempts the primary nodes concurrently, then iterates over the
                                    handoff nodes as needed.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">req</literal_strong> – a request sent by the client</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">ring</literal_strong> – the ring used for finding backend servers</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">part</literal_strong> – the partition number</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">method</literal_strong> – the method to send to the backend</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">path</literal_strong> – the path to send to the backend
                                                        (full path ends up being  /&lt;$device&gt;/&lt;$part&gt;/&lt;$path&gt;)</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">headers</literal_strong> – a list of dicts, where each dict represents one
                                                        backend request that should be made.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">query_string</literal_strong> – optional query string to send to the backend</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">overrides</literal_strong> – optional return status override map used to override
                                                        the returned status of a request.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">node_count</literal_strong> – optional number of nodes to send request to.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">node_iterator</literal_strong> – optional node iterator.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>a swob.Response object</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'pass_through_headers\ (swift.proxy.controllers.base.Controller\ attribute)',\ u'swift.proxy.controllers.base.Controller.pass_through_headers',\ '',\ None]"></index>
                        <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                            <desc_signature class="Controller" first="False" fullname="Controller.pass_through_headers" ids="swift.proxy.controllers.base.Controller.pass_through_headers" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.Controller.pass_through_headers"><desc_name xml:space="preserve">pass_through_headers</desc_name><desc_annotation xml:space="preserve"> = []</desc_annotation></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'server_type\ (swift.proxy.controllers.base.Controller\ attribute)',\ u'swift.proxy.controllers.base.Controller.server_type',\ '',\ None]"></index>
                        <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                            <desc_signature class="Controller" first="False" fullname="Controller.server_type" ids="swift.proxy.controllers.base.Controller.server_type" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.Controller.server_type"><desc_name xml:space="preserve">server_type</desc_name><desc_annotation xml:space="preserve"> = 'Base'</desc_annotation></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'transfer_headers()\ (swift.proxy.controllers.base.Controller\ method)',\ u'swift.proxy.controllers.base.Controller.transfer_headers',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="Controller" first="False" fullname="Controller.transfer_headers" ids="swift.proxy.controllers.base.Controller.transfer_headers" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.Controller.transfer_headers"><desc_name xml:space="preserve">transfer_headers</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">src_headers</desc_parameter><desc_parameter xml:space="preserve">dst_headers</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Transfer legal headers from an original client request to dictionary
                                    that will be used as headers by the backend request</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">src_headers</literal_strong> – A dictionary of the original client request headers</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">dst_headers</literal_strong> – A dictionary of the backend request headers</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'GetOrHeadHandler\ (class\ in\ swift.proxy.controllers.base)',\ u'swift.proxy.controllers.base.GetOrHeadHandler',\ '',\ None]"></index>
                <desc desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="" first="False" fullname="GetOrHeadHandler" ids="swift.proxy.controllers.base.GetOrHeadHandler" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.GetOrHeadHandler"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.proxy.controllers.base.</desc_addname><desc_name xml:space="preserve">GetOrHeadHandler</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">app</desc_parameter><desc_parameter xml:space="preserve">req</desc_parameter><desc_parameter xml:space="preserve">server_type</desc_parameter><desc_parameter xml:space="preserve">node_iter</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">path</desc_parameter><desc_parameter xml:space="preserve">backend_headers</desc_parameter><desc_parameter xml:space="preserve">concurrency=1</desc_parameter><desc_parameter xml:space="preserve">client_chunk_size=None</desc_parameter><desc_parameter xml:space="preserve">newest=None</desc_parameter><desc_parameter xml:space="preserve">header_provider=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Bases: <reference internal="True" refid="swift.proxy.controllers.base.ResumingGetter" reftitle="swift.proxy.controllers.base.ResumingGetter"><literal classes="xref py py-class">swift.proxy.controllers.base.ResumingGetter</literal></reference></paragraph>
                        <index entries="['single',\ u'get_working_response()\ (swift.proxy.controllers.base.GetOrHeadHandler\ method)',\ u'swift.proxy.controllers.base.GetOrHeadHandler.get_working_response',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="GetOrHeadHandler" first="False" fullname="GetOrHeadHandler.get_working_response" ids="swift.proxy.controllers.base.GetOrHeadHandler.get_working_response" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.GetOrHeadHandler.get_working_response"><desc_name xml:space="preserve">get_working_response</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'NodeIter\ (class\ in\ swift.proxy.controllers.base)',\ u'swift.proxy.controllers.base.NodeIter',\ '',\ None]"></index>
                <desc desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="" first="False" fullname="NodeIter" ids="swift.proxy.controllers.base.NodeIter" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.NodeIter"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.proxy.controllers.base.</desc_addname><desc_name xml:space="preserve">NodeIter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">app</desc_parameter><desc_parameter xml:space="preserve">ring</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">node_iter=None</desc_parameter><desc_parameter xml:space="preserve">policy=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                        <paragraph>Yields nodes for a ring partition, skipping over error
                            limited nodes and stopping at the configurable number of nodes. If a
                            node yielded subsequently gets error limited, an extra node will be
                            yielded to take its place.</paragraph>
                        <paragraph>Note that if you’re going to iterate over this concurrently from
                            multiple greenthreads, you’ll want to use a
                            swift.common.utils.GreenthreadSafeIterator to serialize access.
                            Otherwise, you may get ValueErrors from concurrent access. (You also
                            may not, depending on how logging is configured, the vagaries of
                            socket IO and eventlet, and the phase of the moon.)</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">app</literal_strong> – a proxy app</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">ring</literal_strong> – ring to get yield nodes from</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">partition</literal_strong> – ring partition to yield nodes for</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">node_iter</literal_strong> – optional iterable of nodes to try. Useful if you
                                                want to filter or reorder the nodes.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">policy</literal_strong> – an instance of <literal classes="xref py py-class">BaseStoragePolicy</literal>. This should be
                                                None for an account or container ring.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                        <index entries="['single',\ u'log_handoffs()\ (swift.proxy.controllers.base.NodeIter\ method)',\ u'swift.proxy.controllers.base.NodeIter.log_handoffs',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="NodeIter" first="False" fullname="NodeIter.log_handoffs" ids="swift.proxy.controllers.base.NodeIter.log_handoffs" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.NodeIter.log_handoffs"><desc_name xml:space="preserve">log_handoffs</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">handoffs</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Log handoff requests if handoff logging is enabled and the
                                    handoff was not expected.</paragraph>
                                <paragraph>We only log handoffs when we’ve pushed the handoff count further
                                    than we would normally have expected under normal circumstances,
                                    that is (request_node_count - num_primaries), when handoffs goes
                                    higher than that it means one of the primaries must have been
                                    skipped because of error limiting before we consumed all of our
                                    nodes_left.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'next()\ (swift.proxy.controllers.base.NodeIter\ method)',\ u'swift.proxy.controllers.base.NodeIter.next',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="NodeIter" first="False" fullname="NodeIter.next" ids="swift.proxy.controllers.base.NodeIter.next" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.NodeIter.next"><desc_name xml:space="preserve">next</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'set_node_provider()\ (swift.proxy.controllers.base.NodeIter\ method)',\ u'swift.proxy.controllers.base.NodeIter.set_node_provider',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="NodeIter" first="False" fullname="NodeIter.set_node_provider" ids="swift.proxy.controllers.base.NodeIter.set_node_provider" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.NodeIter.set_node_provider"><desc_name xml:space="preserve">set_node_provider</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">callback</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Install a callback function that will be used during a call to next()
                                    to get an alternate node instead of returning the next node from the
                                    iterator.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">callback</literal_strong> – A no argument function that should return a node dict
                                                or None.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'ResumingGetter\ (class\ in\ swift.proxy.controllers.base)',\ u'swift.proxy.controllers.base.ResumingGetter',\ '',\ None]"></index>
                <desc desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="" first="False" fullname="ResumingGetter" ids="swift.proxy.controllers.base.ResumingGetter" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.ResumingGetter"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.proxy.controllers.base.</desc_addname><desc_name xml:space="preserve">ResumingGetter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">app</desc_parameter><desc_parameter xml:space="preserve">req</desc_parameter><desc_parameter xml:space="preserve">server_type</desc_parameter><desc_parameter xml:space="preserve">node_iter</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">path</desc_parameter><desc_parameter xml:space="preserve">backend_headers</desc_parameter><desc_parameter xml:space="preserve">concurrency=1</desc_parameter><desc_parameter xml:space="preserve">client_chunk_size=None</desc_parameter><desc_parameter xml:space="preserve">newest=None</desc_parameter><desc_parameter xml:space="preserve">header_provider=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                        <index entries="['single',\ u'fast_forward()\ (swift.proxy.controllers.base.ResumingGetter\ method)',\ u'swift.proxy.controllers.base.ResumingGetter.fast_forward',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ResumingGetter" first="False" fullname="ResumingGetter.fast_forward" ids="swift.proxy.controllers.base.ResumingGetter.fast_forward" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.ResumingGetter.fast_forward"><desc_name xml:space="preserve">fast_forward</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">num_bytes</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Will skip num_bytes into the current ranges.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Params num_bytes</field_name>
                                        <field_body>
                                            <paragraph>the number of bytes that have already been read on
                                                this request. This will change the Range header
                                                so that the next req will start where it left off.</paragraph>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Raises</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong>HTTPRequestedRangeNotSatisfiable</literal_strong> – if begin + num_bytes
                                                        &gt; end of range + 1</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><reference internal="True" reftitle="swift.common.exceptions.RangeAlreadyComplete" refuri="misc#swift.common.exceptions.RangeAlreadyComplete"><literal_strong>RangeAlreadyComplete</literal_strong></reference> – if begin + num_bytes == end of range + 1</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'is_good_source()\ (swift.proxy.controllers.base.ResumingGetter\ method)',\ u'swift.proxy.controllers.base.ResumingGetter.is_good_source',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ResumingGetter" first="False" fullname="ResumingGetter.is_good_source" ids="swift.proxy.controllers.base.ResumingGetter.is_good_source" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.ResumingGetter.is_good_source"><desc_name xml:space="preserve">is_good_source</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">src</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Indicates whether or not the request made to the backend found
                                    what it was looking for.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">src</literal_strong> – the response from the backend</paragraph>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>True if found, False if not</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'last_headers\ (swift.proxy.controllers.base.ResumingGetter\ attribute)',\ u'swift.proxy.controllers.base.ResumingGetter.last_headers',\ '',\ None]"></index>
                        <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                            <desc_signature class="ResumingGetter" first="False" fullname="ResumingGetter.last_headers" ids="swift.proxy.controllers.base.ResumingGetter.last_headers" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.ResumingGetter.last_headers"><desc_name xml:space="preserve">last_headers</desc_name></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'last_status\ (swift.proxy.controllers.base.ResumingGetter\ attribute)',\ u'swift.proxy.controllers.base.ResumingGetter.last_status',\ '',\ None]"></index>
                        <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                            <desc_signature class="ResumingGetter" first="False" fullname="ResumingGetter.last_status" ids="swift.proxy.controllers.base.ResumingGetter.last_status" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.ResumingGetter.last_status"><desc_name xml:space="preserve">last_status</desc_name></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'learn_size_from_content_range()\ (swift.proxy.controllers.base.ResumingGetter\ method)',\ u'swift.proxy.controllers.base.ResumingGetter.learn_size_from_content_range',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ResumingGetter" first="False" fullname="ResumingGetter.learn_size_from_content_range" ids="swift.proxy.controllers.base.ResumingGetter.learn_size_from_content_range" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.ResumingGetter.learn_size_from_content_range"><desc_name xml:space="preserve">learn_size_from_content_range</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">start</desc_parameter><desc_parameter xml:space="preserve">end</desc_parameter><desc_parameter xml:space="preserve">length</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>If client_chunk_size is set, makes sure we yield things starting on
                                    chunk boundaries based on the Content-Range header in the response.</paragraph>
                                <paragraph>Sets our Range header’s first byterange to the value learned from
                                    the Content-Range header in the response; if we were given a
                                    fully-specified range (e.g. “bytes=123-456”), this is a no-op.</paragraph>
                                <paragraph>If we were given a half-specified range (e.g. “bytes=123-” or
                                    “bytes=-456”), then this changes the Range header to a
                                    semantically-equivalent one <emphasis>and</emphasis> it lets us resume on a proper
                                    boundary instead of just in the middle of a piece somewhere.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'pop_range()\ (swift.proxy.controllers.base.ResumingGetter\ method)',\ u'swift.proxy.controllers.base.ResumingGetter.pop_range',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ResumingGetter" first="False" fullname="ResumingGetter.pop_range" ids="swift.proxy.controllers.base.ResumingGetter.pop_range" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.ResumingGetter.pop_range"><desc_name xml:space="preserve">pop_range</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Remove the first byterange from our Range header.</paragraph>
                                <paragraph>This is used after a byterange has been completely sent to the
                                    client; this way, should we need to resume the download from another
                                    object server, we do not re-fetch byteranges that the client already
                                    has.</paragraph>
                                <paragraph>If we have no Range header, this is a no-op.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'response_parts_iter()\ (swift.proxy.controllers.base.ResumingGetter\ method)',\ u'swift.proxy.controllers.base.ResumingGetter.response_parts_iter',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ResumingGetter" first="False" fullname="ResumingGetter.response_parts_iter" ids="swift.proxy.controllers.base.ResumingGetter.response_parts_iter" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.ResumingGetter.response_parts_iter"><desc_name xml:space="preserve">response_parts_iter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'bytes_to_skip()\ (in\ module\ swift.proxy.controllers.base)',\ u'swift.proxy.controllers.base.bytes_to_skip',\ '',\ None]"></index>
                <desc desctype="function" domain="py" noindex="False" objtype="function">
                    <desc_signature class="" first="False" fullname="bytes_to_skip" ids="swift.proxy.controllers.base.bytes_to_skip" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.bytes_to_skip"><desc_addname xml:space="preserve">swift.proxy.controllers.base.</desc_addname><desc_name xml:space="preserve">bytes_to_skip</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">record_size</desc_parameter><desc_parameter xml:space="preserve">range_start</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Assume an object is composed of N records, where the first N-1 are all
                            the same size and the last is at most that large, but may be smaller.</paragraph>
                        <paragraph>When a range request is made, it might start with a partial record. This
                            must be discarded, lest the consumer get bad data. This is particularly
                            true of suffix-byte-range requests, e.g. “Range: bytes=-12345” where the
                            size of the object is unknown at the time the request is made.</paragraph>
                        <paragraph>This function computes the number of bytes that must be discarded to
                            ensure only whole records are yielded. Erasure-code decoding needs this.</paragraph>
                        <paragraph>This function could have been inlined, but it took enough tries to get
                            right that some targeted unit tests were desirable, hence its extraction.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'clear_info_cache()\ (in\ module\ swift.proxy.controllers.base)',\ u'swift.proxy.controllers.base.clear_info_cache',\ '',\ None]"></index>
                <desc desctype="function" domain="py" noindex="False" objtype="function">
                    <desc_signature class="" first="False" fullname="clear_info_cache" ids="swift.proxy.controllers.base.clear_info_cache" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.clear_info_cache"><desc_addname xml:space="preserve">swift.proxy.controllers.base.</desc_addname><desc_name xml:space="preserve">clear_info_cache</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">app</desc_parameter><desc_parameter xml:space="preserve">env</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Clear the cached info in both memcache and env</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">app</literal_strong> – the application object</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">env</literal_strong> – the WSGI environment</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">account</literal_strong> – the account name</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">container</literal_strong> – the containr name or None if setting info for containers</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'close_swift_conn()\ (in\ module\ swift.proxy.controllers.base)',\ u'swift.proxy.controllers.base.close_swift_conn',\ '',\ None]"></index>
                <desc desctype="function" domain="py" noindex="False" objtype="function">
                    <desc_signature class="" first="False" fullname="close_swift_conn" ids="swift.proxy.controllers.base.close_swift_conn" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.close_swift_conn"><desc_addname xml:space="preserve">swift.proxy.controllers.base.</desc_addname><desc_name xml:space="preserve">close_swift_conn</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">src</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Force close the http connection to the backend.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">src</literal_strong> – the response from the backend</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'cors_validation()\ (in\ module\ swift.proxy.controllers.base)',\ u'swift.proxy.controllers.base.cors_validation',\ '',\ None]"></index>
                <desc desctype="function" domain="py" noindex="False" objtype="function">
                    <desc_signature class="" first="False" fullname="cors_validation" ids="swift.proxy.controllers.base.cors_validation" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.cors_validation"><desc_addname xml:space="preserve">swift.proxy.controllers.base.</desc_addname><desc_name xml:space="preserve">cors_validation</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">func</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Decorator to check if the request is a CORS request and if so, if it’s
                            valid.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">func</literal_strong> – function to check</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'delay_denial()\ (in\ module\ swift.proxy.controllers.base)',\ u'swift.proxy.controllers.base.delay_denial',\ '',\ None]"></index>
                <desc desctype="function" domain="py" noindex="False" objtype="function">
                    <desc_signature class="" first="False" fullname="delay_denial" ids="swift.proxy.controllers.base.delay_denial" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.delay_denial"><desc_addname xml:space="preserve">swift.proxy.controllers.base.</desc_addname><desc_name xml:space="preserve">delay_denial</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">func</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Decorator to declare which methods should have any swift.authorize call
                            delayed. This is so the method can load the Request object up with
                            additional information that may be needed by the authorization system.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">func</literal_strong> – function for which authorization will be delayed</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'get_account_info()\ (in\ module\ swift.proxy.controllers.base)',\ u'swift.proxy.controllers.base.get_account_info',\ '',\ None]"></index>
                <desc desctype="function" domain="py" noindex="False" objtype="function">
                    <desc_signature class="" first="False" fullname="get_account_info" ids="swift.proxy.controllers.base.get_account_info" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.get_account_info"><desc_addname xml:space="preserve">swift.proxy.controllers.base.</desc_addname><desc_name xml:space="preserve">get_account_info</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">env</desc_parameter><desc_parameter xml:space="preserve">app</desc_parameter><desc_parameter xml:space="preserve">swift_source=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get the info structure for an account, based on env and app.
                            This is useful to middlewares.</paragraph>
                        <note>
                            <paragraph>This call bypasses auth. Success does not imply that the request has
                                authorization to the account.</paragraph>
                        </note>
                        <field_list>
                            <field>
                                <field_name>Raises</field_name>
                                <field_body>
                                    <paragraph><literal_strong>ValueError</literal_strong> – when path doesn’t contain an account</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'get_cache_key()\ (in\ module\ swift.proxy.controllers.base)',\ u'swift.proxy.controllers.base.get_cache_key',\ '',\ None]"></index>
                <desc desctype="function" domain="py" noindex="False" objtype="function">
                    <desc_signature class="" first="False" fullname="get_cache_key" ids="swift.proxy.controllers.base.get_cache_key" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.get_cache_key"><desc_addname xml:space="preserve">swift.proxy.controllers.base.</desc_addname><desc_name xml:space="preserve">get_cache_key</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container=None</desc_parameter><desc_parameter xml:space="preserve">obj=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get the keys for both memcache and env[‘swift.infocache’] (cache_key)
                            where info about accounts, containers, and objects is cached</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">account</literal_strong> – The name of the account</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">container</literal_strong> – The name of the container (or None if account)</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">obj</literal_strong> – The name of the object (or None if account or container)</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>a string cache_key</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'get_container_info()\ (in\ module\ swift.proxy.controllers.base)',\ u'swift.proxy.controllers.base.get_container_info',\ '',\ None]"></index>
                <desc desctype="function" domain="py" noindex="False" objtype="function">
                    <desc_signature class="" first="False" fullname="get_container_info" ids="swift.proxy.controllers.base.get_container_info" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.get_container_info"><desc_addname xml:space="preserve">swift.proxy.controllers.base.</desc_addname><desc_name xml:space="preserve">get_container_info</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">env</desc_parameter><desc_parameter xml:space="preserve">app</desc_parameter><desc_parameter xml:space="preserve">swift_source=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get the info structure for a container, based on env and app.
                            This is useful to middlewares.</paragraph>
                        <note>
                            <paragraph>This call bypasses auth. Success does not imply that the request has
                                authorization to the container.</paragraph>
                        </note>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'get_info()\ (in\ module\ swift.proxy.controllers.base)',\ u'swift.proxy.controllers.base.get_info',\ '',\ None]"></index>
                <desc desctype="function" domain="py" noindex="False" objtype="function">
                    <desc_signature class="" first="False" fullname="get_info" ids="swift.proxy.controllers.base.get_info" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.get_info"><desc_addname xml:space="preserve">swift.proxy.controllers.base.</desc_addname><desc_name xml:space="preserve">get_info</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">app</desc_parameter><desc_parameter xml:space="preserve">env</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container=None</desc_parameter><desc_parameter xml:space="preserve">swift_source=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get info about accounts or containers</paragraph>
                        <definition_list>
                            <definition_list_item>
                                <term>Note: This call bypasses auth. Success does not imply that the</term>
                                <definition>
                                    <paragraph>request has authorization to the info.</paragraph>
                                </definition>
                            </definition_list_item>
                        </definition_list>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">app</literal_strong> – the application object</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">env</literal_strong> – the environment used by the current request</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">account</literal_strong> – The unquoted name of the account</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">container</literal_strong> – The unquoted name of the container (or None if account)</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">swift_source</literal_strong> – swift source logged for any subrequests made while
                                                retrieving the account or container info</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>information about the specified entity in a dictionary. See
                                        get_account_info and get_container_info for details on what’s in the
                                        dictionary.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'get_object_info()\ (in\ module\ swift.proxy.controllers.base)',\ u'swift.proxy.controllers.base.get_object_info',\ '',\ None]"></index>
                <desc desctype="function" domain="py" noindex="False" objtype="function">
                    <desc_signature class="" first="False" fullname="get_object_info" ids="swift.proxy.controllers.base.get_object_info" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.get_object_info"><desc_addname xml:space="preserve">swift.proxy.controllers.base.</desc_addname><desc_name xml:space="preserve">get_object_info</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">env</desc_parameter><desc_parameter xml:space="preserve">app</desc_parameter><desc_parameter xml:space="preserve">path=None</desc_parameter><desc_parameter xml:space="preserve">swift_source=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get the info structure for an object, based on env and app.
                            This is useful to middlewares.</paragraph>
                        <note>
                            <paragraph>This call bypasses auth. Success does not imply that the request has
                                authorization to the object.</paragraph>
                        </note>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'headers_to_account_info()\ (in\ module\ swift.proxy.controllers.base)',\ u'swift.proxy.controllers.base.headers_to_account_info',\ '',\ None]"></index>
                <desc desctype="function" domain="py" noindex="False" objtype="function">
                    <desc_signature class="" first="False" fullname="headers_to_account_info" ids="swift.proxy.controllers.base.headers_to_account_info" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.headers_to_account_info"><desc_addname xml:space="preserve">swift.proxy.controllers.base.</desc_addname><desc_name xml:space="preserve">headers_to_account_info</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">headers</desc_parameter><desc_parameter xml:space="preserve">status_int=200</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Construct a cacheable dict of account info based on response headers.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'headers_to_container_info()\ (in\ module\ swift.proxy.controllers.base)',\ u'swift.proxy.controllers.base.headers_to_container_info',\ '',\ None]"></index>
                <desc desctype="function" domain="py" noindex="False" objtype="function">
                    <desc_signature class="" first="False" fullname="headers_to_container_info" ids="swift.proxy.controllers.base.headers_to_container_info" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.headers_to_container_info"><desc_addname xml:space="preserve">swift.proxy.controllers.base.</desc_addname><desc_name xml:space="preserve">headers_to_container_info</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">headers</desc_parameter><desc_parameter xml:space="preserve">status_int=200</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Construct a cacheable dict of container info based on response headers.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'headers_to_object_info()\ (in\ module\ swift.proxy.controllers.base)',\ u'swift.proxy.controllers.base.headers_to_object_info',\ '',\ None]"></index>
                <desc desctype="function" domain="py" noindex="False" objtype="function">
                    <desc_signature class="" first="False" fullname="headers_to_object_info" ids="swift.proxy.controllers.base.headers_to_object_info" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.headers_to_object_info"><desc_addname xml:space="preserve">swift.proxy.controllers.base.</desc_addname><desc_name xml:space="preserve">headers_to_object_info</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">headers</desc_parameter><desc_parameter xml:space="preserve">status_int=200</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Construct a cacheable dict of object info based on response headers.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'set_info_cache()\ (in\ module\ swift.proxy.controllers.base)',\ u'swift.proxy.controllers.base.set_info_cache',\ '',\ None]"></index>
                <desc desctype="function" domain="py" noindex="False" objtype="function">
                    <desc_signature class="" first="False" fullname="set_info_cache" ids="swift.proxy.controllers.base.set_info_cache" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.set_info_cache"><desc_addname xml:space="preserve">swift.proxy.controllers.base.</desc_addname><desc_name xml:space="preserve">set_info_cache</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">app</desc_parameter><desc_parameter xml:space="preserve">env</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">resp</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Cache info in both memcache and env.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">app</literal_strong> – the application object</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">account</literal_strong> – the unquoted account name</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">container</literal_strong> – the unquoted container name or None</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">resp</literal_strong> – the response received or None if info cache should be cleared</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>the info that was placed into the cache, or None if the
                                        request status was not in (404, 410, 2xx).</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'set_object_info_cache()\ (in\ module\ swift.proxy.controllers.base)',\ u'swift.proxy.controllers.base.set_object_info_cache',\ '',\ None]"></index>
                <desc desctype="function" domain="py" noindex="False" objtype="function">
                    <desc_signature class="" first="False" fullname="set_object_info_cache" ids="swift.proxy.controllers.base.set_object_info_cache" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.set_object_info_cache"><desc_addname xml:space="preserve">swift.proxy.controllers.base.</desc_addname><desc_name xml:space="preserve">set_object_info_cache</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">app</desc_parameter><desc_parameter xml:space="preserve">env</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">obj</desc_parameter><desc_parameter xml:space="preserve">resp</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Cache object info in the WSGI environment, but not in memcache. Caching
                            in memcache would lead to cache pressure and mass evictions due to the
                            large number of objects in a typical Swift cluster. This is a
                            per-request cache only.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">app</literal_strong> – the application object</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">env</literal_strong> – the environment used by the current request</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">account</literal_strong> – the unquoted account name</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">container</literal_strong> – the unquoted container name</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">obj</literal_strong> – the unquoted object name</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">resp</literal_strong> – a GET or HEAD response received from an object server, or
                                                None if info cache should be cleared</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>the object info</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'source_key()\ (in\ module\ swift.proxy.controllers.base)',\ u'swift.proxy.controllers.base.source_key',\ '',\ None]"></index>
                <desc desctype="function" domain="py" noindex="False" objtype="function">
                    <desc_signature class="" first="False" fullname="source_key" ids="swift.proxy.controllers.base.source_key" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.source_key"><desc_addname xml:space="preserve">swift.proxy.controllers.base.</desc_addname><desc_name xml:space="preserve">source_key</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">resp</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Provide the timestamp of the swift http response as a floating
                            point value.  Used as a sort key.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">resp</literal_strong> – bufferedhttp response object</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'update_headers()\ (in\ module\ swift.proxy.controllers.base)',\ u'swift.proxy.controllers.base.update_headers',\ '',\ None]"></index>
                <desc desctype="function" domain="py" noindex="False" objtype="function">
                    <desc_signature class="" first="False" fullname="update_headers" ids="swift.proxy.controllers.base.update_headers" module="swift.proxy.controllers.base" names="swift.proxy.controllers.base.update_headers"><desc_addname xml:space="preserve">swift.proxy.controllers.base.</desc_addname><desc_name xml:space="preserve">update_headers</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">response</desc_parameter><desc_parameter xml:space="preserve">headers</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Helper function to update headers in the response.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">response</literal_strong> – swob.Response object</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">headers</literal_strong> – dictionary headers</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </section>
            <section ids="module-swift.proxy.controllers.account account" names="account">
                <title>Account</title>
                <index entries="['single',\ u'swift.proxy.controllers.account\ (module)',\ u'module-swift.proxy.controllers.account',\ '',\ None]"></index>
                <index entries="['single',\ u'AccountController\ (class\ in\ swift.proxy.controllers.account)',\ u'swift.proxy.controllers.account.AccountController',\ '',\ None]"></index>
                <desc desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="" first="False" fullname="AccountController" ids="swift.proxy.controllers.account.AccountController" module="swift.proxy.controllers.account" names="swift.proxy.controllers.account.AccountController"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.proxy.controllers.account.</desc_addname><desc_name xml:space="preserve">AccountController</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">app</desc_parameter><desc_parameter xml:space="preserve">account_name</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Bases: <reference internal="True" refid="swift.proxy.controllers.base.Controller" reftitle="swift.proxy.controllers.base.Controller"><literal classes="xref py py-class">swift.proxy.controllers.base.Controller</literal></reference></paragraph>
                        <paragraph>WSGI controller for account requests</paragraph>
                        <index entries="['single',\ u'DELETE()\ (swift.proxy.controllers.account.AccountController\ method)',\ u'swift.proxy.controllers.account.AccountController.DELETE',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="AccountController" first="False" fullname="AccountController.DELETE" ids="swift.proxy.controllers.account.AccountController.DELETE" module="swift.proxy.controllers.account" names="swift.proxy.controllers.account.AccountController.DELETE"><desc_name xml:space="preserve">DELETE</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>HTTP DELETE request handler.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'GETorHEAD()\ (swift.proxy.controllers.account.AccountController\ method)',\ u'swift.proxy.controllers.account.AccountController.GETorHEAD',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="AccountController" first="False" fullname="AccountController.GETorHEAD" ids="swift.proxy.controllers.account.AccountController.GETorHEAD" module="swift.proxy.controllers.account" names="swift.proxy.controllers.account.AccountController.GETorHEAD"><desc_name xml:space="preserve">GETorHEAD</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Handler for HTTP GET/HEAD requests.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'POST()\ (swift.proxy.controllers.account.AccountController\ method)',\ u'swift.proxy.controllers.account.AccountController.POST',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="AccountController" first="False" fullname="AccountController.POST" ids="swift.proxy.controllers.account.AccountController.POST" module="swift.proxy.controllers.account" names="swift.proxy.controllers.account.AccountController.POST"><desc_name xml:space="preserve">POST</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>HTTP POST request handler.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'PUT()\ (swift.proxy.controllers.account.AccountController\ method)',\ u'swift.proxy.controllers.account.AccountController.PUT',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="AccountController" first="False" fullname="AccountController.PUT" ids="swift.proxy.controllers.account.AccountController.PUT" module="swift.proxy.controllers.account" names="swift.proxy.controllers.account.AccountController.PUT"><desc_name xml:space="preserve">PUT</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>HTTP PUT request handler.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'add_acls_from_sys_metadata()\ (swift.proxy.controllers.account.AccountController\ method)',\ u'swift.proxy.controllers.account.AccountController.add_acls_from_sys_metadata',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="AccountController" first="False" fullname="AccountController.add_acls_from_sys_metadata" ids="swift.proxy.controllers.account.AccountController.add_acls_from_sys_metadata" module="swift.proxy.controllers.account" names="swift.proxy.controllers.account.AccountController.add_acls_from_sys_metadata"><desc_name xml:space="preserve">add_acls_from_sys_metadata</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">resp</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'server_type\ (swift.proxy.controllers.account.AccountController\ attribute)',\ u'swift.proxy.controllers.account.AccountController.server_type',\ '',\ None]"></index>
                        <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                            <desc_signature class="AccountController" first="False" fullname="AccountController.server_type" ids="swift.proxy.controllers.account.AccountController.server_type" module="swift.proxy.controllers.account" names="swift.proxy.controllers.account.AccountController.server_type"><desc_name xml:space="preserve">server_type</desc_name><desc_annotation xml:space="preserve"> = 'Account'</desc_annotation></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
            </section>
            <section ids="module-swift.proxy.controllers.container container" names="container">
                <title>Container</title>
                <index entries="['single',\ u'swift.proxy.controllers.container\ (module)',\ u'module-swift.proxy.controllers.container',\ '',\ None]"></index>
                <index entries="['single',\ u'ContainerController\ (class\ in\ swift.proxy.controllers.container)',\ u'swift.proxy.controllers.container.ContainerController',\ '',\ None]"></index>
                <desc desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="" first="False" fullname="ContainerController" ids="swift.proxy.controllers.container.ContainerController" module="swift.proxy.controllers.container" names="swift.proxy.controllers.container.ContainerController"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.proxy.controllers.container.</desc_addname><desc_name xml:space="preserve">ContainerController</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">app</desc_parameter><desc_parameter xml:space="preserve">account_name</desc_parameter><desc_parameter xml:space="preserve">container_name</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Bases: <reference internal="True" refid="swift.proxy.controllers.base.Controller" reftitle="swift.proxy.controllers.base.Controller"><literal classes="xref py py-class">swift.proxy.controllers.base.Controller</literal></reference></paragraph>
                        <paragraph>WSGI controller for container requests</paragraph>
                        <index entries="['single',\ u'DELETE()\ (swift.proxy.controllers.container.ContainerController\ method)',\ u'swift.proxy.controllers.container.ContainerController.DELETE',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ContainerController" first="False" fullname="ContainerController.DELETE" ids="swift.proxy.controllers.container.ContainerController.DELETE" module="swift.proxy.controllers.container" names="swift.proxy.controllers.container.ContainerController.DELETE"><desc_name xml:space="preserve">DELETE</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>HTTP DELETE request handler.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'GET()\ (swift.proxy.controllers.container.ContainerController\ method)',\ u'swift.proxy.controllers.container.ContainerController.GET',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ContainerController" first="False" fullname="ContainerController.GET" ids="swift.proxy.controllers.container.ContainerController.GET" module="swift.proxy.controllers.container" names="swift.proxy.controllers.container.ContainerController.GET"><desc_name xml:space="preserve">GET</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Handler for HTTP GET requests.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'GETorHEAD()\ (swift.proxy.controllers.container.ContainerController\ method)',\ u'swift.proxy.controllers.container.ContainerController.GETorHEAD',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ContainerController" first="False" fullname="ContainerController.GETorHEAD" ids="swift.proxy.controllers.container.ContainerController.GETorHEAD" module="swift.proxy.controllers.container" names="swift.proxy.controllers.container.ContainerController.GETorHEAD"><desc_name xml:space="preserve">GETorHEAD</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Handler for HTTP GET/HEAD requests.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'HEAD()\ (swift.proxy.controllers.container.ContainerController\ method)',\ u'swift.proxy.controllers.container.ContainerController.HEAD',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ContainerController" first="False" fullname="ContainerController.HEAD" ids="swift.proxy.controllers.container.ContainerController.HEAD" module="swift.proxy.controllers.container" names="swift.proxy.controllers.container.ContainerController.HEAD"><desc_name xml:space="preserve">HEAD</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Handler for HTTP HEAD requests.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'POST()\ (swift.proxy.controllers.container.ContainerController\ method)',\ u'swift.proxy.controllers.container.ContainerController.POST',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ContainerController" first="False" fullname="ContainerController.POST" ids="swift.proxy.controllers.container.ContainerController.POST" module="swift.proxy.controllers.container" names="swift.proxy.controllers.container.ContainerController.POST"><desc_name xml:space="preserve">POST</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>HTTP POST request handler.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'PUT()\ (swift.proxy.controllers.container.ContainerController\ method)',\ u'swift.proxy.controllers.container.ContainerController.PUT',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ContainerController" first="False" fullname="ContainerController.PUT" ids="swift.proxy.controllers.container.ContainerController.PUT" module="swift.proxy.controllers.container" names="swift.proxy.controllers.container.ContainerController.PUT"><desc_name xml:space="preserve">PUT</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>HTTP PUT request handler.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'clean_acls()\ (swift.proxy.controllers.container.ContainerController\ method)',\ u'swift.proxy.controllers.container.ContainerController.clean_acls',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ContainerController" first="False" fullname="ContainerController.clean_acls" ids="swift.proxy.controllers.container.ContainerController.clean_acls" module="swift.proxy.controllers.container" names="swift.proxy.controllers.container.ContainerController.clean_acls"><desc_name xml:space="preserve">clean_acls</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'pass_through_headers\ (swift.proxy.controllers.container.ContainerController\ attribute)',\ u'swift.proxy.controllers.container.ContainerController.pass_through_headers',\ '',\ None]"></index>
                        <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                            <desc_signature class="ContainerController" first="False" fullname="ContainerController.pass_through_headers" ids="swift.proxy.controllers.container.ContainerController.pass_through_headers" module="swift.proxy.controllers.container" names="swift.proxy.controllers.container.ContainerController.pass_through_headers"><desc_name xml:space="preserve">pass_through_headers</desc_name><desc_annotation xml:space="preserve"> = ['x-container-read', 'x-container-write', 'x-container-sync-key', 'x-container-sync-to', 'x-versions-location']</desc_annotation></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'server_type\ (swift.proxy.controllers.container.ContainerController\ attribute)',\ u'swift.proxy.controllers.container.ContainerController.server_type',\ '',\ None]"></index>
                        <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                            <desc_signature class="ContainerController" first="False" fullname="ContainerController.server_type" ids="swift.proxy.controllers.container.ContainerController.server_type" module="swift.proxy.controllers.container" names="swift.proxy.controllers.container.ContainerController.server_type"><desc_name xml:space="preserve">server_type</desc_name><desc_annotation xml:space="preserve"> = 'Container'</desc_annotation></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
            </section>
            <section ids="module-swift.proxy.controllers.obj object" names="object">
                <title>Object</title>
                <index entries="['single',\ u'swift.proxy.controllers.obj\ (module)',\ u'module-swift.proxy.controllers.obj',\ '',\ None]"></index>
                <index entries="['single',\ u'BaseObjectController\ (class\ in\ swift.proxy.controllers.obj)',\ u'swift.proxy.controllers.obj.BaseObjectController',\ '',\ None]"></index>
                <desc desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="" first="False" fullname="BaseObjectController" ids="swift.proxy.controllers.obj.BaseObjectController" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.BaseObjectController"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.proxy.controllers.obj.</desc_addname><desc_name xml:space="preserve">BaseObjectController</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">app</desc_parameter><desc_parameter xml:space="preserve">account_name</desc_parameter><desc_parameter xml:space="preserve">container_name</desc_parameter><desc_parameter xml:space="preserve">object_name</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Bases: <reference internal="True" refid="swift.proxy.controllers.base.Controller" reftitle="swift.proxy.controllers.base.Controller"><literal classes="xref py py-class">swift.proxy.controllers.base.Controller</literal></reference></paragraph>
                        <paragraph>Base WSGI controller for object requests.</paragraph>
                        <index entries="['single',\ u'DELETE()\ (swift.proxy.controllers.obj.BaseObjectController\ method)',\ u'swift.proxy.controllers.obj.BaseObjectController.DELETE',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="BaseObjectController" first="False" fullname="BaseObjectController.DELETE" ids="swift.proxy.controllers.obj.BaseObjectController.DELETE" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.BaseObjectController.DELETE"><desc_name xml:space="preserve">DELETE</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>HTTP DELETE request handler.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'GET()\ (swift.proxy.controllers.obj.BaseObjectController\ method)',\ u'swift.proxy.controllers.obj.BaseObjectController.GET',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="BaseObjectController" first="False" fullname="BaseObjectController.GET" ids="swift.proxy.controllers.obj.BaseObjectController.GET" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.BaseObjectController.GET"><desc_name xml:space="preserve">GET</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Handler for HTTP GET requests.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'GETorHEAD()\ (swift.proxy.controllers.obj.BaseObjectController\ method)',\ u'swift.proxy.controllers.obj.BaseObjectController.GETorHEAD',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="BaseObjectController" first="False" fullname="BaseObjectController.GETorHEAD" ids="swift.proxy.controllers.obj.BaseObjectController.GETorHEAD" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.BaseObjectController.GETorHEAD"><desc_name xml:space="preserve">GETorHEAD</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Handle HTTP GET or HEAD requests.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'HEAD()\ (swift.proxy.controllers.obj.BaseObjectController\ method)',\ u'swift.proxy.controllers.obj.BaseObjectController.HEAD',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="BaseObjectController" first="False" fullname="BaseObjectController.HEAD" ids="swift.proxy.controllers.obj.BaseObjectController.HEAD" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.BaseObjectController.HEAD"><desc_name xml:space="preserve">HEAD</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Handler for HTTP HEAD requests.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'POST()\ (swift.proxy.controllers.obj.BaseObjectController\ method)',\ u'swift.proxy.controllers.obj.BaseObjectController.POST',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="BaseObjectController" first="False" fullname="BaseObjectController.POST" ids="swift.proxy.controllers.obj.BaseObjectController.POST" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.BaseObjectController.POST"><desc_name xml:space="preserve">POST</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>HTTP POST request handler.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'PUT()\ (swift.proxy.controllers.obj.BaseObjectController\ method)',\ u'swift.proxy.controllers.obj.BaseObjectController.PUT',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="BaseObjectController" first="False" fullname="BaseObjectController.PUT" ids="swift.proxy.controllers.obj.BaseObjectController.PUT" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.BaseObjectController.PUT"><desc_name xml:space="preserve">PUT</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>HTTP PUT request handler.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'iter_nodes_local_first()\ (swift.proxy.controllers.obj.BaseObjectController\ method)',\ u'swift.proxy.controllers.obj.BaseObjectController.iter_nodes_local_first',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="BaseObjectController" first="False" fullname="BaseObjectController.iter_nodes_local_first" ids="swift.proxy.controllers.obj.BaseObjectController.iter_nodes_local_first" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.BaseObjectController.iter_nodes_local_first"><desc_name xml:space="preserve">iter_nodes_local_first</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ring</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">policy=None</desc_parameter><desc_parameter xml:space="preserve">local_handoffs_first=False</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Yields nodes for a ring partition.</paragraph>
                                <paragraph>If the ‘write_affinity’ setting is non-empty, then this will yield N
                                    local nodes (as defined by the write_affinity setting) first, then the
                                    rest of the nodes as normal. It is a re-ordering of the nodes such
                                    that the local ones come first; no node is omitted. The effect is
                                    that the request will be serviced by local object servers first, but
                                    nonlocal ones will be employed if not enough local ones are available.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">ring</literal_strong> – ring to get nodes from</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">partition</literal_strong> – ring partition to yield nodes for</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">policy</literal_strong> – optional, an instance of
                                                        <reference internal="True" reftitle="swift.common.storage_policy.BaseStoragePolicy" refuri="misc#swift.common.storage_policy.BaseStoragePolicy"><literal classes="xref py py-class">BaseStoragePolicy</literal></reference></paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">local_handoffs_first</literal_strong> – optional, if True prefer primaries and
                                                        local handoff nodes first before looking elsewhere.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'server_type\ (swift.proxy.controllers.obj.BaseObjectController\ attribute)',\ u'swift.proxy.controllers.obj.BaseObjectController.server_type',\ '',\ None]"></index>
                        <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                            <desc_signature class="BaseObjectController" first="False" fullname="BaseObjectController.server_type" ids="swift.proxy.controllers.obj.BaseObjectController.server_type" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.BaseObjectController.server_type"><desc_name xml:space="preserve">server_type</desc_name><desc_annotation xml:space="preserve"> = 'Object'</desc_annotation></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'ECAppIter\ (class\ in\ swift.proxy.controllers.obj)',\ u'swift.proxy.controllers.obj.ECAppIter',\ '',\ None]"></index>
                <desc desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="" first="False" fullname="ECAppIter" ids="swift.proxy.controllers.obj.ECAppIter" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.ECAppIter"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.proxy.controllers.obj.</desc_addname><desc_name xml:space="preserve">ECAppIter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">path</desc_parameter><desc_parameter xml:space="preserve">policy</desc_parameter><desc_parameter xml:space="preserve">internal_parts_iters</desc_parameter><desc_parameter xml:space="preserve">range_specs</desc_parameter><desc_parameter xml:space="preserve">fa_length</desc_parameter><desc_parameter xml:space="preserve">obj_length</desc_parameter><desc_parameter xml:space="preserve">logger</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                        <paragraph>WSGI iterable that decodes EC fragment archives (or portions thereof)
                            into the original object (or portions thereof).</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">path</literal_strong> – object’s path, sans v1 (e.g. /a/c/o)</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">policy</literal_strong> – storage policy for this object</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">internal_parts_iters</literal_strong> – list of the response-document-parts
                                                iterators for the backend GET responses. For an M+K erasure code,
                                                the caller must supply M such iterables.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">range_specs</literal_strong> – list of dictionaries describing the ranges requested
                                                by the client. Each dictionary contains the start and end of the
                                                client’s requested byte range as well as the start and end of the EC
                                                segments containing that byte range.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">fa_length</literal_strong> – length of the fragment archive, in bytes, if the
                                                response is a 200. If it’s a 206, then this is ignored.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">obj_length</literal_strong> – length of the object, in bytes. Learned from the
                                                headers in the GET response from the object server.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">logger</literal_strong> – a logger</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                        <index entries="['single',\ u'app_iter_range()\ (swift.proxy.controllers.obj.ECAppIter\ method)',\ u'swift.proxy.controllers.obj.ECAppIter.app_iter_range',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ECAppIter" first="False" fullname="ECAppIter.app_iter_range" ids="swift.proxy.controllers.obj.ECAppIter.app_iter_range" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.ECAppIter.app_iter_range"><desc_name xml:space="preserve">app_iter_range</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">start</desc_parameter><desc_parameter xml:space="preserve">end</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'app_iter_ranges()\ (swift.proxy.controllers.obj.ECAppIter\ method)',\ u'swift.proxy.controllers.obj.ECAppIter.app_iter_ranges',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ECAppIter" first="False" fullname="ECAppIter.app_iter_ranges" ids="swift.proxy.controllers.obj.ECAppIter.app_iter_ranges" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.ECAppIter.app_iter_ranges"><desc_name xml:space="preserve">app_iter_ranges</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ranges</desc_parameter><desc_parameter xml:space="preserve">content_type</desc_parameter><desc_parameter xml:space="preserve">boundary</desc_parameter><desc_parameter xml:space="preserve">content_size</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'close()\ (swift.proxy.controllers.obj.ECAppIter\ method)',\ u'swift.proxy.controllers.obj.ECAppIter.close',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ECAppIter" first="False" fullname="ECAppIter.close" ids="swift.proxy.controllers.obj.ECAppIter.close" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.ECAppIter.close"><desc_name xml:space="preserve">close</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'kickoff()\ (swift.proxy.controllers.obj.ECAppIter\ method)',\ u'swift.proxy.controllers.obj.ECAppIter.kickoff',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ECAppIter" first="False" fullname="ECAppIter.kickoff" ids="swift.proxy.controllers.obj.ECAppIter.kickoff" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.ECAppIter.kickoff"><desc_name xml:space="preserve">kickoff</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter><desc_parameter xml:space="preserve">resp</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Start pulling data from the backends so that we can learn things like
                                    the real Content-Type that might only be in the multipart/byteranges
                                    response body. Update our response accordingly.</paragraph>
                                <paragraph>Also, this is the first point at which we can learn the MIME
                                    boundary that our response has in the headers. We grab that so we
                                    can also use it in the body.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>None</paragraph>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Raises</field_name>
                                        <field_body>
                                            <paragraph><literal_strong>HTTPException</literal_strong> – on error</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'ECGetResponseBucket\ (class\ in\ swift.proxy.controllers.obj)',\ u'swift.proxy.controllers.obj.ECGetResponseBucket',\ '',\ None]"></index>
                <desc desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="" first="False" fullname="ECGetResponseBucket" ids="swift.proxy.controllers.obj.ECGetResponseBucket" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.ECGetResponseBucket"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.proxy.controllers.obj.</desc_addname><desc_name xml:space="preserve">ECGetResponseBucket</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">policy</desc_parameter><desc_parameter xml:space="preserve">timestamp_str</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                        <paragraph>A helper class to encapsulate the properties of buckets in which fragment
                            getters and alternate nodes are collected.</paragraph>
                        <index entries="['single',\ u'add_alternate_nodes()\ (swift.proxy.controllers.obj.ECGetResponseBucket\ method)',\ u'swift.proxy.controllers.obj.ECGetResponseBucket.add_alternate_nodes',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ECGetResponseBucket" first="False" fullname="ECGetResponseBucket.add_alternate_nodes" ids="swift.proxy.controllers.obj.ECGetResponseBucket.add_alternate_nodes" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.ECGetResponseBucket.add_alternate_nodes"><desc_name xml:space="preserve">add_alternate_nodes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">frag_indexes</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'add_response()\ (swift.proxy.controllers.obj.ECGetResponseBucket\ method)',\ u'swift.proxy.controllers.obj.ECGetResponseBucket.add_response',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ECGetResponseBucket" first="False" fullname="ECGetResponseBucket.add_response" ids="swift.proxy.controllers.obj.ECGetResponseBucket.add_response" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.ECGetResponseBucket.add_response"><desc_name xml:space="preserve">add_response</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">getter</desc_parameter><desc_parameter xml:space="preserve">parts_iter</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'get_responses()\ (swift.proxy.controllers.obj.ECGetResponseBucket\ method)',\ u'swift.proxy.controllers.obj.ECGetResponseBucket.get_responses',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ECGetResponseBucket" first="False" fullname="ECGetResponseBucket.get_responses" ids="swift.proxy.controllers.obj.ECGetResponseBucket.get_responses" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.ECGetResponseBucket.get_responses"><desc_name xml:space="preserve">get_responses</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Return a list of all useful sources. Where there are multiple sources
                                    associated with the same frag_index then only one is included.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>a list of sources, each source being a tuple of form
                                                (ResumingGetter, iter)</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'set_durable()\ (swift.proxy.controllers.obj.ECGetResponseBucket\ method)',\ u'swift.proxy.controllers.obj.ECGetResponseBucket.set_durable',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ECGetResponseBucket" first="False" fullname="ECGetResponseBucket.set_durable" ids="swift.proxy.controllers.obj.ECGetResponseBucket.set_durable" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.ECGetResponseBucket.set_durable"><desc_name xml:space="preserve">set_durable</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'shortfall\ (swift.proxy.controllers.obj.ECGetResponseBucket\ attribute)',\ u'swift.proxy.controllers.obj.ECGetResponseBucket.shortfall',\ '',\ None]"></index>
                        <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                            <desc_signature class="ECGetResponseBucket" first="False" fullname="ECGetResponseBucket.shortfall" ids="swift.proxy.controllers.obj.ECGetResponseBucket.shortfall" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.ECGetResponseBucket.shortfall"><desc_name xml:space="preserve">shortfall</desc_name></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'shortfall_with_alts\ (swift.proxy.controllers.obj.ECGetResponseBucket\ attribute)',\ u'swift.proxy.controllers.obj.ECGetResponseBucket.shortfall_with_alts',\ '',\ None]"></index>
                        <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                            <desc_signature class="ECGetResponseBucket" first="False" fullname="ECGetResponseBucket.shortfall_with_alts" ids="swift.proxy.controllers.obj.ECGetResponseBucket.shortfall_with_alts" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.ECGetResponseBucket.shortfall_with_alts"><desc_name xml:space="preserve">shortfall_with_alts</desc_name></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'ECGetResponseCollection\ (class\ in\ swift.proxy.controllers.obj)',\ u'swift.proxy.controllers.obj.ECGetResponseCollection',\ '',\ None]"></index>
                <desc desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="" first="False" fullname="ECGetResponseCollection" ids="swift.proxy.controllers.obj.ECGetResponseCollection" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.ECGetResponseCollection"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.proxy.controllers.obj.</desc_addname><desc_name xml:space="preserve">ECGetResponseCollection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">policy</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                        <paragraph>Manages all successful EC GET responses gathered by ResumingGetters.</paragraph>
                        <paragraph>A response comprises a tuple of (&lt;getter instance&gt;, &lt;parts iterator&gt;). All
                            responses having the same data timestamp are placed in an
                            ECGetResponseBucket for that timestamp. The buckets are stored in the
                            ‘buckets’ dict which maps timestamp-&gt; bucket.</paragraph>
                        <paragraph>This class encapsulates logic for selecting the best bucket from the
                            collection, and for choosing alternate nodes.</paragraph>
                        <index entries="['single',\ u'add_response()\ (swift.proxy.controllers.obj.ECGetResponseCollection\ method)',\ u'swift.proxy.controllers.obj.ECGetResponseCollection.add_response',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ECGetResponseCollection" first="False" fullname="ECGetResponseCollection.add_response" ids="swift.proxy.controllers.obj.ECGetResponseCollection.add_response" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.ECGetResponseCollection.add_response"><desc_name xml:space="preserve">add_response</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">get</desc_parameter><desc_parameter xml:space="preserve">parts_iter</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Add a response to the collection.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">get</literal_strong> – An instance of
                                                        <reference internal="True" refid="swift.proxy.controllers.base.ResumingGetter" reftitle="swift.proxy.controllers.base.ResumingGetter"><literal classes="xref py py-class">ResumingGetter</literal></reference></paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">parts_iter</literal_strong> – An iterator over response body parts</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Raises</field_name>
                                        <field_body>
                                            <paragraph><literal_strong>ValueError</literal_strong> – if the response etag or status code values do not
                                                match any values previously received for the same timestamp</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'best_bucket\ (swift.proxy.controllers.obj.ECGetResponseCollection\ attribute)',\ u'swift.proxy.controllers.obj.ECGetResponseCollection.best_bucket',\ '',\ None]"></index>
                        <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                            <desc_signature class="ECGetResponseCollection" first="False" fullname="ECGetResponseCollection.best_bucket" ids="swift.proxy.controllers.obj.ECGetResponseCollection.best_bucket" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.ECGetResponseCollection.best_bucket"><desc_name xml:space="preserve">best_bucket</desc_name></desc_signature>
                            <desc_content>
                                <paragraph>Return the best bucket in the collection.</paragraph>
                                <paragraph>The “best” bucket is the newest timestamp with sufficient getters, or
                                    the closest to having a sufficient getters, unless it is bettered by a
                                    bucket with potential alternate nodes.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>An instance of <reference internal="True" refid="swift.proxy.controllers.obj.ECGetResponseBucket" reftitle="swift.proxy.controllers.obj.ECGetResponseBucket"><literal classes="xref py py-class">ECGetResponseBucket</literal></reference> or None if there
                                                are no buckets in the collection.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'get_extra_headers()\ (swift.proxy.controllers.obj.ECGetResponseCollection\ method)',\ u'swift.proxy.controllers.obj.ECGetResponseCollection.get_extra_headers',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ECGetResponseCollection" first="False" fullname="ECGetResponseCollection.get_extra_headers" ids="swift.proxy.controllers.obj.ECGetResponseCollection.get_extra_headers" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.ECGetResponseCollection.get_extra_headers"><desc_name xml:space="preserve">get_extra_headers</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'has_alternate_node()\ (swift.proxy.controllers.obj.ECGetResponseCollection\ method)',\ u'swift.proxy.controllers.obj.ECGetResponseCollection.has_alternate_node',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ECGetResponseCollection" first="False" fullname="ECGetResponseCollection.has_alternate_node" ids="swift.proxy.controllers.obj.ECGetResponseCollection.has_alternate_node" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.ECGetResponseCollection.has_alternate_node"><desc_name xml:space="preserve">has_alternate_node</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'provide_alternate_node()\ (swift.proxy.controllers.obj.ECGetResponseCollection\ method)',\ u'swift.proxy.controllers.obj.ECGetResponseCollection.provide_alternate_node',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="ECGetResponseCollection" first="False" fullname="ECGetResponseCollection.provide_alternate_node" ids="swift.proxy.controllers.obj.ECGetResponseCollection.provide_alternate_node" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.ECGetResponseCollection.provide_alternate_node"><desc_name xml:space="preserve">provide_alternate_node</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Callback function that is installed in a NodeIter. Called on every call
                                    to NodeIter.next(), which means we can track the number of nodes to
                                    which GET requests have been made and selectively inject an alternate
                                    node, if we have one.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>A dict describing a node to which the next GET request
                                                should be made.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'ECObjectController\ (class\ in\ swift.proxy.controllers.obj)',\ u'swift.proxy.controllers.obj.ECObjectController',\ '',\ None]"></index>
                <desc desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="" first="False" fullname="ECObjectController" ids="swift.proxy.controllers.obj.ECObjectController" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.ECObjectController"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.proxy.controllers.obj.</desc_addname><desc_name xml:space="preserve">ECObjectController</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">app</desc_parameter><desc_parameter xml:space="preserve">account_name</desc_parameter><desc_parameter xml:space="preserve">container_name</desc_parameter><desc_parameter xml:space="preserve">object_name</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Bases: <reference internal="True" refid="swift.proxy.controllers.obj.BaseObjectController" reftitle="swift.proxy.controllers.obj.BaseObjectController"><literal classes="xref py py-class">swift.proxy.controllers.obj.BaseObjectController</literal></reference></paragraph>
                        <index entries="['single',\ u'policy_type\ (swift.proxy.controllers.obj.ECObjectController\ attribute)',\ u'swift.proxy.controllers.obj.ECObjectController.policy_type',\ '',\ None]"></index>
                        <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                            <desc_signature class="ECObjectController" first="False" fullname="ECObjectController.policy_type" ids="swift.proxy.controllers.obj.ECObjectController.policy_type" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.ECObjectController.policy_type"><desc_name xml:space="preserve">policy_type</desc_name><desc_annotation xml:space="preserve"> = 'erasure_coding'</desc_annotation></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'MIMEPutter\ (class\ in\ swift.proxy.controllers.obj)',\ u'swift.proxy.controllers.obj.MIMEPutter',\ '',\ None]"></index>
                <desc desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="" first="False" fullname="MIMEPutter" ids="swift.proxy.controllers.obj.MIMEPutter" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.MIMEPutter"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.proxy.controllers.obj.</desc_addname><desc_name xml:space="preserve">MIMEPutter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conn</desc_parameter><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">resp</desc_parameter><desc_parameter xml:space="preserve">req</desc_parameter><desc_parameter xml:space="preserve">connect_duration</desc_parameter><desc_parameter xml:space="preserve">logger</desc_parameter><desc_parameter xml:space="preserve">mime_boundary</desc_parameter><desc_parameter xml:space="preserve">multiphase=False</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Bases: <reference internal="True" refid="swift.proxy.controllers.obj.Putter" reftitle="swift.proxy.controllers.obj.Putter"><literal classes="xref py py-class">swift.proxy.controllers.obj.Putter</literal></reference></paragraph>
                        <paragraph>Putter for backend PUT requests that use MIME.</paragraph>
                        <paragraph>This is here mostly to wrap up the fact that all multipart PUTs are
                            chunked because of the mime boundary footer trick and the first
                            half of the two-phase PUT conversation handling.</paragraph>
                        <paragraph>An HTTP PUT request that supports streaming.</paragraph>
                        <index entries="['single',\ u'connect()\ (swift.proxy.controllers.obj.MIMEPutter\ class\ method)',\ u'swift.proxy.controllers.obj.MIMEPutter.connect',\ '',\ None]"></index>
                        <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                            <desc_signature class="MIMEPutter" first="False" fullname="MIMEPutter.connect" ids="swift.proxy.controllers.obj.MIMEPutter.connect" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.MIMEPutter.connect"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">connect</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">part</desc_parameter><desc_parameter xml:space="preserve">req</desc_parameter><desc_parameter xml:space="preserve">headers</desc_parameter><desc_parameter xml:space="preserve">conn_timeout</desc_parameter><desc_parameter xml:space="preserve">node_timeout</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter><desc_parameter xml:space="preserve">need_multiphase=True</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Connect to a backend node and send the headers.</paragraph>
                                <paragraph>Override superclass method to notify object of need for support for
                                    multipart body with footers and optionally multiphase commit, and
                                    verify object server’s capabilities.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">need_multiphase</literal_strong> – if True then multiphase support is required of
                                                the object server</paragraph>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Raises</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><reference internal="True" reftitle="swift.common.exceptions.FooterNotSupported" refuri="misc#swift.common.exceptions.FooterNotSupported"><literal_strong>FooterNotSupported</literal_strong></reference> – if need_metadata_footer is set but
                                                        backend node can’t process footers</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><reference internal="True" reftitle="swift.common.exceptions.MultiphasePUTNotSupported" refuri="misc#swift.common.exceptions.MultiphasePUTNotSupported"><literal_strong>MultiphasePUTNotSupported</literal_strong></reference> – if need_multiphase is set but
                                                        backend node can’t handle multiphase PUT</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'end_of_object_data()\ (swift.proxy.controllers.obj.MIMEPutter\ method)',\ u'swift.proxy.controllers.obj.MIMEPutter.end_of_object_data',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="MIMEPutter" first="False" fullname="MIMEPutter.end_of_object_data" ids="swift.proxy.controllers.obj.MIMEPutter.end_of_object_data" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.MIMEPutter.end_of_object_data"><desc_name xml:space="preserve">end_of_object_data</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">footer_metadata=None</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Call when there is no more data to send.</paragraph>
                                <paragraph>Overrides superclass implementation to send any footer metadata
                                    after object data.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <paragraph><literal_strong refspecific="True">footer_metadata</literal_strong> – dictionary of metadata items
                                                to be sent as footers.</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'send_commit_confirmation()\ (swift.proxy.controllers.obj.MIMEPutter\ method)',\ u'swift.proxy.controllers.obj.MIMEPutter.send_commit_confirmation',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="MIMEPutter" first="False" fullname="MIMEPutter.send_commit_confirmation" ids="swift.proxy.controllers.obj.MIMEPutter.send_commit_confirmation" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.MIMEPutter.send_commit_confirmation"><desc_name xml:space="preserve">send_commit_confirmation</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Call when there are &gt; quorum 2XX responses received.  Send commit
                                    confirmations to all object nodes to finalize the PUT.</paragraph>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'ObjectControllerRouter\ (class\ in\ swift.proxy.controllers.obj)',\ u'swift.proxy.controllers.obj.ObjectControllerRouter',\ '',\ None]"></index>
                <desc desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="" first="False" fullname="ObjectControllerRouter" ids="swift.proxy.controllers.obj.ObjectControllerRouter" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.ObjectControllerRouter"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.proxy.controllers.obj.</desc_addname><desc_name xml:space="preserve">ObjectControllerRouter</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                        <index entries="['single',\ u'policy_type_to_controller_map\ (swift.proxy.controllers.obj.ObjectControllerRouter\ attribute)',\ u'swift.proxy.controllers.obj.ObjectControllerRouter.policy_type_to_controller_map',\ '',\ None]"></index>
                        <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                            <desc_signature class="ObjectControllerRouter" first="False" fullname="ObjectControllerRouter.policy_type_to_controller_map" ids="swift.proxy.controllers.obj.ObjectControllerRouter.policy_type_to_controller_map" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.ObjectControllerRouter.policy_type_to_controller_map"><desc_name xml:space="preserve">policy_type_to_controller_map</desc_name><desc_annotation xml:space="preserve"> = {'replication': &lt;class 'swift.proxy.controllers.obj.ReplicatedObjectController'&gt;, 'erasure_coding': &lt;class 'swift.proxy.controllers.obj.ECObjectController'&gt;}</desc_annotation></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'register()\ (swift.proxy.controllers.obj.ObjectControllerRouter\ class\ method)',\ u'swift.proxy.controllers.obj.ObjectControllerRouter.register',\ '',\ None]"></index>
                        <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                            <desc_signature class="ObjectControllerRouter" first="False" fullname="ObjectControllerRouter.register" ids="swift.proxy.controllers.obj.ObjectControllerRouter.register" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.ObjectControllerRouter.register"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">register</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">policy_type</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Decorator for Storage Policy implementations to register
                                    their ObjectController implementations.</paragraph>
                                <paragraph>This also fills in a policy_type attribute on the class.</paragraph>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'Putter\ (class\ in\ swift.proxy.controllers.obj)',\ u'swift.proxy.controllers.obj.Putter',\ '',\ None]"></index>
                <desc desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="" first="False" fullname="Putter" ids="swift.proxy.controllers.obj.Putter" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.Putter"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.proxy.controllers.obj.</desc_addname><desc_name xml:space="preserve">Putter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conn</desc_parameter><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">resp</desc_parameter><desc_parameter xml:space="preserve">path</desc_parameter><desc_parameter xml:space="preserve">connect_duration</desc_parameter><desc_parameter xml:space="preserve">logger</desc_parameter><desc_parameter xml:space="preserve">chunked=False</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                        <paragraph>Putter for backend PUT requests.</paragraph>
                        <paragraph>Encapsulates all the actions required to establish a connection with a
                            storage node and stream data to that node.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">conn</literal_strong> – an HTTPConnection instance</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">node</literal_strong> – dict describing storage node</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">resp</literal_strong> – an HTTPResponse instance if connect() received final response</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">path</literal_strong> – the object path to send to the storage node</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">connect_duration</literal_strong> – time taken to initiate the HTTPConnection</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">logger</literal_strong> – a Logger instance</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">chunked</literal_strong> – boolean indicating if the request encoding is chunked</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                        <index entries="['single',\ u'await_response()\ (swift.proxy.controllers.obj.Putter\ method)',\ u'swift.proxy.controllers.obj.Putter.await_response',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="Putter" first="False" fullname="Putter.await_response" ids="swift.proxy.controllers.obj.Putter.await_response" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.Putter.await_response"><desc_name xml:space="preserve">await_response</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">timeout</desc_parameter><desc_parameter xml:space="preserve">informational=False</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Get 100-continue response indicating the end of 1st phase of a 2-phase
                                    commit or the final response, i.e. the one with status &gt;= 200.</paragraph>
                                <paragraph>Might or might not actually wait for anything. If we said Expect:
                                    100-continue but got back a non-100 response, that’ll be the thing
                                    returned, and we won’t do any network IO to get it. OTOH, if we got
                                    a 100 Continue response and sent up the PUT request’s body, then
                                    we’ll actually read the 2xx-5xx response off the network here.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Parameters</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">timeout</literal_strong> – time to wait for a response</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal_strong refspecific="True">informational</literal_strong> – if True then try to get a 100-continue response,
                                                        otherwise try to get a final response.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>HTTPResponse</paragraph>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Raises</field_name>
                                        <field_body>
                                            <paragraph><literal_strong>Timeout</literal_strong> – if the response took too long</paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'close()\ (swift.proxy.controllers.obj.Putter\ method)',\ u'swift.proxy.controllers.obj.Putter.close',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="Putter" first="False" fullname="Putter.close" ids="swift.proxy.controllers.obj.Putter.close" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.Putter.close"><desc_name xml:space="preserve">close</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'connect()\ (swift.proxy.controllers.obj.Putter\ class\ method)',\ u'swift.proxy.controllers.obj.Putter.connect',\ '',\ None]"></index>
                        <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                            <desc_signature class="Putter" first="False" fullname="Putter.connect" ids="swift.proxy.controllers.obj.Putter.connect" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.Putter.connect"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">connect</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">part</desc_parameter><desc_parameter xml:space="preserve">path</desc_parameter><desc_parameter xml:space="preserve">headers</desc_parameter><desc_parameter xml:space="preserve">conn_timeout</desc_parameter><desc_parameter xml:space="preserve">node_timeout</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter><desc_parameter xml:space="preserve">chunked=False</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Connect to a backend node and send the headers.</paragraph>
                                <field_list>
                                    <field>
                                        <field_name>Returns</field_name>
                                        <field_body>
                                            <paragraph>Putter instance</paragraph>
                                        </field_body>
                                    </field>
                                    <field>
                                        <field_name>Raises</field_name>
                                        <field_body>
                                            <bullet_list>
                                                <list_item>
                                                    <paragraph><reference internal="True" reftitle="swift.common.exceptions.ConnectionTimeout" refuri="misc#swift.common.exceptions.ConnectionTimeout"><literal_strong>ConnectionTimeout</literal_strong></reference> – if initial connection timed out</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><reference internal="True" reftitle="swift.common.exceptions.ResponseTimeout" refuri="misc#swift.common.exceptions.ResponseTimeout"><literal_strong>ResponseTimeout</literal_strong></reference> – if header retrieval timed out</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><reference internal="True" reftitle="swift.common.exceptions.InsufficientStorage" refuri="misc#swift.common.exceptions.InsufficientStorage"><literal_strong>InsufficientStorage</literal_strong></reference> – on 507 response from node</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><reference internal="True" reftitle="swift.common.exceptions.PutterConnectError" refuri="misc#swift.common.exceptions.PutterConnectError"><literal_strong>PutterConnectError</literal_strong></reference> – on non-507 server error response from node</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'end_of_object_data()\ (swift.proxy.controllers.obj.Putter\ method)',\ u'swift.proxy.controllers.obj.Putter.end_of_object_data',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="Putter" first="False" fullname="Putter.end_of_object_data" ids="swift.proxy.controllers.obj.Putter.end_of_object_data" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.Putter.end_of_object_data"><desc_name xml:space="preserve">end_of_object_data</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Call when there is no more data to send.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'send_chunk()\ (swift.proxy.controllers.obj.Putter\ method)',\ u'swift.proxy.controllers.obj.Putter.send_chunk',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="Putter" first="False" fullname="Putter.send_chunk" ids="swift.proxy.controllers.obj.Putter.send_chunk" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.Putter.send_chunk"><desc_name xml:space="preserve">send_chunk</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">chunk</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'spawn_sender_greenthread()\ (swift.proxy.controllers.obj.Putter\ method)',\ u'swift.proxy.controllers.obj.Putter.spawn_sender_greenthread',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="Putter" first="False" fullname="Putter.spawn_sender_greenthread" ids="swift.proxy.controllers.obj.Putter.spawn_sender_greenthread" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.Putter.spawn_sender_greenthread"><desc_name xml:space="preserve">spawn_sender_greenthread</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">pool</desc_parameter><desc_parameter xml:space="preserve">queue_depth</desc_parameter><desc_parameter xml:space="preserve">write_timeout</desc_parameter><desc_parameter xml:space="preserve">exception_handler</desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Call before sending the first chunk of request body</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ u'wait()\ (swift.proxy.controllers.obj.Putter\ method)',\ u'swift.proxy.controllers.obj.Putter.wait',\ '',\ None]"></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="Putter" first="False" fullname="Putter.wait" ids="swift.proxy.controllers.obj.Putter.wait" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.Putter.wait"><desc_name xml:space="preserve">wait</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'ReplicatedObjectController\ (class\ in\ swift.proxy.controllers.obj)',\ u'swift.proxy.controllers.obj.ReplicatedObjectController',\ '',\ None]"></index>
                <desc desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="" first="False" fullname="ReplicatedObjectController" ids="swift.proxy.controllers.obj.ReplicatedObjectController" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.ReplicatedObjectController"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.proxy.controllers.obj.</desc_addname><desc_name xml:space="preserve">ReplicatedObjectController</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">app</desc_parameter><desc_parameter xml:space="preserve">account_name</desc_parameter><desc_parameter xml:space="preserve">container_name</desc_parameter><desc_parameter xml:space="preserve">object_name</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Bases: <reference internal="True" refid="swift.proxy.controllers.obj.BaseObjectController" reftitle="swift.proxy.controllers.obj.BaseObjectController"><literal classes="xref py py-class">swift.proxy.controllers.obj.BaseObjectController</literal></reference></paragraph>
                        <index entries="['single',\ u'policy_type\ (swift.proxy.controllers.obj.ReplicatedObjectController\ attribute)',\ u'swift.proxy.controllers.obj.ReplicatedObjectController.policy_type',\ '',\ None]"></index>
                        <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                            <desc_signature class="ReplicatedObjectController" first="False" fullname="ReplicatedObjectController.policy_type" ids="swift.proxy.controllers.obj.ReplicatedObjectController.policy_type" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.ReplicatedObjectController.policy_type"><desc_name xml:space="preserve">policy_type</desc_name><desc_annotation xml:space="preserve"> = 'replication'</desc_annotation></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'check_content_type()\ (in\ module\ swift.proxy.controllers.obj)',\ u'swift.proxy.controllers.obj.check_content_type',\ '',\ None]"></index>
                <desc desctype="function" domain="py" noindex="False" objtype="function">
                    <desc_signature class="" first="False" fullname="check_content_type" ids="swift.proxy.controllers.obj.check_content_type" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.check_content_type"><desc_addname xml:space="preserve">swift.proxy.controllers.obj.</desc_addname><desc_name xml:space="preserve">check_content_type</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'chunk_transformer()\ (in\ module\ swift.proxy.controllers.obj)',\ u'swift.proxy.controllers.obj.chunk_transformer',\ '',\ None]"></index>
                <desc desctype="function" domain="py" noindex="False" objtype="function">
                    <desc_signature class="" first="False" fullname="chunk_transformer" ids="swift.proxy.controllers.obj.chunk_transformer" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.chunk_transformer"><desc_addname xml:space="preserve">swift.proxy.controllers.obj.</desc_addname><desc_name xml:space="preserve">chunk_transformer</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">policy</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>A generator to transform a source chunk to erasure coded chunks for each
                            <title_reference>send</title_reference> call. The number of erasure coded chunks is as
                            policy.ec_n_unique_fragments.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'client_range_to_segment_range()\ (in\ module\ swift.proxy.controllers.obj)',\ u'swift.proxy.controllers.obj.client_range_to_segment_range',\ '',\ None]"></index>
                <desc desctype="function" domain="py" noindex="False" objtype="function">
                    <desc_signature class="" first="False" fullname="client_range_to_segment_range" ids="swift.proxy.controllers.obj.client_range_to_segment_range" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.client_range_to_segment_range"><desc_addname xml:space="preserve">swift.proxy.controllers.obj.</desc_addname><desc_name xml:space="preserve">client_range_to_segment_range</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">client_start</desc_parameter><desc_parameter xml:space="preserve">client_end</desc_parameter><desc_parameter xml:space="preserve">segment_size</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Takes a byterange from the client and converts it into a byterange
                            spanning the necessary segments.</paragraph>
                        <paragraph>Handles prefix, suffix, and fully-specified byte ranges.</paragraph>
                        <definition_list>
                            <definition_list_item>
                                <term>Examples:</term>
                                <definition>
                                    <paragraph>client_range_to_segment_range(100, 700, 512) = (0, 1023)
                                        client_range_to_segment_range(100, 700, 256) = (0, 767)
                                        client_range_to_segment_range(300, None, 256) = (256, None)</paragraph>
                                </definition>
                            </definition_list_item>
                        </definition_list>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">client_start</literal_strong> – first byte of the range requested by the client</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">client_end</literal_strong> – last byte of the range requested by the client</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">segment_size</literal_strong> – size of an EC segment, in bytes</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph><paragraph>a 2-tuple (seg_start, seg_end) where</paragraph><bullet_list bullet="*"><list_item><paragraph>seg_start is the first byte of the first segment, or None if this is
                                                    a suffix byte range</paragraph></list_item><list_item><paragraph>seg_end is the last byte of the last segment, or None if this is a
                                                    prefix byte range</paragraph></list_item></bullet_list></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'segment_range_to_fragment_range()\ (in\ module\ swift.proxy.controllers.obj)',\ u'swift.proxy.controllers.obj.segment_range_to_fragment_range',\ '',\ None]"></index>
                <desc desctype="function" domain="py" noindex="False" objtype="function">
                    <desc_signature class="" first="False" fullname="segment_range_to_fragment_range" ids="swift.proxy.controllers.obj.segment_range_to_fragment_range" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.segment_range_to_fragment_range"><desc_addname xml:space="preserve">swift.proxy.controllers.obj.</desc_addname><desc_name xml:space="preserve">segment_range_to_fragment_range</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">segment_start</desc_parameter><desc_parameter xml:space="preserve">segment_end</desc_parameter><desc_parameter xml:space="preserve">segment_size</desc_parameter><desc_parameter xml:space="preserve">fragment_size</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Takes a byterange spanning some segments and converts that into a
                            byterange spanning the corresponding fragments within their fragment
                            archives.</paragraph>
                        <paragraph>Handles prefix, suffix, and fully-specified byte ranges.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">segment_start</literal_strong> – first byte of the first segment</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">segment_end</literal_strong> – last byte of the last segment</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">segment_size</literal_strong> – size of an EC segment, in bytes</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">fragment_size</literal_strong> – size of an EC fragment, in bytes</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph><paragraph>a 2-tuple (frag_start, frag_end) where</paragraph><bullet_list bullet="*"><list_item><paragraph>frag_start is the first byte of the first fragment, or None if this
                                                    is a suffix byte range</paragraph></list_item><list_item><paragraph>frag_end is the last byte of the last fragment, or None if this is a
                                                    prefix byte range</paragraph></list_item></bullet_list></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'trailing_metadata()\ (in\ module\ swift.proxy.controllers.obj)',\ u'swift.proxy.controllers.obj.trailing_metadata',\ '',\ None]"></index>
                <desc desctype="function" domain="py" noindex="False" objtype="function">
                    <desc_signature class="" first="False" fullname="trailing_metadata" ids="swift.proxy.controllers.obj.trailing_metadata" module="swift.proxy.controllers.obj" names="swift.proxy.controllers.obj.trailing_metadata"><desc_addname xml:space="preserve">swift.proxy.controllers.obj.</desc_addname><desc_name xml:space="preserve">trailing_metadata</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">policy</desc_parameter><desc_parameter xml:space="preserve">client_obj_hasher</desc_parameter><desc_parameter xml:space="preserve">bytes_transferred_from_client</desc_parameter><desc_parameter xml:space="preserve">fragment_archive_index</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <target refid="proxy-server"></target>
            </section>
        </section>
        <section ids="module-swift.proxy.server id3 proxy-server" names="proxy\ server proxy-server">
            <title>Proxy Server</title>
            <index entries="['single',\ u'swift.proxy.server\ (module)',\ u'module-swift.proxy.server',\ '',\ None]"></index>
            <index entries="['single',\ u'Application\ (class\ in\ swift.proxy.server)',\ u'swift.proxy.server.Application',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="Application" ids="swift.proxy.server.Application" module="swift.proxy.server" names="swift.proxy.server.Application"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.proxy.server.</desc_addname><desc_name xml:space="preserve">Application</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter><desc_parameter xml:space="preserve">memcache=None</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter><desc_parameter xml:space="preserve">account_ring=None</desc_parameter><desc_parameter xml:space="preserve">container_ring=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>WSGI application for the proxy server.</paragraph>
                    <index entries="['single',\ u'check_config()\ (swift.proxy.server.Application\ method)',\ u'swift.proxy.server.Application.check_config',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Application" first="False" fullname="Application.check_config" ids="swift.proxy.server.Application.check_config" module="swift.proxy.server" names="swift.proxy.server.Application.check_config"><desc_name xml:space="preserve">check_config</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Check the configuration for possible errors</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'error_limit()\ (swift.proxy.server.Application\ method)',\ u'swift.proxy.server.Application.error_limit',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Application" first="False" fullname="Application.error_limit" ids="swift.proxy.server.Application.error_limit" module="swift.proxy.server" names="swift.proxy.server.Application.error_limit"><desc_name xml:space="preserve">error_limit</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">msg</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Mark a node as error limited. This immediately pretends the
                                node received enough errors to trigger error suppression. Use
                                this for errors like Insufficient Storage. For other errors
                                use <reference internal="True" refid="swift.proxy.server.Application.error_occurred" reftitle="swift.proxy.server.Application.error_occurred"><literal classes="xref py py-func">error_occurred()</literal></reference>.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">node</literal_strong> – dictionary of node to error limit</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">msg</literal_strong> – error message</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'error_limited()\ (swift.proxy.server.Application\ method)',\ u'swift.proxy.server.Application.error_limited',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Application" first="False" fullname="Application.error_limited" ids="swift.proxy.server.Application.error_limited" module="swift.proxy.server" names="swift.proxy.server.Application.error_limited"><desc_name xml:space="preserve">error_limited</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Check if the node is currently error limited.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">node</literal_strong> – dictionary of node to check</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>True if error limited, False otherwise</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'error_occurred()\ (swift.proxy.server.Application\ method)',\ u'swift.proxy.server.Application.error_occurred',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Application" first="False" fullname="Application.error_occurred" ids="swift.proxy.server.Application.error_occurred" module="swift.proxy.server" names="swift.proxy.server.Application.error_occurred"><desc_name xml:space="preserve">error_occurred</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">msg</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Handle logging, and handling of errors.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">node</literal_strong> – dictionary of node to handle errors for</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">msg</literal_strong> – error message</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'exception_occurred()\ (swift.proxy.server.Application\ method)',\ u'swift.proxy.server.Application.exception_occurred',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Application" first="False" fullname="Application.exception_occurred" ids="swift.proxy.server.Application.exception_occurred" module="swift.proxy.server" names="swift.proxy.server.Application.exception_occurred"><desc_name xml:space="preserve">exception_occurred</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">typ</desc_parameter><desc_parameter xml:space="preserve">additional_info</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Handle logging of generic exceptions.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">node</literal_strong> – dictionary of node to log the error for</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">typ</literal_strong> – server type</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">additional_info</literal_strong> – additional information to log</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_controller()\ (swift.proxy.server.Application\ method)',\ u'swift.proxy.server.Application.get_controller',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Application" first="False" fullname="Application.get_controller" ids="swift.proxy.server.Application.get_controller" module="swift.proxy.server" names="swift.proxy.server.Application.get_controller"><desc_name xml:space="preserve">get_controller</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get the controller to handle a request.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">req</literal_strong> – the request</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>tuple of (controller class, path dictionary)</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><literal_strong>ValueError</literal_strong> – (thrown by split_path) if given invalid path</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_object_ring()\ (swift.proxy.server.Application\ method)',\ u'swift.proxy.server.Application.get_object_ring',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Application" first="False" fullname="Application.get_object_ring" ids="swift.proxy.server.Application.get_object_ring" module="swift.proxy.server" names="swift.proxy.server.Application.get_object_ring"><desc_name xml:space="preserve">get_object_ring</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">policy_idx</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get the ring object to use to handle a request based on its policy.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">policy_idx</literal_strong> – policy index as defined in swift.conf</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>appropriate ring object</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_policy_options()\ (swift.proxy.server.Application\ method)',\ u'swift.proxy.server.Application.get_policy_options',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Application" first="False" fullname="Application.get_policy_options" ids="swift.proxy.server.Application.get_policy_options" module="swift.proxy.server" names="swift.proxy.server.Application.get_policy_options"><desc_name xml:space="preserve">get_policy_options</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">policy</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return policy specific options.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">policy</literal_strong> – an instance of <literal classes="xref py py-class">BaseStoragePolicy</literal></paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>an instance of <reference internal="True" refid="swift.proxy.server.ProxyOverrideOptions" reftitle="swift.proxy.server.ProxyOverrideOptions"><literal classes="xref py py-class">ProxyOverrideOptions</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'handle_request()\ (swift.proxy.server.Application\ method)',\ u'swift.proxy.server.Application.handle_request',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Application" first="False" fullname="Application.handle_request" ids="swift.proxy.server.Application.handle_request" module="swift.proxy.server" names="swift.proxy.server.Application.handle_request"><desc_name xml:space="preserve">handle_request</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Entry point for proxy server.
                                Should return a WSGI-style callable (such as swob.Response).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">req</literal_strong> – swob.Request object</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'iter_nodes()\ (swift.proxy.server.Application\ method)',\ u'swift.proxy.server.Application.iter_nodes',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Application" first="False" fullname="Application.iter_nodes" ids="swift.proxy.server.Application.iter_nodes" module="swift.proxy.server" names="swift.proxy.server.Application.iter_nodes"><desc_name xml:space="preserve">iter_nodes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ring</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">node_iter=None</desc_parameter><desc_parameter xml:space="preserve">policy=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'modify_wsgi_pipeline()\ (swift.proxy.server.Application\ method)',\ u'swift.proxy.server.Application.modify_wsgi_pipeline',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Application" first="False" fullname="Application.modify_wsgi_pipeline" ids="swift.proxy.server.Application.modify_wsgi_pipeline" module="swift.proxy.server" names="swift.proxy.server.Application.modify_wsgi_pipeline"><desc_name xml:space="preserve">modify_wsgi_pipeline</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">pipe</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Called during WSGI pipeline creation. Modifies the WSGI pipeline
                                context to ensure that mandatory middleware is present in the pipeline.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">pipe</literal_strong> – A PipelineWrapper object</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_node_timing()\ (swift.proxy.server.Application\ method)',\ u'swift.proxy.server.Application.set_node_timing',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Application" first="False" fullname="Application.set_node_timing" ids="swift.proxy.server.Application.set_node_timing" module="swift.proxy.server" names="swift.proxy.server.Application.set_node_timing"><desc_name xml:space="preserve">set_node_timing</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">timing</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'sort_nodes()\ (swift.proxy.server.Application\ method)',\ u'swift.proxy.server.Application.sort_nodes',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Application" first="False" fullname="Application.sort_nodes" ids="swift.proxy.server.Application.sort_nodes" module="swift.proxy.server" names="swift.proxy.server.Application.sort_nodes"><desc_name xml:space="preserve">sort_nodes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">nodes</desc_parameter><desc_parameter xml:space="preserve">policy=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Sorts nodes in-place (and returns the sorted list) according to
                                the configured strategy. The default “sorting” is to randomly
                                shuffle the nodes. If the “timing” strategy is chosen, the nodes
                                are sorted according to the stored timing data.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">nodes</literal_strong> – a list of nodes</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">policy</literal_strong> – an instance of <literal classes="xref py py-class">BaseStoragePolicy</literal></paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'update_request()\ (swift.proxy.server.Application\ method)',\ u'swift.proxy.server.Application.update_request',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Application" first="False" fullname="Application.update_request" ids="swift.proxy.server.Application.update_request" module="swift.proxy.server" names="swift.proxy.server.Application.update_request"><desc_name xml:space="preserve">update_request</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ProxyOverrideOptions\ (class\ in\ swift.proxy.server)',\ u'swift.proxy.server.ProxyOverrideOptions',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ProxyOverrideOptions" ids="swift.proxy.server.ProxyOverrideOptions" module="swift.proxy.server" names="swift.proxy.server.ProxyOverrideOptions"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.proxy.server.</desc_addname><desc_name xml:space="preserve">ProxyOverrideOptions</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">base_conf</desc_parameter><desc_parameter xml:space="preserve">override_conf</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Encapsulates proxy server options that may be overridden e.g. for
                        policy specific configurations.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">conf</literal_strong> – the proxy-server config dict.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">override_conf</literal_strong> – a dict of overriding configuration options.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'app_factory()\ (in\ module\ swift.proxy.server)',\ u'swift.proxy.server.app_factory',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="app_factory" ids="swift.proxy.server.app_factory" module="swift.proxy.server" names="swift.proxy.server.app_factory"><desc_addname xml:space="preserve">swift.proxy.server.</desc_addname><desc_name xml:space="preserve">app_factory</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">global_conf</desc_parameter><desc_parameter xml:space="preserve">**local_conf</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>paste.deploy app factory for creating WSGI proxy apps.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'parse_per_policy_config()\ (in\ module\ swift.proxy.server)',\ u'swift.proxy.server.parse_per_policy_config',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="parse_per_policy_config" ids="swift.proxy.server.parse_per_policy_config" module="swift.proxy.server" names="swift.proxy.server.parse_per_policy_config"><desc_addname xml:space="preserve">swift.proxy.server.</desc_addname><desc_name xml:space="preserve">parse_per_policy_config</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Search the config file for any per-policy config sections and load those
                        sections to a dict mapping policy reference (name or index) to policy
                        options.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">conf</literal_strong> – the proxy server conf dict</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a dict mapping policy reference -&gt; dict of policy options</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>ValueError</literal_strong> – if a policy config section has an invalid name</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
        </section>
    </section>
</document>
