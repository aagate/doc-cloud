<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/swift/doc/source/first_contribution_swift.rst">
    <section ids="first-contribution-to-swift" names="first\ contribution\ to\ swift">
        <title>First Contribution to Swift</title>
        <section ids="getting-swift" names="getting\ swift">
            <title>Getting Swift</title>
            <comment xml:space="preserve">highlight: none</comment>
            <paragraph>Swift’s source code is hosted on github and managed with git.  The current
                trunk can be checked out like this:</paragraph>
            <literal_block xml:space="preserve">git clone https://github.com/openstack/swift.git</literal_block>
            <paragraph>This will clone the Swift repository under your account.</paragraph>
            <paragraph>A source tarball for the latest release of Swift is available on the
                <reference name="launchpad project page" refuri="https://launchpad.net/swift">launchpad project page</reference><target ids="launchpad-project-page" names="launchpad\ project\ page" refuri="https://launchpad.net/swift"></target>.</paragraph>
            <paragraph>Prebuilt packages for Ubuntu and RHEL variants are available.</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph><reference name="Swift Ubuntu Packages" refuri="https://launchpad.net/ubuntu/+source/swift">Swift Ubuntu Packages</reference><target ids="swift-ubuntu-packages" names="swift\ ubuntu\ packages" refuri="https://launchpad.net/ubuntu/+source/swift"></target></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="Swift RDO Packages" refuri="https://www.rdoproject.org/Repositories">Swift RDO Packages</reference><target ids="swift-rdo-packages" names="swift\ rdo\ packages" refuri="https://www.rdoproject.org/Repositories"></target></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="source-control-setup" names="source\ control\ setup">
            <title>Source Control Setup</title>
            <paragraph>Swift uses <literal>git</literal> for source control. The OpenStack
                <reference name="Developer's Guide" refuri="http://docs.openstack.org/infra/manual/developers.html">Developer’s Guide</reference><target ids="developer-s-guide" names="developer's\ guide" refuri="http://docs.openstack.org/infra/manual/developers.html"></target>
                describes the steps for setting up Git and all the necessary accounts for
                contributing code to Swift.</paragraph>
        </section>
        <section ids="changes-to-swift" names="changes\ to\ swift">
            <title>Changes to Swift</title>
            <paragraph>Once you have the source code and source control set up, you can make your
                changes to Swift.</paragraph>
        </section>
        <section ids="testing" names="testing">
            <title>Testing</title>
            <paragraph>The <reference internal="True" refuri="development_guidelines"><inline classes="doc">Development Guidelines</inline></reference> describe the testing
                requirements before submitting Swift code.</paragraph>
            <paragraph>In summary, you can execute tox from the swift home directory (where you
                checked out the source code):</paragraph>
            <literal_block xml:space="preserve">tox</literal_block>
            <paragraph>Tox will present tests results. Notice that in the beginning, it is very common
                to break many coding style guidelines.</paragraph>
        </section>
        <section ids="proposing-changes-to-swift" names="proposing\ changes\ to\ swift">
            <title>Proposing changes to Swift</title>
            <paragraph>The OpenStack
                <reference name="Developer's Guide" refuri="http://docs.openstack.org/infra/manual/developers.html">Developer’s Guide</reference><target dupnames="developer's\ guide" ids="id1" refuri="http://docs.openstack.org/infra/manual/developers.html"></target>
                describes the most common <literal>git</literal> commands that you will need.</paragraph>
            <paragraph>Following is a list of the commands that you need to know for your first
                contribution to Swift:</paragraph>
            <paragraph>To clone a copy of Swift:</paragraph>
            <literal_block xml:space="preserve">git clone https://github.com/openstack/swift.git</literal_block>
            <paragraph>Under the swift directory, set up the Gerrit repository. The following command
                configures the repository to know about Gerrit and installs the <literal>Change-Id</literal>
                commit hook. You only need to do this once:</paragraph>
            <literal_block xml:space="preserve">git review -s</literal_block>
            <paragraph>To create your development branch (substitute branch_name for a name of your
                choice:</paragraph>
            <block_quote>
                <paragraph>git checkout -b &lt;branch_name&gt;</paragraph>
            </block_quote>
            <paragraph>To check the files that have been updated in your branch:</paragraph>
            <literal_block xml:space="preserve">git status</literal_block>
            <paragraph>To check the differences between your branch and the repository:</paragraph>
            <literal_block xml:space="preserve">git diff</literal_block>
            <paragraph>Assuming you have not added new files, you commit all your changes using:</paragraph>
            <literal_block xml:space="preserve">git commit -a</literal_block>
            <paragraph>Read the <reference name="Summary of Git commit message structure" refuri="https://wiki.openstack.org/wiki/GitCommitMessages?%22Summary%20of%20Git%20commit%20message%20structure%22#Summary_of_Git_commit_message_structure">Summary of Git commit message structure</reference><target ids="summary-of-git-commit-message-structure" names="summary\ of\ git\ commit\ message\ structure" refuri="https://wiki.openstack.org/wiki/GitCommitMessages?%22Summary%20of%20Git%20commit%20message%20structure%22#Summary_of_Git_commit_message_structure"></target>
                for best practices on writing the commit message. When you are ready to send
                your changes for review use:</paragraph>
            <literal_block xml:space="preserve">git review</literal_block>
            <paragraph>If successful, Git response message will contain a URL you can use to track your
                changes.</paragraph>
            <paragraph>If you need to make further changes to the same review, you can commit them
                using:</paragraph>
            <literal_block xml:space="preserve">git commit -a --amend</literal_block>
            <paragraph>This will commit the changes under the same set of changes you issued earlier.
                Notice that in order to send your latest version for review, you will still
                need to call:</paragraph>
            <literal_block xml:space="preserve">git review</literal_block>
        </section>
        <section ids="tracking-your-changes" names="tracking\ your\ changes">
            <title>Tracking your changes</title>
            <paragraph>After proposing changes to Swift, you can track them at
                <reference refuri="https://review.openstack.org">https://review.openstack.org</reference>. After logging in, you will see a dashboard of
                “Outgoing reviews” for changes you have proposed, “Incoming reviews” for
                changes you are reviewing, and “Recently closed” changes for which you were
                either a reviewer or owner.</paragraph>
            <target refid="post-rebase-instructions"></target>
        </section>
        <section ids="post-rebase-instructions id2" names="post\ rebase\ instructions post-rebase-instructions">
            <title>Post rebase instructions</title>
            <paragraph>After rebasing, the following steps should be performed to rebuild the swift
                installation. Note that these commands should be performed from the root of the
                swift repo directory (e.g. <literal>$HOME/swift/</literal>):</paragraph>
            <literal_block xml:space="preserve">sudo python setup.py develop
sudo pip install -r test-requirements.txt</literal_block>
            <paragraph>If using TOX, depending on the changes made during the rebase, you may need to
                rebuild the TOX environment (generally this will be the case if
                test-requirements.txt was updated such that a new version of a package is
                required), this can be accomplished using the <literal>-r</literal> argument to the TOX cli:</paragraph>
            <literal_block xml:space="preserve">tox -r</literal_block>
            <paragraph>You can include any of the other TOX arguments as well, for example, to run the
                pep8 suite and rebuild the TOX environment the following can be used:</paragraph>
            <literal_block xml:space="preserve">tox -r -e pep8</literal_block>
            <paragraph>The rebuild option only needs to be specified once for a particular build (e.g.
                pep8), that is further invocations of the same build will not require this
                until the next rebase.</paragraph>
        </section>
        <section ids="troubleshooting" names="troubleshooting">
            <title>Troubleshooting</title>
            <paragraph>You may run into the following errors when starting Swift if you rebase
                your commit using:</paragraph>
            <literal_block xml:space="preserve">git rebase</literal_block>
            <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">Traceback (most recent call last):
    File "/usr/local/bin/swift-init", line 5, in &lt;module&gt;
        from pkg_resources import require
    File "/usr/lib/python2.7/dist-packages/pkg_resources.py", line 2749, in &lt;module&gt;
        working_set = WorkingSet._build_master()
    File "/usr/lib/python2.7/dist-packages/pkg_resources.py", line 446, in _build_master
        return cls._build_from_requirements(__requires__)
    File "/usr/lib/python2.7/dist-packages/pkg_resources.py", line 459, in _build_from_requirements
        dists = ws.resolve(reqs, Environment())
    File "/usr/lib/python2.7/dist-packages/pkg_resources.py", line 628, in resolve
        raise DistributionNotFound(req)
pkg_resources.DistributionNotFound: swift==2.3.1.devXXX</literal_block>
            <paragraph>(where XXX represents a dev version of Swift).</paragraph>
            <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">Traceback (most recent call last):
    File "/usr/local/bin/swift-proxy-server", line 10, in &lt;module&gt;
      execfile(__file__)
    File "/home/swift/swift/bin/swift-proxy-server", line 23, in &lt;module&gt;
      sys.exit(run_wsgi(conf_file, 'proxy-server', **options))
    File "/home/swift/swift/swift/common/wsgi.py", line 888, in run_wsgi
      loadapp(conf_path, global_conf=global_conf)
    File "/home/swift/swift/swift/common/wsgi.py", line 390, in loadapp
      func(PipelineWrapper(ctx))
    File "/home/swift/swift/swift/proxy/server.py", line 602, in modify_wsgi_pipeline
      ctx = pipe.create_filter(filter_name)
    File "/home/swift/swift/swift/common/wsgi.py", line 329, in create_filter
      global_conf=self.context.global_conf)
    File "/usr/lib/python2.7/dist-packages/paste/deploy/loadwsgi.py", line 296, in loadcontext
      global_conf=global_conf)
    File "/usr/lib/python2.7/dist-packages/paste/deploy/loadwsgi.py", line 328, in _loadegg
      return loader.get_context(object_type, name, global_conf)
    File "/usr/lib/python2.7/dist-packages/paste/deploy/loadwsgi.py", line 620, in get_context
      object_type, name=name)
    File "/usr/lib/python2.7/dist-packages/paste/deploy/loadwsgi.py", line 659, in find_egg_entry_point
      for prot in protocol_options] or '(no entry points)'))))
LookupError: Entry point 'versioned_writes' not found in egg 'swift' (dir: /home/swift/swift; protocols: paste.filter_factory, paste.filter_app_factory; entry_points: )</literal_block>
            <paragraph>This happens because <literal>git rebase</literal> will retrieve code for a different version
                of Swift in the development stream, but the start scripts under
                <literal>/usr/local/bin</literal> have not been updated. The solution is to follow the steps
                described in the <reference internal="True" refid="post-rebase-instructions"><inline classes="std std-ref">Post rebase instructions</inline></reference> section.</paragraph>
        </section>
    </section>
</document>
