<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/swift/doc/source/api/temporary_url_middleware.rst">
    <section ids="temporary-url-middleware" names="temporary\ url\ middleware">
        <title>Temporary URL middleware</title>
        <paragraph>To discover whether your Object Storage system supports this feature,
            check with your service provider or send a <strong>GET</strong> request using the <literal>/info</literal>
            path.</paragraph>
        <paragraph>A temporary URL gives users temporary access to objects. For example, a
            website might want to provide a link to download a large object in
            Object Storage, but the Object Storage account has no public access. The
            website can generate a URL that provides time-limited <strong>GET</strong> access to
            the object. When the web browser user clicks on the link, the browser
            downloads the object directly from Object Storage, eliminating the need
            for the website to act as a proxy for the request.</paragraph>
        <paragraph>Furthermore, a temporary URL can be prefix-based. These URLs
            contain a signature which is valid for all objects which share
            a common prefix. They are useful for sharing a set of objects.</paragraph>
        <paragraph>Ask your cloud administrator to enable the temporary URL feature. For
            information, see <reference internal="True" refuri="../middleware#tempurl"><inline classes="std std-ref">TempURL</inline></reference> in the <emphasis>Source Documentation</emphasis>.</paragraph>
        <section dupnames="note" ids="note">
            <title>Note</title>
            <paragraph>To use <strong>POST</strong> requests to upload objects to specific Object Storage
                locations, use <reference internal="True" refuri="form_post_middleware"><inline classes="doc">Form POST middleware</inline></reference> instead of temporary URL middleware.</paragraph>
        </section>
        <section ids="temporary-url-format" names="temporary\ url\ format">
            <title>Temporary URL format</title>
            <paragraph>A temporary URL is comprised of the URL for an object with added query
                parameters:</paragraph>
            <paragraph><strong>Example Temporary URL format</strong></paragraph>
            <literal_block classes="code" xml:space="preserve">https://swift-cluster.example.com/v1/my_account/container/object
?temp_url_sig=da39a3ee5e6b4b0d3255bfef95601890afd80709
&amp;temp_url_expires=1323479485
&amp;filename=My+Test+File.pdf</literal_block>
            <paragraph>The example shows these elements:</paragraph>
            <paragraph><strong>Object URL</strong>: Required. The full path URL to the object.</paragraph>
            <paragraph><strong>temp_url_sig</strong>: Required. An HMAC-SHA1 cryptographic signature that defines
                the allowed HTTP method, expiration date, full path to the object, and the
                secret key for the temporary URL.</paragraph>
            <paragraph><strong>temp_url_expires</strong>: Required. An expiration date as a UNIX Epoch timestamp
                or ISO 8601 UTC timestamp. For example, <literal>1390852007</literal> or
                <literal>2014-01-27T19:46:47Z</literal> can be used to represent
                <literal>Mon, 27 Jan 2014 19:46:47 GMT</literal>.</paragraph>
            <paragraph>For more information, see <reference name="Epoch &amp; Unix Timestamp Conversion Tools" refuri="http://www.epochconverter.com/">Epoch &amp; Unix Timestamp Conversion
                    Tools</reference>.</paragraph>
            <paragraph><strong>filename</strong>: Optional. Overrides the default file name. Object Storage
                generates a default file name for <strong>GET</strong> temporary URLs that is based on the
                object name. Object Storage returns this value in the <literal>Content-Disposition</literal>
                response header. Browsers can interpret this file name value as a file
                attachment to be saved.</paragraph>
            <paragraph>A prefix-based temporary URL is similar but requires the parameter
                <literal>temp_url_prefix</literal>, which must be equal to the common prefix shared
                by all object names for which the URL is valid.</paragraph>
            <literal_block classes="code" xml:space="preserve">https://swift-cluster.example.com/v1/my_account/container/my_prefix/object
?temp_url_sig=da39a3ee5e6b4b0d3255bfef95601890afd80709
&amp;temp_url_expires=2011-12-10T01:11:25Z
&amp;temp_url_prefix=my_prefix</literal_block>
            <target refid="secret-keys"></target>
        </section>
        <section ids="secret-keys id1" names="secret\ keys secret_keys">
            <title>Secret Keys</title>
            <paragraph>The cryptographic signature used in Temporary URLs and also in
                <reference internal="True" refuri="form_post_middleware"><inline classes="doc">Form POST middleware</inline></reference> uses a secret key. Object Storage allows you to
                store two secret key values per account, and two per container. When validating
                a request, Object Storage checks signatures against all keys. Using two keys at
                each level enables key rotation without invalidating existing temporary URLs.</paragraph>
            <paragraph>To set the keys at the account level, set one or both of the following
                request headers to arbitrary values on a <strong>POST</strong> request to the account:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>X-Account-Meta-Temp-URL-Key</literal></paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>X-Account-Meta-Temp-URL-Key-2</literal></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>To set the keys at the container level, set one or both of the following
                request headers to arbitrary values on a <strong>POST</strong> or <strong>PUT</strong> request to the
                container:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>X-Container-Meta-Temp-URL-Key</literal></paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>X-Container-Meta-Temp-URL-Key-2</literal></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>The arbitrary values serve as the secret keys.</paragraph>
            <paragraph>For example, use the <strong>swift post</strong> command to set the secret key to
                <emphasis>``MYKEY``</emphasis>:</paragraph>
            <literal_block classes="code" xml:space="preserve">$ swift post -m "Temp-URL-Key:MYKEY"</literal_block>
        </section>
        <section dupnames="note" ids="id2">
            <title>Note</title>
            <paragraph>Changing these headers invalidates any previously generated temporary
                URLs within 60 seconds, which is the memcache time for the key.</paragraph>
        </section>
        <section ids="hmac-sha1-signature-for-temporary-urls" names="hmac-sha1\ signature\ for\ temporary\ urls">
            <title>HMAC-SHA1 signature for temporary URLs</title>
            <paragraph>Temporary URL middleware uses an HMAC-SHA1 cryptographic signature. This
                signature includes these elements:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>The allowed method. Typically, <strong>GET</strong> or <strong>PUT</strong>.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Expiry time. In the example for the HMAC-SHA1 signature for temporary
                        URLs below, the expiry time is set to <literal>86400</literal> seconds (or 1 day)
                        into the future. Please be aware that you have to use a UNIX timestamp
                        for generating the signature (in the API request it is also allowed to
                        use an ISO 8601 UTC timestamp).</paragraph>
                </list_item>
                <list_item>
                    <paragraph>The path. Starting with <literal>/v1/</literal> onwards and including a container
                        name and object. The path for prefix-based signatures must start with
                        <literal>prefix:/v1/</literal>. Do not URL-encode the path at this stage.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>The secret key. Use one of the key values as described
                        in <reference internal="True" refid="secret-keys"><inline classes="std std-ref">Secret Keys</inline></reference>.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>These sample Python codes show how to compute a signature for use with
                temporary URLs:</paragraph>
            <paragraph><strong>Example HMAC-SHA1 signature for object-based temporary URLs</strong></paragraph>
            <literal_block classes="code" xml:space="preserve">import hmac
from hashlib import sha1
from time import time
method = 'GET'
duration_in_seconds = 60*60*24
expires = int(time() + duration_in_seconds)
path = '/v1/my_account/container/object'
key = 'MYKEY'
hmac_body = '%s\n%s\n%s' % (method, expires, path)
signature = hmac.new(key, hmac_body, sha1).hexdigest()</literal_block>
            <paragraph><strong>Example HMAC-SHA1 signature for prefix-based temporary URLs</strong></paragraph>
            <literal_block classes="code" xml:space="preserve">import hmac
from hashlib import sha1
from time import time
method = 'GET'
duration_in_seconds = 60*60*24
expires = int(time() + duration_in_seconds)
path = 'prefix:/v1/my_account/container/my_prefix'
key = 'MYKEY'
hmac_body = '%s\n%s\n%s' % (method, expires, path)
signature = hmac.new(key, hmac_body, sha1).hexdigest()</literal_block>
            <paragraph>Do not URL-encode the path when you generate the HMAC-SHA1 signature.
                However, when you make the actual HTTP request, you should properly
                URL-encode the URL.</paragraph>
            <paragraph>The <emphasis>``MYKEY``</emphasis> value is one of the key values as described
                in <reference internal="True" refid="secret-keys"><inline classes="std std-ref">Secret Keys</inline></reference>.</paragraph>
            <paragraph>For more information, see <reference name="RFC 2104: HMAC: Keyed-Hashing for Message Authentication" refuri="http://www.ietf.org/rfc/rfc2104.txt">RFC 2104: HMAC: Keyed-Hashing for Message
                    Authentication</reference>.</paragraph>
            <paragraph>If you want to transform a UNIX timestamp into an ISO 8601 UTC timestamp,
                you can use following code snippet:</paragraph>
            <literal_block classes="code" xml:space="preserve">import time
time.strftime('%Y-%m-%dT%H:%M:%SZ', time.gmtime(timestamp))</literal_block>
        </section>
        <section ids="using-the-swift-tool-to-generate-a-temporary-url" names="using\ the\ swift\ tool\ to\ generate\ a\ temporary\ url">
            <title>Using the <literal>swift</literal> tool to generate a Temporary URL</title>
            <paragraph>The <literal>swift</literal> tool provides the  <reference name="tempurl" refuri="http://docs.openstack.org/developer/python-swiftclient/cli.html#tempurl">tempurl</reference> option that
                auto-generates the <emphasis>``temp_url_sig``</emphasis> and <emphasis>``temp_url_expires``</emphasis> query
                parameters. For example, you might run this command:</paragraph>
            <literal_block classes="code" xml:space="preserve">$ swift tempurl GET 3600 /v1/my_account/container/object MYKEY</literal_block>
            <paragraph>This command returns the path:</paragraph>
            <literal_block classes="code" xml:space="preserve">/v1/my_account/container/object
?temp_url_sig=5c4cc8886f36a9d0919d708ade98bf0cc71c9e91
&amp;temp_url_expires=1374497657</literal_block>
            <paragraph>To create the temporary URL, prefix this path with the Object Storage
                storage host name. For example, prefix the path with
                <literal>https://swift-cluster.example.com</literal>, as follows:</paragraph>
            <literal_block classes="code" xml:space="preserve">https://swift-cluster.example.com/v1/my_account/container/object
?temp_url_sig=5c4cc8886f36a9d0919d708ade98bf0cc71c9e91
&amp;temp_url_expires=1374497657</literal_block>
            <paragraph>Note that if the above example is copied exactly, and used in a command
                shell, then the ampersand is interpreted as an operator and the URL
                will be truncated. Enclose the URL in quotation marks to avoid this.</paragraph>
            <target ids="tempurl" names="tempurl" refuri="http://docs.openstack.org/developer/python-swiftclient/cli.html#tempurl"></target>
        </section>
    </section>
</document>
