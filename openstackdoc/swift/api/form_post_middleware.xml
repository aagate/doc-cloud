<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/swift/doc/source/api/form_post_middleware.rst">
    <section ids="form-post-middleware" names="form\ post\ middleware">
        <title>Form POST middleware</title>
        <paragraph>To discover whether your Object Storage system supports this feature,
            check with your service provider or send a <strong>GET</strong> request using the <literal classes="file" role="file">/info</literal>
            path.</paragraph>
        <paragraph>You can upload objects directly to the Object Storage system from a
            browser by using the form <strong>POST</strong> middleware. This middleware uses
            account or container secret keys to generate a cryptographic signature for the
            request. This means that you do not need to send an authentication token
            in the <literal>X-Auth-Token</literal> header to perform the request.</paragraph>
        <paragraph>The form <strong>POST</strong> middleware uses the same secret keys as the temporary
            URL middleware uses. For information about how to set these keys, see
            <reference internal="True" refuri="temporary_url_middleware#secret-keys"><inline classes="std std-ref">Secret Keys</inline></reference>.</paragraph>
        <paragraph>For information about the form <strong>POST</strong> middleware configuration
            options, see <reference internal="True" refuri="../middleware#formpost"><inline classes="std std-ref">FormPost</inline></reference> in the <emphasis>Source Documentation</emphasis>.</paragraph>
        <section ids="form-post-format" names="form\ post\ format">
            <title>Form POST format</title>
            <paragraph>To upload objects to a cluster, you can use an HTML form <strong>POST</strong>
                request.</paragraph>
            <paragraph>The format of the form <strong>POST</strong> request is:</paragraph>
            <paragraph><strong>Example 1.14. Form POST format</strong></paragraph>
            <literal_block classes="code" xml:space="preserve">&lt;![CDATA[
&lt;form action="SWIFT_URL"
    method="POST"
    enctype="multipart/form-data"&gt;
    &lt;input type="hidden" name="redirect" value="REDIRECT_URL"/&gt;
    &lt;input type="hidden" name="max_file_size" value="BYTES"/&gt;
    &lt;input type="hidden" name="max_file_count" value="COUNT"/&gt;
    &lt;input type="hidden" name="expires" value="UNIX_TIMESTAMP"/&gt;
    &lt;input type="hidden" name="signature" value="HMAC"/&gt;
    &lt;input type="file" name="FILE_NAME"/&gt;
    &lt;br/&gt;
    &lt;input type="submit"/&gt;
&lt;/form&gt;
]]&gt;</literal_block>
            <paragraph><strong>action=”SWIFT_URL”</strong></paragraph>
            <paragraph>Set to full URL where the objects are to be uploaded. The names of
                uploaded files are appended to the specified <emphasis>SWIFT_URL</emphasis>. So, you
                can upload directly to the root of a container with a URL like:</paragraph>
            <literal_block classes="code" xml:space="preserve">https://swift-cluster.example.com/v1/my_account/container/</literal_block>
            <paragraph>Optionally, you can include an object prefix to separate uploads, such
                as:</paragraph>
            <literal_block classes="code" xml:space="preserve">https://swift-cluster.example.com/v1/my_account/container/OBJECT_PREFIX</literal_block>
            <paragraph><strong>method=”POST”</strong></paragraph>
            <paragraph>Must be <literal>POST</literal>.</paragraph>
            <paragraph><strong>enctype=”multipart/form-data”</strong></paragraph>
            <paragraph>Must be <literal>multipart/form-data</literal>.</paragraph>
            <paragraph><strong>name=”redirect” value=”REDIRECT_URL”</strong></paragraph>
            <paragraph>Redirects the browser to the <emphasis>REDIRECT_URL</emphasis> after the upload
                completes. The URL has status and message query parameters added to it,
                which specify the HTTP status code for the upload and an optional error
                message. The 2<emphasis>nn</emphasis> status code indicates success.</paragraph>
            <paragraph>The <emphasis>REDIRECT_URL</emphasis> can be an empty string. If so, the <literal>Location</literal>
                response header is not set.</paragraph>
            <paragraph><strong>name=”max_file_size” value=”BYTES”</strong></paragraph>
            <paragraph>Required. Indicates the size, in bytes, of the maximum single file
                upload.</paragraph>
            <paragraph><strong>name=”max_file_count” value= “COUNT”</strong></paragraph>
            <paragraph>Required. Indicates the maximum number of files that can be uploaded
                with the form.</paragraph>
            <paragraph><strong>name=”expires” value=”UNIX_TIMESTAMP”</strong></paragraph>
            <paragraph>The UNIX timestamp that specifies the time before which the form must be
                submitted before it becomes no longer valid.</paragraph>
            <paragraph><strong>name=”signature” value=”HMAC”</strong></paragraph>
            <paragraph>The HMAC-SHA1 signature of the form.</paragraph>
            <paragraph><strong>type=”file” name=”FILE_NAME”</strong></paragraph>
            <paragraph>File name of the file to be uploaded. You can include from one to the
                <literal>max_file_count</literal> value of files.</paragraph>
            <paragraph>The file attributes must appear after the other attributes to be
                processed correctly.</paragraph>
            <paragraph>If attributes appear after the file attributes, they are not sent with
                the sub-request because all attributes in the file cannot be parsed on
                the server side unless the whole file is read into memory; the server
                does not have enough memory to service these requests. Attributes that
                follow the file attributes are ignored.</paragraph>
            <paragraph>Optionally, if you want the uploaded files to be temporary you can set x-delete-at or x-delete-after attributes by adding one of these as a form input:</paragraph>
            <literal_block classes="code" xml:space="preserve">&lt;input type="hidden" name="x_delete_at" value="&lt;unix-timestamp&gt;" /&gt;
&lt;input type="hidden" name="x_delete_after" value="&lt;seconds&gt;" /&gt;</literal_block>
            <paragraph><strong>type= “submit”</strong></paragraph>
            <paragraph>Must be <literal>submit</literal>.</paragraph>
        </section>
        <section ids="hmac-sha1-signature-for-form-post" names="hmac-sha1\ signature\ for\ form\ post">
            <title>HMAC-SHA1 signature for form POST</title>
            <paragraph>Form <strong>POST</strong> middleware uses an HMAC-SHA1 cryptographic signature. This
                signature includes these elements from the form:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>The path. Starting with <literal>/v1/</literal> onwards and including a container
                        name and, optionally, an object prefix. In <title_reference>Example 1.15</title_reference>, “HMAC-SHA1
                        signature for form
                        POST” the path is
                        <literal>/v1/my_account/container/object_prefix</literal>. Do not URL-encode the
                        path at this stage.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>A redirect URL. If there is no redirect URL, use the empty string.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Maximum file size. In <title_reference>Example 1.15</title_reference>, “HMAC-SHA1 signature for form
                        POST” the
                        <literal>max_file_size</literal> is <literal>104857600</literal> bytes.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>The maximum number of objects to upload. In <title_reference>Example 1.15</title_reference>, “HMAC-SHA1
                        signature for form
                        POST” <literal>max_file_count</literal> is <literal>10</literal>.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Expiry time. In <title_reference>Example 1.15, “HMAC-SHA1 signature for form
                            POST” the expiry time
                            is set to ``600`</title_reference> seconds into the future.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>The secret key. Set as the <literal>X-Account-Meta-Temp-URL-Key</literal> header
                        value for accounts or <literal>X-Container-Meta-Temp-URL-Key</literal> header
                        value for containers.  See <reference internal="True" refuri="temporary_url_middleware#secret-keys"><inline classes="std std-ref">Secret Keys</inline></reference> for more information.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>The following example code generates a signature for use with form
                <strong>POST</strong>:</paragraph>
            <paragraph><strong>Example 1.15. HMAC-SHA1 signature for form POST</strong></paragraph>
            <literal_block classes="code" xml:space="preserve">import hmac
from hashlib import sha1
from time import time
path = '/v1/my_account/container/object_prefix'
redirect = 'https://myserver.com/some-page'
max_file_size = 104857600
max_file_count = 10
expires = int(time() + 600)
key = 'MYKEY'
hmac_body = '%s\n%s\n%s\n%s\n%s' % (path, redirect,
max_file_size, max_file_count, expires)
signature = hmac.new(key, hmac_body, sha1).hexdigest()</literal_block>
            <paragraph>For more information, see <reference name="RFC 2104: HMAC: Keyed-Hashing for Message Authentication" refuri="http://www.ietf.org/rfc/rfc2104.txt">RFC 2104: HMAC: Keyed-Hashing for Message
                    Authentication</reference>.</paragraph>
        </section>
        <section ids="form-post-example" names="form\ post\ example">
            <title>Form POST example</title>
            <paragraph>The following example shows how to submit a form by using a cURL
                command. In this example, the object prefix is <literal>photos/</literal> and the file
                being uploaded is called <literal>flower.jpg</literal>.</paragraph>
            <paragraph>This example uses the <strong>swift-form-signature</strong> script to compute the
                <literal>expires</literal> and <literal>signature</literal> values.</paragraph>
            <literal_block classes="code" xml:space="preserve">$ bin/swift-form-signature /v1/my_account/container/photos/ https://example.com/done.html 5373952000 1 200 MYKEY
Expires: 1390825338
Signature: 35129416ebda2f1a21b3c2b8939850dfc63d8f43</literal_block>
            <literal_block classes="code" xml:space="preserve">$ curl -i https://swift-cluster.example.com/v1/my_account/container/photos/ -X POST \
       -F max_file_size=5373952000 -F max_file_count=1 -F expires=1390825338 \
       -F signature=35129416ebda2f1a21b3c2b8939850dfc63d8f43 \
       -F redirect=https://example.com/done.html \
       -F file=@flower.jpg</literal_block>
        </section>
    </section>
</document>
