<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/swift/doc/source/admin_guide.rst">
    <section ids="administrator-s-guide" names="administrator's\ guide">
        <title>Administrator’s Guide</title>
        <section ids="defining-storage-policies" names="defining\ storage\ policies">
            <title>Defining Storage Policies</title>
            <paragraph>Defining your Storage Policies is very easy to do with Swift.  It is important
                that the administrator understand the concepts behind Storage Policies
                before actually creating and using them in order to get the most benefit out
                of the feature and, more importantly, to avoid having to make unnecessary changes
                once a set of policies have been deployed to a cluster.</paragraph>
            <paragraph>It is highly recommended that the reader fully read and comprehend
                <reference internal="True" refuri="overview_policies"><inline classes="doc">Storage Policies</inline></reference> before proceeding with administration of
                policies.  Plan carefully and it is suggested that experimentation be
                done first on a non-production cluster to be certain that the desired
                configuration meets the needs of the users.  See <reference internal="True" refuri="overview_policies#upgrade-policy"><inline classes="std std-ref">Upgrading and Confirming Functionality</inline></reference>
                before planning the upgrade of your existing deployment.</paragraph>
            <paragraph>Following is a high level view of the very few steps it takes to configure
                policies once you have decided what you want to do:</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>Define your policies in <literal>/etc/swift/swift.conf</literal></paragraph>
                </list_item>
                <list_item>
                    <paragraph>Create the corresponding object rings</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Communicate the names of the Storage Policies to cluster users</paragraph>
                </list_item>
            </enumerated_list>
            <paragraph>For a specific example that takes you through these steps, please see
                <reference internal="True" refuri="policies_saio"><inline classes="doc">Adding Storage Policies to an Existing SAIO</inline></reference></paragraph>
        </section>
        <section ids="managing-the-rings" names="managing\ the\ rings">
            <title>Managing the Rings</title>
            <paragraph>You may build the storage rings on any server with the appropriate
                version of Swift installed.  Once built or changed (rebalanced), you
                must distribute the rings to all the servers in the cluster.  Storage
                rings contain information about all the Swift storage partitions and
                how they are distributed between the different nodes and disks.</paragraph>
            <paragraph>Swift 1.6.0 is the last version to use a Python pickle format.
                Subsequent versions use a different serialization format.  <strong>Rings
                    generated by Swift versions 1.6.0 and earlier may be read by any
                    version, but rings generated after 1.6.0 may only be read by Swift
                    versions greater than 1.6.0.</strong>  So when upgrading from version 1.6.0 or
                earlier to a version greater than 1.6.0, either upgrade Swift on your
                ring building server <strong>last</strong> after all Swift nodes have been successfully
                upgraded, or refrain from generating rings until all Swift nodes have
                been successfully upgraded.</paragraph>
            <paragraph>If you need to downgrade from a version of Swift greater than 1.6.0 to
                a version less than or equal to 1.6.0, first downgrade your ring-building
                server, generate new rings, push them out, then continue with the rest
                of the downgrade.</paragraph>
            <paragraph>For more information see <reference internal="True" refuri="overview_ring"><inline classes="doc">The Rings</inline></reference>.</paragraph>
            <highlightlang lang="none" linenothreshold="9223372036854775807">
            </highlightlang>
            <paragraph>Removing a device from the ring:</paragraph>
            <literal_block xml:space="preserve">swift-ring-builder &lt;builder-file&gt; remove &lt;ip_address&gt;/&lt;device_name&gt;</literal_block>
            <paragraph>Removing a server from the ring:</paragraph>
            <literal_block xml:space="preserve">swift-ring-builder &lt;builder-file&gt; remove &lt;ip_address&gt;</literal_block>
            <paragraph>Adding devices to the ring:</paragraph>
            <paragraph>See <reference internal="True" refuri="deployment_guide#ring-preparing"><inline classes="std std-ref">Preparing the Ring</inline></reference></paragraph>
            <paragraph>See what devices for a server are in the ring:</paragraph>
            <literal_block xml:space="preserve">swift-ring-builder &lt;builder-file&gt; search &lt;ip_address&gt;</literal_block>
            <paragraph>Once you are done with all changes to the ring, the changes need to be
                “committed”:</paragraph>
            <literal_block xml:space="preserve">swift-ring-builder &lt;builder-file&gt; rebalance</literal_block>
            <paragraph>Once the new rings are built, they should be pushed out to all the servers
                in the cluster.</paragraph>
            <paragraph>Optionally, if invoked as ‘swift-ring-builder-safe’ the directory containing
                the specified builder file will be locked (via a .lock file in the parent
                directory). This provides a basic safe guard against multiple instances
                of the swift-ring-builder (or other utilities that observe this lock) from
                attempting to write to or read the builder/ring files while operations are in
                progress. This can be useful in environments where ring management has been
                automated but the operator still needs to interact with the rings manually.</paragraph>
            <paragraph>If the ring builder is not producing the balances that you are
                expecting, you can gain visibility into what it’s doing with the
                <literal>--debug</literal> flag.:</paragraph>
            <literal_block xml:space="preserve">swift-ring-builder &lt;builder-file&gt; rebalance --debug</literal_block>
            <paragraph>This produces a great deal of output that is mostly useful if you are
                either (a) attempting to fix the ring builder, or (b) filing a bug
                against the ring builder.</paragraph>
            <paragraph>You may notice in the rebalance output a ‘dispersion’ number. What this
                number means is explained in <reference internal="True" refuri="overview_ring#ring-dispersion"><inline classes="std std-ref">Dispersion</inline></reference> but in essence
                is the percentage of partitions in the ring that have too many replicas
                within a particular failure domain. You can ask ‘swift-ring-builder’ what
                the dispersion is with:</paragraph>
            <literal_block xml:space="preserve">swift-ring-builder &lt;builder-file&gt; dispersion</literal_block>
            <paragraph>This will give you the percentage again, if you want a detailed view of
                the dispersion simply add a <literal>--verbose</literal>:</paragraph>
            <literal_block xml:space="preserve">swift-ring-builder &lt;builder-file&gt; dispersion --verbose</literal_block>
            <paragraph>This will not only display the percentage but will also display a dispersion
                table that lists partition dispersion by tier. You can use this table to figure
                out were you need to add capacity or to help tune an <reference internal="True" refuri="overview_ring#ring-overload"><inline classes="std std-ref">Overload</inline></reference> value.</paragraph>
            <paragraph>Now let’s take an example with 1 region, 3 zones and 4 devices. Each device has
                the same weight, and the <literal>dispersion --verbose</literal> might show the following:</paragraph>
            <literal_block xml:space="preserve">Dispersion is 50.000000, Balance is 0.000000, Overload is 0.00%
Required overload is 33.333333%
Worst tier is 50.000000 (r1z3)
--------------------------------------------------------------------------
Tier                           Parts      %    Max     0     1     2     3
--------------------------------------------------------------------------
r1                               256   0.00      3     0     0     0   256
r1z1                             192   0.00      1    64   192     0     0
r1z1-127.0.0.1                   192   0.00      1    64   192     0     0
r1z1-127.0.0.1/sda               192   0.00      1    64   192     0     0
r1z2                             192   0.00      1    64   192     0     0
r1z2-127.0.0.2                   192   0.00      1    64   192     0     0
r1z2-127.0.0.2/sda               192   0.00      1    64   192     0     0
r1z3                             256  50.00      1     0   128   128     0
r1z3-127.0.0.3                   256  50.00      1     0   128   128     0
r1z3-127.0.0.3/sda               192   0.00      1    64   192     0     0
r1z3-127.0.0.3/sdb               192   0.00      1    64   192     0     0</literal_block>
            <paragraph>The first line reports that there are 256 partitions with 3 copies in region 1;
                and this is an expected output in this case (single region with 3 replicas) as
                reported by the “Max” value.</paragraph>
            <paragraph>However, there is some imbalance in the cluster, more precisely in zone 3. The
                “Max” reports a maximum of 1 copy in this zone; however 50.00% of the partitions
                are storing 2 replicas in this zone (which is somewhat expected, because there
                are more disks in this zone).</paragraph>
            <paragraph>You can now either add more capacity to the other zones, decrease the total
                weight in zone 3 or set the overload to a value <title_reference>greater than</title_reference> 33.333333% -
                only as much overload as needed will be used.</paragraph>
        </section>
        <section ids="scripting-ring-creation" names="scripting\ ring\ creation">
            <title>Scripting Ring Creation</title>
            <paragraph>You can create scripts to create the account and container rings and rebalance. Here’s an example script for the Account ring. Use similar commands to create a make-container-ring.sh script on the proxy server node.</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>Create a script file called make-account-ring.sh on the proxy
                        server node with the following content:</paragraph>
                    <literal_block xml:space="preserve">#!/bin/bash
cd /etc/swift
rm -f account.builder account.ring.gz backups/account.builder backups/account.ring.gz
swift-ring-builder account.builder create 18 3 1
swift-ring-builder account.builder add r1z1-&lt;account-server-1&gt;:6202/sdb1 1
swift-ring-builder account.builder add r1z2-&lt;account-server-2&gt;:6202/sdb1 1
swift-ring-builder account.builder rebalance</literal_block>
                    <paragraph>You need to replace the values of &lt;account-server-1&gt;,
                        &lt;account-server-2&gt;, etc. with the IP addresses of the account
                        servers used in your setup. You can have as many account servers as
                        you need. All account servers are assumed to be listening on port
                        6202, and have a storage device called “sdb1” (this is a directory
                        name created under /drives when we setup the account server). The
                        “z1”, “z2”, etc. designate zones, and you can choose whether you
                        put devices in the same or different zones. The “r1” designates
                        the region, with different regions specified as “r1”, “r2”, etc.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Make the script file executable and run it to create the account ring file:</paragraph>
                    <literal_block xml:space="preserve">chmod +x make-account-ring.sh
sudo ./make-account-ring.sh</literal_block>
                </list_item>
                <list_item>
                    <paragraph>Copy the resulting ring file /etc/swift/account.ring.gz to all the
                        account server nodes in your Swift environment, and put them in the
                        /etc/swift directory on these nodes. Make sure that every time you
                        change the account ring configuration, you copy the resulting ring
                        file to all the account nodes.</paragraph>
                </list_item>
            </enumerated_list>
        </section>
        <section ids="handling-system-updates" names="handling\ system\ updates">
            <title>Handling System Updates</title>
            <paragraph>It is recommended that system updates and reboots are done a zone at a time.
                This allows the update to happen, and for the Swift cluster to stay available
                and responsive to requests.  It is also advisable when updating a zone, let
                it run for a while before updating the other zones to make sure the update
                doesn’t have any adverse effects.</paragraph>
        </section>
        <section ids="handling-drive-failure" names="handling\ drive\ failure">
            <title>Handling Drive Failure</title>
            <paragraph>In the event that a drive has failed, the first step is to make sure the drive
                is unmounted.  This will make it easier for Swift to work around the failure
                until it has been resolved.  If the drive is going to be replaced immediately,
                then it is just best to replace the drive, format it, remount it, and let
                replication fill it up.</paragraph>
            <paragraph>After the drive is unmounted, make sure the mount point is owned by root
                (root:root 755). This ensures that rsync will not try to replicate into the
                root drive once the failed drive is unmounted.</paragraph>
            <paragraph>If the drive can’t be replaced immediately, then it is best to leave it
                unmounted, and set the device weight to 0. This will allow all the
                replicas that were on that drive to be replicated elsewhere until the drive
                is replaced. Once the drive is replaced, the device weight can be increased
                again. Setting the device weight to 0 instead of removing the drive from the
                ring gives Swift the chance to replicate data from the failing disk too (in case
                it is still possible to read some of the data).</paragraph>
            <paragraph>Setting the device weight to 0 (or removing a failed drive from the ring) has
                another benefit: all partitions that were stored on the failed drive are
                distributed over the remaining disks in the cluster, and each disk only needs to
                store a few new partitions. This is much faster compared to replicating all
                partitions to a single, new disk. It decreases the time to recover from a
                degraded number of replicas significantly, and becomes more and more important
                with bigger disks.</paragraph>
        </section>
        <section ids="handling-server-failure" names="handling\ server\ failure">
            <title>Handling Server Failure</title>
            <paragraph>If a server is having hardware issues, it is a good idea to make sure the
                Swift services are not running.  This will allow Swift to work around the
                failure while you troubleshoot.</paragraph>
            <paragraph>If the server just needs a reboot, or a small amount of work that should
                only last a couple of hours, then it is probably best to let Swift work
                around the failure and get the machine fixed and back online.  When the
                machine comes back online, replication will make sure that anything that is
                missing during the downtime will get updated.</paragraph>
            <paragraph>If the server has more serious issues, then it is probably best to remove
                all of the server’s devices from the ring.  Once the server has been repaired
                and is back online, the server’s devices can be added back into the ring.
                It is important that the devices are reformatted before putting them back
                into the ring as it is likely to be responsible for a different set of
                partitions than before.</paragraph>
        </section>
        <section ids="detecting-failed-drives" names="detecting\ failed\ drives">
            <title>Detecting Failed Drives</title>
            <paragraph>It has been our experience that when a drive is about to fail, error messages
                will spew into <title_reference>/var/log/kern.log</title_reference>.  There is a script called
                <title_reference>swift-drive-audit</title_reference> that can be run via cron to watch for bad drives.  If
                errors are detected, it will unmount the bad drive, so that Swift can
                work around it.  The script takes a configuration file with the following
                settings:</paragraph>
            <paragraph><literal>[drive-audit]</literal></paragraph>
            <table>
                <tgroup cols="3">
                    <colspec colwidth="18"></colspec>
                    <colspec colwidth="14"></colspec>
                    <colspec colwidth="43"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>Option</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Default</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Description</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>user</paragraph>
                            </entry>
                            <entry>
                                <paragraph>swift</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Drop privileges to this user for non-root
                                    tasks</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>log_facility</paragraph>
                            </entry>
                            <entry>
                                <paragraph>LOG_LOCAL0</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Syslog log facility</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>log_level</paragraph>
                            </entry>
                            <entry>
                                <paragraph>INFO</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Log level</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>device_dir</paragraph>
                            </entry>
                            <entry>
                                <paragraph>/srv/node</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Directory devices are mounted under</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>minutes</paragraph>
                            </entry>
                            <entry>
                                <paragraph>60</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Number of minutes to look back in
                                    <title_reference>/var/log/kern.log</title_reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>error_limit</paragraph>
                            </entry>
                            <entry>
                                <paragraph>1</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Number of errors to find before a device
                                    is unmounted</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>log_file_pattern</paragraph>
                            </entry>
                            <entry>
                                <paragraph>/var/log/kern*</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Location of the log file with globbing
                                    pattern to check against device errors</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>regex_pattern_X</paragraph>
                            </entry>
                            <entry>
                                <paragraph>(see below)</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Regular expression patterns to be used to
                                    locate device blocks with errors in the
                                    log file</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>The default regex pattern used to locate device blocks with errors are
                <title_reference>berrorb.*b(sd[a-z]{1,2}d?)b</title_reference> and <title_reference>b(sd[a-z]{1,2}d?)b.*berrorb</title_reference>.
                One is able to overwrite the default above by providing new expressions
                using the format <title_reference>regex_pattern_X = regex_expression</title_reference>, where <title_reference>X</title_reference> is a number.</paragraph>
            <paragraph>This script has been tested on Ubuntu 10.04 and Ubuntu 12.04, so if you are
                using a different distro or OS, some care should be taken before using in production.</paragraph>
        </section>
        <section ids="preventing-disk-full-scenarios" names="preventing\ disk\ full\ scenarios">
            <title>Preventing Disk Full Scenarios</title>
            <highlightlang lang="cfg" linenothreshold="9223372036854775807">
            </highlightlang>
            <paragraph>Prevent disk full scenarios by ensuring that the <literal>proxy-server</literal> blocks PUT
                requests and rsync prevents replication to the specific drives.</paragraph>
            <paragraph>You can prevent <title_reference>proxy-server</title_reference> PUT requests to low space disks by ensuring
                <literal>fallocate_reserve</literal> is set in the <literal>object-server.conf</literal>. By default,
                <literal>fallocate_reserve</literal> is set to 1%. This blocks PUT requests that leave the
                free disk space below 1% of the disk.</paragraph>
            <paragraph>In order to prevent rsync replication to specific drives, firstly
                setup <literal>rsync_module</literal> per disk in your <literal>object-replicator</literal>.
                Set this in <literal>object-server.conf</literal>:</paragraph>
            <literal_block classes="code" xml:space="preserve">[object-replicator]
rsync_module = {replication_ip}::object_{device}</literal_block>
            <paragraph>Set the individual drives in <literal>rsync.conf</literal>. For example:</paragraph>
            <literal_block classes="code" xml:space="preserve">[object_sda]
max connections = 4
lock file = /var/lock/object_sda.lock

[object_sdb]
max connections = 4
lock file = /var/lock/object_sdb.lock</literal_block>
            <paragraph>Finally, monitor the disk space of each disk and adjust the rsync
                <literal>max connections</literal> per drive to <literal>-1</literal>. We recommend utilising your existing
                monitoring solution to achieve this. The following is an example script:</paragraph>
            <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">#!/usr/bin/env python
import os
import errno

RESERVE = 500 * 2 ** 20  # 500 MiB

DEVICES = '/srv/node1'

path_template = '/etc/rsync.d/disable_%s.conf'
config_template = '''
[object_%s]
max connections = -1
'''

def disable_rsync(device):
    with open(path_template % device, 'w') as f:
        f.write(config_template.lstrip() % device)


def enable_rsync(device):
    try:
        os.unlink(path_template % device)
    except OSError as e:
        # ignore file does not exist
        if e.errno != errno.ENOENT:
            raise


for device in os.listdir(DEVICES):
    path = os.path.join(DEVICES, device)
    st = os.statvfs(path)
    free = st.f_bavail * st.f_frsize
    if free &lt; RESERVE:
        disable_rsync(device)
    else:
        enable_rsync(device)</literal_block>
            <paragraph>For the above script to work, ensure <literal>/etc/rsync.d/</literal> conf files are
                included, by specifying <literal>&amp;include</literal> in your <literal>rsync.conf</literal> file:</paragraph>
            <literal_block classes="code" xml:space="preserve">&amp;include /etc/rsync.d</literal_block>
            <paragraph>Use this in conjunction with a cron job to periodically run the script, for example:</paragraph>
            <highlightlang lang="none" linenothreshold="9223372036854775807">
            </highlightlang>
            <literal_block classes="code" xml:space="preserve"># /etc/cron.d/devicecheck
* * * * * root /some/path/to/disable_rsync.py</literal_block>
            <target refid="dispersion-report"></target>
        </section>
        <section ids="dispersion-report id1" names="dispersion\ report dispersion_report">
            <title>Dispersion Report</title>
            <paragraph>There is a swift-dispersion-report tool for measuring overall cluster health.
                This is accomplished by checking if a set of deliberately distributed
                containers and objects are currently in their proper places within the cluster.</paragraph>
            <paragraph>For instance, a common deployment has three replicas of each object. The health
                of that object can be measured by checking if each replica is in its proper
                place. If only 2 of the 3 is in place the object’s heath can be said to be at
                66.66%, where 100% would be perfect.</paragraph>
            <paragraph>A single object’s health, especially an older object, usually reflects the
                health of that entire partition the object is in. If we make enough objects on
                a distinct percentage of the partitions in the cluster, we can get a pretty
                valid estimate of the overall cluster health. In practice, about 1% partition
                coverage seems to balance well between accuracy and the amount of time it takes
                to gather results.</paragraph>
            <paragraph>The first thing that needs to be done to provide this health value is create a
                new account solely for this usage. Next, we need to place the containers and
                objects throughout the system so that they are on distinct partitions. The
                swift-dispersion-populate tool does this by making up random container and
                object names until they fall on distinct partitions. Last, and repeatedly for
                the life of the cluster, we need to run the swift-dispersion-report tool to
                check the health of each of these containers and objects.</paragraph>
            <highlightlang lang="cfg" linenothreshold="9223372036854775807">
            </highlightlang>
            <paragraph>These tools need direct access to the entire cluster and to the ring files
                (installing them on a proxy server will probably do). Both
                swift-dispersion-populate and swift-dispersion-report use the same
                configuration file, /etc/swift/dispersion.conf. Example conf file:</paragraph>
            <literal_block xml:space="preserve">[dispersion]
auth_url = http://localhost:8080/auth/v1.0
auth_user = test:tester
auth_key = testing
endpoint_type = internalURL</literal_block>
            <highlightlang lang="none" linenothreshold="9223372036854775807">
            </highlightlang>
            <paragraph>There are also options for the conf file for specifying the dispersion coverage
                (defaults to 1%), retries, concurrency, etc. though usually the defaults are
                fine. If you want to use keystone v3 for authentication there are options like
                auth_version, user_domain_name, project_domain_name and project_name.</paragraph>
            <paragraph>Once the configuration is in place, run <title_reference>swift-dispersion-populate</title_reference> to populate
                the containers and objects throughout the cluster.</paragraph>
            <paragraph>Now that those containers and objects are in place, you can run
                <title_reference>swift-dispersion-report</title_reference> to get a dispersion report, or the overall health of
                the cluster. Here is an example of a cluster in perfect health:</paragraph>
            <literal_block xml:space="preserve">$ swift-dispersion-report
Queried 2621 containers for dispersion reporting, 19s, 0 retries
100.00% of container copies found (7863 of 7863)
Sample represents 1.00% of the container partition space

Queried 2619 objects for dispersion reporting, 7s, 0 retries
100.00% of object copies found (7857 of 7857)
Sample represents 1.00% of the object partition space</literal_block>
            <paragraph>Now I’ll deliberately double the weight of a device in the object ring (with
                replication turned off) and rerun the dispersion report to show what impact
                that has:</paragraph>
            <literal_block xml:space="preserve">$ swift-ring-builder object.builder set_weight d0 200
$ swift-ring-builder object.builder rebalance
...
$ swift-dispersion-report
Queried 2621 containers for dispersion reporting, 8s, 0 retries
100.00% of container copies found (7863 of 7863)
Sample represents 1.00% of the container partition space

Queried 2619 objects for dispersion reporting, 7s, 0 retries
There were 1763 partitions missing one copy.
77.56% of object copies found (6094 of 7857)
Sample represents 1.00% of the object partition space</literal_block>
            <paragraph>You can see the health of the objects in the cluster has gone down
                significantly. Of course, I only have four devices in this test environment, in
                a production environment with many many devices the impact of one device change
                is much less. Next, I’ll run the replicators to get everything put back into
                place and then rerun the dispersion report:</paragraph>
            <literal_block xml:space="preserve">... start object replicators and monitor logs until they're caught up ...
$ swift-dispersion-report
Queried 2621 containers for dispersion reporting, 17s, 0 retries
100.00% of container copies found (7863 of 7863)
Sample represents 1.00% of the container partition space

Queried 2619 objects for dispersion reporting, 7s, 0 retries
100.00% of object copies found (7857 of 7857)
Sample represents 1.00% of the object partition space</literal_block>
            <paragraph>You can also run the report for only containers or objects:</paragraph>
            <literal_block xml:space="preserve">$ swift-dispersion-report --container-only
Queried 2621 containers for dispersion reporting, 17s, 0 retries
100.00% of container copies found (7863 of 7863)
Sample represents 1.00% of the container partition space

$ swift-dispersion-report --object-only
Queried 2619 objects for dispersion reporting, 7s, 0 retries
100.00% of object copies found (7857 of 7857)
Sample represents 1.00% of the object partition space</literal_block>
            <paragraph>Alternatively, the dispersion report can also be output in JSON format. This
                allows it to be more easily consumed by third party utilities:</paragraph>
            <literal_block xml:space="preserve">$ swift-dispersion-report -j
{"object": {"retries:": 0, "missing_two": 0, "copies_found": 7863, "missing_one": 0, "copies_expected": 7863, "pct_found": 100.0, "overlapping": 0, "missing_all": 0}, "container": {"retries:": 0, "missing_two": 0, "copies_found": 12534, "missing_one": 0, "copies_expected": 12534, "pct_found": 100.0, "overlapping": 15, "missing_all": 0}}</literal_block>
            <paragraph>Note that you may select which storage policy to use by setting the option
                ‘–policy-name silver’ or ‘-P silver’ (silver is the example policy name here).
                If no policy is specified, the default will be used per the swift.conf file.
                When you specify a policy the containers created also include the policy index,
                thus even when running a container_only report, you will need to specify the
                policy not using the default.</paragraph>
        </section>
        <section ids="geographically-distributed-swift-considerations" names="geographically\ distributed\ swift\ considerations">
            <title>Geographically Distributed Swift Considerations</title>
            <paragraph>Swift provides two features that may be used to distribute replicas of objects
                across multiple geographically distributed data-centers: with
                <reference internal="True" refuri="overview_global_cluster"><inline classes="doc">Global Clusters</inline></reference> object replicas may be dispersed across devices
                from different data-centers by using <title_reference>regions</title_reference> in ring device descriptors; with
                <reference internal="True" refuri="overview_container_sync"><inline classes="doc">Container to Container Synchronization</inline></reference> objects may be copied between independent Swift
                clusters in each data-center. The operation and configuration of each are
                described in their respective documentation. The following points should be
                considered when selecting the feature that is most appropriate for a particular
                use case:</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>Global Clusters allows the distribution of object replicas across
                        data-centers to be controlled by the cluster operator on per-policy basis,
                        since the distribution is determined by the assignment of devices from
                        each data-center in each policy’s ring file. With Container Sync the end
                        user controls the distribution of objects across clusters on a
                        per-container basis.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Global Clusters requires an operator to coordinate ring deployments across
                        multiple data-centers. Container Sync allows for independent management of
                        separate Swift clusters in each data-center, and for existing Swift
                        clusters to be used as peers in Container Sync relationships without
                        deploying new policies/rings.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Global Clusters seamlessly supports features that may rely on
                        cross-container operations such as large objects and versioned writes.
                        Container Sync requires the end user to ensure that all required
                        containers are sync’d for these features to work in all data-centers.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Global Clusters makes objects available for GET or HEAD requests in both
                        data-centers even if a replica of the object has not yet been
                        asynchronously migrated between data-centers, by forwarding requests
                        between data-centers. Container Sync is unable to serve requests for an
                        object in a particular data-center until the asynchronous sync process has
                        copied the object to that data-center.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Global Clusters may require less storage capacity than Container Sync to
                        achieve equivalent durability of objects in each data-center. Global
                        Clusters can restore replicas that are lost or corrupted in one
                        data-center using replicas from other data-centers. Container Sync
                        requires each data-center to independently manage the durability of
                        objects, which may result in each data-center storing more replicas than
                        with Global Clusters.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Global Clusters execute all account/container metadata updates
                        synchronously to account/container replicas in all data-centers, which may
                        incur delays when making updates across WANs. Container Sync only copies
                        objects between data-centers and all Swift internal traffic is
                        confined to each data-center.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Global Clusters does not yet guarantee the availability of objects stored
                        in Erasure Coded policies when one data-center is offline. With Container
                        Sync the availability of objects in each data-center is independent of the
                        state of other data-centers once objects have been synced. Container Sync
                        also allows objects to be stored using different policy types in different
                        data-centers.</paragraph>
                </list_item>
            </enumerated_list>
            <section ids="checking-handoff-partition-distribution" names="checking\ handoff\ partition\ distribution">
                <title>Checking handoff partition distribution</title>
                <paragraph>You can check if handoff partitions are piling up on a server by
                    comparing the expected number of partitions with the actual number on
                    your disks. First get the number of partitions that are currently
                    assigned to a server using the <literal>dispersion</literal> command from
                    <literal>swift-ring-builder</literal>:</paragraph>
                <literal_block xml:space="preserve">swift-ring-builder sample.builder dispersion --verbose
Dispersion is 0.000000, Balance is 0.000000, Overload is 0.00%
Required overload is 0.000000%
--------------------------------------------------------------------------
Tier                           Parts      %    Max     0     1     2     3
--------------------------------------------------------------------------
r1                              8192   0.00      2     0     0  8192     0
r1z1                            4096   0.00      1  4096  4096     0     0
r1z1-172.16.10.1                4096   0.00      1  4096  4096     0     0
r1z1-172.16.10.1/sda1           4096   0.00      1  4096  4096     0     0
r1z2                            4096   0.00      1  4096  4096     0     0
r1z2-172.16.10.2                4096   0.00      1  4096  4096     0     0
r1z2-172.16.10.2/sda1           4096   0.00      1  4096  4096     0     0
r1z3                            4096   0.00      1  4096  4096     0     0
r1z3-172.16.10.3                4096   0.00      1  4096  4096     0     0
r1z3-172.16.10.3/sda1           4096   0.00      1  4096  4096     0     0
r1z4                            4096   0.00      1  4096  4096     0     0
r1z4-172.16.20.4                4096   0.00      1  4096  4096     0     0
r1z4-172.16.20.4/sda1           4096   0.00      1  4096  4096     0     0
r2                              8192   0.00      2     0  8192     0     0
r2z1                            4096   0.00      1  4096  4096     0     0
r2z1-172.16.20.1                4096   0.00      1  4096  4096     0     0
r2z1-172.16.20.1/sda1           4096   0.00      1  4096  4096     0     0
r2z2                            4096   0.00      1  4096  4096     0     0
r2z2-172.16.20.2                4096   0.00      1  4096  4096     0     0
r2z2-172.16.20.2/sda1           4096   0.00      1  4096  4096     0     0</literal_block>
                <paragraph>As you can see from the output, each server should store 4096 partitions, and
                    each region should store 8192 partitions. This example used a partition power
                    of 13 and 3 replicas.</paragraph>
                <paragraph>With write_affinity enabled it is expected to have a higher number of
                    partitions on disk compared to the value reported by the
                    swift-ring-builder dispersion command. The number of additional (handoff)
                    partitions in region r1 depends on your cluster size, the amount
                    of incoming data as well as the replication speed.</paragraph>
                <paragraph>Let’s use the example from above with 6 nodes in 2 regions, and write_affinity
                    configured to write to region r1 first. <title_reference>swift-ring-builder</title_reference> reported that
                    each node should store 4096 partitions:</paragraph>
                <literal_block xml:space="preserve">Expected partitions for region r2:                                      8192
Handoffs stored across 4 nodes in region r1:                 8192 / 4 = 2048
Maximum number of partitions on each server in region r1: 2048 + 4096 = 6144</literal_block>
                <paragraph>Worst case is that handoff partitions in region 1 are populated with new
                    object replicas faster than replication is able to move them to region 2.
                    In that case you will see ~ 6144 partitions per
                    server in region r1. Your actual number should be lower and
                    between 4096 and 6144 partitions (preferably on the lower side).</paragraph>
                <paragraph>Now count the number of object partitions on a given server in region 1,
                    for example on 172.16.10.1.  Note that the pathnames might be
                    different; <title_reference>/srv/node/</title_reference> is the default mount location, and <title_reference>objects</title_reference>
                    applies only to storage policy 0 (storage policy 1 would use
                    <title_reference>objects-1</title_reference> and so on):</paragraph>
                <literal_block xml:space="preserve">find -L /srv/node/ -maxdepth 3 -type d -wholename "*objects/*" | wc -l</literal_block>
                <paragraph>If this number is always on the upper end of the expected partition
                    number range (4096 to 6144) or increasing you should check your
                    replication speed and maybe even disable write_affinity.
                    Please refer to the next section how to collect metrics from Swift, and
                    especially <reference internal="True" refid="recon-replication"><inline classes="std std-ref">swift-recon -r</inline></reference> how to check replication
                    stats.</paragraph>
                <target refid="cluster-telemetry-and-monitoring"></target>
            </section>
        </section>
        <section ids="cluster-telemetry-and-monitoring id2" names="cluster\ telemetry\ and\ monitoring cluster_telemetry_and_monitoring">
            <title>Cluster Telemetry and Monitoring</title>
            <paragraph>Various metrics and telemetry can be obtained from the account, container, and
                object servers using the recon server middleware and the swift-recon cli. To do
                so update your account, container, or object servers pipelines to include recon
                and add the associated filter config.</paragraph>
            <highlightlang lang="cfg" linenothreshold="9223372036854775807">
            </highlightlang>
            <paragraph>object-server.conf sample:</paragraph>
            <literal_block xml:space="preserve">[pipeline:main]
pipeline = recon object-server

[filter:recon]
use = egg:swift#recon
recon_cache_path = /var/cache/swift</literal_block>
            <paragraph>container-server.conf sample:</paragraph>
            <literal_block xml:space="preserve">[pipeline:main]
pipeline = recon container-server

[filter:recon]
use = egg:swift#recon
recon_cache_path = /var/cache/swift</literal_block>
            <paragraph>account-server.conf sample:</paragraph>
            <literal_block xml:space="preserve">[pipeline:main]
pipeline = recon account-server

[filter:recon]
use = egg:swift#recon
recon_cache_path = /var/cache/swift</literal_block>
            <highlightlang lang="none" linenothreshold="9223372036854775807">
            </highlightlang>
            <paragraph>The recon_cache_path simply sets the directory where stats for a few items will
                be stored. Depending on the method of deployment you may need to create this
                directory manually and ensure that Swift has read/write access.</paragraph>
            <paragraph>Finally, if you also wish to track asynchronous pending on your object
                servers you will need to setup a cronjob to run the swift-recon-cron script
                periodically on your object servers:</paragraph>
            <literal_block xml:space="preserve">*/5 * * * * swift /usr/bin/swift-recon-cron /etc/swift/object-server.conf</literal_block>
            <paragraph>Once the recon middleware is enabled, a GET request for
                “/recon/&lt;metric&gt;” to the backend object server will return a
                JSON-formatted response:</paragraph>
            <literal_block xml:space="preserve">fhines@ubuntu:~$ curl -i http://localhost:6030/recon/async
HTTP/1.1 200 OK
Content-Type: application/json
Content-Length: 20
Date: Tue, 18 Oct 2011 21:03:01 GMT

{"async_pending": 0}</literal_block>
            <paragraph>Note that the default port for the object server is 6200, except on a
                Swift All-In-One installation, which uses 6010, 6020, 6030, and 6040.</paragraph>
            <paragraph>The following metrics and telemetry are currently exposed:</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="88"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>Request URI</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Description</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>/recon/load</paragraph>
                            </entry>
                            <entry>
                                <paragraph>returns 1,5, and 15 minute load average</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>/recon/mem</paragraph>
                            </entry>
                            <entry>
                                <paragraph>returns /proc/meminfo</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>/recon/mounted</paragraph>
                            </entry>
                            <entry>
                                <paragraph>returns <emphasis>ALL</emphasis> currently mounted filesystems</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>/recon/unmounted</paragraph>
                            </entry>
                            <entry>
                                <paragraph>returns all unmounted drives if mount_check = True</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>/recon/diskusage</paragraph>
                            </entry>
                            <entry>
                                <paragraph>returns disk utilization for storage devices</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>/recon/driveaudit</paragraph>
                            </entry>
                            <entry>
                                <paragraph>returns # of drive audit errors</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>/recon/ringmd5</paragraph>
                            </entry>
                            <entry>
                                <paragraph>returns object/container/account ring md5sums</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>/recon/swiftconfmd5</paragraph>
                            </entry>
                            <entry>
                                <paragraph>returns swift.conf md5sum</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>/recon/quarantined</paragraph>
                            </entry>
                            <entry>
                                <paragraph>returns # of quarantined objects/accounts/containers</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>/recon/sockstat</paragraph>
                            </entry>
                            <entry>
                                <paragraph>returns consumable info from /proc/net/sockstat|6</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>/recon/devices</paragraph>
                            </entry>
                            <entry>
                                <paragraph>returns list of devices and devices dir i.e. /srv/node</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>/recon/async</paragraph>
                            </entry>
                            <entry>
                                <paragraph>returns count of async pending</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>/recon/replication</paragraph>
                            </entry>
                            <entry>
                                <paragraph>returns object replication info (for backward compatibility)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>/recon/replication/&lt;type&gt;</paragraph>
                            </entry>
                            <entry>
                                <paragraph>returns replication info for given type (account, container, object)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>/recon/auditor/&lt;type&gt;</paragraph>
                            </entry>
                            <entry>
                                <paragraph>returns auditor stats on last reported scan for given type (account, container, object)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>/recon/updater/&lt;type&gt;</paragraph>
                            </entry>
                            <entry>
                                <paragraph>returns last updater sweep times for given type (container, object)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>/recon/expirer/object</paragraph>
                            </entry>
                            <entry>
                                <paragraph>returns time elapsed and number of objects deleted during last object expirer sweep</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>/recon/version</paragraph>
                            </entry>
                            <entry>
                                <paragraph>returns Swift version</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>/recon/time</paragraph>
                            </entry>
                            <entry>
                                <paragraph>returns node time</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>Note that ‘object_replication_last’ and ‘object_replication_time’ in object
                replication info are considered to be transitional and will be removed in
                the subsequent releases. Use ‘replication_last’ and ‘replication_time’ instead.</paragraph>
            <paragraph>This information can also be queried via the swift-recon command line utility:</paragraph>
            <literal_block xml:space="preserve">fhines@ubuntu:~$ swift-recon -h
Usage:
        usage: swift-recon &lt;server_type&gt; [-v] [--suppress] [-a] [-r] [-u] [-d]
        [-l] [-T] [--md5] [--auditor] [--updater] [--expirer] [--sockstat]

        &lt;server_type&gt;   account|container|object
        Defaults to object server.

        ex: swift-recon container -l --auditor


Options:
  -h, --help            show this help message and exit
  -v, --verbose         Print verbose info
  --suppress            Suppress most connection related errors
  -a, --async           Get async stats
  -r, --replication     Get replication stats
  --auditor             Get auditor stats
  --updater             Get updater stats
  --expirer             Get expirer stats
  -u, --unmounted       Check cluster for unmounted devices
  -d, --diskusage       Get disk usage stats
  -l, --loadstats       Get cluster load average stats
  -q, --quarantined     Get cluster quarantine stats
  --md5                 Get md5sum of servers ring and compare to local copy
  --sockstat            Get cluster socket usage stats
  -T, --time            Check time synchronization
  --all                 Perform all checks. Equal to
                        -arudlqT --md5 --sockstat --auditor --updater
                        --expirer --driveaudit --validate-servers
  -z ZONE, --zone=ZONE  Only query servers in specified zone
  -t SECONDS, --timeout=SECONDS
                        Time to wait for a response from a server
  --swiftdir=SWIFTDIR   Default = /etc/swift</literal_block>
            <target refid="recon-replication"></target>
            <paragraph ids="recon-replication" names="recon-replication">For example, to obtain container replication info from all hosts in zone “3”:</paragraph>
            <literal_block xml:space="preserve">fhines@ubuntu:~$ swift-recon container -r --zone 3
===============================================================================
--&gt; Starting reconnaissance on 1 hosts
===============================================================================
[2012-04-02 02:45:48] Checking on replication
[failure] low: 0.000, high: 0.000, avg: 0.000, reported: 1
[success] low: 486.000, high: 486.000, avg: 486.000, reported: 1
[replication_time] low: 20.853, high: 20.853, avg: 20.853, reported: 1
[attempted] low: 243.000, high: 243.000, avg: 243.000, reported: 1</literal_block>
        </section>
        <section ids="reporting-metrics-to-statsd" names="reporting\ metrics\ to\ statsd">
            <title>Reporting Metrics to StatsD</title>
            <highlightlang lang="cfg" linenothreshold="9223372036854775807">
            </highlightlang>
            <paragraph>If you have a <reference name="StatsD" refuri="http://codeascraft.etsy.com/2011/02/15/measure-anything-measure-everything/">StatsD</reference> server running, Swift may be configured to send it
                real-time operational metrics.  To enable this, set the following
                configuration entries (see the sample configuration files):</paragraph>
            <literal_block xml:space="preserve">log_statsd_host = localhost
log_statsd_port = 8125
log_statsd_default_sample_rate = 1.0
log_statsd_sample_rate_factor = 1.0
log_statsd_metric_prefix =                [empty-string]</literal_block>
            <paragraph>If <title_reference>log_statsd_host</title_reference> is not set, this feature is disabled.  The default values
                for the other settings are given above.  The <title_reference>log_statsd_host</title_reference> can be a
                hostname, an IPv4 address, or an IPv6 address (not surrounded with brackets, as
                this is unnecessary since the port is specified separately).  If a hostname
                resolves to an IPv4 address, an IPv4 socket will be used to send StatsD UDP
                packets, even if the hostname would also resolve to an IPv6 address.</paragraph>
            <target ids="statsd" names="statsd" refuri="http://codeascraft.etsy.com/2011/02/15/measure-anything-measure-everything/"></target>
            <target ids="graphite" names="graphite" refuri="http://graphite.wikidot.com/"></target>
            <target ids="ganglia" names="ganglia" refuri="http://ganglia.sourceforge.net/"></target>
            <paragraph>The sample rate is a real number between 0 and 1 which defines the
                probability of sending a sample for any given event or timing measurement.
                This sample rate is sent with each sample to StatsD and used to
                multiply the value.  For example, with a sample rate of 0.5, StatsD will
                multiply that counter’s value by 2 when flushing the metric to an upstream
                monitoring system (<reference name="Graphite" refuri="http://graphite.wikidot.com/">Graphite</reference>, <reference name="Ganglia" refuri="http://ganglia.sourceforge.net/">Ganglia</reference>, etc.).</paragraph>
            <paragraph>Some relatively high-frequency metrics have a default sample rate less than
                one.  If you want to override the default sample rate for all metrics whose
                default sample rate is not specified in the Swift source, you may set
                <title_reference>log_statsd_default_sample_rate</title_reference> to a value less than one.  This is NOT
                recommended (see next paragraph).  A better way to reduce StatsD load is to
                adjust <title_reference>log_statsd_sample_rate_factor</title_reference> to a value less than one.  The
                <title_reference>log_statsd_sample_rate_factor</title_reference> is multiplied to any sample rate (either the
                global default or one specified by the actual metric logging call in the Swift
                source) prior to handling.  In other words, this one tunable can lower the
                frequency of all StatsD logging by a proportional amount.</paragraph>
            <paragraph>To get the best data, start with the default <title_reference>log_statsd_default_sample_rate</title_reference>
                and <title_reference>log_statsd_sample_rate_factor</title_reference> values of 1 and only lower
                <title_reference>log_statsd_sample_rate_factor</title_reference> if needed.  The
                <title_reference>log_statsd_default_sample_rate</title_reference> should not be used and remains for backward
                compatibility only.</paragraph>
            <paragraph>The metric prefix will be prepended to every metric sent to the StatsD server
                For example, with:</paragraph>
            <literal_block xml:space="preserve">log_statsd_metric_prefix = proxy01</literal_block>
            <paragraph>the metric <title_reference>proxy-server.errors</title_reference> would be sent to StatsD as
                <title_reference>proxy01.proxy-server.errors</title_reference>.  This is useful for differentiating different
                servers when sending statistics to a central StatsD server.  If you run a local
                StatsD server per node, you could configure a per-node metrics prefix there and
                leave <title_reference>log_statsd_metric_prefix</title_reference> blank.</paragraph>
            <paragraph>Note that metrics reported to StatsD are counters or timing data (which are
                sent in units of milliseconds).  StatsD usually expands timing data out to min,
                max, avg, count, and 90th percentile per timing metric, but the details of
                this behavior will depend on the configuration of your StatsD server.  Some
                important “gauge” metrics may still need to be collected using another method.
                For example, the <title_reference>object-server.async_pendings</title_reference> StatsD metric counts the generation
                of async_pendings in real-time, but will not tell you the current number of
                async_pending container updates on disk at any point in time.</paragraph>
            <paragraph>Note also that the set of metrics collected, their names, and their semantics
                are not locked down and will change over time.</paragraph>
            <paragraph>Metrics for <title_reference>account-auditor</title_reference>:</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="26"></colspec>
                    <colspec colwidth="57"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>Metric Name</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Description</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-auditor.errors</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of audit runs (across all account databases) which
                                    caught an Exception.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-auditor.passes</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of individual account databases which passed audit.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-auditor.failures</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of individual account databases which failed audit.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-auditor.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for individual account database audits.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>Metrics for <title_reference>account-reaper</title_reference>:</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="46"></colspec>
                    <colspec colwidth="52"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>Metric Name</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Description</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-reaper.errors</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of devices failing the mount check.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-reaper.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each reap_account() call.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-reaper.return_codes.X</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of HTTP return codes from various operations
                                    (e.g. object listing, container deletion, etc.). The
                                    value for X is the first digit of the return code
                                    (2 for 201, 4 for 404, etc.).</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-reaper.containers_failures</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of failures to delete a container.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-reaper.containers_deleted</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of containers successfully deleted.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-reaper.containers_remaining</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of containers which failed to delete with
                                    zero successes.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-reaper.containers_possibly_remaining</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of containers which failed to delete with
                                    at least one success.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-reaper.objects_failures</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of failures to delete an object.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-reaper.objects_deleted</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of objects successfully deleted.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-reaper.objects_remaining</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of objects which failed to delete with zero
                                    successes.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-reaper.objects_possibly_remaining</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of objects which failed to delete with at
                                    least one success.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>Metrics for <title_reference>account-server</title_reference> (“Not Found” is not considered an error and requests
                which increment <title_reference>errors</title_reference> are not included in the timing data):</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="40"></colspec>
                    <colspec colwidth="55"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>Metric Name</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Description</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-server.DELETE.errors.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each DELETE request resulting in an
                                    error: bad request, not mounted, missing timestamp.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-server.DELETE.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each DELETE request not resulting in
                                    an error.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-server.PUT.errors.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each PUT request resulting in an error:
                                    bad request, not mounted, conflict, recently-deleted.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-server.PUT.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each PUT request not resulting in an
                                    error.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-server.HEAD.errors.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each HEAD request resulting in an
                                    error: bad request, not mounted.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-server.HEAD.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each HEAD request not resulting in
                                    an error.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-server.GET.errors.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each GET request resulting in an
                                    error: bad request, not mounted, bad delimiter,
                                    account listing limit too high, bad accept header.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-server.GET.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each GET request not resulting in
                                    an error.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-server.REPLICATE.errors.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each REPLICATE request resulting in an
                                    error: bad request, not mounted.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-server.REPLICATE.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each REPLICATE request not resulting
                                    in an error.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-server.POST.errors.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each POST request resulting in an
                                    error: bad request, bad or missing timestamp, not
                                    mounted.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-server.POST.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each POST request not resulting in
                                    an error.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>Metrics for <title_reference>account-replicator</title_reference>:</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="52"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>Metric Name</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Description</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-replicator.diffs</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of syncs handled by sending differing rows.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-replicator.diff_caps</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of “diffs” operations which failed because
                                    “max_diffs” was hit.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-replicator.no_changes</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of accounts found to be in sync.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-replicator.hashmatches</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of accounts found to be in sync via hash
                                    comparison (<title_reference>broker.merge_syncs</title_reference> was called).</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-replicator.rsyncs</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of completely missing accounts which were sent
                                    via rsync.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-replicator.remote_merges</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of syncs handled by sending entire database
                                    via rsync.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-replicator.attempts</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of database replication attempts.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-replicator.failures</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of database replication attempts which failed
                                    due to corruption (quarantined) or inability to read
                                    as well as attempts to individual nodes which
                                    failed.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-replicator.removes.&lt;device&gt;</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of databases on &lt;device&gt; deleted because the
                                    delete_timestamp was greater than the put_timestamp
                                    and the database had no rows or because it was
                                    successfully sync’ed to other locations and doesn’t
                                    belong here anymore.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-replicator.successes</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of replication attempts to an individual node
                                    which were successful.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>account-replicator.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each database replication attempt
                                    not resulting in a failure.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>Metrics for <title_reference>container-auditor</title_reference>:</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="28"></colspec>
                    <colspec colwidth="52"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>Metric Name</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Description</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-auditor.errors</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Incremented when an Exception is caught in an audit
                                    pass (only once per pass, max).</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-auditor.passes</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of individual containers passing an audit.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-auditor.failures</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of individual containers failing an audit.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-auditor.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each container audit.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>Metrics for <title_reference>container-replicator</title_reference>:</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="54"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>Metric Name</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Description</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-replicator.diffs</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of syncs handled by sending differing rows.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-replicator.diff_caps</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of “diffs” operations which failed because
                                    “max_diffs” was hit.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-replicator.no_changes</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of containers found to be in sync.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-replicator.hashmatches</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of containers found to be in sync via hash
                                    comparison (<title_reference>broker.merge_syncs</title_reference> was called).</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-replicator.rsyncs</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of completely missing containers where were sent
                                    via rsync.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-replicator.remote_merges</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of syncs handled by sending entire database
                                    via rsync.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-replicator.attempts</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of database replication attempts.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-replicator.failures</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of database replication attempts which failed
                                    due to corruption (quarantined) or inability to read
                                    as well as attempts to individual nodes which
                                    failed.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-replicator.removes.&lt;device&gt;</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of databases deleted on &lt;device&gt; because the
                                    delete_timestamp was greater than the put_timestamp
                                    and the database had no rows or because it was
                                    successfully sync’ed to other locations and doesn’t
                                    belong here anymore.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-replicator.successes</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of replication attempts to an individual node
                                    which were successful.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-replicator.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each database replication attempt
                                    not resulting in a failure.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>Metrics for <title_reference>container-server</title_reference> (“Not Found” is not considered an error and requests
                which increment <title_reference>errors</title_reference> are not included in the timing data):</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="42"></colspec>
                    <colspec colwidth="52"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>Metric Name</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Description</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-server.DELETE.errors.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for DELETE request errors: bad request,
                                    not mounted, missing timestamp, conflict.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-server.DELETE.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each DELETE request not resulting in
                                    an error.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-server.PUT.errors.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for PUT request errors: bad request,
                                    missing timestamp, not mounted, conflict.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-server.PUT.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each PUT request not resulting in an
                                    error.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-server.HEAD.errors.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for HEAD request errors: bad request,
                                    not mounted.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-server.HEAD.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each HEAD request not resulting in
                                    an error.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-server.GET.errors.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for GET request errors: bad request,
                                    not mounted, parameters not utf8, bad accept header.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-server.GET.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each GET request not resulting in
                                    an error.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-server.REPLICATE.errors.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for REPLICATE request errors: bad
                                    request, not mounted.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-server.REPLICATE.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each REPLICATE request not resulting
                                    in an error.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-server.POST.errors.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for POST request errors: bad request,
                                    bad x-container-sync-to, not mounted.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-server.POST.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each POST request not resulting in
                                    an error.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>Metrics for <title_reference>container-sync</title_reference>:</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="52"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>Metric Name</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Description</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-sync.skips</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of containers skipped because they don’t have
                                    sync’ing enabled.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-sync.failures</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of failures sync’ing of individual containers.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-sync.syncs</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of individual containers sync’ed successfully.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-sync.deletes</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of container database rows sync’ed by
                                    deletion.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-sync.deletes.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each container database row
                                    synchronization via deletion.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-sync.puts</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of container database rows sync’ed by Putting.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-sync.puts.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each container database row
                                    synchronization via Putting.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>Metrics for <title_reference>container-updater</title_reference>:</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="30"></colspec>
                    <colspec colwidth="52"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>Metric Name</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Description</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-updater.successes</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of containers which successfully updated their
                                    account.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-updater.failures</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of containers which failed to update their
                                    account.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-updater.no_changes</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of containers which didn’t need to update
                                    their account.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>container-updater.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for processing a container; only
                                    includes timing for containers which needed to
                                    update their accounts (i.e. “successes” and
                                    “failures” but not “no_changes”).</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>Metrics for <title_reference>object-auditor</title_reference>:</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="28"></colspec>
                    <colspec colwidth="52"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>Metric Name</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Description</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-auditor.quarantines</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of objects failing audit and quarantined.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-auditor.errors</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of errors encountered while auditing objects.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-auditor.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each object audit (does not include
                                    any rate-limiting sleep time for
                                    max_files_per_second, but does include rate-limiting
                                    sleep time for max_bytes_per_second).</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>Metrics for <title_reference>object-expirer</title_reference>:</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="24"></colspec>
                    <colspec colwidth="52"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>Metric Name</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Description</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-expirer.objects</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of objects expired.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-expirer.errors</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of errors encountered while attempting to
                                    expire an object.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-expirer.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each object expiration attempt,
                                    including ones resulting in an error.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>Metrics for <title_reference>object-reconstructor</title_reference>:</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="54"></colspec>
                    <colspec colwidth="54"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>Metric Name</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Description</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-reconstructor.partition.delete.count.&lt;device&gt;</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>A count of partitions on &lt;device&gt; which were
                                    reconstructed and synced to another node because they
                                    didn’t belong on this node. This metric is tracked
                                    per-device to allow for “quiescence detection” for
                                    object reconstruction activity on each device.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-reconstructor.partition.delete.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for partitions reconstructed and synced to
                                    another node because they didn’t belong on this node.
                                    This metric is not tracked per device.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-reconstructor.partition.update.count.&lt;device&gt;</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>A count of partitions on &lt;device&gt; which were
                                    reconstructed and synced to another node, but also
                                    belong on this node. As with delete.count, this metric
                                    is tracked per-device.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-reconstructor.partition.update.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for partitions reconstructed which also
                                    belong on this node. This metric is not tracked
                                    per-device.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-reconstructor.suffix.hashes</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of suffix directories whose hash (of filenames)
                                    was recalculated.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-reconstructor.suffix.syncs</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of suffix directories reconstructed with ssync.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>Metrics for <title_reference>object-replicator</title_reference>:</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="53"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>Metric Name</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Description</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-replicator.partition.delete.count.&lt;device&gt;</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>A count of partitions on &lt;device&gt; which were
                                    replicated to another node because they didn’t
                                    belong on this node.  This metric is tracked
                                    per-device to allow for “quiescence detection” for
                                    object replication activity on each device.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-replicator.partition.delete.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for partitions replicated to another
                                    node because they didn’t belong on this node.  This
                                    metric is not tracked per device.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-replicator.partition.update.count.&lt;device&gt;</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>A count of partitions on &lt;device&gt; which were
                                    replicated to another node, but also belong on this
                                    node.  As with delete.count, this metric is tracked
                                    per-device.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-replicator.partition.update.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for partitions replicated which also
                                    belong on this node.  This metric is not tracked
                                    per-device.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-replicator.suffix.hashes</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of suffix directories whose hash (of filenames)
                                    was recalculated.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-replicator.suffix.syncs</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of suffix directories replicated with rsync.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>Metrics for <title_reference>object-server</title_reference>:</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="52"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>Metric Name</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Description</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-server.quarantines</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of objects (files) found bad and moved to
                                    quarantine.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-server.async_pendings</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of container updates saved as async_pendings
                                    (may result from PUT or DELETE requests).</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-server.POST.errors.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for POST request errors: bad request,
                                    missing timestamp, delete-at in past, not mounted.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-server.POST.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each POST request not resulting in
                                    an error.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-server.PUT.errors.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for PUT request errors: bad request,
                                    not mounted, missing timestamp, object creation
                                    constraint violation, delete-at in past.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-server.PUT.timeouts</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of object PUTs which exceeded max_upload_time.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-server.PUT.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each PUT request not resulting in an
                                    error.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-server.PUT.&lt;device&gt;.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data per kB transferred (ms/kB) for each
                                    non-zero-byte PUT request on each device.
                                    Monitoring problematic devices, higher is bad.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-server.GET.errors.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for GET request errors: bad request,
                                    not mounted, header timestamps before the epoch,
                                    precondition failed.
                                    File errors resulting in a quarantine are not
                                    counted here.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-server.GET.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each GET request not resulting in an
                                    error.  Includes requests which couldn’t find the
                                    object (including disk errors resulting in file
                                    quarantine).</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-server.HEAD.errors.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for HEAD request errors: bad request,
                                    not mounted.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-server.HEAD.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each HEAD request not resulting in
                                    an error.  Includes requests which couldn’t find the
                                    object (including disk errors resulting in file
                                    quarantine).</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-server.DELETE.errors.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for DELETE request errors: bad request,
                                    missing timestamp, not mounted, precondition
                                    failed.  Includes requests which couldn’t find or
                                    match the object.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-server.DELETE.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each DELETE request not resulting
                                    in an error.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-server.REPLICATE.errors.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for REPLICATE request errors: bad
                                    request, not mounted.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-server.REPLICATE.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for each REPLICATE request not resulting
                                    in an error.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>Metrics for <title_reference>object-updater</title_reference>:</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="28"></colspec>
                    <colspec colwidth="52"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>Metric Name</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Description</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-updater.errors</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of drives not mounted or async_pending files
                                    with an unexpected name.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-updater.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for object sweeps to flush async_pending
                                    container updates.  Does not include object sweeps
                                    which did not find an existing async_pending storage
                                    directory.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-updater.quarantines</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of async_pending container updates which were
                                    corrupted and moved to quarantine.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-updater.successes</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of successful container updates.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-updater.failures</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of failed container updates.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>object-updater.unlinks</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of async_pending files unlinked. An
                                    async_pending file is unlinked either when it is
                                    successfully processed or when the replicator sees
                                    that there is a newer async_pending file for the
                                    same object.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>Metrics for <title_reference>proxy-server</title_reference> (in the table, <title_reference>&lt;type&gt;</title_reference> is the proxy-server
                controller responsible for the request and will be one of “account”,
                “container”, or “object”):</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="40"></colspec>
                    <colspec colwidth="53"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>Metric Name</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Description</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>proxy-server.errors</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of errors encountered while serving requests
                                    before the controller type is determined.  Includes
                                    invalid Content-Length, errors finding the internal
                                    controller to handle the request, invalid utf8, and
                                    bad URLs.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>proxy-server.&lt;type&gt;.handoff_count</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of node hand-offs; only tracked if log_handoffs
                                    is set in the proxy-server config.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>proxy-server.&lt;type&gt;.handoff_all_count</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of times <emphasis>only</emphasis> hand-off locations were
                                    utilized; only tracked if log_handoffs is set in the
                                    proxy-server config.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>proxy-server.&lt;type&gt;.client_timeouts</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of client timeouts (client did not read within
                                    <title_reference>client_timeout</title_reference> seconds during a GET or did not
                                    supply data within <title_reference>client_timeout</title_reference> seconds during
                                    a PUT).</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>proxy-server.&lt;type&gt;.client_disconnects</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of detected client disconnects during PUT
                                    operations (does NOT include caught Exceptions in
                                    the proxy-server which caused a client disconnect).</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>Metrics for <title_reference>proxy-logging</title_reference> middleware (in the table, <title_reference>&lt;type&gt;</title_reference> is either the
                proxy-server controller responsible for the request: “account”, “container”,
                “object”, or the string “SOS” if the request came from the <reference name="Swift Origin Server" refuri="https://github.com/dpgoetz/sos">Swift Origin Server</reference>
                middleware.  The <title_reference>&lt;verb&gt;</title_reference> portion will be one of “GET”, “HEAD”, “POST”, “PUT”,
                “DELETE”, “COPY”, “OPTIONS”, or “BAD_METHOD”.  The list of valid HTTP methods
                is configurable via the <title_reference>log_statsd_valid_http_methods</title_reference> config variable and
                the default setting yields the above behavior):</paragraph>
            <target ids="swift-origin-server" names="swift\ origin\ server" refuri="https://github.com/dpgoetz/sos"></target>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="52"></colspec>
                    <colspec colwidth="44"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>Metric Name</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Description</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>proxy-server.&lt;type&gt;.&lt;verb&gt;.&lt;status&gt;.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for requests, start to finish.
                                    The &lt;status&gt; portion is the numeric HTTP
                                    status code for the request (e.g.  “200” or
                                    “404”).</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>proxy-server.&lt;type&gt;.GET.&lt;status&gt;.first-byte.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data up to completion of sending the
                                    response headers (only for GET requests).
                                    &lt;status&gt; and &lt;type&gt; are as for the main
                                    timing metric.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>proxy-server.&lt;type&gt;.&lt;verb&gt;.&lt;status&gt;.xfer</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>This counter metric is the sum of bytes
                                    transferred in (from clients) and out (to
                                    clients) for requests.  The &lt;type&gt;, &lt;verb&gt;,
                                    and &lt;status&gt; portions of the metric are just
                                    like the main timing metric.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>The <title_reference>proxy-logging</title_reference> middleware also groups these metrics by policy.  The
                <title_reference>&lt;policy-index&gt;</title_reference> portion represents a policy index):</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="74"></colspec>
                    <colspec colwidth="37"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>Metric Name</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Description</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>proxy-server.object.policy.&lt;policy-index&gt;.&lt;verb&gt;.&lt;status&gt;.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data for requests, aggregated
                                    by policy index.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>proxy-server.object.policy.&lt;policy-index&gt;.GET.&lt;status&gt;.first-byte.timing</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Timing data up to completion of
                                    sending the response headers,
                                    aggregated by policy index.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>proxy-server.object.policy.&lt;policy-index&gt;.&lt;verb&gt;.&lt;status&gt;.xfer</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Sum of bytes transferred in and out,
                                    aggregated by policy index.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>Metrics for <title_reference>tempauth</title_reference> middleware (in the table, <title_reference>&lt;reseller_prefix&gt;</title_reference> represents
                the actual configured reseller_prefix or “<title_reference>NONE</title_reference>” if the reseller_prefix is the
                empty string):</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="41"></colspec>
                    <colspec colwidth="52"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>Metric Name</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Description</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>tempauth.&lt;reseller_prefix&gt;.unauthorized</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of regular requests which were denied with
                                    HTTPUnauthorized.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>tempauth.&lt;reseller_prefix&gt;.forbidden</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of regular requests which were denied with
                                    HTTPForbidden.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>tempauth.&lt;reseller_prefix&gt;.token_denied</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of token requests which were denied.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><title_reference>tempauth.&lt;reseller_prefix&gt;.errors</title_reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Count of errors.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section ids="debugging-tips-and-tools" names="debugging\ tips\ and\ tools">
            <title>Debugging Tips and Tools</title>
            <paragraph>When a request is made to Swift, it is given a unique transaction id.  This
                id should be in every log line that has to do with that request.  This can
                be useful when looking at all the services that are hit by a single request.</paragraph>
            <paragraph>If you need to know where a specific account, container or object is in the
                cluster, <title_reference>swift-get-nodes</title_reference> will show the location where each replica should be.</paragraph>
            <paragraph>If you are looking at an object on the server and need more info,
                <title_reference>swift-object-info</title_reference> will display the account, container, replica locations
                and metadata of the object.</paragraph>
            <paragraph>If you are looking at a container on the server and need more info,
                <title_reference>swift-container-info</title_reference> will display all the information like the account,
                container, replica locations and metadata of the container.</paragraph>
            <paragraph>If you are looking at an account on the server and need more info,
                <title_reference>swift-account-info</title_reference> will display the account, replica locations
                and metadata of the account.</paragraph>
            <paragraph>If you want to audit the data for an account, <title_reference>swift-account-audit</title_reference> can be
                used to crawl the account, checking that all containers and objects can be
                found.</paragraph>
        </section>
        <section ids="managing-services" names="managing\ services">
            <title>Managing Services</title>
            <paragraph>Swift services are generally managed with <literal>swift-init</literal>. the general usage is
                <literal>swift-init &lt;service&gt; &lt;command&gt;</literal>, where service is the Swift service to
                manage (for example object, container, account, proxy) and command is one of:</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="10"></colspec>
                    <colspec colwidth="47"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>Command</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Description</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>start</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Start the service</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>stop</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Stop the service</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>restart</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Restart the service</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>shutdown</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Attempt to gracefully shutdown the service</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>reload</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Attempt to gracefully restart the service</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>A graceful shutdown or reload will finish any current requests before
                completely stopping the old service.  There is also a special case of
                <literal>swift-init all &lt;command&gt;</literal>, which will run the command for all swift
                services.</paragraph>
            <paragraph>In cases where there are multiple configs for a service, a specific config
                can be managed with <literal>swift-init &lt;service&gt;.&lt;config&gt; &lt;command&gt;</literal>.
                For example, when a separate replication network is used, there might be
                <literal>/etc/swift/object-server/public.conf</literal> for the object server and
                <literal>/etc/swift/object-server/replication.conf</literal> for the replication services.
                In this case, the replication services could be restarted with
                <literal>swift-init object-server.replication restart</literal>.</paragraph>
        </section>
        <section ids="object-auditor" names="object\ auditor">
            <title>Object Auditor</title>
            <paragraph>On system failures, the XFS file system can sometimes truncate files it’s
                trying to write and produce zero-byte files. The object-auditor will catch
                these problems but in the case of a system crash it would be advisable to run
                an extra, less rate limited sweep to check for these specific files. You can
                run this command as follows:</paragraph>
            <literal_block xml:space="preserve">swift-object-auditor /path/to/object-server/config/file.conf once -z 1000</literal_block>
            <paragraph><literal>-z</literal> means to only check for zero-byte files at 1000 files per second.</paragraph>
            <paragraph>At times it is useful to be able to run the object auditor on a specific
                device or set of devices.  You can run the object-auditor as follows:</paragraph>
            <literal_block xml:space="preserve">swift-object-auditor /path/to/object-server/config/file.conf once --devices=sda,sdb</literal_block>
            <paragraph>This will run the object auditor on only the sda and sdb devices. This param
                accepts a comma separated list of values.</paragraph>
        </section>
        <section ids="object-replicator" names="object\ replicator">
            <title>Object Replicator</title>
            <paragraph>At times it is useful to be able to run the object replicator on a specific
                device or partition.  You can run the object-replicator as follows:</paragraph>
            <literal_block xml:space="preserve">swift-object-replicator /path/to/object-server/config/file.conf once --devices=sda,sdb</literal_block>
            <paragraph>This will run the object replicator on only the sda and sdb devices.  You can
                likewise run that command with <literal>--partitions</literal>.  Both params accept a comma
                separated list of values. If both are specified they will be ANDed together.
                These can only be run in “once” mode.</paragraph>
        </section>
        <section ids="swift-orphans" names="swift\ orphans">
            <title>Swift Orphans</title>
            <paragraph>Swift Orphans are processes left over after a reload of a Swift server.</paragraph>
            <paragraph>For example, when upgrading a proxy server you would probably finish
                with a <literal>swift-init proxy-server reload</literal> or <literal>/etc/init.d/swift-proxy
reload</literal>. This kills the parent proxy server process and leaves the
                child processes running to finish processing whatever requests they
                might be handling at the time. It then starts up a new parent proxy
                server process and its children to handle new incoming requests. This
                allows zero-downtime upgrades with no impact to existing requests.</paragraph>
            <paragraph>The orphaned child processes may take a while to exit, depending on
                the length of the requests they were handling. However, sometimes an
                old process can be hung up due to some bug or hardware issue. In these
                cases, these orphaned processes will hang around
                forever. <literal>swift-orphans</literal> can be used to find and kill these orphans.</paragraph>
            <paragraph><literal>swift-orphans</literal> with no arguments will just list the orphans it finds
                that were started more than 24 hours ago. You shouldn’t really check
                for orphans until 24 hours after you perform a reload, as some
                requests can take a long time to process. <literal>swift-orphans -k TERM</literal> will
                send the SIG_TERM signal to the orphans processes, or you can <literal>kill
-TERM</literal> the pids yourself if you prefer.</paragraph>
            <paragraph>You can run <literal>swift-orphans --help</literal> for more options.</paragraph>
        </section>
        <section ids="swift-oldies" names="swift\ oldies">
            <title>Swift Oldies</title>
            <paragraph>Swift Oldies are processes that have just been around for a long
                time. There’s nothing necessarily wrong with this, but it might
                indicate a hung process if you regularly upgrade and reload/restart
                services. You might have so many servers that you don’t notice when a
                reload/restart fails; <literal>swift-oldies</literal> can help with this.</paragraph>
            <paragraph>For example, if you upgraded and reloaded/restarted everything 2 days
                ago, and you’ve already cleaned up any orphans with <literal>swift-orphans</literal>,
                you can run <literal>swift-oldies -a 48</literal> to find any Swift processes still
                around that were started more than 2 days ago and then investigate
                them accordingly.</paragraph>
        </section>
        <section ids="custom-log-handlers" names="custom\ log\ handlers">
            <title>Custom Log Handlers</title>
            <paragraph>Swift supports setting up custom log handlers for services by specifying a
                comma-separated list of functions to invoke when logging is setup. It does so
                via the <literal>log_custom_handlers</literal> configuration option. Logger hooks invoked are
                passed the same arguments as Swift’s get_logger function (as well as the
                getLogger and LogAdapter object):</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="14"></colspec>
                    <colspec colwidth="50"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>Name</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Description</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>conf</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Configuration dict to read settings from</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>name</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Name of the logger received</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>log_to_console</paragraph>
                            </entry>
                            <entry>
                                <paragraph>(optional) Write log messages to console on stderr</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>log_route</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Route for the logging received</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>fmt</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Override log format received</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>logger</paragraph>
                            </entry>
                            <entry>
                                <paragraph>The logging.getLogger object</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>adapted_logger</paragraph>
                            </entry>
                            <entry>
                                <paragraph>The LogAdapter object</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>A basic example that sets up a custom logger might look like the
                following:</paragraph>
            <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">def my_logger(conf, name, log_to_console, log_route, fmt, logger,
              adapted_logger):
    my_conf_opt = conf.get('some_custom_setting')
    my_handler = third_party_logstore_handler(my_conf_opt)
    logger.addHandler(my_handler)</literal_block>
            <paragraph>See <reference internal="True" refuri="associated_projects#custom-logger-hooks-label"><inline classes="std std-ref">Custom Logger Hooks</inline></reference> for sample use cases.</paragraph>
        </section>
        <section ids="securing-openstack-swift" names="securing\ openstack\ swift">
            <title>Securing OpenStack Swift</title>
            <paragraph>Please refer to the security guide at <reference refuri="http://docs.openstack.org/security-guide">http://docs.openstack.org/security-guide</reference>
                and in particular the <reference name="Object Storage" refuri="http://docs.openstack.org/security-guide/object-storage.html">Object Storage</reference> section.</paragraph>
        </section>
    </section>
</document>
