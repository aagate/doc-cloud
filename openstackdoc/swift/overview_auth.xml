<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/swift/doc/source/overview_auth.rst">
    <section ids="the-auth-system" names="the\ auth\ system">
        <title>The Auth System</title>
        <section ids="overview" names="overview">
            <title>Overview</title>
            <paragraph>Swift supports a number of auth systems that share the following common
                characteristics:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>The authentication/authorization part can be an external system or a
                        subsystem run within Swift as WSGI middleware</paragraph>
                </list_item>
                <list_item>
                    <paragraph>The user of Swift passes in an auth token with each request</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Swift validates each token with the external auth system or auth subsystem
                        and caches the result</paragraph>
                </list_item>
                <list_item>
                    <paragraph>The token does not change from request to request, but does expire</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>The token can be passed into Swift using the X-Auth-Token or the
                X-Storage-Token header. Both have the same format: just a simple string
                representing the token. Some auth systems use UUID tokens, some an MD5 hash of
                something unique, some use “something else” but the salient point is that the
                token is a string which can be sent as-is back to the auth system for
                validation.</paragraph>
            <paragraph>Swift will make calls to the auth system, giving the auth token to be
                validated. For a valid token, the auth system responds with an overall
                expiration time in seconds from now. To avoid the overhead in validating the same
                token over and over again, Swift will cache the
                token for a configurable time, but no longer than the expiration
                time.</paragraph>
            <paragraph>The Swift project includes two auth systems:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refid="temp-auth"><inline classes="std std-ref">TempAuth</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="keystone-auth"><inline classes="std std-ref">Keystone Auth</inline></reference></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>It is also possible to write your own auth system as described in
                <reference internal="True" refid="extending-auth"><inline classes="std std-ref">Extending Auth</inline></reference>.</paragraph>
            <target refid="temp-auth"></target>
        </section>
        <section ids="tempauth temp-auth" names="tempauth temp_auth">
            <title>TempAuth</title>
            <paragraph>TempAuth is used primarily in Swift’s functional test environment and can be
                used in other test environments (such as <reference internal="True" refuri="development_saio"><inline classes="doc">SAIO - Swift All In One</inline></reference>). It is not
                recommended to use TempAuth in a production system. However, TempAuth is fully
                functional and can be used as a model to develop your own auth system.</paragraph>
            <paragraph>TempAuth has the concept of admin and non-admin users
                within an account.  Admin users can do anything within the account.
                Non-admin users can only perform read operations. However, some
                privileged metadata such as X-Container-Sync-Key is not accessible to
                non-admin users.</paragraph>
            <paragraph>Users with the special group <literal>.reseller_admin</literal> can operate on any account.
                For an example usage please see <reference internal="True" reftitle="swift.common.middleware.tempauth" refuri="middleware#module-swift.common.middleware.tempauth"><literal classes="xref py py-mod">swift.common.middleware.tempauth</literal></reference>.
                If a request is coming from a reseller the auth system sets the request environ
                reseller_request to True. This can be used by other middlewares.</paragraph>
            <paragraph>Other users may be granted the ability to perform operations on
                an account or container via ACLs. TempAuth supports two types of ACL:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Per container ACLs based on the
                        container’s <literal>X-Container-Read</literal> and <literal>X-Container-Write</literal> metadata. See
                        <reference internal="True" refuri="overview_acl#container-acls"><inline classes="std std-ref">Container ACLs</inline></reference> for more information.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Per account ACLs based on the account’s <literal>X-Account-Access-Control</literal>
                        metadata. For more information see <reference internal="True" refuri="overview_acl#account-acls"><inline classes="std std-ref">Account ACLs</inline></reference>.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>TempAuth will now allow OPTIONS requests to go through without a token.</paragraph>
            <paragraph>The TempAuth middleware is responsible for creating its own tokens. A user
                makes a request containing their username and password and TempAuth
                responds with a token. This token is then used to perform subsequent
                requests on the user’s account, containers and objects.</paragraph>
            <target refid="keystone-auth"></target>
        </section>
        <section ids="keystone-auth id1" names="keystone\ auth keystone_auth">
            <title>Keystone Auth</title>
            <paragraph>Swift is able to authenticate against OpenStack <reference name="Keystone" refuri="http://docs.openstack.org/developer/keystone/">Keystone</reference>. In this
                environment, Keystone is responsible for creating and validating
                tokens. The <reference internal="True" refuri="middleware#keystoneauth"><inline classes="std std-ref">KeystoneAuth</inline></reference> middleware is responsible for
                implementing the auth system within Swift as described here.</paragraph>
            <paragraph>The <reference internal="True" refuri="middleware#keystoneauth"><inline classes="std std-ref">KeystoneAuth</inline></reference> middleware supports per container based ACLs on the
                container’s <literal>X-Container-Read</literal> and <literal>X-Container-Write</literal> metadata.
                For more information see <reference internal="True" refuri="overview_acl#container-acls"><inline classes="std std-ref">Container ACLs</inline></reference>.</paragraph>
            <paragraph>The account-level ACL is not supported by Keystone auth.</paragraph>
            <paragraph>In order to use the <literal>keystoneauth</literal> middleware the <literal>auth_token</literal>
                middleware from <reference name="KeystoneMiddleware" refuri="http://docs.openstack.org/developer/keystonemiddleware/">KeystoneMiddleware</reference> will need to be configured.</paragraph>
            <paragraph>The <literal>authtoken</literal> middleware performs the authentication token
                validation and retrieves actual user authentication information. It
                can be found in the <reference name="KeystoneMiddleware" refuri="http://docs.openstack.org/developer/keystonemiddleware/">KeystoneMiddleware</reference> distribution.</paragraph>
            <paragraph>The <reference internal="True" refuri="middleware#keystoneauth"><inline classes="std std-ref">KeystoneAuth</inline></reference> middleware performs authorization and mapping the
                Keystone roles to Swift’s ACLs.</paragraph>
            <target ids="keystonemiddleware" names="keystonemiddleware" refuri="http://docs.openstack.org/developer/keystonemiddleware/"></target>
            <target ids="keystone" names="keystone" refuri="http://docs.openstack.org/developer/keystone/"></target>
            <target refid="configuring-keystone-auth"></target>
            <section ids="configuring-swift-to-use-keystone configuring-keystone-auth" names="configuring\ swift\ to\ use\ keystone configuring_keystone_auth">
                <title>Configuring Swift to use Keystone</title>
                <paragraph>Configuring Swift to use <reference name="Keystone" refuri="http://docs.openstack.org/developer/keystone/">Keystone</reference>
                    is relatively straightforward.  The first
                    step is to ensure that you have the <literal>auth_token</literal> middleware installed. It can
                    either be dropped in your python path or installed via the <reference name="KeystoneMiddleware" refuri="http://docs.openstack.org/developer/keystonemiddleware/">KeystoneMiddleware</reference>
                    package.</paragraph>
                <paragraph>You need at first make sure you have a service endpoint of type
                    <literal>object-store</literal> in Keystone pointing to your Swift proxy. For example
                    having this in your <literal>/etc/keystone/default_catalog.templates</literal></paragraph>
                <literal_block xml:space="preserve">catalog.RegionOne.object_store.name = Swift Service
catalog.RegionOne.object_store.publicURL = http://swiftproxy:8080/v1/AUTH_$(tenant_id)s
catalog.RegionOne.object_store.adminURL = http://swiftproxy:8080/
catalog.RegionOne.object_store.internalURL = http://swiftproxy:8080/v1/AUTH_$(tenant_id)s</literal_block>
                <paragraph>On your Swift proxy server you will want to adjust your main pipeline
                    and add auth_token and keystoneauth in your
                    <literal>/etc/swift/proxy-server.conf</literal> like this</paragraph>
                <literal_block xml:space="preserve">[pipeline:main]
pipeline = [....] authtoken keystoneauth proxy-logging proxy-server</literal_block>
                <paragraph>add the configuration for the authtoken middleware:</paragraph>
                <literal_block xml:space="preserve">[filter:authtoken]
paste.filter_factory = keystonemiddleware.auth_token:filter_factory
auth_uri = http://keystonehost:5000/
auth_url = http://keystonehost:35357/
auth_plugin = password
project_domain_id = default
user_domain_id = default
project_name = service
username = swift
password = password
cache = swift.cache
include_service_catalog = False
delay_auth_decision = True</literal_block>
                <paragraph>The actual values for these variables will need to be set depending on
                    your situation, but in short:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><literal>auth_uri</literal> should point to a Keystone service from which users may
                            retrieve tokens. This value is used in the <title_reference>WWW-Authenticate</title_reference> header that
                            auth_token sends with any denial response.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>auth_url</literal> points to the Keystone Admin service. This information is
                            used by the middleware to actually query Keystone about the validity of the
                            authentication tokens. It is not necessary to append any Keystone API version
                            number to this URI.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The auth credentials (<literal>project_domain_id</literal>, <literal>user_domain_id</literal>,
                            <literal>username</literal>, <literal>project_name</literal>, <literal>password</literal>) will be used to retrieve an
                            admin token. That token will be used to authorize user tokens behind the
                            scenes. These credentials must match the Keystone credentials for the Swift
                            service. The example values shown here assume a user named ‘swift’ with admin
                            role on a project named ‘service’, both being in the Keystone domain with id
                            ‘default’. Refer to the <reference name="KeystoneMiddleware documentation" refuri="http://docs.openstack.org/developer/keystonemiddleware/middlewarearchitecture.html#configuration">KeystoneMiddleware documentation</reference><target ids="keystonemiddleware-documentation" names="keystonemiddleware\ documentation" refuri="http://docs.openstack.org/developer/keystonemiddleware/middlewarearchitecture.html#configuration"></target>
                            for other examples.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>cache</literal> is set to <literal>swift.cache</literal>. This means that the middleware
                            will get the Swift memcache from the request environment.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>include_service_catalog</literal> defaults to <literal>True</literal> if not set. This means
                            that when validating a token, the service catalog is retrieved
                            and stored in the <literal>X-Service-Catalog</literal> header. Since Swift does not
                            use the <literal>X-Service-Catalog</literal> header, there is no point in getting
                            the service catalog. We recommend you set <literal>include_service_catalog</literal>
                            to <literal>False</literal>.</paragraph>
                    </list_item>
                </bullet_list>
                <note>
                    <paragraph>The authtoken config variable <literal>delay_auth_decision</literal> must be set to
                        <literal>True</literal>. The default is <literal>False</literal>, but that breaks public access,
                        <reference internal="True" refuri="middleware#staticweb"><inline classes="std std-ref">StaticWeb</inline></reference>, <reference internal="True" refuri="middleware#formpost"><inline classes="std std-ref">FormPost</inline></reference>, <reference internal="True" refuri="middleware#tempurl"><inline classes="std std-ref">TempURL</inline></reference>, and authenticated
                        capabilities requests (using <reference internal="True" refuri="middleware#discoverability"><inline classes="std std-ref">Discoverability</inline></reference>).</paragraph>
                </note>
                <paragraph>and you can finally add the keystoneauth configuration. Here is a simple
                    configuration:</paragraph>
                <literal_block xml:space="preserve">[filter:keystoneauth]
use = egg:swift#keystoneauth
operator_roles = admin, swiftoperator</literal_block>
                <paragraph>Use an appropriate list of roles in operator_roles. For example, in
                    some systems, the role <literal>_member_</literal> or <literal>Member</literal> is used to indicate
                    that the user is allowed to operate on project resources.</paragraph>
                <section ids="openstack-service-using-composite-tokens" names="openstack\ service\ using\ composite\ tokens">
                    <title>OpenStack Service Using Composite Tokens</title>
                    <paragraph>Some OpenStack services such as Cinder and Glance may use
                        a “service account”. In this mode, you configure a separate account where
                        the service stores project data that it manages. This account is not used
                        directly by the end-user. Instead, all access is done through the service.</paragraph>
                    <paragraph>To access the “service” account, the service must present two tokens: one from
                        the end-user and another from its own service user. Only when both tokens are
                        present can the account be accessed. This section describes how to set the
                        configuration options to correctly control access to both the “normal” and
                        “service” accounts.</paragraph>
                    <paragraph>In this example, end users use the <literal>AUTH_</literal> prefix in account names,
                        whereas services use the <literal>SERVICE_</literal> prefix:</paragraph>
                    <literal_block xml:space="preserve">[filter:keystoneauth]
use = egg:swift#keystoneauth
reseller_prefix = AUTH, SERVICE
operator_roles = admin, swiftoperator
SERVICE_service_roles = service</literal_block>
                    <paragraph>The actual values for these variable will need to be set depending on your
                        situation as follows:</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>The first item in the reseller_prefix list must match Keystone’s endpoint
                                (see <literal>/etc/keystone/default_catalog.templates</literal> above). Normally
                                this is <literal>AUTH</literal>.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>The second item in the reseller_prefix list is the prefix used by the
                                OpenStack services(s). You must configure this value (<literal>SERVICE</literal> in the
                                example) with whatever the other OpenStack service(s) use.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Set the operator_roles option to contain a role or roles that end-user’s
                                have on project’s they use.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Set the SERVICE_service_roles value to a role or roles that only the
                                OpenStack service user has. Do not use a role that is assigned to
                                “normal” end users. In this example, the role <literal>service</literal> is used.
                                The service user is granted this role to a <emphasis>single</emphasis> project only. You do
                                not need to make the service user a member of every project.</paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph>This configuration works as follows:</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>The end-user presents a user token to an OpenStack service. The service
                                then makes a Swift request to the account with the <literal>SERVICE</literal> prefix.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>The service forwards the original user token with the request. It also
                                adds it’s own service token.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Swift validates both tokens. When validated, the user token gives the
                                <literal>admin</literal> or <literal>swiftoperator</literal> role(s). When validated, the service token
                                gives the <literal>service</literal> role.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Swift interprets the above configuration as follows:</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>Did the user token provide one of the roles listed in operator_roles?</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>Did the service token have the <literal>service</literal> role as described by the
                                        <literal>SERVICE_service_roles</literal> options.</paragraph>
                                </list_item>
                            </bullet_list>
                        </list_item>
                        <list_item>
                            <paragraph>If both conditions are met, the request is granted. Otherwise, Swift
                                rejects the request.</paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph>In the above example, all services share the same account. You can separate
                        each service into its own account. For example, the following provides a
                        dedicated account for each of the Glance and Cinder services. In addition,
                        you must assign the <literal>glance_service</literal> and <literal>cinder_service</literal> to the
                        appropriate service users:</paragraph>
                    <literal_block xml:space="preserve">[filter:keystoneauth]
use = egg:swift#keystoneauth
reseller_prefix = AUTH, IMAGE, VOLUME
operator_roles = admin, swiftoperator
IMAGE_service_roles = glance_service
VOLUME_service_roles = cinder_service</literal_block>
                </section>
            </section>
            <section ids="access-control-using-keystoneauth" names="access\ control\ using\ keystoneauth">
                <title>Access control using keystoneauth</title>
                <paragraph>By default the only users able to perform operations (e.g. create a container)
                    on an account are those having a Keystone role for the corresponding Keystone
                    project that matches one of the roles specified in the <literal>operator_roles</literal>
                    option.</paragraph>
                <paragraph>Users who have one of the <literal>operator_roles</literal> will be able to set container ACLs
                    to grant other users permission to read and/or write objects in specific
                    containers, using <literal>X-Container-Read</literal> and <literal>X-Container-Write</literal> headers
                    respectively. In addition to the ACL formats described
                    <reference internal="True" reftitle="swift.common.middleware.acl" refuri="misc#module-swift.common.middleware.acl"><literal classes="xref py py-mod">here</literal></reference>, keystoneauth supports ACLs using the
                    format:</paragraph>
                <literal_block xml:space="preserve">other_project_id:other_user_id.</literal_block>
                <paragraph>where <literal>other_project_id</literal> is the UUID of a Keystone project and
                    <literal>other_user_id</literal> is the UUID of a Keystone user. This will allow the other
                    user to access a container provided their token is scoped on the other
                    project. Both <literal>other_project_id</literal> and <literal>other_user_id</literal> may be replaced with
                    the wildcard character <literal>*</literal> which will match any project or user respectively.</paragraph>
                <paragraph>Be sure to use Keystone UUIDs rather than names in container ACLs.</paragraph>
                <note>
                    <paragraph>For backwards compatibility, keystoneauth will by default grant container
                        ACLs expressed as <literal>other_project_name:other_user_name</literal> (i.e. using
                        Keystone names rather than UUIDs) in the special case when both the other
                        project and the other user are in Keystone’s default domain and the project
                        being accessed is also in the default domain.</paragraph>
                    <paragraph>For further information see <reference internal="True" refuri="middleware#keystoneauth"><inline classes="std std-ref">KeystoneAuth</inline></reference></paragraph>
                </note>
                <paragraph>Users with the Keystone role defined in <literal>reseller_admin_role</literal>
                    (<literal>ResellerAdmin</literal> by default) can operate on any account. The auth system
                    sets the request environ reseller_request to True if a request is coming
                    from a user with this role. This can be used by other middlewares.</paragraph>
            </section>
            <section ids="troubleshooting-tips-for-keystoneauth-deployment" names="troubleshooting\ tips\ for\ keystoneauth\ deployment">
                <title>Troubleshooting tips for keystoneauth deployment</title>
                <paragraph>Some common mistakes can result in API requests failing when first deploying
                    keystone with Swift:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Incorrect configuration of the Swift endpoint in the Keystone service.</paragraph>
                        <paragraph>By default, keystoneauth expects the account part of a URL to have the form
                            <literal>AUTH_&lt;keystone_project_id&gt;</literal>. Sometimes the <literal>AUTH_</literal> prefix is missed when
                            configuring Swift endpoints in Keystone, as described in the <reference name="Install Guide" refuri="http://docs.openstack.org/">Install  Guide</reference><target ids="install-guide" names="install\ guide" refuri="http://docs.openstack.org/"></target>. This is easily diagnosed by inspecting the
                            proxy-server log file for a failed request URL and checking that the URL
                            includes the <literal>AUTH_</literal> prefix (or whatever reseller prefix may have been
                            configured for keystoneauth):</paragraph>
                        <literal_block xml:space="preserve">GOOD:
proxy-server: 127.0.0.1 127.0.0.1 07/Sep/2016/16/06/58 HEAD /v1/AUTH_cfb8d9d45212408b90bc0776117aec9e HTTP/1.0 204 ...

BAD:
proxy-server: 127.0.0.1 127.0.0.1 07/Sep/2016/16/07/35 HEAD /v1/cfb8d9d45212408b90bc0776117aec9e HTTP/1.0 403 ...</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Incorrect configuration of the <literal>authtoken</literal> middleware options in the Swift
                            proxy server.</paragraph>
                        <paragraph>The <literal>authtoken</literal> middleware communicates with the Keystone service to
                            validate tokens that are presented with client requests. To do this
                            <literal>authtoken</literal> must authenticate itself with Keystone using the credentials
                            configured in the <literal>[filter:authtoken]</literal> section of
                            <literal>/etc/swift/proxy-server.conf</literal>. Errors in these credentials can result in
                            <literal>authtoken</literal> failing to validate tokens and may be revealed in the proxy
                            server logs by a message such as:</paragraph>
                        <literal_block xml:space="preserve">proxy-server: Identity server rejected authorization</literal_block>
                        <note>
                            <paragraph>More detailed log messaging may be seen by setting the <literal>authtoken</literal>
                                option <literal>log_level = debug</literal>.</paragraph>
                        </note>
                        <paragraph>The <literal>authtoken</literal> configuration options may be checked by attempting to use
                            them to communicate directly with Keystone using an <literal>openstack</literal> command
                            line. For example, given the <literal>authtoken</literal> configuration sample shown in
                            <reference internal="True" refid="configuring-keystone-auth"><inline classes="std std-ref">Configuring Swift to use Keystone</inline></reference>, the following command should return a
                            service catalog:</paragraph>
                        <literal_block xml:space="preserve">openstack --os-identity-api-version=3 --os-auth-url=http://keystonehost:5000/ \
    --os-username=swift --os-user-domain-id=default \
    --os-project-name=service --os-project-domain-id=default \
    --os-password=password catalog show object-store</literal_block>
                        <paragraph>If this <literal>openstack</literal> command fails then it is likely that there is a problem
                            with the <literal>authtoken</literal> configuration.</paragraph>
                    </list_item>
                </bullet_list>
                <target refid="extending-auth"></target>
            </section>
        </section>
        <section ids="extending-auth id2" names="extending\ auth extending_auth">
            <title>Extending Auth</title>
            <paragraph>TempAuth is written as wsgi middleware, so implementing your own auth is as
                easy as writing new wsgi middleware, and plugging it in to the proxy server.
                The <reference name="Swauth" refuri="https://github.com/openstack/swauth">Swauth</reference><target ids="swauth" names="swauth" refuri="https://github.com/openstack/swauth"></target> project is an example of
                an additional auth service.</paragraph>
            <paragraph>See <reference internal="True" refuri="development_auth"><inline classes="doc">Auth Server and Middleware</inline></reference> for detailed information on extending the
                auth system.</paragraph>
        </section>
    </section>
</document>
