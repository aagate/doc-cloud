<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/swift/doc/source/development_ondisk_backends.rst">
    <section ids="pluggable-on-disk-back-end-apis" names="pluggable\ on-disk\ back-end\ apis">
        <title>Pluggable On-Disk Back-end APIs</title>
        <paragraph>The internal REST API used between the proxy server and the account, container
            and object server is almost identical to public Swift REST API, but with a few
            internal extensions (for example, update an account with a new container).</paragraph>
        <paragraph>The pluggable back-end APIs for the three REST API servers (account,
            container, object) abstracts the needs for servicing the various REST APIs
            from the details of how data is laid out and stored on-disk.</paragraph>
        <paragraph>The APIs are documented in the reference implementations for all three
            servers. For historical reasons, the object server backend reference
            implementation module is named <title_reference>diskfile</title_reference>, while the account and container
            server backend reference implementation modules are named appropriately.</paragraph>
        <paragraph>This API is still under development and not yet finalized.</paragraph>
        <section ids="back-end-api-for-account-server-rest-apis" names="back-end\ api\ for\ account\ server\ rest\ apis">
            <title>Back-end API for Account Server REST APIs</title>
            <paragraph>Pluggable Back-end for Account Server</paragraph>
            <index entries=""></index>
            <desc desctype="class" domain="py" noindex="True" objtype="class">
                <desc_signature class="" first="False" fullname="AccountBroker" module="swift.account.backend"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.account.backend.</desc_addname><desc_name xml:space="preserve">AccountBroker</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">db_file</desc_parameter><desc_parameter xml:space="preserve">timeout=25</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter><desc_parameter xml:space="preserve">account=None</desc_parameter><desc_parameter xml:space="preserve">container=None</desc_parameter><desc_parameter xml:space="preserve">pending_timeout=None</desc_parameter><desc_parameter xml:space="preserve">stale_reads_ok=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Encapsulates working with an account database.</paragraph>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="AccountBroker" first="False" fullname="AccountBroker.create_account_stat_table" module="swift.account.backend"><desc_name xml:space="preserve">create_account_stat_table</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conn</desc_parameter><desc_parameter xml:space="preserve">put_timestamp</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create account_stat table which is specific to the account DB.
                                Not a part of Pluggable Back-ends, internal to the baseline code.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">conn</literal_strong> – DB connection object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">put_timestamp</literal_strong> – put timestamp</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="AccountBroker" first="False" fullname="AccountBroker.create_container_table" module="swift.account.backend"><desc_name xml:space="preserve">create_container_table</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conn</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create container table which is specific to the account DB.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">conn</literal_strong> – DB connection object</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="AccountBroker" first="False" fullname="AccountBroker.create_policy_stat_table" module="swift.account.backend"><desc_name xml:space="preserve">create_policy_stat_table</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conn</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create policy_stat table which is specific to the account DB.
                                Not a part of Pluggable Back-ends, internal to the baseline code.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">conn</literal_strong> – DB connection object</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="AccountBroker" first="False" fullname="AccountBroker.empty" module="swift.account.backend"><desc_name xml:space="preserve">empty</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Check if the account DB is empty.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>True if the database has no active containers.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="AccountBroker" first="False" fullname="AccountBroker.get_info" module="swift.account.backend"><desc_name xml:space="preserve">get_info</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get global data for the account.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>dict with keys: account, created_at, put_timestamp,
                                            delete_timestamp, status_changed_at, container_count,
                                            object_count, bytes_used, hash, id</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="AccountBroker" first="False" fullname="AccountBroker.get_policy_stats" module="swift.account.backend"><desc_name xml:space="preserve">get_policy_stats</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">do_migrations=False</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get global policy stats for the account.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">do_migrations</literal_strong> – boolean, if True the policy stat dicts will
                                            always include the ‘container_count’ key;
                                            otherwise it may be omitted on legacy databases
                                            until they are migrated.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>dict of policy stats where the key is the policy index and
                                            the value is a dictionary like {‘object_count’: M,
                                            ‘bytes_used’: N, ‘container_count’: L}</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="AccountBroker" first="False" fullname="AccountBroker.is_status_deleted" module="swift.account.backend"><desc_name xml:space="preserve">is_status_deleted</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Only returns true if the status field is set to DELETED.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="AccountBroker" first="False" fullname="AccountBroker.list_containers_iter" module="swift.account.backend"><desc_name xml:space="preserve">list_containers_iter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">limit</desc_parameter><desc_parameter xml:space="preserve">marker</desc_parameter><desc_parameter xml:space="preserve">end_marker</desc_parameter><desc_parameter xml:space="preserve">prefix</desc_parameter><desc_parameter xml:space="preserve">delimiter</desc_parameter><desc_parameter xml:space="preserve">reverse=False</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get a list of containers sorted by name starting at marker onward, up
                                to limit entries. Entries will begin with the prefix and will not have
                                the delimiter after the prefix.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">limit</literal_strong> – maximum number of entries to get</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">marker</literal_strong> – marker query</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">end_marker</literal_strong> – end marker query</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">prefix</literal_strong> – prefix query</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">delimiter</literal_strong> – delimiter for query</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">reverse</literal_strong> – reverse the result order.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>list of tuples of (name, object_count, bytes_used,
                                            put_timestamp, 0)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="AccountBroker" first="False" fullname="AccountBroker.merge_items" module="swift.account.backend"><desc_name xml:space="preserve">merge_items</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">item_list</desc_parameter><desc_parameter xml:space="preserve">source=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Merge items into the container table.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">item_list</literal_strong> – list of dictionaries of {‘name’, ‘put_timestamp’,
                                                    ‘delete_timestamp’, ‘object_count’, ‘bytes_used’,
                                                    ‘deleted’, ‘storage_policy_index’}</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">source</literal_strong> – if defined, update incoming_sync with the source</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="AccountBroker" first="False" fullname="AccountBroker.put_container" module="swift.account.backend"><desc_name xml:space="preserve">put_container</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">put_timestamp</desc_parameter><desc_parameter xml:space="preserve">delete_timestamp</desc_parameter><desc_parameter xml:space="preserve">object_count</desc_parameter><desc_parameter xml:space="preserve">bytes_used</desc_parameter><desc_parameter xml:space="preserve">storage_policy_index</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create a container with the given attributes.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">name</literal_strong> – name of the container to create</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">put_timestamp</literal_strong> – put_timestamp of the container to create</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">delete_timestamp</literal_strong> – delete_timestamp of the container to create</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">object_count</literal_strong> – number of objects in the container</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">bytes_used</literal_strong> – number of bytes used by the container</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">storage_policy_index</literal_strong> – the storage policy for this container</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
        </section>
        <section ids="back-end-api-for-container-server-rest-apis" names="back-end\ api\ for\ container\ server\ rest\ apis">
            <title>Back-end API for Container Server REST APIs</title>
            <paragraph>Pluggable Back-ends for Container Server</paragraph>
            <index entries=""></index>
            <desc desctype="class" domain="py" noindex="True" objtype="class">
                <desc_signature class="" first="False" fullname="ContainerBroker" module="swift.container.backend"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.container.backend.</desc_addname><desc_name xml:space="preserve">ContainerBroker</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">db_file</desc_parameter><desc_parameter xml:space="preserve">timeout=25</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter><desc_parameter xml:space="preserve">account=None</desc_parameter><desc_parameter xml:space="preserve">container=None</desc_parameter><desc_parameter xml:space="preserve">pending_timeout=None</desc_parameter><desc_parameter xml:space="preserve">stale_reads_ok=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Encapsulates working with a container database.</paragraph>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.create_container_info_table" module="swift.container.backend"><desc_name xml:space="preserve">create_container_info_table</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conn</desc_parameter><desc_parameter xml:space="preserve">put_timestamp</desc_parameter><desc_parameter xml:space="preserve">storage_policy_index</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create the container_info table which is specific to the container DB.
                                Not a part of Pluggable Back-ends, internal to the baseline code.
                                Also creates the container_stat view.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">conn</literal_strong> – DB connection object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">put_timestamp</literal_strong> – put timestamp</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">storage_policy_index</literal_strong> – storage policy index</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.create_object_table" module="swift.container.backend"><desc_name xml:space="preserve">create_object_table</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conn</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create the object table which is specific to the container DB.
                                Not a part of Pluggable Back-ends, internal to the baseline code.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">conn</literal_strong> – DB connection object</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.create_policy_stat_table" module="swift.container.backend"><desc_name xml:space="preserve">create_policy_stat_table</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conn</desc_parameter><desc_parameter xml:space="preserve">storage_policy_index=0</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create policy_stat table.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">conn</literal_strong> – DB connection object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">storage_policy_index</literal_strong> – the policy_index the container is
                                                    being created with</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.delete_object" module="swift.container.backend"><desc_name xml:space="preserve">delete_object</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">timestamp</desc_parameter><desc_parameter xml:space="preserve">storage_policy_index=0</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Mark an object deleted.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">name</literal_strong> – object name to be deleted</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">timestamp</literal_strong> – timestamp when the object was marked as deleted</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">storage_policy_index</literal_strong> – the storage policy index for the object</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.empty" module="swift.container.backend"><desc_name xml:space="preserve">empty</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Check if container DB is empty.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>True if the database has no active objects, False otherwise</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.get_info" module="swift.container.backend"><desc_name xml:space="preserve">get_info</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get global data for the container.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>dict with keys: account, container, created_at,
                                            put_timestamp, delete_timestamp, status_changed_at,
                                            object_count, bytes_used, reported_put_timestamp,
                                            reported_delete_timestamp, reported_object_count,
                                            reported_bytes_used, hash, id, x_container_sync_point1,
                                            x_container_sync_point2, and storage_policy_index.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.get_info_is_deleted" module="swift.container.backend"><desc_name xml:space="preserve">get_info_is_deleted</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get the is_deleted status and info for the container.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a tuple, in the form (info, is_deleted) info is a dict as
                                            returned by get_info and is_deleted is a boolean.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.get_misplaced_since" module="swift.container.backend"><desc_name xml:space="preserve">get_misplaced_since</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">start</desc_parameter><desc_parameter xml:space="preserve">count</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get a list of objects which are in a storage policy different
                                from the container’s storage policy.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">start</literal_strong> – last reconciler sync point</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">count</literal_strong> – maximum number of entries to get</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>list of dicts with keys: name, created_at, size,
                                            content_type, etag, storage_policy_index</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.list_objects_iter" module="swift.container.backend"><desc_name xml:space="preserve">list_objects_iter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">limit</desc_parameter><desc_parameter xml:space="preserve">marker</desc_parameter><desc_parameter xml:space="preserve">end_marker</desc_parameter><desc_parameter xml:space="preserve">prefix</desc_parameter><desc_parameter xml:space="preserve">delimiter</desc_parameter><desc_parameter xml:space="preserve">path=None</desc_parameter><desc_parameter xml:space="preserve">storage_policy_index=0</desc_parameter><desc_parameter xml:space="preserve">reverse=False</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get a list of objects sorted by name starting at marker onward, up
                                to limit entries.  Entries will begin with the prefix and will not
                                have the delimiter after the prefix.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">limit</literal_strong> – maximum number of entries to get</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">marker</literal_strong> – marker query</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">end_marker</literal_strong> – end marker query</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">prefix</literal_strong> – prefix query</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">delimiter</literal_strong> – delimiter for query</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">path</literal_strong> – if defined, will set the prefix and delimiter based on
                                                    the path</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">storage_policy_index</literal_strong> – storage policy index for query</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">reverse</literal_strong> – reverse the result order.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>list of tuples of (name, created_at, size, content_type,
                                            etag)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.merge_items" module="swift.container.backend"><desc_name xml:space="preserve">merge_items</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">item_list</desc_parameter><desc_parameter xml:space="preserve">source=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Merge items into the object table.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">item_list</literal_strong> – list of dictionaries of {‘name’, ‘created_at’,
                                                    ‘size’, ‘content_type’, ‘etag’, ‘deleted’,
                                                    ‘storage_policy_index’, ‘ctype_timestamp’,
                                                    ‘meta_timestamp’}</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">source</literal_strong> – if defined, update incoming_sync with the source</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.put_object" module="swift.container.backend"><desc_name xml:space="preserve">put_object</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">timestamp</desc_parameter><desc_parameter xml:space="preserve">size</desc_parameter><desc_parameter xml:space="preserve">content_type</desc_parameter><desc_parameter xml:space="preserve">etag</desc_parameter><desc_parameter xml:space="preserve">deleted=0</desc_parameter><desc_parameter xml:space="preserve">storage_policy_index=0</desc_parameter><desc_parameter xml:space="preserve">ctype_timestamp=None</desc_parameter><desc_parameter xml:space="preserve">meta_timestamp=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Creates an object in the DB with its metadata.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">name</literal_strong> – object name to be created</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">timestamp</literal_strong> – timestamp of when the object was created</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">size</literal_strong> – object size</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">content_type</literal_strong> – object content-type</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">etag</literal_strong> – object etag</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">deleted</literal_strong> – if True, marks the object as deleted and sets the
                                                    deleted_at timestamp to timestamp</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">storage_policy_index</literal_strong> – the storage policy index for the object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">ctype_timestamp</literal_strong> – timestamp of when content_type was last
                                                    updated</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">meta_timestamp</literal_strong> – timestamp of when metadata was last updated</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.reported" module="swift.container.backend"><desc_name xml:space="preserve">reported</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">put_timestamp</desc_parameter><desc_parameter xml:space="preserve">delete_timestamp</desc_parameter><desc_parameter xml:space="preserve">object_count</desc_parameter><desc_parameter xml:space="preserve">bytes_used</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Update reported stats, available with container’s <title_reference>get_info</title_reference>.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">put_timestamp</literal_strong> – put_timestamp to update</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">delete_timestamp</literal_strong> – delete_timestamp to update</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">object_count</literal_strong> – object_count to update</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">bytes_used</literal_strong> – bytes_used to update</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.set_storage_policy_index" module="swift.container.backend"><desc_name xml:space="preserve">set_storage_policy_index</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">policy_index</desc_parameter><desc_parameter xml:space="preserve">timestamp=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Update the container_stat policy_index and status_changed_at.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="function" domain="py" noindex="True" objtype="function">
                <desc_signature class="" first="False" fullname="update_new_item_from_existing" module="swift.container.backend"><desc_addname xml:space="preserve">swift.container.backend.</desc_addname><desc_name xml:space="preserve">update_new_item_from_existing</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">new_item</desc_parameter><desc_parameter xml:space="preserve">existing</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Compare the data and meta related timestamps of a new object item with
                        the timestamps of an existing object record, and update the new item
                        with data and/or meta related attributes from the existing record if
                        their timestamps are newer.</paragraph>
                    <paragraph>The multiple timestamps are encoded into a single string for storing
                        in the ‘created_at’ column of the objects db table.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">new_item</literal_strong> – A dict of object update attributes</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">existing</literal_strong> – A dict of existing object attributes</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>True if any attributes of the new item dict were found to be
                                    newer than the existing and therefore not updated, otherwise
                                    False implying that the updated item is equal to the existing.</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
        </section>
        <section ids="back-end-api-for-object-server-rest-apis" names="back-end\ api\ for\ object\ server\ rest\ apis">
            <title>Back-end API for Object Server REST APIs</title>
            <paragraph>Disk File Interface for the Swift Object Server</paragraph>
            <paragraph>The <title_reference>DiskFile</title_reference>, <title_reference>DiskFileWriter</title_reference> and <title_reference>DiskFileReader</title_reference> classes combined define
                the on-disk abstraction layer for supporting the object server REST API
                interfaces (excluding <title_reference>REPLICATE</title_reference>). Other implementations wishing to provide
                an alternative backend for the object server must implement the three
                classes. An example alternative implementation can be found in the
                <title_reference>mem_server.py</title_reference> and <title_reference>mem_diskfile.py</title_reference> modules along size this one.</paragraph>
            <paragraph>The <title_reference>DiskFileManager</title_reference> is a reference implemenation specific class and is not
                part of the backend API.</paragraph>
            <paragraph>The remaining methods in this module are considered implementation specific and
                are also not considered part of the backend API.</paragraph>
            <index entries=""></index>
            <desc desctype="class" domain="py" noindex="True" objtype="class">
                <desc_signature class="" first="False" fullname="AuditLocation" module="swift.obj.diskfile"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">AuditLocation</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">path</desc_parameter><desc_parameter xml:space="preserve">device</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">policy</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Represents an object location to be audited.</paragraph>
                    <paragraph>Other than being a bucket of data, the only useful thing this does is
                        stringify to a filesystem path so the auditor’s logs look okay.</paragraph>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="class" domain="py" noindex="True" objtype="class">
                <desc_signature class="" first="False" fullname="BaseDiskFile" module="swift.obj.diskfile"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">BaseDiskFile</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">mgr</desc_parameter><desc_parameter xml:space="preserve">device_path</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">account=None</desc_parameter><desc_parameter xml:space="preserve">container=None</desc_parameter><desc_parameter xml:space="preserve">obj=None</desc_parameter><desc_parameter xml:space="preserve">_datadir=None</desc_parameter><desc_parameter xml:space="preserve">policy=None</desc_parameter><desc_parameter xml:space="preserve">use_splice=False</desc_parameter><desc_parameter xml:space="preserve">pipe_size=None</desc_parameter><desc_parameter xml:space="preserve">use_linkat=False</desc_parameter><desc_parameter xml:space="preserve">open_expired=False</desc_parameter><desc_parameter xml:space="preserve">next_part_power=None</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Manage object files.</paragraph>
                    <paragraph>This specific implementation manages object files on a disk formatted with
                        a POSIX-compliant file system that supports extended attributes as
                        metadata on a file or directory.</paragraph>
                    <note>
                        <paragraph>The arguments to the constructor are considered implementation
                            specific. The API does not define the constructor arguments.</paragraph>
                        <paragraph>The following path format is used for data file locations:
                            &lt;devices_path/&lt;device_dir&gt;/&lt;datadir&gt;/&lt;partdir&gt;/&lt;suffixdir&gt;/&lt;hashdir&gt;/
                            &lt;datafile&gt;.&lt;ext&gt;</paragraph>
                    </note>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">mgr</literal_strong> – associated DiskFileManager instance</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">device_path</literal_strong> – path to the target device or drive</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">partition</literal_strong> – partition on the device in which the object lives</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">account</literal_strong> – account name for the object</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">container</literal_strong> – container name for the object</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">obj</literal_strong> – object name for the object</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">_datadir</literal_strong> – override the full datadir otherwise constructed here</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">policy</literal_strong> – the StoragePolicy instance</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_splice</literal_strong> – if true, use zero-copy splice() to send data</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">pipe_size</literal_strong> – size of pipe buffer used in zero-copy operations</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_linkat</literal_strong> – if True, use open() with linkat() to create obj file</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">open_expired</literal_strong> – if True, open() will not raise a DiskFileExpired if
                                            object is expired</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">next_part_power</literal_strong> – the next partition power to be used</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.create" module="swift.obj.diskfile"><desc_name xml:space="preserve">create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwds</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Context manager to create a file. We create a temporary file first, and
                                then return a DiskFileWriter object to encapsulate the state.</paragraph>
                            <note>
                                <paragraph>An implementation is not required to perform on-disk
                                    preallocations even if the parameter is specified. But if it does
                                    and it fails, it must raise a <title_reference>DiskFileNoSpace</title_reference> exception.</paragraph>
                            </note>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">size</literal_strong> – optional initial size of file to explicitly allocate on
                                            disk</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileNoSpace" refuri="misc#swift.common.exceptions.DiskFileNoSpace"><literal_strong>DiskFileNoSpace</literal_strong></reference> – if a size is specified and allocation fails</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.delete" module="swift.obj.diskfile"><desc_name xml:space="preserve">delete</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">timestamp</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Delete the object.</paragraph>
                            <paragraph>This implementation creates a tombstone file using the given
                                timestamp, and removes any older versions of the object file. Any
                                file that has an older timestamp than timestamp will be deleted.</paragraph>
                            <note>
                                <paragraph>An implementation is free to use or ignore the timestamp
                                    parameter.</paragraph>
                            </note>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">timestamp</literal_strong> – timestamp to compare with each file</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileError" refuri="misc#swift.common.exceptions.DiskFileError"><literal_strong>DiskFileError</literal_strong></reference> – this implementation will raise the same
                                            errors as the <title_reference>create()</title_reference> method.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="attribute" domain="py" noindex="True" objtype="attribute">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.durable_timestamp" module="swift.obj.diskfile"><desc_name xml:space="preserve">durable_timestamp</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Provides the timestamp of the newest data file found in the object
                                directory.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>A Timestamp instance, or None if no data file was found.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileNotOpen" refuri="misc#swift.common.exceptions.DiskFileNotOpen"><literal_strong>DiskFileNotOpen</literal_strong></reference> – if the open() method has not been previously
                                            called on this instance.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.get_datafile_metadata" module="swift.obj.diskfile"><desc_name xml:space="preserve">get_datafile_metadata</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Provide the datafile metadata for a previously opened object as a
                                dictionary. This is metadata that was included when the object was
                                first PUT, and does not include metadata set by any subsequent POST.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>object’s datafile metadata dictionary</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileNotOpen" refuri="misc#swift.common.exceptions.DiskFileNotOpen"><literal_strong>DiskFileNotOpen</literal_strong></reference> – if the
                                            <literal classes="xref py py-func">swift.obj.diskfile.DiskFile.open()</literal> method was not previously
                                            invoked</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.get_metadata" module="swift.obj.diskfile"><desc_name xml:space="preserve">get_metadata</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Provide the metadata for a previously opened object as a dictionary.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>object’s metadata dictionary</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileNotOpen" refuri="misc#swift.common.exceptions.DiskFileNotOpen"><literal_strong>DiskFileNotOpen</literal_strong></reference> – if the
                                            <literal classes="xref py py-func">swift.obj.diskfile.DiskFile.open()</literal> method was not previously
                                            invoked</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.get_metafile_metadata" module="swift.obj.diskfile"><desc_name xml:space="preserve">get_metafile_metadata</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Provide the metafile metadata for a previously opened object as a
                                dictionary. This is metadata that was written by a POST and does not
                                include any persistent metadata that was set by the original PUT.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>object’s .meta file metadata dictionary, or None if there is
                                            no .meta file</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileNotOpen" refuri="misc#swift.common.exceptions.DiskFileNotOpen"><literal_strong>DiskFileNotOpen</literal_strong></reference> – if the
                                            <literal classes="xref py py-func">swift.obj.diskfile.DiskFile.open()</literal> method was not previously
                                            invoked</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.open" module="swift.obj.diskfile"><desc_name xml:space="preserve">open</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Open the object.</paragraph>
                            <paragraph>This implementation opens the data file representing the object, reads
                                the associated metadata in the extended attributes, additionally
                                combining metadata from fast-POST <title_reference>.meta</title_reference> files.</paragraph>
                            <note>
                                <paragraph>An implementation is allowed to raise any of the following
                                    exceptions, but is only required to raise <title_reference>DiskFileNotExist</title_reference> when
                                    the object representation does not exist.</paragraph>
                            </note>
                            <field_list>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileCollision" refuri="misc#swift.common.exceptions.DiskFileCollision"><literal_strong>DiskFileCollision</literal_strong></reference> – on name mis-match with metadata</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileNotExist" refuri="misc#swift.common.exceptions.DiskFileNotExist"><literal_strong>DiskFileNotExist</literal_strong></reference> – if the object does not exist</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileDeleted" refuri="misc#swift.common.exceptions.DiskFileDeleted"><literal_strong>DiskFileDeleted</literal_strong></reference> – if the object was previously deleted</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileQuarantined" refuri="misc#swift.common.exceptions.DiskFileQuarantined"><literal_strong>DiskFileQuarantined</literal_strong></reference> – if while reading metadata of the file
                                                    some data did pass cross checks</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>itself for use as a context manager</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.read_metadata" module="swift.obj.diskfile"><desc_name xml:space="preserve">read_metadata</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return the metadata for an object without requiring the caller to open
                                the object first.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>metadata dictionary for an object</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileError" refuri="misc#swift.common.exceptions.DiskFileError"><literal_strong>DiskFileError</literal_strong></reference> – this implementation will raise the same
                                            errors as the <title_reference>open()</title_reference> method.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.reader" module="swift.obj.diskfile"><desc_name xml:space="preserve">reader</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">keep_cache=False</desc_parameter><desc_parameter xml:space="preserve">_quarantine_hook=&lt;function &lt;lambda&gt;&gt;</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return a <reference internal="True" reftitle="swift.common.swob.Response" refuri="misc#swift.common.swob.Response"><literal classes="xref py py-class">swift.common.swob.Response</literal></reference> class compatible
                                “<title_reference>app_iter</title_reference>” object as defined by
                                <reference internal="True" reftitle="swift.obj.diskfile.DiskFileReader" refuri="object#swift.obj.diskfile.DiskFileReader"><literal classes="xref py py-class">swift.obj.diskfile.DiskFileReader</literal></reference>.</paragraph>
                            <paragraph>For this implementation, the responsibility of closing the open file
                                is passed to the <reference internal="True" reftitle="swift.obj.diskfile.DiskFileReader" refuri="object#swift.obj.diskfile.DiskFileReader"><literal classes="xref py py-class">swift.obj.diskfile.DiskFileReader</literal></reference> object.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">keep_cache</literal_strong> – caller’s preference for keeping data read in the
                                                    OS buffer cache</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">_quarantine_hook</literal_strong> – 1-arg callable called when obj quarantined;
                                                    the arg is the reason for quarantine.
                                                    Default is to ignore it.
                                                    Not needed by the REST layer.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a <reference internal="True" reftitle="swift.obj.diskfile.DiskFileReader" refuri="object#swift.obj.diskfile.DiskFileReader"><literal classes="xref py py-class">swift.obj.diskfile.DiskFileReader</literal></reference> object</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.write_metadata" module="swift.obj.diskfile"><desc_name xml:space="preserve">write_metadata</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">metadata</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Write a block of metadata to an object without requiring the caller to
                                create the object first. Supports fast-POST behavior semantics.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">metadata</literal_strong> – dictionary of metadata to be associated with the
                                            object</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileError" refuri="misc#swift.common.exceptions.DiskFileError"><literal_strong>DiskFileError</literal_strong></reference> – this implementation will raise the same
                                            errors as the <title_reference>create()</title_reference> method.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="class" domain="py" noindex="True" objtype="class">
                <desc_signature class="" first="False" fullname="BaseDiskFileManager" module="swift.obj.diskfile"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">BaseDiskFileManager</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter><desc_parameter xml:space="preserve">logger</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Management class for devices, providing common place for shared parameters
                        and methods not provided by the DiskFile class (which primarily services
                        the object server REST API layer).</paragraph>
                    <paragraph>The <title_reference>get_diskfile()</title_reference> method is how this implementation creates a <title_reference>DiskFile</title_reference>
                        object.</paragraph>
                    <note>
                        <paragraph>This class is reference implementation specific and not part of the
                            pluggable on-disk backend API.</paragraph>
                    </note>
                    <note>
                        <paragraph>TODO(portante): Not sure what the right name to recommend here, as
                            “manager” seemed generic enough, though suggestions are welcome.</paragraph>
                    </note>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">conf</literal_strong> – caller provided configuration object</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">logger</literal_strong> – caller provided logger</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.cleanup_ondisk_files" module="swift.obj.diskfile"><desc_name xml:space="preserve">cleanup_ondisk_files</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">hsh_path</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Clean up on-disk files that are obsolete and gather the set of valid
                                on-disk files for an object.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">hsh_path</literal_strong> – object hash path</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">frag_index</literal_strong> – if set, search for a specific fragment index .data
                                                    file, otherwise accept the first valid .data file</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a dict that may contain: valid on disk files keyed by their
                                            filename extension; a list of obsolete files stored under the
                                            key ‘obsolete’; a list of files remaining in the directory,
                                            reverse sorted, stored under the key ‘files’.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.construct_dev_path" module="swift.obj.diskfile"><desc_name xml:space="preserve">construct_dev_path</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">device</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Construct the path to a device without checking if it is mounted.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">device</literal_strong> – name of target device</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>full path to the device</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.get_dev_path" module="swift.obj.diskfile"><desc_name xml:space="preserve">get_dev_path</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">device</desc_parameter><desc_parameter xml:space="preserve">mount_check=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return the path to a device, first checking to see if either it
                                is a proper mount point, or at least a directory depending on
                                the mount_check configuration option.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">device</literal_strong> – name of target device</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">mount_check</literal_strong> – whether or not to check mountedness of device.
                                                    Defaults to bool(self.mount_check).</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>full path to the device, None if the path to the device is
                                            not a proper mount point or directory.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.get_diskfile" module="swift.obj.diskfile"><desc_name xml:space="preserve">get_diskfile</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">device</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">obj</desc_parameter><desc_parameter xml:space="preserve">policy</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns a BaseDiskFile instance for an object based on the object’s
                                partition, path parts and policy.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">device</literal_strong> – name of target device</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">partition</literal_strong> – partition on device in which the object lives</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – account name for the object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> – container name for the object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">obj</literal_strong> – object name for the object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">policy</literal_strong> – the StoragePolicy instance</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.get_diskfile_from_audit_location" module="swift.obj.diskfile"><desc_name xml:space="preserve">get_diskfile_from_audit_location</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">audit_location</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns a BaseDiskFile instance for an object at the given
                                AuditLocation.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">audit_location</literal_strong> – object location to be audited</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.get_diskfile_from_hash" module="swift.obj.diskfile"><desc_name xml:space="preserve">get_diskfile_from_hash</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">device</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">object_hash</desc_parameter><desc_parameter xml:space="preserve">policy</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns a DiskFile instance for an object at the given
                                object_hash. Just in case someone thinks of refactoring, be
                                sure DiskFileDeleted is <emphasis>not</emphasis> raised, but the DiskFile
                                instance representing the tombstoned object is returned
                                instead.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">device</literal_strong> – name of target device</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">partition</literal_strong> – partition on the device in which the object lives</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">object_hash</literal_strong> – the hash of an object path</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">policy</literal_strong> – the StoragePolicy instance</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileNotExist" refuri="misc#swift.common.exceptions.DiskFileNotExist"><literal_strong>DiskFileNotExist</literal_strong></reference> – if the object does not exist</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>an instance of BaseDiskFile</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.get_hashes" module="swift.obj.diskfile"><desc_name xml:space="preserve">get_hashes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">device</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">suffixes</desc_parameter><desc_parameter xml:space="preserve">policy</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">device</literal_strong> – name of target device</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">partition</literal_strong> – partition name</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">suffixes</literal_strong> – a list of suffix directories to be recalculated</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">policy</literal_strong> – the StoragePolicy instance</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a dictionary that maps suffix directories</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.get_ondisk_files" module="swift.obj.diskfile"><desc_name xml:space="preserve">get_ondisk_files</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">files</desc_parameter><desc_parameter xml:space="preserve">datadir</desc_parameter><desc_parameter xml:space="preserve">verify=True</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Given a simple list of files names, determine the files that constitute
                                a valid fileset i.e. a set of files that defines the state of an
                                object, and determine the files that are obsolete and could be deleted.
                                Note that some files may fall into neither category.</paragraph>
                            <paragraph>If a file is considered part of a valid fileset then its info dict will
                                be added to the results dict, keyed by &lt;extension&gt;_info. Any files that
                                are no longer required will have their info dicts added to a list
                                stored under the key ‘obsolete’.</paragraph>
                            <paragraph>The results dict will always contain entries with keys ‘ts_file’,
                                ‘data_file’ and ‘meta_file’. Their values will be the fully qualified
                                path to a file of the corresponding type if there is such a file in the
                                valid fileset, or None.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">files</literal_strong> – a list of file names.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">datadir</literal_strong> – directory name files are from.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">verify</literal_strong> – if True verify that the ondisk file contract has not
                                                    been violated, otherwise do not verify.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph><definition_list><definition_list_item><term>a dict that will contain keys:</term><definition><paragraph>ts_file   -&gt; path to a .ts file or None
                                                            data_file -&gt; path to a .data file or None
                                                            meta_file -&gt; path to a .meta file or None
                                                            ctype_file -&gt; path to a .meta file or None</paragraph></definition></definition_list_item><definition_list_item><term>and may contain keys:</term><definition><paragraph>ts_info   -&gt; a file info dict for a .ts file
                                                            data_info -&gt; a file info dict for a .data file
                                                            meta_info -&gt; a file info dict for a .meta file
                                                            ctype_info -&gt; a file info dict for a .meta file which
                                                            contains the content-type value
                                                            unexpected -&gt; a list of file paths for unexpected
                                                            files
                                                            possible_reclaim -&gt; a list of file info dicts for possible
                                                            reclaimable files
                                                            obsolete  -&gt; a list of file info dicts for obsolete files</paragraph></definition></definition_list_item></definition_list></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.make_on_disk_filename" module="swift.obj.diskfile"><desc_name xml:space="preserve">make_on_disk_filename</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">timestamp</desc_parameter><desc_parameter xml:space="preserve">ext=None</desc_parameter><desc_parameter xml:space="preserve">ctype_timestamp=None</desc_parameter><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns filename for given timestamp.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">timestamp</literal_strong> – the object timestamp, an instance of
                                                    <reference internal="True" reftitle="swift.common.utils.Timestamp" refuri="misc#swift.common.utils.Timestamp"><literal classes="xref py py-class">Timestamp</literal></reference></paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">ext</literal_strong> – an optional string representing a file extension to be
                                                    appended to the returned file name</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">ctype_timestamp</literal_strong> – an optional content-type timestamp, an instance
                                                    of <reference internal="True" reftitle="swift.common.utils.Timestamp" refuri="misc#swift.common.utils.Timestamp"><literal classes="xref py py-class">Timestamp</literal></reference></paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a file name</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.object_audit_location_generator" module="swift.obj.diskfile"><desc_name xml:space="preserve">object_audit_location_generator</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">device_dirs=None</desc_parameter><desc_parameter xml:space="preserve">auditor_type='ALL'</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Yield an AuditLocation for all objects stored under device_dirs.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">device_dirs</literal_strong> – directory of target device</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">auditor_type</literal_strong> – either ALL or ZBF</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.parse_on_disk_filename" module="swift.obj.diskfile"><desc_name xml:space="preserve">parse_on_disk_filename</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">filename</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Parse an on disk file name.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">filename</literal_strong> – the file name including extension</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph><paragraph>a dict, with keys for timestamp, ext and ctype_timestamp:</paragraph><bullet_list bullet="*"><list_item><paragraph>timestamp is a <reference internal="True" reftitle="swift.common.utils.Timestamp" refuri="misc#swift.common.utils.Timestamp"><literal classes="xref py py-class">Timestamp</literal></reference></paragraph></list_item><list_item><paragraph>ctype_timestamp is a <reference internal="True" reftitle="swift.common.utils.Timestamp" refuri="misc#swift.common.utils.Timestamp"><literal classes="xref py py-class">Timestamp</literal></reference> or
                                                        None for .meta files, otherwise None</paragraph></list_item><list_item><paragraph>ext is a string, the file extension including the leading dot or
                                                        the empty string if the filename has no extension.</paragraph></list_item></bullet_list><paragraph>Subclasses may override this method to add further keys to the
                                                returned dict.</paragraph></paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileError" refuri="misc#swift.common.exceptions.DiskFileError"><literal_strong>DiskFileError</literal_strong></reference> – if any part of the filename is not able to be
                                            validated.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.pickle_async_update" module="swift.obj.diskfile"><desc_name xml:space="preserve">pickle_async_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">device</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">obj</desc_parameter><desc_parameter xml:space="preserve">data</desc_parameter><desc_parameter xml:space="preserve">timestamp</desc_parameter><desc_parameter xml:space="preserve">policy</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Write data describing a container update notification to a pickle file
                                in the async_pending directory.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">device</literal_strong> – name of target device</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – account name for the object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> – container name for the object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">obj</literal_strong> – object name for the object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">data</literal_strong> – update data to be written to pickle file</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">timestamp</literal_strong> – a Timestamp</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">policy</literal_strong> – the StoragePolicy instance</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.replication_lock" module="swift.obj.diskfile"><desc_name xml:space="preserve">replication_lock</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwds</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>A context manager that will lock on the device given, if
                                configured to do so.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">device</literal_strong> – name of target device</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.ReplicationLockTimeout" refuri="misc#swift.common.exceptions.ReplicationLockTimeout"><literal_strong>ReplicationLockTimeout</literal_strong></reference> – If the lock on the device
                                            cannot be granted within the configured timeout.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.yield_hashes" module="swift.obj.diskfile"><desc_name xml:space="preserve">yield_hashes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">device</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">policy</desc_parameter><desc_parameter xml:space="preserve">suffixes=None</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Yields tuples of (hash_only, timestamps) for object
                                information stored for the given device, partition, and
                                (optionally) suffixes. If suffixes is None, all stored
                                suffixes will be searched for object hashes. Note that if
                                suffixes is not None but empty, such as [], then nothing will
                                be yielded.</paragraph>
                            <paragraph>timestamps is a dict which may contain items mapping:</paragraph>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>ts_data -&gt; timestamp of data or tombstone file,</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>ts_meta -&gt; timestamp of meta file, if one exists</paragraph>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term>ts_ctype -&gt; timestamp of meta file containing most recent</term>
                                            <definition>
                                                <paragraph>content-type value, if one exists</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                            </bullet_list>
                            <paragraph>where timestamps are instances of
                                <reference internal="True" reftitle="swift.common.utils.Timestamp" refuri="misc#swift.common.utils.Timestamp"><literal classes="xref py py-class">Timestamp</literal></reference></paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">device</literal_strong> – name of target device</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">partition</literal_strong> – partition name</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">policy</literal_strong> – the StoragePolicy instance</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">suffixes</literal_strong> – optional list of suffix directories to be searched</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.yield_suffixes" module="swift.obj.diskfile"><desc_name xml:space="preserve">yield_suffixes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">device</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">policy</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Yields tuples of (full_path, suffix_only) for suffixes stored
                                on the given device and partition.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">device</literal_strong> – name of target device</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">partition</literal_strong> – partition name</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">policy</literal_strong> – the StoragePolicy instance</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="class" domain="py" noindex="True" objtype="class">
                <desc_signature class="" first="False" fullname="BaseDiskFileReader" module="swift.obj.diskfile"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">BaseDiskFileReader</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">fp</desc_parameter><desc_parameter xml:space="preserve">data_file</desc_parameter><desc_parameter xml:space="preserve">obj_size</desc_parameter><desc_parameter xml:space="preserve">etag</desc_parameter><desc_parameter xml:space="preserve">disk_chunk_size</desc_parameter><desc_parameter xml:space="preserve">keep_cache_size</desc_parameter><desc_parameter xml:space="preserve">device_path</desc_parameter><desc_parameter xml:space="preserve">logger</desc_parameter><desc_parameter xml:space="preserve">quarantine_hook</desc_parameter><desc_parameter xml:space="preserve">use_splice</desc_parameter><desc_parameter xml:space="preserve">pipe_size</desc_parameter><desc_parameter xml:space="preserve">diskfile</desc_parameter><desc_parameter xml:space="preserve">keep_cache=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Encapsulation of the WSGI read context for servicing GET REST API
                        requests. Serves as the context manager object for the
                        <reference internal="True" reftitle="swift.obj.diskfile.DiskFile" refuri="object#swift.obj.diskfile.DiskFile"><literal classes="xref py py-class">swift.obj.diskfile.DiskFile</literal></reference> class’s
                        <literal classes="xref py py-func">swift.obj.diskfile.DiskFile.reader()</literal> method.</paragraph>
                    <note>
                        <paragraph>The quarantining behavior of this method is considered implementation
                            specific, and is not required of the API.</paragraph>
                    </note>
                    <note>
                        <paragraph>The arguments to the constructor are considered implementation
                            specific. The API does not define the constructor arguments.</paragraph>
                    </note>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">fp</literal_strong> – open file object pointer reference</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">data_file</literal_strong> – on-disk data file name for the object</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">obj_size</literal_strong> – verified on-disk size of the object</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">etag</literal_strong> – expected metadata etag value for entire file</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">disk_chunk_size</literal_strong> – size of reads from disk in bytes</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">keep_cache_size</literal_strong> – maximum object size that will be kept in cache</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">device_path</literal_strong> – on-disk device path, used when quarantining an obj</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">logger</literal_strong> – logger caller wants this object to use</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">quarantine_hook</literal_strong> – 1-arg callable called w/reason when quarantined</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_splice</literal_strong> – if true, use zero-copy splice() to send data</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">pipe_size</literal_strong> – size of pipe buffer used in zero-copy operations</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">diskfile</literal_strong> – the diskfile creating this DiskFileReader instance</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">keep_cache</literal_strong> – should resulting reads be kept in the buffer cache</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFileReader" first="False" fullname="BaseDiskFileReader.app_iter_range" module="swift.obj.diskfile"><desc_name xml:space="preserve">app_iter_range</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">start</desc_parameter><desc_parameter xml:space="preserve">stop</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns an iterator over the data file for range (start, stop)</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFileReader" first="False" fullname="BaseDiskFileReader.app_iter_ranges" module="swift.obj.diskfile"><desc_name xml:space="preserve">app_iter_ranges</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ranges</desc_parameter><desc_parameter xml:space="preserve">content_type</desc_parameter><desc_parameter xml:space="preserve">boundary</desc_parameter><desc_parameter xml:space="preserve">size</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns an iterator over the data file for a set of ranges</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFileReader" first="False" fullname="BaseDiskFileReader.close" module="swift.obj.diskfile"><desc_name xml:space="preserve">close</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Close the open file handle if present.</paragraph>
                            <paragraph>For this specific implementation, this method will handle quarantining
                                the file if necessary.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFileReader" first="False" fullname="BaseDiskFileReader.zero_copy_send" module="swift.obj.diskfile"><desc_name xml:space="preserve">zero_copy_send</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">wsockfd</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Does some magic with splice() and tee() to move stuff from disk to
                                network without ever touching userspace.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">wsockfd</literal_strong> – file descriptor (integer) of the socket out which to
                                            send data</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="class" domain="py" noindex="True" objtype="class">
                <desc_signature class="" first="False" fullname="BaseDiskFileWriter" module="swift.obj.diskfile"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">BaseDiskFileWriter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">datadir</desc_parameter><desc_parameter xml:space="preserve">fd</desc_parameter><desc_parameter xml:space="preserve">tmppath</desc_parameter><desc_parameter xml:space="preserve">bytes_per_sync</desc_parameter><desc_parameter xml:space="preserve">diskfile</desc_parameter><desc_parameter xml:space="preserve">next_part_power</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Encapsulation of the write context for servicing PUT REST API
                        requests. Serves as the context manager object for the
                        <reference internal="True" reftitle="swift.obj.diskfile.DiskFile" refuri="object#swift.obj.diskfile.DiskFile"><literal classes="xref py py-class">swift.obj.diskfile.DiskFile</literal></reference> class’s
                        <literal classes="xref py py-func">swift.obj.diskfile.DiskFile.create()</literal> method.</paragraph>
                    <note>
                        <paragraph>It is the responsibility of the
                            <literal classes="xref py py-func">swift.obj.diskfile.DiskFile.create()</literal> method context manager to
                            close the open file descriptor.</paragraph>
                    </note>
                    <note>
                        <paragraph>The arguments to the constructor are considered implementation
                            specific. The API does not define the constructor arguments.</paragraph>
                    </note>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> – name of object from REST API</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">datadir</literal_strong> – on-disk directory object will end up in on
                                            <reference internal="True" reftitle="swift.obj.diskfile.DiskFileWriter.put" refuri="object#swift.obj.diskfile.DiskFileWriter.put"><literal classes="xref py py-func">swift.obj.diskfile.DiskFileWriter.put()</literal></reference></paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">fd</literal_strong> – open file descriptor of temporary file to receive data</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">tmppath</literal_strong> – full path name of the opened file descriptor</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bytes_per_sync</literal_strong> – number bytes written between sync calls</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">diskfile</literal_strong> – the diskfile creating this DiskFileWriter instance</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">next_part_power</literal_strong> – the next partition power to be used</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFileWriter" first="False" fullname="BaseDiskFileWriter.commit" module="swift.obj.diskfile"><desc_name xml:space="preserve">commit</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">timestamp</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Perform any operations necessary to mark the object as durable. For
                                replication policy type this is a no-op.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">timestamp</literal_strong> – object put timestamp, an instance of
                                            <reference internal="True" reftitle="swift.common.utils.Timestamp" refuri="misc#swift.common.utils.Timestamp"><literal classes="xref py py-class">Timestamp</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFileWriter" first="False" fullname="BaseDiskFileWriter.put" module="swift.obj.diskfile"><desc_name xml:space="preserve">put</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">metadata</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Finalize writing the file on disk.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">metadata</literal_strong> – dictionary of metadata to be associated with the
                                            object</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="BaseDiskFileWriter" first="False" fullname="BaseDiskFileWriter.write" module="swift.obj.diskfile"><desc_name xml:space="preserve">write</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">chunk</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Write a chunk of data to disk. All invocations of this method must
                                come before invoking the :func:</paragraph>
                            <paragraph>For this implementation, the data is written into a temporary file.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">chunk</literal_strong> – the chunk of data to write as a string object</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>the total number of bytes written to an object</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="function" domain="py" noindex="True" objtype="function">
                <desc_signature class="" first="False" fullname="consolidate_hashes" module="swift.obj.diskfile"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">consolidate_hashes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">partition_dir</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Take what’s in hashes.pkl and hashes.invalid, combine them, write the
                        result back to hashes.pkl, and clear out hashes.invalid.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">partition_dir</literal_strong> – absolute path to partition dir containing hashes.pkl
                                    and hashes.invalid</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a dict, the suffix hashes (if any), the key ‘valid’ will be False
                                    if hashes.pkl is corrupt, cannot be read or does not exist</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="function" domain="py" noindex="True" objtype="function">
                <desc_signature class="" first="False" fullname="extract_policy" module="swift.obj.diskfile"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">extract_policy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">obj_path</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Extracts the policy for an object (based on the name of the objects
                        directory) given the device-relative path to the object. Returns None in
                        the event that the path is malformed in some way.</paragraph>
                    <paragraph>The device-relative path is everything after the mount point; for example:</paragraph>
                    <definition_list>
                        <definition_list_item>
                            <term>/srv/node/d42/objects-5/30/179/</term>
                            <definition>
                                <paragraph>485dc017205a81df3af616d917c90179/1401811134.873649.data</paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                    <paragraph>would have device-relative path:</paragraph>
                    <paragraph>objects-5/30/179/485dc017205a81df3af616d917c90179/1401811134.873649.data</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">obj_path</literal_strong> – device-relative path of an object, or the full path</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a <reference internal="True" reftitle="swift.common.storage_policy.BaseStoragePolicy" refuri="misc#swift.common.storage_policy.BaseStoragePolicy"><literal classes="xref py py-class">BaseStoragePolicy</literal></reference> or None</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="function" domain="py" noindex="True" objtype="function">
                <desc_signature class="" first="False" fullname="get_part_path" module="swift.obj.diskfile"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">get_part_path</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">dev_path</desc_parameter><desc_parameter xml:space="preserve">policy</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Given the device path, policy, and partition, returns the full
                        path to the partition</paragraph>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="function" domain="py" noindex="True" objtype="function">
                <desc_signature class="" first="False" fullname="invalidate_hash" module="swift.obj.diskfile"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">invalidate_hash</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">suffix_dir</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Invalidates the hash for a suffix_dir in the partition’s hashes file.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">suffix_dir</literal_strong> – absolute path to suffix dir whose hash needs
                                    invalidating</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="function" domain="py" noindex="True" objtype="function">
                <desc_signature class="" first="False" fullname="object_audit_location_generator" module="swift.obj.diskfile"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">object_audit_location_generator</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">devices</desc_parameter><desc_parameter xml:space="preserve">mount_check=True</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter><desc_parameter xml:space="preserve">device_dirs=None</desc_parameter><desc_parameter xml:space="preserve">auditor_type='ALL'</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Given a devices path (e.g. “/srv/node”), yield an AuditLocation for all
                        objects stored under that directory if device_dirs isn’t set.  If
                        device_dirs is set, only yield AuditLocation for the objects under the
                        entries in device_dirs. The AuditLocation only knows the path to the hash
                        directory, not to the .data file therein (if any). This is to avoid a
                        double listdir(hash_dir); the DiskFile object will always do one, so
                        we don’t.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">devices</literal_strong> – parent directory of the devices to be audited</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">mount_check</literal_strong> – flag to check if a mount check should be performed
                                            on devices</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">logger</literal_strong> – a logger object</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">device_dirs</literal_strong> – a list of directories under devices to traverse</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">auditor_type</literal_strong> – either ALL or ZBF</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="function" domain="py" noindex="True" objtype="function">
                <desc_signature class="" first="False" fullname="quarantine_renamer" module="swift.obj.diskfile"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">quarantine_renamer</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">device_path</desc_parameter><desc_parameter xml:space="preserve">corrupted_file_path</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>In the case that a file is corrupted, move it to a quarantined
                        area to allow replication to fix it.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Params device_path</field_name>
                            <field_body>
                                <paragraph>The path to the device the corrupted file is on.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Params corrupted_file_path</field_name>
                            <field_body>
                                <paragraph>The path to the file you want quarantined.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>path (str) of directory the file was moved to</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>OSError</literal_strong> – re-raises non errno.EEXIST / errno.ENOTEMPTY
                                    exceptions from rename</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="function" domain="py" noindex="True" objtype="function">
                <desc_signature class="" first="False" fullname="read_hashes" module="swift.obj.diskfile"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">read_hashes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">partition_dir</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Read the existing hashes.pkl</paragraph>
                    <field_list>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a dict, the suffix hashes (if any), the key ‘valid’ will be False
                                    if hashes.pkl is corrupt, cannot be read or does not exist</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="function" domain="py" noindex="True" objtype="function">
                <desc_signature class="" first="False" fullname="read_metadata" module="swift.obj.diskfile"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">read_metadata</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">fd</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Helper function to read the pickled metadata from an object file.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">fd</literal_strong> – file descriptor or filename to load the metadata from</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>dictionary of metadata</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="function" domain="py" noindex="True" objtype="function">
                <desc_signature class="" first="False" fullname="relink_paths" module="swift.obj.diskfile"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">relink_paths</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">target_path</desc_parameter><desc_parameter xml:space="preserve">new_target_path</desc_parameter><desc_parameter xml:space="preserve">check_existing=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Hard-links a file located in target_path using the second path
                        new_target_path. Creates intermediate directories if required.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">target_path</literal_strong> – current absolute filename</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">new_target_path</literal_strong> – new absolute filename for the hardlink</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">check_existing</literal_strong> – if True, check whether the link is already present
                                            before attempting to create a new one</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="function" domain="py" noindex="True" objtype="function">
                <desc_signature class="" first="False" fullname="strip_self" module="swift.obj.diskfile"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">strip_self</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">f</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Wrapper to attach module level functions to base class.</paragraph>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="function" domain="py" noindex="True" objtype="function">
                <desc_signature class="" first="False" fullname="write_hashes" module="swift.obj.diskfile"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">write_hashes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">partition_dir</desc_parameter><desc_parameter xml:space="preserve">hashes</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Write hashes to hashes.pkl</paragraph>
                    <paragraph>The updated key is added to hashes before it is written.</paragraph>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="function" domain="py" noindex="True" objtype="function">
                <desc_signature class="" first="False" fullname="write_metadata" module="swift.obj.diskfile"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">write_metadata</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">fd</desc_parameter><desc_parameter xml:space="preserve">metadata</desc_parameter><desc_parameter xml:space="preserve">xattr_size=65536</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Helper function to write pickled metadata for an object file.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">fd</literal_strong> – file descriptor or filename to write the metadata</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">metadata</literal_strong> – metadata to write</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
        </section>
    </section>
</document>
