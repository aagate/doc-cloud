<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/swift/doc/source/development_guidelines.rst">
    <section ids="development-guidelines" names="development\ guidelines">
        <title>Development Guidelines</title>
        <section ids="coding-guidelines" names="coding\ guidelines">
            <title>Coding Guidelines</title>
            <paragraph>For the most part we try to follow PEP 8 guidelines which can be viewed
                here: <reference refuri="http://www.python.org/dev/peps/pep-0008/">http://www.python.org/dev/peps/pep-0008/</reference></paragraph>
        </section>
        <section ids="testing-guidelines" names="testing\ guidelines">
            <title>Testing Guidelines</title>
            <paragraph>Swift has a comprehensive suite of tests and pep8 checks that are run on all
                submitted code, and it is recommended that developers execute the tests
                themselves to catch regressions early.  Developers are also expected to keep
                the test suite up-to-date with any submitted code changes.</paragraph>
            <paragraph>Swift’s tests and pep8 checks can be executed in an isolated environment
                with <literal>tox</literal>: <reference refuri="http://tox.testrun.org/">http://tox.testrun.org/</reference></paragraph>
            <paragraph>To execute the tests:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Ensure <literal>pip</literal> and <literal>virtualenv</literal> are upgraded to satisfy the version
                        requirements listed in the OpenStack <reference name="global requirements" refuri="https://github.com/openstack/requirements/blob/master/global-requirements.txt">global requirements</reference>:</paragraph>
                    <literal_block xml:space="preserve">pip install pip -U
pip install virtualenv -U</literal_block>
                </list_item>
            </bullet_list>
            <target ids="global-requirements" names="global\ requirements" refuri="https://github.com/openstack/requirements/blob/master/global-requirements.txt"></target>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Install <literal>tox</literal>:</paragraph>
                    <literal_block xml:space="preserve">pip install tox</literal_block>
                </list_item>
                <list_item>
                    <paragraph>Generate list of  distribution packages to install for testing:</paragraph>
                    <literal_block xml:space="preserve">tox -e bindep</literal_block>
                    <paragraph>Now install these packages using your distribution package manager
                        like apt-get, dnf, yum, or zypper.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Run <literal>tox</literal> from the root of the swift repo:</paragraph>
                    <literal_block xml:space="preserve">tox</literal_block>
                </list_item>
            </bullet_list>
            <note>
                <paragraph>If you installed using <literal>cd ~/swift; sudo python setup.py develop</literal>, you may
                    need to do <literal>cd ~/swift; sudo chown -R ${USER}:${USER} swift.egg-info</literal> prior
                    to running <literal>tox</literal>.</paragraph>
            </note>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>By default <literal>tox</literal> will run all of the unit test and pep8 checks listed in
                        the <literal>tox.ini</literal> file <literal>envlist</literal> option. A subset of the test environments
                        can be specified on the <literal>tox</literal> command line or by setting the <literal>TOXENV</literal>
                        environment variable. For example, to run only the pep8 checks and python2.7
                        unit tests use:</paragraph>
                    <literal_block xml:space="preserve">tox -e pep8,py27</literal_block>
                    <paragraph>or:</paragraph>
                    <literal_block xml:space="preserve">TOXENV=py27,pep8 tox</literal_block>
                </list_item>
            </bullet_list>
            <note>
                <paragraph>As of <literal>tox</literal> version 2.0.0, most environment variables are not automatically
                    passed to the test environment. Swift’s <literal>tox.ini</literal> overrides this default
                    behavior so that variable names matching <literal>SWIFT_*</literal> and <literal>*_proxy</literal> will be
                    passed, but you may need to run <literal>tox --recreate</literal> for this to take effect
                    after upgrading from <literal>tox</literal> &lt;2.0.0.</paragraph>
                <paragraph>Conversely, if you do not want those environment variables to be passed to
                    the test environment then you will need to unset them before calling <literal>tox</literal>.</paragraph>
                <paragraph>Also, if you ever encounter DistributionNotFound, try to use <literal>tox
--recreate</literal> or remove the <literal>.tox</literal> directory to force <literal>tox</literal> to recreate the
                    dependency list.</paragraph>
            </note>
            <paragraph>Swift’s functional tests may be executed against a <reference internal="True" refuri="development_saio"><inline classes="doc">SAIO - Swift All In One</inline></reference> or
                other running Swift cluster using the command:</paragraph>
            <literal_block xml:space="preserve">tox -e func</literal_block>
            <paragraph>The endpoint and authorization credentials to be used by functional tests
                should be configured in the <literal>test.conf</literal> file as described in the section
                <reference internal="True" refuri="development_saio#setup-scripts"><inline classes="std std-ref">Setting up scripts for running Swift</inline></reference>.</paragraph>
            <paragraph>The environment variable <literal>SWIFT_TEST_POLICY</literal> may be set to specify a
                particular storage policy <emphasis>name</emphasis> that will be used for testing. When set, tests
                that would otherwise not specify a policy or choose a random policy from
                those available will instead use the policy specified. Tests that use more than
                one policy will include the specified policy in the set of policies used. The
                specified policy must be available on the cluster under test.</paragraph>
            <paragraph>For example, this command would run the functional tests using policy
                ‘silver’:</paragraph>
            <literal_block xml:space="preserve">SWIFT_TEST_POLICY=silver tox -e func</literal_block>
            <paragraph>To run a single functional test, use the <literal>--no-discover</literal> option together with
                a path to a specific test method, for example:</paragraph>
            <literal_block xml:space="preserve">tox -e func -- --no-discover test.functional.tests.TestFile.testCopy</literal_block>
            <section ids="in-process-functional-testing" names="in-process\ functional\ testing">
                <title>In-process functional testing</title>
                <paragraph>If the <literal>test.conf</literal> file is not found then the functional test framework will
                    instantiate a set of Swift servers in the same process that executes the
                    functional tests. This ‘in-process test’ mode may also be enabled (or disabled)
                    by setting the environment variable <literal>SWIFT_TEST_IN_PROCESS</literal> to a true (or
                    false) value prior to executing <literal>tox -e func</literal>.</paragraph>
                <paragraph>When using the ‘in-process test’ mode some server configuration options may be
                    set using environment variables:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>the optional in-memory object server may be selected by setting the
                            environment variable <literal>SWIFT_TEST_IN_MEMORY_OBJ</literal> to a true value.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>encryption may be added to the proxy pipeline by setting the
                            environment variable <literal>SWIFT_TEST_IN_PROCESS_CONF_LOADER</literal> to
                            <literal>encryption</literal>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>a 2+1 EC policy may be installed as the default policy by setting the
                            environment variable <literal>SWIFT_TEST_IN_PROCESS_CONF_LOADER</literal> to
                            <literal>ec</literal>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>the deprecated proxy-server <literal>object_post_as_copy</literal> option may be set using
                            the environment variable <literal>SWIFT_TEST_IN_PROCESS_OBJECT_POST_AS_COPY</literal>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>logging to stdout may be enabled by setting <literal>SWIFT_TEST_DEBUG_LOGS</literal>.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>For example, this command would run the in-process mode functional tests with
                    encryption enabled in the proxy-server:</paragraph>
                <literal_block xml:space="preserve">SWIFT_TEST_IN_PROCESS=1 SWIFT_TEST_IN_PROCESS_CONF_LOADER=encryption \
    tox -e func</literal_block>
                <paragraph>This particular example may also be run using the <literal>func-encryption</literal>
                    tox environment:</paragraph>
                <literal_block xml:space="preserve">tox -e func-encryption</literal_block>
                <paragraph>The <literal>tox.ini</literal> file also specifies test environments for running other
                    in-process functional test configurations, e.g.:</paragraph>
                <literal_block xml:space="preserve">tox -e func-ec
tox -e func-post-as-copy</literal_block>
                <paragraph>To debug the functional tests, use the ‘in-process test’ mode and pass the
                    <literal>--pdb</literal> flag to <literal>tox</literal>:</paragraph>
                <literal_block xml:space="preserve">SWIFT_TEST_IN_PROCESS=1 tox -e func -- --pdb \
    test.functional.tests.TestFile.testCopy</literal_block>
                <paragraph>The ‘in-process test’ mode searches for <literal>proxy-server.conf</literal> and
                    <literal>swift.conf</literal> config files from which it copies config options and overrides
                    some options to suit in process testing. The search will first look for config
                    files in a <literal>&lt;custom_conf_source_dir&gt;</literal> that may optionally be specified using
                    the environment variable:</paragraph>
                <literal_block xml:space="preserve">SWIFT_TEST_IN_PROCESS_CONF_DIR=&lt;custom_conf_source_dir&gt;</literal_block>
                <paragraph>If <literal>SWIFT_TEST_IN_PROCESS_CONF_DIR</literal> is not set, or if a config file is not
                    found in <literal>&lt;custom_conf_source_dir&gt;</literal>, the search will then look in the
                    <literal>etc/</literal> directory in the source tree. If the config file is still not found,
                    the corresponding sample config file from <literal>etc/</literal> is used (e.g.
                    <literal>proxy-server.conf-sample</literal> or <literal>swift.conf-sample</literal>).</paragraph>
                <paragraph>When using the ‘in-process test’ mode <literal>SWIFT_TEST_POLICY</literal> may be set to
                    specify a particular storage policy <emphasis>name</emphasis> that will be used for testing as
                    described above. When set, this policy must exist in the <literal>swift.conf</literal> file
                    and its corresponding ring file must exist in <literal>&lt;custom_conf_source_dir&gt;</literal> (if
                    specified) or <literal>etc/</literal>. The test setup will set the specified policy to be the
                    default and use its ring file properties for constructing the test object ring.
                    This allows in-process testing to be run against various policy types and ring
                    files.</paragraph>
                <paragraph>For example, this command would run the in-process mode functional tests
                    using config files found in <literal>$HOME/my_tests</literal> and policy ‘silver’:</paragraph>
                <literal_block xml:space="preserve">SWIFT_TEST_IN_PROCESS=1 SWIFT_TEST_IN_PROCESS_CONF_DIR=$HOME/my_tests \
   SWIFT_TEST_POLICY=silver tox -e func</literal_block>
            </section>
        </section>
        <section ids="coding-style" names="coding\ style">
            <title>Coding Style</title>
            <paragraph>Swift uses flake8 with the OpenStack <reference name="hacking" refuri="https://pypi.python.org/pypi/hacking">hacking</reference> module to enforce
                coding style.</paragraph>
            <paragraph>Install flake8 and hacking with pip or by the packages of your
                Operating System.</paragraph>
            <paragraph>It is advised to integrate flake8+hacking with your editor to get it
                automated and not get <title_reference>caught</title_reference> by Jenkins.</paragraph>
            <paragraph>For example for Vim the <reference name="syntastic" refuri="https://github.com/scrooloose/syntastic">syntastic</reference> plugin can do this for you.</paragraph>
            <target ids="hacking" names="hacking" refuri="https://pypi.python.org/pypi/hacking"></target>
            <target ids="syntastic" names="syntastic" refuri="https://github.com/scrooloose/syntastic"></target>
        </section>
        <section ids="documentation-guidelines" names="documentation\ guidelines">
            <title>Documentation Guidelines</title>
            <paragraph>The documentation in docstrings should follow the PEP 257 conventions
                (as mentioned in the PEP 8 guidelines).</paragraph>
            <paragraph>More specifically:</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>Triple quotes should be used for all docstrings.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>If the docstring is simple and fits on one line, then just use
                        one line.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>For docstrings that take multiple lines, there should be a newline
                        after the opening quotes, and before the closing quotes.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Sphinx is used to build documentation, so use the restructured text
                        markup to designate parameters, return values, etc.  Documentation on
                        the sphinx specific markup can be found here:
                        <reference refuri="http://sphinx.pocoo.org/markup/index.html">http://sphinx.pocoo.org/markup/index.html</reference></paragraph>
                </list_item>
            </enumerated_list>
            <paragraph>Installing Sphinx:</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>Install sphinx (On Ubuntu: <literal>sudo apt-get install python-sphinx</literal>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>python setup.py build_sphinx</literal></paragraph>
                </list_item>
            </enumerated_list>
        </section>
        <section ids="manpages" names="manpages">
            <title>Manpages</title>
            <paragraph>For sanity check of your change in manpage, use this command in the root
                of your Swift repo:</paragraph>
            <literal_block xml:space="preserve">./.manpages</literal_block>
        </section>
        <section ids="license-and-copyright" names="license\ and\ copyright">
            <title>License and Copyright</title>
            <paragraph>You can have the following copyright and license statement at
                the top of each source file. Copyright assignment is optional.</paragraph>
            <paragraph>New files should contain the current year. Substantial updates can have
                another year added, and date ranges are not needed.:</paragraph>
            <literal_block xml:space="preserve"># Copyright (c) 2013 OpenStack Foundation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.</literal_block>
        </section>
    </section>
</document>
