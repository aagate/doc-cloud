<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/swift/doc/source/overview_acl.rst">
    <section ids="access-control-lists-acls" names="access\ control\ lists\ (acls)">
        <title>Access Control Lists (ACLs)</title>
        <paragraph>Normally to create, read and modify containers and objects, you must have the
            appropriate roles on the project associated with the account, i.e., you
            must be the owner of the account. However, an owner can grant access to
            other users by using an Access Control List (ACL).</paragraph>
        <paragraph>There are two types of ACLs:</paragraph>
        <bullet_list bullet="-">
            <list_item>
                <paragraph><reference internal="True" refid="container-acls"><inline classes="std std-ref">Container ACLs</inline></reference>. These are specified on a container and
                    apply to that container only and the objects in the container.</paragraph>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refid="account-acls"><inline classes="std std-ref">Account ACLs</inline></reference>. These are specified at the account level and
                    apply to all containers and objects in the account.</paragraph>
            </list_item>
        </bullet_list>
        <target refid="container-acls"></target>
        <section ids="container-acls id1" names="container\ acls container_acls">
            <title>Container ACLs</title>
            <paragraph>Container ACLs are stored in the <literal>X-Container-Write</literal> and <literal>X-Container-Read</literal>
                metadata. The scope of the ACL is limited to the container where the
                metadata is set and the objects in the container. In addition:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>X-Container-Write</literal> grants the ability to perform PUT, POST and DELETE
                        operations on objects within a container. It does not grant the ability
                        to perform POST or DELETE operations on the container itself. Some ACL
                        elements also grant the ability to perform HEAD or GET operations on the
                        container.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>X-Container-Read</literal> grants the ability to perform GET and HEAD
                        operations on objects within a container. Some of the ACL elements also grant
                        the ability to perform HEAD or GET operations on the container itself.
                        However, a container ACL does not allow access to privileged metadata (such
                        as <literal>X-Container-Sync-Key</literal>).</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Container ACLs use the “V1” ACL syntax which is a comma separated string
                of elements as shown in the following example:</paragraph>
            <literal_block xml:space="preserve">.r:*,.rlistings,7ec59e87c6584c348b563254aae4c221:*</literal_block>
            <paragraph>Spaces may occur between elements as shown in the following example:</paragraph>
            <literal_block xml:space="preserve">.r : *, .rlistings, 7ec59e87c6584c348b563254aae4c221:*</literal_block>
            <paragraph>However, these spaces are removed from the value stored in the
                <literal>X-Container-Write</literal> and <literal>X-Container-Read</literal> metadata. In addition,
                the <literal>.r:</literal> string can be written as <literal>.referrer:</literal>, but is stored as <literal>.r:</literal>.</paragraph>
            <paragraph>While all auth systems use
                the same syntax, the meaning of some elements
                is different because of the different concepts used by different
                auth systems as explained in the following sections:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refid="acl-common-elements"><inline classes="std std-ref">Common ACL Elements</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="acl-keystone-elements"><inline classes="std std-ref">Keystone Auth ACL Elements</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="acl-tempauth-elements"><inline classes="std std-ref">TempAuth ACL Elements</inline></reference></paragraph>
                </list_item>
            </bullet_list>
            <target refid="acl-common-elements"></target>
            <section ids="common-acl-elements acl-common-elements" names="common\ acl\ elements acl_common_elements">
                <title>Common ACL Elements</title>
                <paragraph>The following table describes elements of an ACL that are
                    supported by both Keystone auth and TempAuth. These elements
                    should only be used with <literal>X-Container-Read</literal> (with the exception
                    of <literal>.rlistings</literal>, an error will occur if used with
                    <literal>X-Container-Write</literal>):</paragraph>
                <table>
                    <tgroup cols="2">
                        <colspec colwidth="30"></colspec>
                        <colspec colwidth="48"></colspec>
                        <thead>
                            <row>
                                <entry>
                                    <paragraph>Element</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Description</paragraph>
                                </entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>
                                    <paragraph><literal>.r:*</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Any user has access to objects. No token is
                                        required in the request.</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>.r:&lt;referrer&gt;</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>The referrer is granted access to objects. The
                                        referrer is identified by the <literal>Referer</literal>
                                        request header in the request. No token is
                                        required.</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>.r:-&lt;referrer&gt;</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>This syntax (with “-” prepended to the
                                        referrer) is supported. However, it does not
                                        deny access if another element (e.g., <literal>.r:*</literal>)
                                        grants access.</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>.rlistings</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Any user can perform a HEAD or GET operation
                                        on the container provided the user also has
                                        read access on objects (e.g., also has <literal>.r:*</literal>
                                        or <literal>.r:&lt;referrer&gt;</literal>. No token is required.</paragraph>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <target refid="acl-keystone-elements"></target>
            </section>
            <section ids="keystone-auth-acl-elements acl-keystone-elements" names="keystone\ auth\ acl\ elements acl_keystone_elements">
                <title>Keystone Auth ACL Elements</title>
                <paragraph>The following table describes elements of an ACL that are
                    supported only by Keystone auth. Keystone auth also supports
                    the elements described in <reference internal="True" refid="acl-common-elements"><inline classes="std std-ref">Common ACL Elements</inline></reference>.</paragraph>
                <paragraph>A token must be included in the request for any of these ACL elements
                    to take effect.</paragraph>
                <table>
                    <tgroup cols="2">
                        <colspec colwidth="30"></colspec>
                        <colspec colwidth="48"></colspec>
                        <thead>
                            <row>
                                <entry>
                                    <paragraph>Element</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Description</paragraph>
                                </entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>
                                    <paragraph><literal>&lt;project-id&gt;:&lt;user-id&gt;</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>The specified user, provided a token
                                        scoped to the project is included
                                        in the request, is granted access.
                                        Access to the container is also granted
                                        when used in <literal>X-Container-Read</literal>.</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>&lt;project-id&gt;:*</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Any user with a role in the specified Keystone
                                        project has access. A token scoped to the
                                        project must be included in the request.
                                        Access to the container is also granted
                                        when used in <literal>X-Container-Read</literal>.</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>*:&lt;user-id&gt;</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>The specified user has access. A token
                                        for the user (scoped to any
                                        project) must be included in the request.
                                        Access to the container is also granted
                                        when used in <literal>X-Container-Read</literal>.</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>*:*</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Any user has access.
                                        Access to the container is also granted
                                        when used in <literal>X-Container-Read</literal>.
                                        The <literal>*:*</literal> element differs from the <literal>.r:*</literal>
                                        element because
                                        <literal>*:*</literal> requires that a valid token is
                                        included in the request whereas <literal>.r:*</literal>
                                        does not require a token. In addition,
                                        <literal>.r:*</literal> does not grant access to the
                                        container listing.</paragraph>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <note>
                    <paragraph>Keystone project (tenant) or user <emphasis>names</emphasis> (i.e.,
                        <literal>&lt;project-name&gt;:&lt;user-name</literal>) must no longer be
                        used because with the introduction
                        of domains in Keystone, names are not globally unique. You should
                        use user and project <emphasis>ids</emphasis> instead.</paragraph>
                    <paragraph>For backwards compatibility, ACLs using names will be granted by
                        keystoneauth when it can be established that
                        the grantee project, the grantee user and the project being
                        accessed are either not yet in a domain (e.g. the <literal>X-Auth-Token</literal> has
                        been obtained via the Keystone V2 API) or are all in the default domain
                        to which legacy accounts would have been migrated.</paragraph>
                </note>
                <target refid="acl-tempauth-elements"></target>
            </section>
            <section ids="tempauth-acl-elements acl-tempauth-elements" names="tempauth\ acl\ elements acl_tempauth_elements">
                <title>TempAuth ACL Elements</title>
                <paragraph>The following table describes elements of an ACL that are
                    supported only by TempAuth. TempAuth auth also supports
                    the elements described in <reference internal="True" refid="acl-common-elements"><inline classes="std std-ref">Common ACL Elements</inline></reference>.</paragraph>
                <table>
                    <tgroup cols="2">
                        <colspec colwidth="30"></colspec>
                        <colspec colwidth="48"></colspec>
                        <thead>
                            <row>
                                <entry>
                                    <paragraph>Element</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Description</paragraph>
                                </entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>
                                    <paragraph><literal>&lt;user-name&gt;</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>The named user is granted access. The
                                        wildcard (“*”) character is not supported.
                                        A token from the user must be included in the
                                        request.</paragraph>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </section>
        </section>
        <section ids="container-acl-examples" names="container\ acl\ examples">
            <title>Container ACL Examples</title>
            <paragraph>Container ACLs may be set by including <literal>X-Container-Write</literal> and/or
                <literal>X-Container-Read</literal> headers with a PUT or a POST request to the container URL.
                The following examples use the <literal>swift</literal> command line client which support
                these headers being set via its <literal>--write-acl</literal> and <literal>--read-acl</literal> options.</paragraph>
            <section ids="example-public-container" names="example:\ public\ container">
                <title>Example: Public Container</title>
                <paragraph>The following allows anybody to list objects in the <literal>www</literal> container and
                    download objects. The users do not need to include a token in
                    their request. This ACL is commonly referred to as making the
                    container “public”. It is useful when used with <reference internal="True" refuri="middleware#staticweb"><inline classes="std std-ref">StaticWeb</inline></reference>:</paragraph>
                <literal_block xml:space="preserve">swift post www --read-acl ".r:*,.rlistings"</literal_block>
            </section>
            <section ids="example-shared-writable-container" names="example:\ shared\ writable\ container">
                <title>Example: Shared Writable Container</title>
                <paragraph>The following allows anybody to upload or download objects. However, to
                    download an object, the exact name of the object must be known since
                    users cannot list the objects in the container.
                    The users must include a Keystone token in the upload request. However, it does not
                    need to be scoped to the project associated with the container:</paragraph>
                <literal_block xml:space="preserve">swift post www --read-acl ".r:*" --write-acl "*:*"</literal_block>
            </section>
            <section ids="example-sharing-a-container-with-project-members" names="example:\ sharing\ a\ container\ with\ project\ members">
                <title>Example: Sharing a Container with Project Members</title>
                <paragraph>The following allows any member of the <literal>77b8f82565f14814bece56e50c4c240f</literal>
                    project to upload and download objects or to list the contents
                    of the <literal>www</literal> container. A token scoped to the <literal>77b8f82565f14814bece56e50c4c240f</literal>
                    project must be included in the request:</paragraph>
                <literal_block xml:space="preserve">swift post www --read-acl "77b8f82565f14814bece56e50c4c240f:*" \
               --write-acl "77b8f82565f14814bece56e50c4c240f:*"</literal_block>
            </section>
            <section ids="example-allowing-a-referrer-domain-to-download-objects" names="example:\ allowing\ a\ referrer\ domain\ to\ download\ objects">
                <title>Example: Allowing a Referrer Domain to Download Objects</title>
                <paragraph>The following allows any request from
                    the <literal>example.com</literal> domain to access an object in the container:</paragraph>
                <literal_block xml:space="preserve">swift post www --read-acl ".r:.example.com"</literal_block>
                <paragraph>However, the request from the user <strong>must</strong> contain the appropriate
                    <title_reference>Referer</title_reference> header as shown in this example request:</paragraph>
                <literal_block xml:space="preserve">curl -i $publicURL/www/document --head -H "Referer: http://www.example.com/index.html"</literal_block>
                <note>
                    <paragraph>The <title_reference>Referer</title_reference> header is included in requests by many browsers. However,
                        since it is easy to create a request with any desired value in the
                        <title_reference>Referer</title_reference> header, the referrer ACL has very weak security.</paragraph>
                </note>
                <target refid="account-acls"></target>
            </section>
        </section>
        <section ids="account-acls id2" names="account\ acls account_acls">
            <title>Account ACLs</title>
            <note>
                <paragraph>Account ACLs are not currently supported by Keystone auth</paragraph>
            </note>
            <paragraph>The <literal>X-Account-Access-Control</literal> header is used to specify
                account-level ACLs in a format specific to the auth system.
                These headers are visible and settable only by account owners (those for whom
                <literal>swift_owner</literal> is true).
                Behavior of account ACLs is auth-system-dependent.  In the case of TempAuth,
                if an authenticated user has membership in a group which is listed in the
                ACL, then the user is allowed the access level of that ACL.</paragraph>
            <paragraph>Account ACLs use the “V2” ACL syntax, which is a JSON dictionary with keys
                named “admin”, “read-write”, and “read-only”.  (Note the case sensitivity.)
                An example value for the <literal>X-Account-Access-Control</literal> header looks like this,
                where <literal>a</literal>, <literal>b</literal> and <literal>c</literal> are user names:</paragraph>
            <literal_block xml:space="preserve">{"admin":["a","b"],"read-only":["c"]}</literal_block>
            <paragraph>Keys may be absent (as shown in above example).</paragraph>
            <paragraph>The recommended way to generate ACL strings is as follows:</paragraph>
            <literal_block xml:space="preserve">from swift.common.middleware.acl import format_acl
acl_data = { 'admin': ['alice'], 'read-write': ['bob', 'carol'] }
acl_string = format_acl(version=2, acl_dict=acl_data)</literal_block>
            <paragraph>Using the <literal classes="xref py py-func">format_acl()</literal> method will ensure
                that JSON is encoded as ASCII (using e.g. ‘u1234’ for Unicode).  While
                it’s permissible to manually send <literal>curl</literal> commands containing
                <literal>X-Account-Access-Control</literal> headers, you should exercise caution when
                doing so, due to the potential for human error.</paragraph>
            <paragraph>Within the JSON dictionary stored in <literal>X-Account-Access-Control</literal>, the keys
                have the following meanings:</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="12"></colspec>
                    <colspec colwidth="62"></colspec>
                    <thead>
                        <row>
                            <entry>
                                <paragraph>Access Level</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Description</paragraph>
                            </entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>read-only</paragraph>
                            </entry>
                            <entry>
                                <paragraph>These identities can read <emphasis>everything</emphasis> (except privileged
                                    headers) in the account.  Specifically, a user with read-only
                                    account access can get a list of containers in the account,
                                    list the contents of any container, retrieve any object, and
                                    see the (non-privileged) headers of the account, any
                                    container, or any object.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>read-write</paragraph>
                            </entry>
                            <entry>
                                <paragraph>These identities can read or write (or create) any container.
                                    A user with read-write account access can create new
                                    containers, set any unprivileged container headers, overwrite
                                    objects, delete containers, etc.  A read-write user can NOT
                                    set account headers (or perform any PUT/POST/DELETE requests
                                    on the account).</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>admin</paragraph>
                            </entry>
                            <entry>
                                <paragraph>These identities have “swift_owner” privileges.  A user with
                                    admin account access can do anything the account owner can,
                                    including setting account headers and any privileged headers
                                    – and thus granting read-only, read-write, or admin access
                                    to other users.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>For more details, see <reference internal="True" reftitle="swift.common.middleware.tempauth" refuri="middleware#module-swift.common.middleware.tempauth"><literal classes="xref py py-mod">swift.common.middleware.tempauth</literal></reference>.  For details
                on the ACL format, see <reference internal="True" reftitle="swift.common.middleware.acl" refuri="misc#module-swift.common.middleware.acl"><literal classes="xref py py-mod">swift.common.middleware.acl</literal></reference>.</paragraph>
        </section>
    </section>
</document>
