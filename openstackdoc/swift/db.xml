<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/swift/doc/source/db.rst">
    <target refid="account-and-container-db"></target>
    <section ids="account-db-and-container-db account-and-container-db" names="account\ db\ and\ container\ db account_and_container_db">
        <title>Account DB and Container DB</title>
        <target refid="db"></target>
        <section dupnames="db" ids="db id1" names="db">
            <title>DB</title>
            <target ids="module-swift.common.db" ismod="True"></target>
            <index entries="['single',\ u'swift.common.db\ (module)',\ u'module-swift.common.db',\ '',\ None]"></index>
            <paragraph>Database code for Swift</paragraph>
            <index entries="['single',\ u'BROKER_TIMEOUT\ (in\ module\ swift.common.db)',\ u'swift.common.db.BROKER_TIMEOUT',\ '',\ None]"></index>
            <desc desctype="data" domain="py" noindex="False" objtype="data">
                <desc_signature class="" first="False" fullname="BROKER_TIMEOUT" ids="swift.common.db.BROKER_TIMEOUT" module="swift.common.db" names="swift.common.db.BROKER_TIMEOUT"><desc_addname xml:space="preserve">swift.common.db.</desc_addname><desc_name xml:space="preserve">BROKER_TIMEOUT</desc_name><desc_annotation xml:space="preserve"> = 25</desc_annotation></desc_signature>
                <desc_content>
                    <paragraph>Timeout for trying to connect to a DB</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'DB_PREALLOCATION\ (in\ module\ swift.common.db)',\ u'swift.common.db.DB_PREALLOCATION',\ '',\ None]"></index>
            <desc desctype="data" domain="py" noindex="False" objtype="data">
                <desc_signature class="" first="False" fullname="DB_PREALLOCATION" ids="swift.common.db.DB_PREALLOCATION" module="swift.common.db" names="swift.common.db.DB_PREALLOCATION"><desc_addname xml:space="preserve">swift.common.db.</desc_addname><desc_name xml:space="preserve">DB_PREALLOCATION</desc_name><desc_annotation xml:space="preserve"> = False</desc_annotation></desc_signature>
                <desc_content>
                    <paragraph>Whether calls will be made to preallocate disk space for database files.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'DatabaseAlreadyExists',\ u'swift.common.db.DatabaseAlreadyExists',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="DatabaseAlreadyExists" ids="swift.common.db.DatabaseAlreadyExists" module="swift.common.db" names="swift.common.db.DatabaseAlreadyExists"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.db.</desc_addname><desc_name xml:space="preserve">DatabaseAlreadyExists</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">path</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">sqlite3.DatabaseError</literal></paragraph>
                    <paragraph>More friendly error messages for DB Errors.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'DatabaseBroker\ (class\ in\ swift.common.db)',\ u'swift.common.db.DatabaseBroker',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="DatabaseBroker" ids="swift.common.db.DatabaseBroker" module="swift.common.db" names="swift.common.db.DatabaseBroker"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.db.</desc_addname><desc_name xml:space="preserve">DatabaseBroker</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">db_file</desc_parameter><desc_parameter xml:space="preserve">timeout=25</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter><desc_parameter xml:space="preserve">account=None</desc_parameter><desc_parameter xml:space="preserve">container=None</desc_parameter><desc_parameter xml:space="preserve">pending_timeout=None</desc_parameter><desc_parameter xml:space="preserve">stale_reads_ok=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Encapsulates working with a database.</paragraph>
                    <index entries="['single',\ u'delete_db()\ (swift.common.db.DatabaseBroker\ method)',\ u'swift.common.db.DatabaseBroker.delete_db',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="DatabaseBroker" first="False" fullname="DatabaseBroker.delete_db" ids="swift.common.db.DatabaseBroker.delete_db" module="swift.common.db" names="swift.common.db.DatabaseBroker.delete_db"><desc_name xml:space="preserve">delete_db</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">timestamp</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Mark the DB as deleted</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">timestamp</literal_strong> – internalized delete timestamp</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get()\ (swift.common.db.DatabaseBroker\ method)',\ u'swift.common.db.DatabaseBroker.get',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="DatabaseBroker" first="False" fullname="DatabaseBroker.get" ids="swift.common.db.DatabaseBroker.get" module="swift.common.db" names="swift.common.db.DatabaseBroker.get"><desc_name xml:space="preserve">get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwds</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Use with the “with” statement; returns a database connection.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_info()\ (swift.common.db.DatabaseBroker\ method)',\ u'swift.common.db.DatabaseBroker.get_info',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="DatabaseBroker" first="False" fullname="DatabaseBroker.get_info" ids="swift.common.db.DatabaseBroker.get_info" module="swift.common.db" names="swift.common.db.DatabaseBroker.get_info"><desc_name xml:space="preserve">get_info</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_items_since()\ (swift.common.db.DatabaseBroker\ method)',\ u'swift.common.db.DatabaseBroker.get_items_since',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="DatabaseBroker" first="False" fullname="DatabaseBroker.get_items_since" ids="swift.common.db.DatabaseBroker.get_items_since" module="swift.common.db" names="swift.common.db.DatabaseBroker.get_items_since"><desc_name xml:space="preserve">get_items_since</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">start</desc_parameter><desc_parameter xml:space="preserve">count</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get a list of objects in the database between start and end.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">start</literal_strong> – start ROWID</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">count</literal_strong> – number to get</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>list of objects between start and end</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_max_row()\ (swift.common.db.DatabaseBroker\ method)',\ u'swift.common.db.DatabaseBroker.get_max_row',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="DatabaseBroker" first="False" fullname="DatabaseBroker.get_max_row" ids="swift.common.db.DatabaseBroker.get_max_row" module="swift.common.db" names="swift.common.db.DatabaseBroker.get_max_row"><desc_name xml:space="preserve">get_max_row</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_raw_metadata()\ (swift.common.db.DatabaseBroker\ method)',\ u'swift.common.db.DatabaseBroker.get_raw_metadata',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="DatabaseBroker" first="False" fullname="DatabaseBroker.get_raw_metadata" ids="swift.common.db.DatabaseBroker.get_raw_metadata" module="swift.common.db" names="swift.common.db.DatabaseBroker.get_raw_metadata"><desc_name xml:space="preserve">get_raw_metadata</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_replication_info()\ (swift.common.db.DatabaseBroker\ method)',\ u'swift.common.db.DatabaseBroker.get_replication_info',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="DatabaseBroker" first="False" fullname="DatabaseBroker.get_replication_info" ids="swift.common.db.DatabaseBroker.get_replication_info" module="swift.common.db" names="swift.common.db.DatabaseBroker.get_replication_info"><desc_name xml:space="preserve">get_replication_info</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get information about the DB required for replication.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>dict containing keys from get_info plus max_row and metadata</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <definition_list>
                                <definition_list_item>
                                    <term>Note:: get_info’s &lt;db_contains_type&gt;_count is translated to just</term>
                                    <definition>
                                        <paragraph>“count” and metadata is the raw string.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_sync()\ (swift.common.db.DatabaseBroker\ method)',\ u'swift.common.db.DatabaseBroker.get_sync',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="DatabaseBroker" first="False" fullname="DatabaseBroker.get_sync" ids="swift.common.db.DatabaseBroker.get_sync" module="swift.common.db" names="swift.common.db.DatabaseBroker.get_sync"><desc_name xml:space="preserve">get_sync</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">id</desc_parameter><desc_parameter xml:space="preserve">incoming=True</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Gets the most recent sync point for a server from the sync table.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">id</literal_strong> – remote ID to get the sync_point for</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">incoming</literal_strong> – if True, get the last incoming sync, otherwise get
                                                    the last outgoing sync</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>the sync point, or -1 if the id doesn’t exist.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_syncs()\ (swift.common.db.DatabaseBroker\ method)',\ u'swift.common.db.DatabaseBroker.get_syncs',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="DatabaseBroker" first="False" fullname="DatabaseBroker.get_syncs" ids="swift.common.db.DatabaseBroker.get_syncs" module="swift.common.db" names="swift.common.db.DatabaseBroker.get_syncs"><desc_name xml:space="preserve">get_syncs</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">incoming=True</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get a serialized copy of the sync table.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">incoming</literal_strong> – if True, get the last incoming sync, otherwise get
                                            the last outgoing sync</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>list of {‘remote_id’, ‘sync_point’}</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'initialize()\ (swift.common.db.DatabaseBroker\ method)',\ u'swift.common.db.DatabaseBroker.initialize',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="DatabaseBroker" first="False" fullname="DatabaseBroker.initialize" ids="swift.common.db.DatabaseBroker.initialize" module="swift.common.db" names="swift.common.db.DatabaseBroker.initialize"><desc_name xml:space="preserve">initialize</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">put_timestamp=None</desc_parameter><desc_parameter xml:space="preserve">storage_policy_index=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create the DB</paragraph>
                            <paragraph>The storage_policy_index is passed through to the subclass’s
                                <literal>_initialize</literal> method.  It is ignored by <literal>AccountBroker</literal>.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">put_timestamp</literal_strong> – internalized timestamp of initial PUT request</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">storage_policy_index</literal_strong> – only required for containers</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'is_deleted()\ (swift.common.db.DatabaseBroker\ method)',\ u'swift.common.db.DatabaseBroker.is_deleted',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="DatabaseBroker" first="False" fullname="DatabaseBroker.is_deleted" ids="swift.common.db.DatabaseBroker.is_deleted" module="swift.common.db" names="swift.common.db.DatabaseBroker.is_deleted"><desc_name xml:space="preserve">is_deleted</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Check if the DB is considered to be deleted.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>True if the DB is considered to be deleted, False otherwise</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'lock()\ (swift.common.db.DatabaseBroker\ method)',\ u'swift.common.db.DatabaseBroker.lock',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="DatabaseBroker" first="False" fullname="DatabaseBroker.lock" ids="swift.common.db.DatabaseBroker.lock" module="swift.common.db" names="swift.common.db.DatabaseBroker.lock"><desc_name xml:space="preserve">lock</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwds</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Use with the “with” statement; locks a database.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'make_tuple_for_pickle()\ (swift.common.db.DatabaseBroker\ method)',\ u'swift.common.db.DatabaseBroker.make_tuple_for_pickle',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="DatabaseBroker" first="False" fullname="DatabaseBroker.make_tuple_for_pickle" ids="swift.common.db.DatabaseBroker.make_tuple_for_pickle" module="swift.common.db" names="swift.common.db.DatabaseBroker.make_tuple_for_pickle"><desc_name xml:space="preserve">make_tuple_for_pickle</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">record</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Turn this db record dict into the format this service uses for
                                pending pickles.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'merge_syncs()\ (swift.common.db.DatabaseBroker\ method)',\ u'swift.common.db.DatabaseBroker.merge_syncs',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="DatabaseBroker" first="False" fullname="DatabaseBroker.merge_syncs" ids="swift.common.db.DatabaseBroker.merge_syncs" module="swift.common.db" names="swift.common.db.DatabaseBroker.merge_syncs"><desc_name xml:space="preserve">merge_syncs</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">sync_points</desc_parameter><desc_parameter xml:space="preserve">incoming=True</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Merge a list of sync points with the incoming sync table.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">sync_points</literal_strong> – list of sync points where a sync point is a dict of
                                                    {‘sync_point’, ‘remote_id’}</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">incoming</literal_strong> – if True, get the last incoming sync, otherwise get
                                                    the last outgoing sync</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'merge_timestamps()\ (swift.common.db.DatabaseBroker\ method)',\ u'swift.common.db.DatabaseBroker.merge_timestamps',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="DatabaseBroker" first="False" fullname="DatabaseBroker.merge_timestamps" ids="swift.common.db.DatabaseBroker.merge_timestamps" module="swift.common.db" names="swift.common.db.DatabaseBroker.merge_timestamps"><desc_name xml:space="preserve">merge_timestamps</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">created_at</desc_parameter><desc_parameter xml:space="preserve">put_timestamp</desc_parameter><desc_parameter xml:space="preserve">delete_timestamp</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Used in replication to handle updating timestamps.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">created_at</literal_strong> – create timestamp</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">put_timestamp</literal_strong> – put timestamp</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">delete_timestamp</literal_strong> – delete timestamp</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'metadata\ (swift.common.db.DatabaseBroker\ attribute)',\ u'swift.common.db.DatabaseBroker.metadata',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="DatabaseBroker" first="False" fullname="DatabaseBroker.metadata" ids="swift.common.db.DatabaseBroker.metadata" module="swift.common.db" names="swift.common.db.DatabaseBroker.metadata"><desc_name xml:space="preserve">metadata</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Returns the metadata dict for the database. The metadata dict values
                                are tuples of (value, timestamp) where the timestamp indicates when
                                that key was set to that value.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'newid()\ (swift.common.db.DatabaseBroker\ method)',\ u'swift.common.db.DatabaseBroker.newid',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="DatabaseBroker" first="False" fullname="DatabaseBroker.newid" ids="swift.common.db.DatabaseBroker.newid" module="swift.common.db" names="swift.common.db.DatabaseBroker.newid"><desc_name xml:space="preserve">newid</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">remote_id</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Re-id the database.  This should be called after an rsync.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">remote_id</literal_strong> – the ID of the remote database being rsynced in</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'possibly_quarantine()\ (swift.common.db.DatabaseBroker\ method)',\ u'swift.common.db.DatabaseBroker.possibly_quarantine',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="DatabaseBroker" first="False" fullname="DatabaseBroker.possibly_quarantine" ids="swift.common.db.DatabaseBroker.possibly_quarantine" module="swift.common.db" names="swift.common.db.DatabaseBroker.possibly_quarantine"><desc_name xml:space="preserve">possibly_quarantine</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">exc_type</desc_parameter><desc_parameter xml:space="preserve">exc_value</desc_parameter><desc_parameter xml:space="preserve">exc_traceback</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Checks the exception info to see if it indicates a quarantine situation
                                (malformed or corrupted database). If not, the original exception will
                                be reraised. If so, the database will be quarantined and a new
                                sqlite3.DatabaseError will be raised indicating the action taken.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'put_record()\ (swift.common.db.DatabaseBroker\ method)',\ u'swift.common.db.DatabaseBroker.put_record',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="DatabaseBroker" first="False" fullname="DatabaseBroker.put_record" ids="swift.common.db.DatabaseBroker.put_record" module="swift.common.db" names="swift.common.db.DatabaseBroker.put_record"><desc_name xml:space="preserve">put_record</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">record</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'reclaim()\ (swift.common.db.DatabaseBroker\ method)',\ u'swift.common.db.DatabaseBroker.reclaim',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="DatabaseBroker" first="False" fullname="DatabaseBroker.reclaim" ids="swift.common.db.DatabaseBroker.reclaim" module="swift.common.db" names="swift.common.db.DatabaseBroker.reclaim"><desc_name xml:space="preserve">reclaim</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">age_timestamp</desc_parameter><desc_parameter xml:space="preserve">sync_timestamp</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Delete rows from the db_contains_type table that are marked deleted
                                and whose created_at timestamp is &lt; age_timestamp.  Also deletes rows
                                from incoming_sync and outgoing_sync where the updated_at timestamp is
                                &lt; sync_timestamp.</paragraph>
                            <paragraph>In addition, this calls the DatabaseBroker’s <literal classes="xref py py-func">_reclaim()</literal> method.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">age_timestamp</literal_strong> – max created_at timestamp of object rows to delete</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">sync_timestamp</literal_strong> – max update_at timestamp of sync rows to delete</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'update_metadata()\ (swift.common.db.DatabaseBroker\ method)',\ u'swift.common.db.DatabaseBroker.update_metadata',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="DatabaseBroker" first="False" fullname="DatabaseBroker.update_metadata" ids="swift.common.db.DatabaseBroker.update_metadata" module="swift.common.db" names="swift.common.db.DatabaseBroker.update_metadata"><desc_name xml:space="preserve">update_metadata</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">metadata_updates</desc_parameter><desc_parameter xml:space="preserve">validate_metadata=False</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Updates the metadata dict for the database. The metadata dict values
                                are tuples of (value, timestamp) where the timestamp indicates when
                                that key was set to that value. Key/values will only be overwritten if
                                the timestamp is newer. To delete a key, set its value to (‘’,
                                timestamp). These empty keys will eventually be removed by
                                <reference internal="True" refid="swift.common.db.DatabaseBroker.reclaim" reftitle="swift.common.db.DatabaseBroker.reclaim"><literal classes="xref py py-func">reclaim()</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'update_put_timestamp()\ (swift.common.db.DatabaseBroker\ method)',\ u'swift.common.db.DatabaseBroker.update_put_timestamp',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="DatabaseBroker" first="False" fullname="DatabaseBroker.update_put_timestamp" ids="swift.common.db.DatabaseBroker.update_put_timestamp" module="swift.common.db" names="swift.common.db.DatabaseBroker.update_put_timestamp"><desc_name xml:space="preserve">update_put_timestamp</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">timestamp</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Update the put_timestamp.  Only modifies it if it is greater than
                                the current timestamp.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">timestamp</literal_strong> – internalized put timestamp</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'update_status_changed_at()\ (swift.common.db.DatabaseBroker\ method)',\ u'swift.common.db.DatabaseBroker.update_status_changed_at',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="DatabaseBroker" first="False" fullname="DatabaseBroker.update_status_changed_at" ids="swift.common.db.DatabaseBroker.update_status_changed_at" module="swift.common.db" names="swift.common.db.DatabaseBroker.update_status_changed_at"><desc_name xml:space="preserve">update_status_changed_at</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">timestamp</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Update the status_changed_at field in the stat table.  Only
                                modifies status_changed_at if the timestamp is greater than the
                                current status_changed_at timestamp.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">timestamp</literal_strong> – internalized timestamp</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'validate_metadata()\ (swift.common.db.DatabaseBroker\ static\ method)',\ u'swift.common.db.DatabaseBroker.validate_metadata',\ '',\ None]"></index>
                    <desc desctype="staticmethod" domain="py" noindex="False" objtype="staticmethod">
                        <desc_signature class="DatabaseBroker" first="False" fullname="DatabaseBroker.validate_metadata" ids="swift.common.db.DatabaseBroker.validate_metadata" module="swift.common.db" names="swift.common.db.DatabaseBroker.validate_metadata"><desc_annotation xml:space="preserve">static </desc_annotation><desc_name xml:space="preserve">validate_metadata</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">metadata</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Validates that metadata falls within acceptable limits.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">metadata</literal_strong> – to be validated</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><literal_strong>HTTPBadRequest</literal_strong> – if MAX_META_COUNT or MAX_META_OVERALL_SIZE
                                            is exceeded, or if metadata contains non-UTF-8 data</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'DatabaseConnectionError',\ u'swift.common.db.DatabaseConnectionError',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="DatabaseConnectionError" ids="swift.common.db.DatabaseConnectionError" module="swift.common.db" names="swift.common.db.DatabaseConnectionError"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.db.</desc_addname><desc_name xml:space="preserve">DatabaseConnectionError</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">path</desc_parameter><desc_parameter xml:space="preserve">msg</desc_parameter><desc_parameter xml:space="preserve">timeout=0</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">sqlite3.DatabaseError</literal></paragraph>
                    <paragraph>More friendly error messages for DB Errors.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'GreenDBConnection\ (class\ in\ swift.common.db)',\ u'swift.common.db.GreenDBConnection',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="GreenDBConnection" ids="swift.common.db.GreenDBConnection" module="swift.common.db" names="swift.common.db.GreenDBConnection"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.db.</desc_addname><desc_name xml:space="preserve">GreenDBConnection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">database</desc_parameter><desc_parameter xml:space="preserve">timeout=None</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">sqlite3.Connection</literal></paragraph>
                    <paragraph>SQLite DB Connection handler that plays well with eventlet.</paragraph>
                    <index entries="['single',\ u'commit()\ (swift.common.db.GreenDBConnection\ method)',\ u'swift.common.db.GreenDBConnection.commit',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="GreenDBConnection" first="False" fullname="GreenDBConnection.commit" ids="swift.common.db.GreenDBConnection.commit" module="swift.common.db" names="swift.common.db.GreenDBConnection.commit"><desc_name xml:space="preserve">commit</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'cursor()\ (swift.common.db.GreenDBConnection\ method)',\ u'swift.common.db.GreenDBConnection.cursor',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="GreenDBConnection" first="False" fullname="GreenDBConnection.cursor" ids="swift.common.db.GreenDBConnection.cursor" module="swift.common.db" names="swift.common.db.GreenDBConnection.cursor"><desc_name xml:space="preserve">cursor</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">cls=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'GreenDBCursor\ (class\ in\ swift.common.db)',\ u'swift.common.db.GreenDBCursor',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="GreenDBCursor" ids="swift.common.db.GreenDBCursor" module="swift.common.db" names="swift.common.db.GreenDBCursor"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.db.</desc_addname><desc_name xml:space="preserve">GreenDBCursor</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">sqlite3.Cursor</literal></paragraph>
                    <paragraph>SQLite Cursor handler that plays well with eventlet.</paragraph>
                    <index entries="['single',\ u'execute()\ (swift.common.db.GreenDBCursor\ method)',\ u'swift.common.db.GreenDBCursor.execute',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="GreenDBCursor" first="False" fullname="GreenDBCursor.execute" ids="swift.common.db.GreenDBCursor.execute" module="swift.common.db" names="swift.common.db.GreenDBCursor.execute"><desc_name xml:space="preserve">execute</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'PENDING_CAP\ (in\ module\ swift.common.db)',\ u'swift.common.db.PENDING_CAP',\ '',\ None]"></index>
            <desc desctype="data" domain="py" noindex="False" objtype="data">
                <desc_signature class="" first="False" fullname="PENDING_CAP" ids="swift.common.db.PENDING_CAP" module="swift.common.db" names="swift.common.db.PENDING_CAP"><desc_addname xml:space="preserve">swift.common.db.</desc_addname><desc_name xml:space="preserve">PENDING_CAP</desc_name><desc_annotation xml:space="preserve"> = 131072</desc_annotation></desc_signature>
                <desc_content>
                    <paragraph>Max size of .pending file in bytes. When this is exceeded, the pending</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'PICKLE_PROTOCOL\ (in\ module\ swift.common.db)',\ u'swift.common.db.PICKLE_PROTOCOL',\ '',\ None]"></index>
            <desc desctype="data" domain="py" noindex="False" objtype="data">
                <desc_signature class="" first="False" fullname="PICKLE_PROTOCOL" ids="swift.common.db.PICKLE_PROTOCOL" module="swift.common.db" names="swift.common.db.PICKLE_PROTOCOL"><desc_addname xml:space="preserve">swift.common.db.</desc_addname><desc_name xml:space="preserve">PICKLE_PROTOCOL</desc_name><desc_annotation xml:space="preserve"> = 2</desc_annotation></desc_signature>
                <desc_content>
                    <paragraph>Pickle protocol to use</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'chexor()\ (in\ module\ swift.common.db)',\ u'swift.common.db.chexor',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="chexor" ids="swift.common.db.chexor" module="swift.common.db" names="swift.common.db.chexor"><desc_addname xml:space="preserve">swift.common.db.</desc_addname><desc_name xml:space="preserve">chexor</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">old</desc_parameter><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">timestamp</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Each entry in the account and container databases is XORed by the 128-bit
                        hash on insert or delete.  This serves as a rolling, order-independent hash
                        of the contents. (check + XOR)</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">old</literal_strong> – hex representation of the current DB hash</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> – name of the object or container being inserted</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">timestamp</literal_strong> – internalized timestamp of the new record</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a hex representation of the new hash value</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'dict_factory()\ (in\ module\ swift.common.db)',\ u'swift.common.db.dict_factory',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="dict_factory" ids="swift.common.db.dict_factory" module="swift.common.db" names="swift.common.db.dict_factory"><desc_addname xml:space="preserve">swift.common.db.</desc_addname><desc_name xml:space="preserve">dict_factory</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">crs</desc_parameter><desc_parameter xml:space="preserve">row</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>This should only be used when you need a real dict,
                        i.e. when you’re going to serialize the results.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'get_db_connection()\ (in\ module\ swift.common.db)',\ u'swift.common.db.get_db_connection',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="get_db_connection" ids="swift.common.db.get_db_connection" module="swift.common.db" names="swift.common.db.get_db_connection"><desc_addname xml:space="preserve">swift.common.db.</desc_addname><desc_name xml:space="preserve">get_db_connection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">path</desc_parameter><desc_parameter xml:space="preserve">timeout=30</desc_parameter><desc_parameter xml:space="preserve">okay_to_create=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns a properly configured SQLite database connection.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">path</literal_strong> – path to DB</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">timeout</literal_strong> – timeout for connection</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">okay_to_create</literal_strong> – if True, create the DB if it doesn’t exist</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>DB connection object</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'utf8encode()\ (in\ module\ swift.common.db)',\ u'swift.common.db.utf8encode',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="utf8encode" ids="swift.common.db.utf8encode" module="swift.common.db" names="swift.common.db.utf8encode"><desc_addname xml:space="preserve">swift.common.db.</desc_addname><desc_name xml:space="preserve">utf8encode</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                </desc_content>
            </desc>
            <index entries="['single',\ u'utf8encodekeys()\ (in\ module\ swift.common.db)',\ u'swift.common.db.utf8encodekeys',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="utf8encodekeys" ids="swift.common.db.utf8encodekeys" module="swift.common.db" names="swift.common.db.utf8encodekeys"><desc_addname xml:space="preserve">swift.common.db.</desc_addname><desc_name xml:space="preserve">utf8encodekeys</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">metadata</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                </desc_content>
            </desc>
            <target refid="db-replicator"></target>
        </section>
        <section ids="module-swift.common.db_replicator id2 db-replicator" names="db\ replicator db-replicator">
            <title>DB replicator</title>
            <index entries="['single',\ u'swift.common.db_replicator\ (module)',\ u'module-swift.common.db_replicator',\ '',\ None]"></index>
            <index entries="['single',\ u'ReplConnection\ (class\ in\ swift.common.db_replicator)',\ u'swift.common.db_replicator.ReplConnection',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ReplConnection" ids="swift.common.db_replicator.ReplConnection" module="swift.common.db_replicator" names="swift.common.db_replicator.ReplConnection"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.db_replicator.</desc_addname><desc_name xml:space="preserve">ReplConnection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">hash_</desc_parameter><desc_parameter xml:space="preserve">logger</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" reftitle="swift.common.bufferedhttp.BufferedHTTPConnection" refuri="misc#swift.common.bufferedhttp.BufferedHTTPConnection"><literal classes="xref py py-class">swift.common.bufferedhttp.BufferedHTTPConnection</literal></reference></paragraph>
                    <paragraph>Helper to simplify REPLICATEing to a remote server.</paragraph>
                    <index entries="['single',\ u'replicate()\ (swift.common.db_replicator.ReplConnection\ method)',\ u'swift.common.db_replicator.ReplConnection.replicate',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ReplConnection" first="False" fullname="ReplConnection.replicate" ids="swift.common.db_replicator.ReplConnection.replicate" module="swift.common.db_replicator" names="swift.common.db_replicator.ReplConnection.replicate"><desc_name xml:space="preserve">replicate</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Make an HTTP REPLICATE request</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">args</literal_strong> – list of json-encodable objects</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>bufferedhttp response object</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'Replicator\ (class\ in\ swift.common.db_replicator)',\ u'swift.common.db_replicator.Replicator',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="Replicator" ids="swift.common.db_replicator.Replicator" module="swift.common.db_replicator" names="swift.common.db_replicator.Replicator"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.db_replicator.</desc_addname><desc_name xml:space="preserve">Replicator</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">swift.common.daemon.Daemon</literal></paragraph>
                    <paragraph>Implements the logic for directing db replication.</paragraph>
                    <index entries="['single',\ u'delete_db()\ (swift.common.db_replicator.Replicator\ method)',\ u'swift.common.db_replicator.Replicator.delete_db',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Replicator" first="False" fullname="Replicator.delete_db" ids="swift.common.db_replicator.Replicator.delete_db" module="swift.common.db_replicator" names="swift.common.db_replicator.Replicator.delete_db"><desc_name xml:space="preserve">delete_db</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">broker</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'extract_device()\ (swift.common.db_replicator.Replicator\ method)',\ u'swift.common.db_replicator.Replicator.extract_device',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Replicator" first="False" fullname="Replicator.extract_device" ids="swift.common.db_replicator.Replicator.extract_device" module="swift.common.db_replicator" names="swift.common.db_replicator.Replicator.extract_device"><desc_name xml:space="preserve">extract_device</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">object_file</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Extract the device name from an object path.  Returns “UNKNOWN” if the
                                path could not be extracted successfully for some reason.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">object_file</literal_strong> – the path to a database file.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'report_up_to_date()\ (swift.common.db_replicator.Replicator\ method)',\ u'swift.common.db_replicator.Replicator.report_up_to_date',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Replicator" first="False" fullname="Replicator.report_up_to_date" ids="swift.common.db_replicator.Replicator.report_up_to_date" module="swift.common.db_replicator" names="swift.common.db_replicator.Replicator.report_up_to_date"><desc_name xml:space="preserve">report_up_to_date</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">full_info</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'run_forever()\ (swift.common.db_replicator.Replicator\ method)',\ u'swift.common.db_replicator.Replicator.run_forever',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Replicator" first="False" fullname="Replicator.run_forever" ids="swift.common.db_replicator.Replicator.run_forever" module="swift.common.db_replicator" names="swift.common.db_replicator.Replicator.run_forever"><desc_name xml:space="preserve">run_forever</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Replicate dbs under the given root in an infinite loop.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'run_once()\ (swift.common.db_replicator.Replicator\ method)',\ u'swift.common.db_replicator.Replicator.run_once',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Replicator" first="False" fullname="Replicator.run_once" ids="swift.common.db_replicator.Replicator.run_once" module="swift.common.db_replicator" names="swift.common.db_replicator.Replicator.run_once"><desc_name xml:space="preserve">run_once</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Run a replication pass once.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ReplicatorRpc\ (class\ in\ swift.common.db_replicator)',\ u'swift.common.db_replicator.ReplicatorRpc',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ReplicatorRpc" ids="swift.common.db_replicator.ReplicatorRpc" module="swift.common.db_replicator" names="swift.common.db_replicator.ReplicatorRpc"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.db_replicator.</desc_addname><desc_name xml:space="preserve">ReplicatorRpc</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">root</desc_parameter><desc_parameter xml:space="preserve">datadir</desc_parameter><desc_parameter xml:space="preserve">broker_class</desc_parameter><desc_parameter xml:space="preserve">mount_check=True</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Handle Replication RPC calls.  TODO(redbo): document please :)</paragraph>
                    <index entries="['single',\ u'complete_rsync()\ (swift.common.db_replicator.ReplicatorRpc\ method)',\ u'swift.common.db_replicator.ReplicatorRpc.complete_rsync',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ReplicatorRpc" first="False" fullname="ReplicatorRpc.complete_rsync" ids="swift.common.db_replicator.ReplicatorRpc.complete_rsync" module="swift.common.db_replicator" names="swift.common.db_replicator.ReplicatorRpc.complete_rsync"><desc_name xml:space="preserve">complete_rsync</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">drive</desc_parameter><desc_parameter xml:space="preserve">db_file</desc_parameter><desc_parameter xml:space="preserve">args</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'debug_timing()\ (swift.common.db_replicator.ReplicatorRpc\ method)',\ u'swift.common.db_replicator.ReplicatorRpc.debug_timing',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ReplicatorRpc" first="False" fullname="ReplicatorRpc.debug_timing" ids="swift.common.db_replicator.ReplicatorRpc.debug_timing" module="swift.common.db_replicator" names="swift.common.db_replicator.ReplicatorRpc.debug_timing"><desc_name xml:space="preserve">debug_timing</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwds</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'dispatch()\ (swift.common.db_replicator.ReplicatorRpc\ method)',\ u'swift.common.db_replicator.ReplicatorRpc.dispatch',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ReplicatorRpc" first="False" fullname="ReplicatorRpc.dispatch" ids="swift.common.db_replicator.ReplicatorRpc.dispatch" module="swift.common.db_replicator" names="swift.common.db_replicator.ReplicatorRpc.dispatch"><desc_name xml:space="preserve">dispatch</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">replicate_args</desc_parameter><desc_parameter xml:space="preserve">args</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'merge_items()\ (swift.common.db_replicator.ReplicatorRpc\ method)',\ u'swift.common.db_replicator.ReplicatorRpc.merge_items',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ReplicatorRpc" first="False" fullname="ReplicatorRpc.merge_items" ids="swift.common.db_replicator.ReplicatorRpc.merge_items" module="swift.common.db_replicator" names="swift.common.db_replicator.ReplicatorRpc.merge_items"><desc_name xml:space="preserve">merge_items</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">broker</desc_parameter><desc_parameter xml:space="preserve">args</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'merge_syncs()\ (swift.common.db_replicator.ReplicatorRpc\ method)',\ u'swift.common.db_replicator.ReplicatorRpc.merge_syncs',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ReplicatorRpc" first="False" fullname="ReplicatorRpc.merge_syncs" ids="swift.common.db_replicator.ReplicatorRpc.merge_syncs" module="swift.common.db_replicator" names="swift.common.db_replicator.ReplicatorRpc.merge_syncs"><desc_name xml:space="preserve">merge_syncs</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">broker</desc_parameter><desc_parameter xml:space="preserve">args</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'rsync_then_merge()\ (swift.common.db_replicator.ReplicatorRpc\ method)',\ u'swift.common.db_replicator.ReplicatorRpc.rsync_then_merge',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ReplicatorRpc" first="False" fullname="ReplicatorRpc.rsync_then_merge" ids="swift.common.db_replicator.ReplicatorRpc.rsync_then_merge" module="swift.common.db_replicator" names="swift.common.db_replicator.ReplicatorRpc.rsync_then_merge"><desc_name xml:space="preserve">rsync_then_merge</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">drive</desc_parameter><desc_parameter xml:space="preserve">db_file</desc_parameter><desc_parameter xml:space="preserve">args</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'sync()\ (swift.common.db_replicator.ReplicatorRpc\ method)',\ u'swift.common.db_replicator.ReplicatorRpc.sync',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ReplicatorRpc" first="False" fullname="ReplicatorRpc.sync" ids="swift.common.db_replicator.ReplicatorRpc.sync" module="swift.common.db_replicator" names="swift.common.db_replicator.ReplicatorRpc.sync"><desc_name xml:space="preserve">sync</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">broker</desc_parameter><desc_parameter xml:space="preserve">args</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'quarantine_db()\ (in\ module\ swift.common.db_replicator)',\ u'swift.common.db_replicator.quarantine_db',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="quarantine_db" ids="swift.common.db_replicator.quarantine_db" module="swift.common.db_replicator" names="swift.common.db_replicator.quarantine_db"><desc_addname xml:space="preserve">swift.common.db_replicator.</desc_addname><desc_name xml:space="preserve">quarantine_db</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">object_file</desc_parameter><desc_parameter xml:space="preserve">server_type</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>In the case that a corrupt file is found, move it to a quarantined area to
                        allow replication to fix it.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">object_file</literal_strong> – path to corrupt file</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">server_type</literal_strong> – type of file that is corrupt
                                            (‘container’ or ‘account’)</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'roundrobin_datadirs()\ (in\ module\ swift.common.db_replicator)',\ u'swift.common.db_replicator.roundrobin_datadirs',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="roundrobin_datadirs" ids="swift.common.db_replicator.roundrobin_datadirs" module="swift.common.db_replicator" names="swift.common.db_replicator.roundrobin_datadirs"><desc_addname xml:space="preserve">swift.common.db_replicator.</desc_addname><desc_name xml:space="preserve">roundrobin_datadirs</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">datadirs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Generator to walk the data dirs in a round robin manner, evenly
                        hitting each device on the system, and yielding any .db files
                        found (in their proper places). The partitions within each data
                        dir are walked randomly, however.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">datadirs</literal_strong> – a list of (path, node_id) to walk</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>A generator of (partition, path_to_db_file, node_id)</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
        </section>
    </section>
</document>
