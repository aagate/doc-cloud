<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/swift/doc/source/object.rst">
    <target refid="object"></target>
    <section dupnames="object" ids="object id1" names="object">
        <title>Object</title>
        <target refid="object-auditor"></target>
        <section ids="module-swift.obj.auditor id2 object-auditor" names="object\ auditor object-auditor">
            <title>Object Auditor</title>
            <index entries="['single',\ u'swift.obj.auditor\ (module)',\ u'module-swift.obj.auditor',\ '',\ None]"></index>
            <index entries="['single',\ u'AuditorWorker\ (class\ in\ swift.obj.auditor)',\ u'swift.obj.auditor.AuditorWorker',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="AuditorWorker" ids="swift.obj.auditor.AuditorWorker" module="swift.obj.auditor" names="swift.obj.auditor.AuditorWorker"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.auditor.</desc_addname><desc_name xml:space="preserve">AuditorWorker</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter><desc_parameter xml:space="preserve">logger</desc_parameter><desc_parameter xml:space="preserve">rcache</desc_parameter><desc_parameter xml:space="preserve">devices</desc_parameter><desc_parameter xml:space="preserve">zero_byte_only_at_fps=0</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Walk through file system to audit objects</paragraph>
                    <index entries="['single',\ u'audit_all_objects()\ (swift.obj.auditor.AuditorWorker\ method)',\ u'swift.obj.auditor.AuditorWorker.audit_all_objects',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AuditorWorker" first="False" fullname="AuditorWorker.audit_all_objects" ids="swift.obj.auditor.AuditorWorker.audit_all_objects" module="swift.obj.auditor" names="swift.obj.auditor.AuditorWorker.audit_all_objects"><desc_name xml:space="preserve">audit_all_objects</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">mode='once'</desc_parameter><desc_parameter xml:space="preserve">device_dirs=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'create_recon_nested_dict()\ (swift.obj.auditor.AuditorWorker\ method)',\ u'swift.obj.auditor.AuditorWorker.create_recon_nested_dict',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AuditorWorker" first="False" fullname="AuditorWorker.create_recon_nested_dict" ids="swift.obj.auditor.AuditorWorker.create_recon_nested_dict" module="swift.obj.auditor" names="swift.obj.auditor.AuditorWorker.create_recon_nested_dict"><desc_name xml:space="preserve">create_recon_nested_dict</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">top_level_key</desc_parameter><desc_parameter xml:space="preserve">device_list</desc_parameter><desc_parameter xml:space="preserve">item</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'failsafe_object_audit()\ (swift.obj.auditor.AuditorWorker\ method)',\ u'swift.obj.auditor.AuditorWorker.failsafe_object_audit',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AuditorWorker" first="False" fullname="AuditorWorker.failsafe_object_audit" ids="swift.obj.auditor.AuditorWorker.failsafe_object_audit" module="swift.obj.auditor" names="swift.obj.auditor.AuditorWorker.failsafe_object_audit"><desc_name xml:space="preserve">failsafe_object_audit</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">location</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Entrypoint to object_audit, with a failsafe generic exception handler.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'object_audit()\ (swift.obj.auditor.AuditorWorker\ method)',\ u'swift.obj.auditor.AuditorWorker.object_audit',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AuditorWorker" first="False" fullname="AuditorWorker.object_audit" ids="swift.obj.auditor.AuditorWorker.object_audit" module="swift.obj.auditor" names="swift.obj.auditor.AuditorWorker.object_audit"><desc_name xml:space="preserve">object_audit</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">location</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Audits the given object location.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">location</literal_strong> – an audit location
                                            (from diskfile.object_audit_location_generator)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'record_stats()\ (swift.obj.auditor.AuditorWorker\ method)',\ u'swift.obj.auditor.AuditorWorker.record_stats',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AuditorWorker" first="False" fullname="AuditorWorker.record_stats" ids="swift.obj.auditor.AuditorWorker.record_stats" module="swift.obj.auditor" names="swift.obj.auditor.AuditorWorker.record_stats"><desc_name xml:space="preserve">record_stats</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">obj_size</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Based on config’s object_size_stats will keep track of how many objects
                                fall into the specified ranges. For example with the following:</paragraph>
                            <paragraph>object_size_stats = 10, 100, 1024</paragraph>
                            <paragraph>and your system has 3 objects of sizes: 5, 20, and 10000 bytes the log
                                will look like: {“10”: 1, “100”: 1, “1024”: 0, “OVER”: 1}</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ObjectAuditor\ (class\ in\ swift.obj.auditor)',\ u'swift.obj.auditor.ObjectAuditor',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ObjectAuditor" ids="swift.obj.auditor.ObjectAuditor" module="swift.obj.auditor" names="swift.obj.auditor.ObjectAuditor"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.auditor.</desc_addname><desc_name xml:space="preserve">ObjectAuditor</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter><desc_parameter xml:space="preserve">**options</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">swift.common.daemon.Daemon</literal></paragraph>
                    <paragraph>Audit objects.</paragraph>
                    <index entries="['single',\ u'audit_loop()\ (swift.obj.auditor.ObjectAuditor\ method)',\ u'swift.obj.auditor.ObjectAuditor.audit_loop',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectAuditor" first="False" fullname="ObjectAuditor.audit_loop" ids="swift.obj.auditor.ObjectAuditor.audit_loop" module="swift.obj.auditor" names="swift.obj.auditor.ObjectAuditor.audit_loop"><desc_name xml:space="preserve">audit_loop</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">parent</desc_parameter><desc_parameter xml:space="preserve">zbo_fps</desc_parameter><desc_parameter xml:space="preserve">override_devices=None</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Parallel audit loop</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'clear_recon_cache()\ (swift.obj.auditor.ObjectAuditor\ method)',\ u'swift.obj.auditor.ObjectAuditor.clear_recon_cache',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectAuditor" first="False" fullname="ObjectAuditor.clear_recon_cache" ids="swift.obj.auditor.ObjectAuditor.clear_recon_cache" module="swift.obj.auditor" names="swift.obj.auditor.ObjectAuditor.clear_recon_cache"><desc_name xml:space="preserve">clear_recon_cache</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">auditor_type</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Clear recon cache entries</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'fork_child()\ (swift.obj.auditor.ObjectAuditor\ method)',\ u'swift.obj.auditor.ObjectAuditor.fork_child',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectAuditor" first="False" fullname="ObjectAuditor.fork_child" ids="swift.obj.auditor.ObjectAuditor.fork_child" module="swift.obj.auditor" names="swift.obj.auditor.ObjectAuditor.fork_child"><desc_name xml:space="preserve">fork_child</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">zero_byte_fps=False</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Child execution</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'run_audit()\ (swift.obj.auditor.ObjectAuditor\ method)',\ u'swift.obj.auditor.ObjectAuditor.run_audit',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectAuditor" first="False" fullname="ObjectAuditor.run_audit" ids="swift.obj.auditor.ObjectAuditor.run_audit" module="swift.obj.auditor" names="swift.obj.auditor.ObjectAuditor.run_audit"><desc_name xml:space="preserve">run_audit</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Run the object audit</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'run_forever()\ (swift.obj.auditor.ObjectAuditor\ method)',\ u'swift.obj.auditor.ObjectAuditor.run_forever',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectAuditor" first="False" fullname="ObjectAuditor.run_forever" ids="swift.obj.auditor.ObjectAuditor.run_forever" module="swift.obj.auditor" names="swift.obj.auditor.ObjectAuditor.run_forever"><desc_name xml:space="preserve">run_forever</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Run the object audit until stopped.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'run_once()\ (swift.obj.auditor.ObjectAuditor\ method)',\ u'swift.obj.auditor.ObjectAuditor.run_once',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectAuditor" first="False" fullname="ObjectAuditor.run_once" ids="swift.obj.auditor.ObjectAuditor.run_once" module="swift.obj.auditor" names="swift.obj.auditor.ObjectAuditor.run_once"><desc_name xml:space="preserve">run_once</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Run the object audit once</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <target refid="object-diskfile"></target>
        </section>
        <section ids="module-swift.obj.diskfile object-backend object-diskfile" names="object\ backend object-diskfile">
            <title>Object Backend</title>
            <index entries="['single',\ u'swift.obj.diskfile\ (module)',\ u'module-swift.obj.diskfile',\ '',\ None]"></index>
            <paragraph>Disk File Interface for the Swift Object Server</paragraph>
            <paragraph>The <title_reference>DiskFile</title_reference>, <title_reference>DiskFileWriter</title_reference> and <title_reference>DiskFileReader</title_reference> classes combined define
                the on-disk abstraction layer for supporting the object server REST API
                interfaces (excluding <title_reference>REPLICATE</title_reference>). Other implementations wishing to provide
                an alternative backend for the object server must implement the three
                classes. An example alternative implementation can be found in the
                <title_reference>mem_server.py</title_reference> and <title_reference>mem_diskfile.py</title_reference> modules along size this one.</paragraph>
            <paragraph>The <title_reference>DiskFileManager</title_reference> is a reference implemenation specific class and is not
                part of the backend API.</paragraph>
            <paragraph>The remaining methods in this module are considered implementation specific and
                are also not considered part of the backend API.</paragraph>
            <index entries="['single',\ u'AuditLocation\ (class\ in\ swift.obj.diskfile)',\ u'swift.obj.diskfile.AuditLocation',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="AuditLocation" ids="swift.obj.diskfile.AuditLocation" module="swift.obj.diskfile" names="swift.obj.diskfile.AuditLocation"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">AuditLocation</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">path</desc_parameter><desc_parameter xml:space="preserve">device</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">policy</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Represents an object location to be audited.</paragraph>
                    <paragraph>Other than being a bucket of data, the only useful thing this does is
                        stringify to a filesystem path so the auditor’s logs look okay.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'BaseDiskFile\ (class\ in\ swift.obj.diskfile)',\ u'swift.obj.diskfile.BaseDiskFile',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BaseDiskFile" ids="swift.obj.diskfile.BaseDiskFile" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFile"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">BaseDiskFile</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">mgr</desc_parameter><desc_parameter xml:space="preserve">device_path</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">account=None</desc_parameter><desc_parameter xml:space="preserve">container=None</desc_parameter><desc_parameter xml:space="preserve">obj=None</desc_parameter><desc_parameter xml:space="preserve">_datadir=None</desc_parameter><desc_parameter xml:space="preserve">policy=None</desc_parameter><desc_parameter xml:space="preserve">use_splice=False</desc_parameter><desc_parameter xml:space="preserve">pipe_size=None</desc_parameter><desc_parameter xml:space="preserve">use_linkat=False</desc_parameter><desc_parameter xml:space="preserve">open_expired=False</desc_parameter><desc_parameter xml:space="preserve">next_part_power=None</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Manage object files.</paragraph>
                    <paragraph>This specific implementation manages object files on a disk formatted with
                        a POSIX-compliant file system that supports extended attributes as
                        metadata on a file or directory.</paragraph>
                    <note>
                        <paragraph>The arguments to the constructor are considered implementation
                            specific. The API does not define the constructor arguments.</paragraph>
                        <paragraph>The following path format is used for data file locations:
                            &lt;devices_path/&lt;device_dir&gt;/&lt;datadir&gt;/&lt;partdir&gt;/&lt;suffixdir&gt;/&lt;hashdir&gt;/
                            &lt;datafile&gt;.&lt;ext&gt;</paragraph>
                    </note>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">mgr</literal_strong> – associated DiskFileManager instance</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">device_path</literal_strong> – path to the target device or drive</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">partition</literal_strong> – partition on the device in which the object lives</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">account</literal_strong> – account name for the object</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">container</literal_strong> – container name for the object</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">obj</literal_strong> – object name for the object</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">_datadir</literal_strong> – override the full datadir otherwise constructed here</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">policy</literal_strong> – the StoragePolicy instance</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_splice</literal_strong> – if true, use zero-copy splice() to send data</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">pipe_size</literal_strong> – size of pipe buffer used in zero-copy operations</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_linkat</literal_strong> – if True, use open() with linkat() to create obj file</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">open_expired</literal_strong> – if True, open() will not raise a DiskFileExpired if
                                            object is expired</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">next_part_power</literal_strong> – the next partition power to be used</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                    <index entries="['single',\ u'account\ (swift.obj.diskfile.BaseDiskFile\ attribute)',\ u'swift.obj.diskfile.BaseDiskFile.account',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.account" ids="swift.obj.diskfile.BaseDiskFile.account" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFile.account"><desc_name xml:space="preserve">account</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'container\ (swift.obj.diskfile.BaseDiskFile\ attribute)',\ u'swift.obj.diskfile.BaseDiskFile.container',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.container" ids="swift.obj.diskfile.BaseDiskFile.container" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFile.container"><desc_name xml:space="preserve">container</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'content_length\ (swift.obj.diskfile.BaseDiskFile\ attribute)',\ u'swift.obj.diskfile.BaseDiskFile.content_length',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.content_length" ids="swift.obj.diskfile.BaseDiskFile.content_length" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFile.content_length"><desc_name xml:space="preserve">content_length</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'content_type\ (swift.obj.diskfile.BaseDiskFile\ attribute)',\ u'swift.obj.diskfile.BaseDiskFile.content_type',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.content_type" ids="swift.obj.diskfile.BaseDiskFile.content_type" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFile.content_type"><desc_name xml:space="preserve">content_type</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'content_type_timestamp\ (swift.obj.diskfile.BaseDiskFile\ attribute)',\ u'swift.obj.diskfile.BaseDiskFile.content_type_timestamp',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.content_type_timestamp" ids="swift.obj.diskfile.BaseDiskFile.content_type_timestamp" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFile.content_type_timestamp"><desc_name xml:space="preserve">content_type_timestamp</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'create()\ (swift.obj.diskfile.BaseDiskFile\ method)',\ u'swift.obj.diskfile.BaseDiskFile.create',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.create" ids="swift.obj.diskfile.BaseDiskFile.create" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFile.create"><desc_name xml:space="preserve">create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwds</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Context manager to create a file. We create a temporary file first, and
                                then return a DiskFileWriter object to encapsulate the state.</paragraph>
                            <note>
                                <paragraph>An implementation is not required to perform on-disk
                                    preallocations even if the parameter is specified. But if it does
                                    and it fails, it must raise a <title_reference>DiskFileNoSpace</title_reference> exception.</paragraph>
                            </note>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">size</literal_strong> – optional initial size of file to explicitly allocate on
                                            disk</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileNoSpace" refuri="misc#swift.common.exceptions.DiskFileNoSpace"><literal_strong>DiskFileNoSpace</literal_strong></reference> – if a size is specified and allocation fails</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'data_timestamp\ (swift.obj.diskfile.BaseDiskFile\ attribute)',\ u'swift.obj.diskfile.BaseDiskFile.data_timestamp',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.data_timestamp" ids="swift.obj.diskfile.BaseDiskFile.data_timestamp" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFile.data_timestamp"><desc_name xml:space="preserve">data_timestamp</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'delete()\ (swift.obj.diskfile.BaseDiskFile\ method)',\ u'swift.obj.diskfile.BaseDiskFile.delete',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.delete" ids="swift.obj.diskfile.BaseDiskFile.delete" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFile.delete"><desc_name xml:space="preserve">delete</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">timestamp</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Delete the object.</paragraph>
                            <paragraph>This implementation creates a tombstone file using the given
                                timestamp, and removes any older versions of the object file. Any
                                file that has an older timestamp than timestamp will be deleted.</paragraph>
                            <note>
                                <paragraph>An implementation is free to use or ignore the timestamp
                                    parameter.</paragraph>
                            </note>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">timestamp</literal_strong> – timestamp to compare with each file</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileError" refuri="misc#swift.common.exceptions.DiskFileError"><literal_strong>DiskFileError</literal_strong></reference> – this implementation will raise the same
                                            errors as the <title_reference>create()</title_reference> method.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'durable_timestamp\ (swift.obj.diskfile.BaseDiskFile\ attribute)',\ u'swift.obj.diskfile.BaseDiskFile.durable_timestamp',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.durable_timestamp" ids="swift.obj.diskfile.BaseDiskFile.durable_timestamp" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFile.durable_timestamp"><desc_name xml:space="preserve">durable_timestamp</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Provides the timestamp of the newest data file found in the object
                                directory.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>A Timestamp instance, or None if no data file was found.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileNotOpen" refuri="misc#swift.common.exceptions.DiskFileNotOpen"><literal_strong>DiskFileNotOpen</literal_strong></reference> – if the open() method has not been previously
                                            called on this instance.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'fragments\ (swift.obj.diskfile.BaseDiskFile\ attribute)',\ u'swift.obj.diskfile.BaseDiskFile.fragments',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.fragments" ids="swift.obj.diskfile.BaseDiskFile.fragments" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFile.fragments"><desc_name xml:space="preserve">fragments</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'from_hash_dir()\ (swift.obj.diskfile.BaseDiskFile\ class\ method)',\ u'swift.obj.diskfile.BaseDiskFile.from_hash_dir',\ '',\ None]"></index>
                    <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.from_hash_dir" ids="swift.obj.diskfile.BaseDiskFile.from_hash_dir" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFile.from_hash_dir"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">from_hash_dir</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">mgr</desc_parameter><desc_parameter xml:space="preserve">hash_dir_path</desc_parameter><desc_parameter xml:space="preserve">device_path</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">policy</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_datafile_metadata()\ (swift.obj.diskfile.BaseDiskFile\ method)',\ u'swift.obj.diskfile.BaseDiskFile.get_datafile_metadata',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.get_datafile_metadata" ids="swift.obj.diskfile.BaseDiskFile.get_datafile_metadata" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFile.get_datafile_metadata"><desc_name xml:space="preserve">get_datafile_metadata</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Provide the datafile metadata for a previously opened object as a
                                dictionary. This is metadata that was included when the object was
                                first PUT, and does not include metadata set by any subsequent POST.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>object’s datafile metadata dictionary</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileNotOpen" refuri="misc#swift.common.exceptions.DiskFileNotOpen"><literal_strong>DiskFileNotOpen</literal_strong></reference> – if the
                                            <literal classes="xref py py-func">swift.obj.diskfile.DiskFile.open()</literal> method was not previously
                                            invoked</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_metadata()\ (swift.obj.diskfile.BaseDiskFile\ method)',\ u'swift.obj.diskfile.BaseDiskFile.get_metadata',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.get_metadata" ids="swift.obj.diskfile.BaseDiskFile.get_metadata" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFile.get_metadata"><desc_name xml:space="preserve">get_metadata</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Provide the metadata for a previously opened object as a dictionary.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>object’s metadata dictionary</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileNotOpen" refuri="misc#swift.common.exceptions.DiskFileNotOpen"><literal_strong>DiskFileNotOpen</literal_strong></reference> – if the
                                            <literal classes="xref py py-func">swift.obj.diskfile.DiskFile.open()</literal> method was not previously
                                            invoked</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_metafile_metadata()\ (swift.obj.diskfile.BaseDiskFile\ method)',\ u'swift.obj.diskfile.BaseDiskFile.get_metafile_metadata',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.get_metafile_metadata" ids="swift.obj.diskfile.BaseDiskFile.get_metafile_metadata" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFile.get_metafile_metadata"><desc_name xml:space="preserve">get_metafile_metadata</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Provide the metafile metadata for a previously opened object as a
                                dictionary. This is metadata that was written by a POST and does not
                                include any persistent metadata that was set by the original PUT.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>object’s .meta file metadata dictionary, or None if there is
                                            no .meta file</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileNotOpen" refuri="misc#swift.common.exceptions.DiskFileNotOpen"><literal_strong>DiskFileNotOpen</literal_strong></reference> – if the
                                            <literal classes="xref py py-func">swift.obj.diskfile.DiskFile.open()</literal> method was not previously
                                            invoked</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'manager\ (swift.obj.diskfile.BaseDiskFile\ attribute)',\ u'swift.obj.diskfile.BaseDiskFile.manager',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.manager" ids="swift.obj.diskfile.BaseDiskFile.manager" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFile.manager"><desc_name xml:space="preserve">manager</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'obj\ (swift.obj.diskfile.BaseDiskFile\ attribute)',\ u'swift.obj.diskfile.BaseDiskFile.obj',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.obj" ids="swift.obj.diskfile.BaseDiskFile.obj" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFile.obj"><desc_name xml:space="preserve">obj</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'open()\ (swift.obj.diskfile.BaseDiskFile\ method)',\ u'swift.obj.diskfile.BaseDiskFile.open',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.open" ids="swift.obj.diskfile.BaseDiskFile.open" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFile.open"><desc_name xml:space="preserve">open</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Open the object.</paragraph>
                            <paragraph>This implementation opens the data file representing the object, reads
                                the associated metadata in the extended attributes, additionally
                                combining metadata from fast-POST <title_reference>.meta</title_reference> files.</paragraph>
                            <note>
                                <paragraph>An implementation is allowed to raise any of the following
                                    exceptions, but is only required to raise <title_reference>DiskFileNotExist</title_reference> when
                                    the object representation does not exist.</paragraph>
                            </note>
                            <field_list>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileCollision" refuri="misc#swift.common.exceptions.DiskFileCollision"><literal_strong>DiskFileCollision</literal_strong></reference> – on name mis-match with metadata</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileNotExist" refuri="misc#swift.common.exceptions.DiskFileNotExist"><literal_strong>DiskFileNotExist</literal_strong></reference> – if the object does not exist</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileDeleted" refuri="misc#swift.common.exceptions.DiskFileDeleted"><literal_strong>DiskFileDeleted</literal_strong></reference> – if the object was previously deleted</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileQuarantined" refuri="misc#swift.common.exceptions.DiskFileQuarantined"><literal_strong>DiskFileQuarantined</literal_strong></reference> – if while reading metadata of the file
                                                    some data did pass cross checks</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>itself for use as a context manager</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'read_metadata()\ (swift.obj.diskfile.BaseDiskFile\ method)',\ u'swift.obj.diskfile.BaseDiskFile.read_metadata',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.read_metadata" ids="swift.obj.diskfile.BaseDiskFile.read_metadata" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFile.read_metadata"><desc_name xml:space="preserve">read_metadata</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return the metadata for an object without requiring the caller to open
                                the object first.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>metadata dictionary for an object</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileError" refuri="misc#swift.common.exceptions.DiskFileError"><literal_strong>DiskFileError</literal_strong></reference> – this implementation will raise the same
                                            errors as the <title_reference>open()</title_reference> method.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'reader()\ (swift.obj.diskfile.BaseDiskFile\ method)',\ u'swift.obj.diskfile.BaseDiskFile.reader',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.reader" ids="swift.obj.diskfile.BaseDiskFile.reader" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFile.reader"><desc_name xml:space="preserve">reader</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">keep_cache=False</desc_parameter><desc_parameter xml:space="preserve">_quarantine_hook=&lt;function &lt;lambda&gt;&gt;</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return a <reference internal="True" reftitle="swift.common.swob.Response" refuri="misc#swift.common.swob.Response"><literal classes="xref py py-class">swift.common.swob.Response</literal></reference> class compatible
                                “<title_reference>app_iter</title_reference>” object as defined by
                                <reference internal="True" refid="swift.obj.diskfile.DiskFileReader" reftitle="swift.obj.diskfile.DiskFileReader"><literal classes="xref py py-class">swift.obj.diskfile.DiskFileReader</literal></reference>.</paragraph>
                            <paragraph>For this implementation, the responsibility of closing the open file
                                is passed to the <reference internal="True" refid="swift.obj.diskfile.DiskFileReader" reftitle="swift.obj.diskfile.DiskFileReader"><literal classes="xref py py-class">swift.obj.diskfile.DiskFileReader</literal></reference> object.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">keep_cache</literal_strong> – caller’s preference for keeping data read in the
                                                    OS buffer cache</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">_quarantine_hook</literal_strong> – 1-arg callable called when obj quarantined;
                                                    the arg is the reason for quarantine.
                                                    Default is to ignore it.
                                                    Not needed by the REST layer.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a <reference internal="True" refid="swift.obj.diskfile.DiskFileReader" reftitle="swift.obj.diskfile.DiskFileReader"><literal classes="xref py py-class">swift.obj.diskfile.DiskFileReader</literal></reference> object</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'reader_cls\ (swift.obj.diskfile.BaseDiskFile\ attribute)',\ u'swift.obj.diskfile.BaseDiskFile.reader_cls',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.reader_cls" ids="swift.obj.diskfile.BaseDiskFile.reader_cls" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFile.reader_cls"><desc_name xml:space="preserve">reader_cls</desc_name><desc_annotation xml:space="preserve"> = None</desc_annotation></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'timestamp\ (swift.obj.diskfile.BaseDiskFile\ attribute)',\ u'swift.obj.diskfile.BaseDiskFile.timestamp',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.timestamp" ids="swift.obj.diskfile.BaseDiskFile.timestamp" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFile.timestamp"><desc_name xml:space="preserve">timestamp</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'write_metadata()\ (swift.obj.diskfile.BaseDiskFile\ method)',\ u'swift.obj.diskfile.BaseDiskFile.write_metadata',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.write_metadata" ids="swift.obj.diskfile.BaseDiskFile.write_metadata" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFile.write_metadata"><desc_name xml:space="preserve">write_metadata</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">metadata</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Write a block of metadata to an object without requiring the caller to
                                create the object first. Supports fast-POST behavior semantics.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">metadata</literal_strong> – dictionary of metadata to be associated with the
                                            object</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileError" refuri="misc#swift.common.exceptions.DiskFileError"><literal_strong>DiskFileError</literal_strong></reference> – this implementation will raise the same
                                            errors as the <title_reference>create()</title_reference> method.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'writer_cls\ (swift.obj.diskfile.BaseDiskFile\ attribute)',\ u'swift.obj.diskfile.BaseDiskFile.writer_cls',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BaseDiskFile" first="False" fullname="BaseDiskFile.writer_cls" ids="swift.obj.diskfile.BaseDiskFile.writer_cls" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFile.writer_cls"><desc_name xml:space="preserve">writer_cls</desc_name><desc_annotation xml:space="preserve"> = None</desc_annotation></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'BaseDiskFileManager\ (class\ in\ swift.obj.diskfile)',\ u'swift.obj.diskfile.BaseDiskFileManager',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BaseDiskFileManager" ids="swift.obj.diskfile.BaseDiskFileManager" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileManager"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">BaseDiskFileManager</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter><desc_parameter xml:space="preserve">logger</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Management class for devices, providing common place for shared parameters
                        and methods not provided by the DiskFile class (which primarily services
                        the object server REST API layer).</paragraph>
                    <paragraph>The <title_reference>get_diskfile()</title_reference> method is how this implementation creates a <title_reference>DiskFile</title_reference>
                        object.</paragraph>
                    <note>
                        <paragraph>This class is reference implementation specific and not part of the
                            pluggable on-disk backend API.</paragraph>
                    </note>
                    <note>
                        <paragraph>TODO(portante): Not sure what the right name to recommend here, as
                            “manager” seemed generic enough, though suggestions are welcome.</paragraph>
                    </note>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">conf</literal_strong> – caller provided configuration object</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">logger</literal_strong> – caller provided logger</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                    <index entries="['single',\ u'cleanup_ondisk_files()\ (swift.obj.diskfile.BaseDiskFileManager\ method)',\ u'swift.obj.diskfile.BaseDiskFileManager.cleanup_ondisk_files',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.cleanup_ondisk_files" ids="swift.obj.diskfile.BaseDiskFileManager.cleanup_ondisk_files" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileManager.cleanup_ondisk_files"><desc_name xml:space="preserve">cleanup_ondisk_files</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">hsh_path</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Clean up on-disk files that are obsolete and gather the set of valid
                                on-disk files for an object.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">hsh_path</literal_strong> – object hash path</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">frag_index</literal_strong> – if set, search for a specific fragment index .data
                                                    file, otherwise accept the first valid .data file</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a dict that may contain: valid on disk files keyed by their
                                            filename extension; a list of obsolete files stored under the
                                            key ‘obsolete’; a list of files remaining in the directory,
                                            reverse sorted, stored under the key ‘files’.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'consolidate_hashes()\ (swift.obj.diskfile.BaseDiskFileManager\ method)',\ u'swift.obj.diskfile.BaseDiskFileManager.consolidate_hashes',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.consolidate_hashes" ids="swift.obj.diskfile.BaseDiskFileManager.consolidate_hashes" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileManager.consolidate_hashes"><desc_name xml:space="preserve">consolidate_hashes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'construct_dev_path()\ (swift.obj.diskfile.BaseDiskFileManager\ method)',\ u'swift.obj.diskfile.BaseDiskFileManager.construct_dev_path',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.construct_dev_path" ids="swift.obj.diskfile.BaseDiskFileManager.construct_dev_path" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileManager.construct_dev_path"><desc_name xml:space="preserve">construct_dev_path</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">device</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Construct the path to a device without checking if it is mounted.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">device</literal_strong> – name of target device</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>full path to the device</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'diskfile_cls\ (swift.obj.diskfile.BaseDiskFileManager\ attribute)',\ u'swift.obj.diskfile.BaseDiskFileManager.diskfile_cls',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.diskfile_cls" ids="swift.obj.diskfile.BaseDiskFileManager.diskfile_cls" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileManager.diskfile_cls"><desc_name xml:space="preserve">diskfile_cls</desc_name><desc_annotation xml:space="preserve"> = None</desc_annotation></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_dev_path()\ (swift.obj.diskfile.BaseDiskFileManager\ method)',\ u'swift.obj.diskfile.BaseDiskFileManager.get_dev_path',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.get_dev_path" ids="swift.obj.diskfile.BaseDiskFileManager.get_dev_path" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileManager.get_dev_path"><desc_name xml:space="preserve">get_dev_path</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">device</desc_parameter><desc_parameter xml:space="preserve">mount_check=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return the path to a device, first checking to see if either it
                                is a proper mount point, or at least a directory depending on
                                the mount_check configuration option.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">device</literal_strong> – name of target device</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">mount_check</literal_strong> – whether or not to check mountedness of device.
                                                    Defaults to bool(self.mount_check).</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>full path to the device, None if the path to the device is
                                            not a proper mount point or directory.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_diskfile()\ (swift.obj.diskfile.BaseDiskFileManager\ method)',\ u'swift.obj.diskfile.BaseDiskFileManager.get_diskfile',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.get_diskfile" ids="swift.obj.diskfile.BaseDiskFileManager.get_diskfile" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileManager.get_diskfile"><desc_name xml:space="preserve">get_diskfile</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">device</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">obj</desc_parameter><desc_parameter xml:space="preserve">policy</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns a BaseDiskFile instance for an object based on the object’s
                                partition, path parts and policy.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">device</literal_strong> – name of target device</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">partition</literal_strong> – partition on device in which the object lives</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – account name for the object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> – container name for the object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">obj</literal_strong> – object name for the object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">policy</literal_strong> – the StoragePolicy instance</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_diskfile_from_audit_location()\ (swift.obj.diskfile.BaseDiskFileManager\ method)',\ u'swift.obj.diskfile.BaseDiskFileManager.get_diskfile_from_audit_location',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.get_diskfile_from_audit_location" ids="swift.obj.diskfile.BaseDiskFileManager.get_diskfile_from_audit_location" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileManager.get_diskfile_from_audit_location"><desc_name xml:space="preserve">get_diskfile_from_audit_location</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">audit_location</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns a BaseDiskFile instance for an object at the given
                                AuditLocation.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">audit_location</literal_strong> – object location to be audited</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_diskfile_from_hash()\ (swift.obj.diskfile.BaseDiskFileManager\ method)',\ u'swift.obj.diskfile.BaseDiskFileManager.get_diskfile_from_hash',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.get_diskfile_from_hash" ids="swift.obj.diskfile.BaseDiskFileManager.get_diskfile_from_hash" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileManager.get_diskfile_from_hash"><desc_name xml:space="preserve">get_diskfile_from_hash</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">device</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">object_hash</desc_parameter><desc_parameter xml:space="preserve">policy</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns a DiskFile instance for an object at the given
                                object_hash. Just in case someone thinks of refactoring, be
                                sure DiskFileDeleted is <emphasis>not</emphasis> raised, but the DiskFile
                                instance representing the tombstoned object is returned
                                instead.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">device</literal_strong> – name of target device</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">partition</literal_strong> – partition on the device in which the object lives</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">object_hash</literal_strong> – the hash of an object path</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">policy</literal_strong> – the StoragePolicy instance</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileNotExist" refuri="misc#swift.common.exceptions.DiskFileNotExist"><literal_strong>DiskFileNotExist</literal_strong></reference> – if the object does not exist</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>an instance of BaseDiskFile</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_hashes()\ (swift.obj.diskfile.BaseDiskFileManager\ method)',\ u'swift.obj.diskfile.BaseDiskFileManager.get_hashes',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.get_hashes" ids="swift.obj.diskfile.BaseDiskFileManager.get_hashes" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileManager.get_hashes"><desc_name xml:space="preserve">get_hashes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">device</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">suffixes</desc_parameter><desc_parameter xml:space="preserve">policy</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">device</literal_strong> – name of target device</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">partition</literal_strong> – partition name</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">suffixes</literal_strong> – a list of suffix directories to be recalculated</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">policy</literal_strong> – the StoragePolicy instance</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a dictionary that maps suffix directories</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_ondisk_files()\ (swift.obj.diskfile.BaseDiskFileManager\ method)',\ u'swift.obj.diskfile.BaseDiskFileManager.get_ondisk_files',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.get_ondisk_files" ids="swift.obj.diskfile.BaseDiskFileManager.get_ondisk_files" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileManager.get_ondisk_files"><desc_name xml:space="preserve">get_ondisk_files</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">files</desc_parameter><desc_parameter xml:space="preserve">datadir</desc_parameter><desc_parameter xml:space="preserve">verify=True</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Given a simple list of files names, determine the files that constitute
                                a valid fileset i.e. a set of files that defines the state of an
                                object, and determine the files that are obsolete and could be deleted.
                                Note that some files may fall into neither category.</paragraph>
                            <paragraph>If a file is considered part of a valid fileset then its info dict will
                                be added to the results dict, keyed by &lt;extension&gt;_info. Any files that
                                are no longer required will have their info dicts added to a list
                                stored under the key ‘obsolete’.</paragraph>
                            <paragraph>The results dict will always contain entries with keys ‘ts_file’,
                                ‘data_file’ and ‘meta_file’. Their values will be the fully qualified
                                path to a file of the corresponding type if there is such a file in the
                                valid fileset, or None.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">files</literal_strong> – a list of file names.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">datadir</literal_strong> – directory name files are from.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">verify</literal_strong> – if True verify that the ondisk file contract has not
                                                    been violated, otherwise do not verify.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph><definition_list><definition_list_item><term>a dict that will contain keys:</term><definition><paragraph>ts_file   -&gt; path to a .ts file or None
                                                            data_file -&gt; path to a .data file or None
                                                            meta_file -&gt; path to a .meta file or None
                                                            ctype_file -&gt; path to a .meta file or None</paragraph></definition></definition_list_item><definition_list_item><term>and may contain keys:</term><definition><paragraph>ts_info   -&gt; a file info dict for a .ts file
                                                            data_info -&gt; a file info dict for a .data file
                                                            meta_info -&gt; a file info dict for a .meta file
                                                            ctype_info -&gt; a file info dict for a .meta file which
                                                            contains the content-type value
                                                            unexpected -&gt; a list of file paths for unexpected
                                                            files
                                                            possible_reclaim -&gt; a list of file info dicts for possible
                                                            reclaimable files
                                                            obsolete  -&gt; a list of file info dicts for obsolete files</paragraph></definition></definition_list_item></definition_list></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'invalidate_hash()\ (swift.obj.diskfile.BaseDiskFileManager\ method)',\ u'swift.obj.diskfile.BaseDiskFileManager.invalidate_hash',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.invalidate_hash" ids="swift.obj.diskfile.BaseDiskFileManager.invalidate_hash" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileManager.invalidate_hash"><desc_name xml:space="preserve">invalidate_hash</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'make_on_disk_filename()\ (swift.obj.diskfile.BaseDiskFileManager\ method)',\ u'swift.obj.diskfile.BaseDiskFileManager.make_on_disk_filename',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.make_on_disk_filename" ids="swift.obj.diskfile.BaseDiskFileManager.make_on_disk_filename" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileManager.make_on_disk_filename"><desc_name xml:space="preserve">make_on_disk_filename</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">timestamp</desc_parameter><desc_parameter xml:space="preserve">ext=None</desc_parameter><desc_parameter xml:space="preserve">ctype_timestamp=None</desc_parameter><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns filename for given timestamp.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">timestamp</literal_strong> – the object timestamp, an instance of
                                                    <reference internal="True" reftitle="swift.common.utils.Timestamp" refuri="misc#swift.common.utils.Timestamp"><literal classes="xref py py-class">Timestamp</literal></reference></paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">ext</literal_strong> – an optional string representing a file extension to be
                                                    appended to the returned file name</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">ctype_timestamp</literal_strong> – an optional content-type timestamp, an instance
                                                    of <reference internal="True" reftitle="swift.common.utils.Timestamp" refuri="misc#swift.common.utils.Timestamp"><literal classes="xref py py-class">Timestamp</literal></reference></paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a file name</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'object_audit_location_generator()\ (swift.obj.diskfile.BaseDiskFileManager\ method)',\ u'swift.obj.diskfile.BaseDiskFileManager.object_audit_location_generator',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.object_audit_location_generator" ids="swift.obj.diskfile.BaseDiskFileManager.object_audit_location_generator" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileManager.object_audit_location_generator"><desc_name xml:space="preserve">object_audit_location_generator</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">device_dirs=None</desc_parameter><desc_parameter xml:space="preserve">auditor_type='ALL'</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Yield an AuditLocation for all objects stored under device_dirs.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">device_dirs</literal_strong> – directory of target device</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">auditor_type</literal_strong> – either ALL or ZBF</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'parse_on_disk_filename()\ (swift.obj.diskfile.BaseDiskFileManager\ method)',\ u'swift.obj.diskfile.BaseDiskFileManager.parse_on_disk_filename',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.parse_on_disk_filename" ids="swift.obj.diskfile.BaseDiskFileManager.parse_on_disk_filename" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileManager.parse_on_disk_filename"><desc_name xml:space="preserve">parse_on_disk_filename</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">filename</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Parse an on disk file name.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">filename</literal_strong> – the file name including extension</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph><paragraph>a dict, with keys for timestamp, ext and ctype_timestamp:</paragraph><bullet_list bullet="*"><list_item><paragraph>timestamp is a <reference internal="True" reftitle="swift.common.utils.Timestamp" refuri="misc#swift.common.utils.Timestamp"><literal classes="xref py py-class">Timestamp</literal></reference></paragraph></list_item><list_item><paragraph>ctype_timestamp is a <reference internal="True" reftitle="swift.common.utils.Timestamp" refuri="misc#swift.common.utils.Timestamp"><literal classes="xref py py-class">Timestamp</literal></reference> or
                                                        None for .meta files, otherwise None</paragraph></list_item><list_item><paragraph>ext is a string, the file extension including the leading dot or
                                                        the empty string if the filename has no extension.</paragraph></list_item></bullet_list><paragraph>Subclasses may override this method to add further keys to the
                                                returned dict.</paragraph></paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileError" refuri="misc#swift.common.exceptions.DiskFileError"><literal_strong>DiskFileError</literal_strong></reference> – if any part of the filename is not able to be
                                            validated.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'pickle_async_update()\ (swift.obj.diskfile.BaseDiskFileManager\ method)',\ u'swift.obj.diskfile.BaseDiskFileManager.pickle_async_update',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.pickle_async_update" ids="swift.obj.diskfile.BaseDiskFileManager.pickle_async_update" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileManager.pickle_async_update"><desc_name xml:space="preserve">pickle_async_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">device</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">obj</desc_parameter><desc_parameter xml:space="preserve">data</desc_parameter><desc_parameter xml:space="preserve">timestamp</desc_parameter><desc_parameter xml:space="preserve">policy</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Write data describing a container update notification to a pickle file
                                in the async_pending directory.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">device</literal_strong> – name of target device</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – account name for the object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> – container name for the object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">obj</literal_strong> – object name for the object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">data</literal_strong> – update data to be written to pickle file</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">timestamp</literal_strong> – a Timestamp</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">policy</literal_strong> – the StoragePolicy instance</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'quarantine_renamer()\ (swift.obj.diskfile.BaseDiskFileManager\ method)',\ u'swift.obj.diskfile.BaseDiskFileManager.quarantine_renamer',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.quarantine_renamer" ids="swift.obj.diskfile.BaseDiskFileManager.quarantine_renamer" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileManager.quarantine_renamer"><desc_name xml:space="preserve">quarantine_renamer</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'replication_lock()\ (swift.obj.diskfile.BaseDiskFileManager\ method)',\ u'swift.obj.diskfile.BaseDiskFileManager.replication_lock',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.replication_lock" ids="swift.obj.diskfile.BaseDiskFileManager.replication_lock" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileManager.replication_lock"><desc_name xml:space="preserve">replication_lock</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwds</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>A context manager that will lock on the device given, if
                                configured to do so.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">device</literal_strong> – name of target device</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.ReplicationLockTimeout" refuri="misc#swift.common.exceptions.ReplicationLockTimeout"><literal_strong>ReplicationLockTimeout</literal_strong></reference> – If the lock on the device
                                            cannot be granted within the configured timeout.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'yield_hashes()\ (swift.obj.diskfile.BaseDiskFileManager\ method)',\ u'swift.obj.diskfile.BaseDiskFileManager.yield_hashes',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.yield_hashes" ids="swift.obj.diskfile.BaseDiskFileManager.yield_hashes" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileManager.yield_hashes"><desc_name xml:space="preserve">yield_hashes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">device</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">policy</desc_parameter><desc_parameter xml:space="preserve">suffixes=None</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Yields tuples of (hash_only, timestamps) for object
                                information stored for the given device, partition, and
                                (optionally) suffixes. If suffixes is None, all stored
                                suffixes will be searched for object hashes. Note that if
                                suffixes is not None but empty, such as [], then nothing will
                                be yielded.</paragraph>
                            <paragraph>timestamps is a dict which may contain items mapping:</paragraph>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>ts_data -&gt; timestamp of data or tombstone file,</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>ts_meta -&gt; timestamp of meta file, if one exists</paragraph>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term>ts_ctype -&gt; timestamp of meta file containing most recent</term>
                                            <definition>
                                                <paragraph>content-type value, if one exists</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                            </bullet_list>
                            <paragraph>where timestamps are instances of
                                <reference internal="True" reftitle="swift.common.utils.Timestamp" refuri="misc#swift.common.utils.Timestamp"><literal classes="xref py py-class">Timestamp</literal></reference></paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">device</literal_strong> – name of target device</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">partition</literal_strong> – partition name</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">policy</literal_strong> – the StoragePolicy instance</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">suffixes</literal_strong> – optional list of suffix directories to be searched</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'yield_suffixes()\ (swift.obj.diskfile.BaseDiskFileManager\ method)',\ u'swift.obj.diskfile.BaseDiskFileManager.yield_suffixes',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileManager" first="False" fullname="BaseDiskFileManager.yield_suffixes" ids="swift.obj.diskfile.BaseDiskFileManager.yield_suffixes" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileManager.yield_suffixes"><desc_name xml:space="preserve">yield_suffixes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">device</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">policy</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Yields tuples of (full_path, suffix_only) for suffixes stored
                                on the given device and partition.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">device</literal_strong> – name of target device</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">partition</literal_strong> – partition name</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">policy</literal_strong> – the StoragePolicy instance</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'BaseDiskFileReader\ (class\ in\ swift.obj.diskfile)',\ u'swift.obj.diskfile.BaseDiskFileReader',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BaseDiskFileReader" ids="swift.obj.diskfile.BaseDiskFileReader" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileReader"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">BaseDiskFileReader</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">fp</desc_parameter><desc_parameter xml:space="preserve">data_file</desc_parameter><desc_parameter xml:space="preserve">obj_size</desc_parameter><desc_parameter xml:space="preserve">etag</desc_parameter><desc_parameter xml:space="preserve">disk_chunk_size</desc_parameter><desc_parameter xml:space="preserve">keep_cache_size</desc_parameter><desc_parameter xml:space="preserve">device_path</desc_parameter><desc_parameter xml:space="preserve">logger</desc_parameter><desc_parameter xml:space="preserve">quarantine_hook</desc_parameter><desc_parameter xml:space="preserve">use_splice</desc_parameter><desc_parameter xml:space="preserve">pipe_size</desc_parameter><desc_parameter xml:space="preserve">diskfile</desc_parameter><desc_parameter xml:space="preserve">keep_cache=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Encapsulation of the WSGI read context for servicing GET REST API
                        requests. Serves as the context manager object for the
                        <reference internal="True" refid="swift.obj.diskfile.DiskFile" reftitle="swift.obj.diskfile.DiskFile"><literal classes="xref py py-class">swift.obj.diskfile.DiskFile</literal></reference> class’s
                        <literal classes="xref py py-func">swift.obj.diskfile.DiskFile.reader()</literal> method.</paragraph>
                    <note>
                        <paragraph>The quarantining behavior of this method is considered implementation
                            specific, and is not required of the API.</paragraph>
                    </note>
                    <note>
                        <paragraph>The arguments to the constructor are considered implementation
                            specific. The API does not define the constructor arguments.</paragraph>
                    </note>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">fp</literal_strong> – open file object pointer reference</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">data_file</literal_strong> – on-disk data file name for the object</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">obj_size</literal_strong> – verified on-disk size of the object</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">etag</literal_strong> – expected metadata etag value for entire file</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">disk_chunk_size</literal_strong> – size of reads from disk in bytes</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">keep_cache_size</literal_strong> – maximum object size that will be kept in cache</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">device_path</literal_strong> – on-disk device path, used when quarantining an obj</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">logger</literal_strong> – logger caller wants this object to use</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">quarantine_hook</literal_strong> – 1-arg callable called w/reason when quarantined</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_splice</literal_strong> – if true, use zero-copy splice() to send data</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">pipe_size</literal_strong> – size of pipe buffer used in zero-copy operations</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">diskfile</literal_strong> – the diskfile creating this DiskFileReader instance</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">keep_cache</literal_strong> – should resulting reads be kept in the buffer cache</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                    <index entries="['single',\ u'app_iter_range()\ (swift.obj.diskfile.BaseDiskFileReader\ method)',\ u'swift.obj.diskfile.BaseDiskFileReader.app_iter_range',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileReader" first="False" fullname="BaseDiskFileReader.app_iter_range" ids="swift.obj.diskfile.BaseDiskFileReader.app_iter_range" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileReader.app_iter_range"><desc_name xml:space="preserve">app_iter_range</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">start</desc_parameter><desc_parameter xml:space="preserve">stop</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns an iterator over the data file for range (start, stop)</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'app_iter_ranges()\ (swift.obj.diskfile.BaseDiskFileReader\ method)',\ u'swift.obj.diskfile.BaseDiskFileReader.app_iter_ranges',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileReader" first="False" fullname="BaseDiskFileReader.app_iter_ranges" ids="swift.obj.diskfile.BaseDiskFileReader.app_iter_ranges" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileReader.app_iter_ranges"><desc_name xml:space="preserve">app_iter_ranges</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ranges</desc_parameter><desc_parameter xml:space="preserve">content_type</desc_parameter><desc_parameter xml:space="preserve">boundary</desc_parameter><desc_parameter xml:space="preserve">size</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns an iterator over the data file for a set of ranges</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'can_zero_copy_send()\ (swift.obj.diskfile.BaseDiskFileReader\ method)',\ u'swift.obj.diskfile.BaseDiskFileReader.can_zero_copy_send',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileReader" first="False" fullname="BaseDiskFileReader.can_zero_copy_send" ids="swift.obj.diskfile.BaseDiskFileReader.can_zero_copy_send" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileReader.can_zero_copy_send"><desc_name xml:space="preserve">can_zero_copy_send</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'close()\ (swift.obj.diskfile.BaseDiskFileReader\ method)',\ u'swift.obj.diskfile.BaseDiskFileReader.close',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileReader" first="False" fullname="BaseDiskFileReader.close" ids="swift.obj.diskfile.BaseDiskFileReader.close" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileReader.close"><desc_name xml:space="preserve">close</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Close the open file handle if present.</paragraph>
                            <paragraph>For this specific implementation, this method will handle quarantining
                                the file if necessary.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'manager\ (swift.obj.diskfile.BaseDiskFileReader\ attribute)',\ u'swift.obj.diskfile.BaseDiskFileReader.manager',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BaseDiskFileReader" first="False" fullname="BaseDiskFileReader.manager" ids="swift.obj.diskfile.BaseDiskFileReader.manager" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileReader.manager"><desc_name xml:space="preserve">manager</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'zero_copy_send()\ (swift.obj.diskfile.BaseDiskFileReader\ method)',\ u'swift.obj.diskfile.BaseDiskFileReader.zero_copy_send',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileReader" first="False" fullname="BaseDiskFileReader.zero_copy_send" ids="swift.obj.diskfile.BaseDiskFileReader.zero_copy_send" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileReader.zero_copy_send"><desc_name xml:space="preserve">zero_copy_send</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">wsockfd</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Does some magic with splice() and tee() to move stuff from disk to
                                network without ever touching userspace.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">wsockfd</literal_strong> – file descriptor (integer) of the socket out which to
                                            send data</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'BaseDiskFileWriter\ (class\ in\ swift.obj.diskfile)',\ u'swift.obj.diskfile.BaseDiskFileWriter',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BaseDiskFileWriter" ids="swift.obj.diskfile.BaseDiskFileWriter" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileWriter"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">BaseDiskFileWriter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">datadir</desc_parameter><desc_parameter xml:space="preserve">fd</desc_parameter><desc_parameter xml:space="preserve">tmppath</desc_parameter><desc_parameter xml:space="preserve">bytes_per_sync</desc_parameter><desc_parameter xml:space="preserve">diskfile</desc_parameter><desc_parameter xml:space="preserve">next_part_power</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Encapsulation of the write context for servicing PUT REST API
                        requests. Serves as the context manager object for the
                        <reference internal="True" refid="swift.obj.diskfile.DiskFile" reftitle="swift.obj.diskfile.DiskFile"><literal classes="xref py py-class">swift.obj.diskfile.DiskFile</literal></reference> class’s
                        <literal classes="xref py py-func">swift.obj.diskfile.DiskFile.create()</literal> method.</paragraph>
                    <note>
                        <paragraph>It is the responsibility of the
                            <literal classes="xref py py-func">swift.obj.diskfile.DiskFile.create()</literal> method context manager to
                            close the open file descriptor.</paragraph>
                    </note>
                    <note>
                        <paragraph>The arguments to the constructor are considered implementation
                            specific. The API does not define the constructor arguments.</paragraph>
                    </note>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> – name of object from REST API</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">datadir</literal_strong> – on-disk directory object will end up in on
                                            <reference internal="True" refid="swift.obj.diskfile.DiskFileWriter.put" reftitle="swift.obj.diskfile.DiskFileWriter.put"><literal classes="xref py py-func">swift.obj.diskfile.DiskFileWriter.put()</literal></reference></paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">fd</literal_strong> – open file descriptor of temporary file to receive data</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">tmppath</literal_strong> – full path name of the opened file descriptor</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bytes_per_sync</literal_strong> – number bytes written between sync calls</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">diskfile</literal_strong> – the diskfile creating this DiskFileWriter instance</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">next_part_power</literal_strong> – the next partition power to be used</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                    <index entries="['single',\ u'commit()\ (swift.obj.diskfile.BaseDiskFileWriter\ method)',\ u'swift.obj.diskfile.BaseDiskFileWriter.commit',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileWriter" first="False" fullname="BaseDiskFileWriter.commit" ids="swift.obj.diskfile.BaseDiskFileWriter.commit" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileWriter.commit"><desc_name xml:space="preserve">commit</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">timestamp</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Perform any operations necessary to mark the object as durable. For
                                replication policy type this is a no-op.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">timestamp</literal_strong> – object put timestamp, an instance of
                                            <reference internal="True" reftitle="swift.common.utils.Timestamp" refuri="misc#swift.common.utils.Timestamp"><literal classes="xref py py-class">Timestamp</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'manager\ (swift.obj.diskfile.BaseDiskFileWriter\ attribute)',\ u'swift.obj.diskfile.BaseDiskFileWriter.manager',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BaseDiskFileWriter" first="False" fullname="BaseDiskFileWriter.manager" ids="swift.obj.diskfile.BaseDiskFileWriter.manager" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileWriter.manager"><desc_name xml:space="preserve">manager</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'put()\ (swift.obj.diskfile.BaseDiskFileWriter\ method)',\ u'swift.obj.diskfile.BaseDiskFileWriter.put',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileWriter" first="False" fullname="BaseDiskFileWriter.put" ids="swift.obj.diskfile.BaseDiskFileWriter.put" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileWriter.put"><desc_name xml:space="preserve">put</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">metadata</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Finalize writing the file on disk.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">metadata</literal_strong> – dictionary of metadata to be associated with the
                                            object</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'put_succeeded\ (swift.obj.diskfile.BaseDiskFileWriter\ attribute)',\ u'swift.obj.diskfile.BaseDiskFileWriter.put_succeeded',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BaseDiskFileWriter" first="False" fullname="BaseDiskFileWriter.put_succeeded" ids="swift.obj.diskfile.BaseDiskFileWriter.put_succeeded" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileWriter.put_succeeded"><desc_name xml:space="preserve">put_succeeded</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'write()\ (swift.obj.diskfile.BaseDiskFileWriter\ method)',\ u'swift.obj.diskfile.BaseDiskFileWriter.write',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseDiskFileWriter" first="False" fullname="BaseDiskFileWriter.write" ids="swift.obj.diskfile.BaseDiskFileWriter.write" module="swift.obj.diskfile" names="swift.obj.diskfile.BaseDiskFileWriter.write"><desc_name xml:space="preserve">write</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">chunk</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Write a chunk of data to disk. All invocations of this method must
                                come before invoking the :func:</paragraph>
                            <paragraph>For this implementation, the data is written into a temporary file.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">chunk</literal_strong> – the chunk of data to write as a string object</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>the total number of bytes written to an object</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'DiskFile\ (class\ in\ swift.obj.diskfile)',\ u'swift.obj.diskfile.DiskFile',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="DiskFile" ids="swift.obj.diskfile.DiskFile" module="swift.obj.diskfile" names="swift.obj.diskfile.DiskFile"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">DiskFile</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">mgr</desc_parameter><desc_parameter xml:space="preserve">device_path</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">account=None</desc_parameter><desc_parameter xml:space="preserve">container=None</desc_parameter><desc_parameter xml:space="preserve">obj=None</desc_parameter><desc_parameter xml:space="preserve">_datadir=None</desc_parameter><desc_parameter xml:space="preserve">policy=None</desc_parameter><desc_parameter xml:space="preserve">use_splice=False</desc_parameter><desc_parameter xml:space="preserve">pipe_size=None</desc_parameter><desc_parameter xml:space="preserve">use_linkat=False</desc_parameter><desc_parameter xml:space="preserve">open_expired=False</desc_parameter><desc_parameter xml:space="preserve">next_part_power=None</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.obj.diskfile.BaseDiskFile" reftitle="swift.obj.diskfile.BaseDiskFile"><literal classes="xref py py-class">swift.obj.diskfile.BaseDiskFile</literal></reference></paragraph>
                    <index entries="['single',\ u'reader_cls\ (swift.obj.diskfile.DiskFile\ attribute)',\ u'swift.obj.diskfile.DiskFile.reader_cls',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="DiskFile" first="False" fullname="DiskFile.reader_cls" ids="swift.obj.diskfile.DiskFile.reader_cls" module="swift.obj.diskfile" names="swift.obj.diskfile.DiskFile.reader_cls"><desc_name xml:space="preserve">reader_cls</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>alias of <reference internal="True" refid="swift.obj.diskfile.DiskFileReader" reftitle="swift.obj.diskfile.DiskFileReader"><literal classes="xref py py-class">DiskFileReader</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'writer_cls\ (swift.obj.diskfile.DiskFile\ attribute)',\ u'swift.obj.diskfile.DiskFile.writer_cls',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="DiskFile" first="False" fullname="DiskFile.writer_cls" ids="swift.obj.diskfile.DiskFile.writer_cls" module="swift.obj.diskfile" names="swift.obj.diskfile.DiskFile.writer_cls"><desc_name xml:space="preserve">writer_cls</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>alias of <reference internal="True" refid="swift.obj.diskfile.DiskFileWriter" reftitle="swift.obj.diskfile.DiskFileWriter"><literal classes="xref py py-class">DiskFileWriter</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'DiskFileManager\ (class\ in\ swift.obj.diskfile)',\ u'swift.obj.diskfile.DiskFileManager',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="DiskFileManager" ids="swift.obj.diskfile.DiskFileManager" module="swift.obj.diskfile" names="swift.obj.diskfile.DiskFileManager"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">DiskFileManager</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter><desc_parameter xml:space="preserve">logger</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.obj.diskfile.BaseDiskFileManager" reftitle="swift.obj.diskfile.BaseDiskFileManager"><literal classes="xref py py-class">swift.obj.diskfile.BaseDiskFileManager</literal></reference></paragraph>
                    <index entries="['single',\ u'diskfile_cls\ (swift.obj.diskfile.DiskFileManager\ attribute)',\ u'swift.obj.diskfile.DiskFileManager.diskfile_cls',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="DiskFileManager" first="False" fullname="DiskFileManager.diskfile_cls" ids="swift.obj.diskfile.DiskFileManager.diskfile_cls" module="swift.obj.diskfile" names="swift.obj.diskfile.DiskFileManager.diskfile_cls"><desc_name xml:space="preserve">diskfile_cls</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>alias of <reference internal="True" refid="swift.obj.diskfile.DiskFile" reftitle="swift.obj.diskfile.DiskFile"><literal classes="xref py py-class">DiskFile</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'DiskFileReader\ (class\ in\ swift.obj.diskfile)',\ u'swift.obj.diskfile.DiskFileReader',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="DiskFileReader" ids="swift.obj.diskfile.DiskFileReader" module="swift.obj.diskfile" names="swift.obj.diskfile.DiskFileReader"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">DiskFileReader</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">fp</desc_parameter><desc_parameter xml:space="preserve">data_file</desc_parameter><desc_parameter xml:space="preserve">obj_size</desc_parameter><desc_parameter xml:space="preserve">etag</desc_parameter><desc_parameter xml:space="preserve">disk_chunk_size</desc_parameter><desc_parameter xml:space="preserve">keep_cache_size</desc_parameter><desc_parameter xml:space="preserve">device_path</desc_parameter><desc_parameter xml:space="preserve">logger</desc_parameter><desc_parameter xml:space="preserve">quarantine_hook</desc_parameter><desc_parameter xml:space="preserve">use_splice</desc_parameter><desc_parameter xml:space="preserve">pipe_size</desc_parameter><desc_parameter xml:space="preserve">diskfile</desc_parameter><desc_parameter xml:space="preserve">keep_cache=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.obj.diskfile.BaseDiskFileReader" reftitle="swift.obj.diskfile.BaseDiskFileReader"><literal classes="xref py py-class">swift.obj.diskfile.BaseDiskFileReader</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'DiskFileRouter\ (class\ in\ swift.obj.diskfile)',\ u'swift.obj.diskfile.DiskFileRouter',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="DiskFileRouter" ids="swift.obj.diskfile.DiskFileRouter" module="swift.obj.diskfile" names="swift.obj.diskfile.DiskFileRouter"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">DiskFileRouter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <index entries="['single',\ u'policy_type_to_manager_cls\ (swift.obj.diskfile.DiskFileRouter\ attribute)',\ u'swift.obj.diskfile.DiskFileRouter.policy_type_to_manager_cls',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="DiskFileRouter" first="False" fullname="DiskFileRouter.policy_type_to_manager_cls" ids="swift.obj.diskfile.DiskFileRouter.policy_type_to_manager_cls" module="swift.obj.diskfile" names="swift.obj.diskfile.DiskFileRouter.policy_type_to_manager_cls"><desc_name xml:space="preserve">policy_type_to_manager_cls</desc_name><desc_annotation xml:space="preserve"> = {'replication': &lt;class 'swift.obj.diskfile.DiskFileManager'&gt;, 'erasure_coding': &lt;class 'swift.obj.diskfile.ECDiskFileManager'&gt;}</desc_annotation></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'register()\ (swift.obj.diskfile.DiskFileRouter\ class\ method)',\ u'swift.obj.diskfile.DiskFileRouter.register',\ '',\ None]"></index>
                    <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                        <desc_signature class="DiskFileRouter" first="False" fullname="DiskFileRouter.register" ids="swift.obj.diskfile.DiskFileRouter.register" module="swift.obj.diskfile" names="swift.obj.diskfile.DiskFileRouter.register"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">register</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">policy_type</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Decorator for Storage Policy implementations to register
                                their DiskFile implementation.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'DiskFileWriter\ (class\ in\ swift.obj.diskfile)',\ u'swift.obj.diskfile.DiskFileWriter',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="DiskFileWriter" ids="swift.obj.diskfile.DiskFileWriter" module="swift.obj.diskfile" names="swift.obj.diskfile.DiskFileWriter"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">DiskFileWriter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">datadir</desc_parameter><desc_parameter xml:space="preserve">fd</desc_parameter><desc_parameter xml:space="preserve">tmppath</desc_parameter><desc_parameter xml:space="preserve">bytes_per_sync</desc_parameter><desc_parameter xml:space="preserve">diskfile</desc_parameter><desc_parameter xml:space="preserve">next_part_power</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.obj.diskfile.BaseDiskFileWriter" reftitle="swift.obj.diskfile.BaseDiskFileWriter"><literal classes="xref py py-class">swift.obj.diskfile.BaseDiskFileWriter</literal></reference></paragraph>
                    <index entries="['single',\ u'put()\ (swift.obj.diskfile.DiskFileWriter\ method)',\ u'swift.obj.diskfile.DiskFileWriter.put',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="DiskFileWriter" first="False" fullname="DiskFileWriter.put" ids="swift.obj.diskfile.DiskFileWriter.put" module="swift.obj.diskfile" names="swift.obj.diskfile.DiskFileWriter.put"><desc_name xml:space="preserve">put</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">metadata</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Finalize writing the file on disk.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">metadata</literal_strong> – dictionary of metadata to be associated with the
                                            object</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ECDiskFile\ (class\ in\ swift.obj.diskfile)',\ u'swift.obj.diskfile.ECDiskFile',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ECDiskFile" ids="swift.obj.diskfile.ECDiskFile" module="swift.obj.diskfile" names="swift.obj.diskfile.ECDiskFile"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">ECDiskFile</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.obj.diskfile.BaseDiskFile" reftitle="swift.obj.diskfile.BaseDiskFile"><literal classes="xref py py-class">swift.obj.diskfile.BaseDiskFile</literal></reference></paragraph>
                    <index entries="['single',\ u'durable_timestamp\ (swift.obj.diskfile.ECDiskFile\ attribute)',\ u'swift.obj.diskfile.ECDiskFile.durable_timestamp',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ECDiskFile" first="False" fullname="ECDiskFile.durable_timestamp" ids="swift.obj.diskfile.ECDiskFile.durable_timestamp" module="swift.obj.diskfile" names="swift.obj.diskfile.ECDiskFile.durable_timestamp"><desc_name xml:space="preserve">durable_timestamp</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Provides the timestamp of the newest durable file found in the object
                                directory.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>A Timestamp instance, or None if no durable file was found.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileNotOpen" refuri="misc#swift.common.exceptions.DiskFileNotOpen"><literal_strong>DiskFileNotOpen</literal_strong></reference> – if the open() method has not been previously
                                            called on this instance.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'fragments\ (swift.obj.diskfile.ECDiskFile\ attribute)',\ u'swift.obj.diskfile.ECDiskFile.fragments',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ECDiskFile" first="False" fullname="ECDiskFile.fragments" ids="swift.obj.diskfile.ECDiskFile.fragments" module="swift.obj.diskfile" names="swift.obj.diskfile.ECDiskFile.fragments"><desc_name xml:space="preserve">fragments</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Provides information about all fragments that were found in the object
                                directory, including fragments without a matching durable file, and
                                including any fragment chosen to construct the opened diskfile.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>A dict mapping &lt;Timestamp instance&gt; -&gt; &lt;list of frag indexes&gt;,
                                            or None if the diskfile has not been opened or no fragments
                                            were found.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'purge()\ (swift.obj.diskfile.ECDiskFile\ method)',\ u'swift.obj.diskfile.ECDiskFile.purge',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ECDiskFile" first="False" fullname="ECDiskFile.purge" ids="swift.obj.diskfile.ECDiskFile.purge" module="swift.obj.diskfile" names="swift.obj.diskfile.ECDiskFile.purge"><desc_name xml:space="preserve">purge</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">timestamp</desc_parameter><desc_parameter xml:space="preserve">frag_index</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Remove a tombstone file matching the specified timestamp or
                                datafile matching the specified timestamp and fragment index
                                from the object directory.</paragraph>
                            <paragraph>This provides the EC reconstructor/ssync process with a way to
                                remove a tombstone or fragment from a handoff node after
                                reverting it to its primary node.</paragraph>
                            <paragraph>The hash will be invalidated, and if empty or invalid the
                                hsh_path will be removed on next cleanup_ondisk_files.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">timestamp</literal_strong> – the object timestamp, an instance of
                                                    <reference internal="True" reftitle="swift.common.utils.Timestamp" refuri="misc#swift.common.utils.Timestamp"><literal classes="xref py py-class">Timestamp</literal></reference></paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">frag_index</literal_strong> – fragment archive index, must be
                                                    a whole number or None.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'reader_cls\ (swift.obj.diskfile.ECDiskFile\ attribute)',\ u'swift.obj.diskfile.ECDiskFile.reader_cls',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ECDiskFile" first="False" fullname="ECDiskFile.reader_cls" ids="swift.obj.diskfile.ECDiskFile.reader_cls" module="swift.obj.diskfile" names="swift.obj.diskfile.ECDiskFile.reader_cls"><desc_name xml:space="preserve">reader_cls</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>alias of <reference internal="True" refid="swift.obj.diskfile.ECDiskFileReader" reftitle="swift.obj.diskfile.ECDiskFileReader"><literal classes="xref py py-class">ECDiskFileReader</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'writer_cls\ (swift.obj.diskfile.ECDiskFile\ attribute)',\ u'swift.obj.diskfile.ECDiskFile.writer_cls',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ECDiskFile" first="False" fullname="ECDiskFile.writer_cls" ids="swift.obj.diskfile.ECDiskFile.writer_cls" module="swift.obj.diskfile" names="swift.obj.diskfile.ECDiskFile.writer_cls"><desc_name xml:space="preserve">writer_cls</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>alias of <reference internal="True" refid="swift.obj.diskfile.ECDiskFileWriter" reftitle="swift.obj.diskfile.ECDiskFileWriter"><literal classes="xref py py-class">ECDiskFileWriter</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ECDiskFileManager\ (class\ in\ swift.obj.diskfile)',\ u'swift.obj.diskfile.ECDiskFileManager',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ECDiskFileManager" ids="swift.obj.diskfile.ECDiskFileManager" module="swift.obj.diskfile" names="swift.obj.diskfile.ECDiskFileManager"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">ECDiskFileManager</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter><desc_parameter xml:space="preserve">logger</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.obj.diskfile.BaseDiskFileManager" reftitle="swift.obj.diskfile.BaseDiskFileManager"><literal classes="xref py py-class">swift.obj.diskfile.BaseDiskFileManager</literal></reference></paragraph>
                    <index entries="['single',\ u'diskfile_cls\ (swift.obj.diskfile.ECDiskFileManager\ attribute)',\ u'swift.obj.diskfile.ECDiskFileManager.diskfile_cls',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ECDiskFileManager" first="False" fullname="ECDiskFileManager.diskfile_cls" ids="swift.obj.diskfile.ECDiskFileManager.diskfile_cls" module="swift.obj.diskfile" names="swift.obj.diskfile.ECDiskFileManager.diskfile_cls"><desc_name xml:space="preserve">diskfile_cls</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>alias of <reference internal="True" refid="swift.obj.diskfile.ECDiskFile" reftitle="swift.obj.diskfile.ECDiskFile"><literal classes="xref py py-class">ECDiskFile</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'make_on_disk_filename()\ (swift.obj.diskfile.ECDiskFileManager\ method)',\ u'swift.obj.diskfile.ECDiskFileManager.make_on_disk_filename',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ECDiskFileManager" first="False" fullname="ECDiskFileManager.make_on_disk_filename" ids="swift.obj.diskfile.ECDiskFileManager.make_on_disk_filename" module="swift.obj.diskfile" names="swift.obj.diskfile.ECDiskFileManager.make_on_disk_filename"><desc_name xml:space="preserve">make_on_disk_filename</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">timestamp</desc_parameter><desc_parameter xml:space="preserve">ext=None</desc_parameter><desc_parameter xml:space="preserve">frag_index=None</desc_parameter><desc_parameter xml:space="preserve">ctype_timestamp=None</desc_parameter><desc_parameter xml:space="preserve">durable=False</desc_parameter><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns the EC specific filename for given timestamp.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">timestamp</literal_strong> – the object timestamp, an instance of
                                                    <reference internal="True" reftitle="swift.common.utils.Timestamp" refuri="misc#swift.common.utils.Timestamp"><literal classes="xref py py-class">Timestamp</literal></reference></paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">ext</literal_strong> – an optional string representing a file extension to be
                                                    appended to the returned file name</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">frag_index</literal_strong> – a fragment archive index, used with .data extension
                                                    only, must be a whole number.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">ctype_timestamp</literal_strong> – an optional content-type timestamp, an instance
                                                    of <reference internal="True" reftitle="swift.common.utils.Timestamp" refuri="misc#swift.common.utils.Timestamp"><literal classes="xref py py-class">Timestamp</literal></reference></paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">durable</literal_strong> – if True then include a durable marker in data filename.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a file name</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileError" refuri="misc#swift.common.exceptions.DiskFileError"><literal_strong>DiskFileError</literal_strong></reference> – if ext==’.data’ and the kwarg frag_index is not
                                            a whole number</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'parse_on_disk_filename()\ (swift.obj.diskfile.ECDiskFileManager\ method)',\ u'swift.obj.diskfile.ECDiskFileManager.parse_on_disk_filename',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ECDiskFileManager" first="False" fullname="ECDiskFileManager.parse_on_disk_filename" ids="swift.obj.diskfile.ECDiskFileManager.parse_on_disk_filename" module="swift.obj.diskfile" names="swift.obj.diskfile.ECDiskFileManager.parse_on_disk_filename"><desc_name xml:space="preserve">parse_on_disk_filename</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">filename</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns timestamp(s) and other info extracted from a policy specific
                                file name. For EC policy the data file name includes a fragment index
                                and possibly a durable marker, both of which which must be stripped off
                                to retrieve the timestamp.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">filename</literal_strong> – the file name including extension</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph><definition_list><definition_list_item><term>a dict, with keys for timestamp, frag_index, durable, ext and</term><definition><paragraph>ctype_timestamp:</paragraph></definition></definition_list_item></definition_list><bullet_list bullet="*"><list_item><paragraph>timestamp is a <reference internal="True" reftitle="swift.common.utils.Timestamp" refuri="misc#swift.common.utils.Timestamp"><literal classes="xref py py-class">Timestamp</literal></reference></paragraph></list_item><list_item><paragraph>frag_index is an int or None</paragraph></list_item><list_item><paragraph>ctype_timestamp is a <reference internal="True" reftitle="swift.common.utils.Timestamp" refuri="misc#swift.common.utils.Timestamp"><literal classes="xref py py-class">Timestamp</literal></reference> or
                                                        None for .meta files, otherwise None</paragraph></list_item><list_item><paragraph>ext is a string, the file extension including the leading dot or
                                                        the empty string if the filename has no extension</paragraph></list_item><list_item><paragraph>durable is a boolean that is True if the filename is a data file
                                                        that includes a durable marker</paragraph></list_item></bullet_list></paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileError" refuri="misc#swift.common.exceptions.DiskFileError"><literal_strong>DiskFileError</literal_strong></reference> – if any part of the filename is not able to be
                                            validated.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'validate_fragment_index()\ (swift.obj.diskfile.ECDiskFileManager\ method)',\ u'swift.obj.diskfile.ECDiskFileManager.validate_fragment_index',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ECDiskFileManager" first="False" fullname="ECDiskFileManager.validate_fragment_index" ids="swift.obj.diskfile.ECDiskFileManager.validate_fragment_index" module="swift.obj.diskfile" names="swift.obj.diskfile.ECDiskFileManager.validate_fragment_index"><desc_name xml:space="preserve">validate_fragment_index</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">frag_index</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return int representation of frag_index, or raise a DiskFileError if
                                frag_index is not a whole number.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">frag_index</literal_strong> – a fragment archive index</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ECDiskFileReader\ (class\ in\ swift.obj.diskfile)',\ u'swift.obj.diskfile.ECDiskFileReader',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ECDiskFileReader" ids="swift.obj.diskfile.ECDiskFileReader" module="swift.obj.diskfile" names="swift.obj.diskfile.ECDiskFileReader"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">ECDiskFileReader</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">fp</desc_parameter><desc_parameter xml:space="preserve">data_file</desc_parameter><desc_parameter xml:space="preserve">obj_size</desc_parameter><desc_parameter xml:space="preserve">etag</desc_parameter><desc_parameter xml:space="preserve">disk_chunk_size</desc_parameter><desc_parameter xml:space="preserve">keep_cache_size</desc_parameter><desc_parameter xml:space="preserve">device_path</desc_parameter><desc_parameter xml:space="preserve">logger</desc_parameter><desc_parameter xml:space="preserve">quarantine_hook</desc_parameter><desc_parameter xml:space="preserve">use_splice</desc_parameter><desc_parameter xml:space="preserve">pipe_size</desc_parameter><desc_parameter xml:space="preserve">diskfile</desc_parameter><desc_parameter xml:space="preserve">keep_cache=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.obj.diskfile.BaseDiskFileReader" reftitle="swift.obj.diskfile.BaseDiskFileReader"><literal classes="xref py py-class">swift.obj.diskfile.BaseDiskFileReader</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ECDiskFileWriter\ (class\ in\ swift.obj.diskfile)',\ u'swift.obj.diskfile.ECDiskFileWriter',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ECDiskFileWriter" ids="swift.obj.diskfile.ECDiskFileWriter" module="swift.obj.diskfile" names="swift.obj.diskfile.ECDiskFileWriter"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">ECDiskFileWriter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">datadir</desc_parameter><desc_parameter xml:space="preserve">fd</desc_parameter><desc_parameter xml:space="preserve">tmppath</desc_parameter><desc_parameter xml:space="preserve">bytes_per_sync</desc_parameter><desc_parameter xml:space="preserve">diskfile</desc_parameter><desc_parameter xml:space="preserve">next_part_power</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.obj.diskfile.BaseDiskFileWriter" reftitle="swift.obj.diskfile.BaseDiskFileWriter"><literal classes="xref py py-class">swift.obj.diskfile.BaseDiskFileWriter</literal></reference></paragraph>
                    <index entries="['single',\ u'commit()\ (swift.obj.diskfile.ECDiskFileWriter\ method)',\ u'swift.obj.diskfile.ECDiskFileWriter.commit',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ECDiskFileWriter" first="False" fullname="ECDiskFileWriter.commit" ids="swift.obj.diskfile.ECDiskFileWriter.commit" module="swift.obj.diskfile" names="swift.obj.diskfile.ECDiskFileWriter.commit"><desc_name xml:space="preserve">commit</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">timestamp</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Finalize put by renaming the object data file to include a durable
                                marker. We do this for EC policy because it requires a 2-phase put
                                commit confirmation.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">timestamp</literal_strong> – object put timestamp, an instance of
                                            <reference internal="True" reftitle="swift.common.utils.Timestamp" refuri="misc#swift.common.utils.Timestamp"><literal classes="xref py py-class">Timestamp</literal></reference></paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileError" refuri="misc#swift.common.exceptions.DiskFileError"><literal_strong>DiskFileError</literal_strong></reference> – if the diskfile frag_index has not been set
                                            (either during initialisation or a call to put())</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'put()\ (swift.obj.diskfile.ECDiskFileWriter\ method)',\ u'swift.obj.diskfile.ECDiskFileWriter.put',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ECDiskFileWriter" first="False" fullname="ECDiskFileWriter.put" ids="swift.obj.diskfile.ECDiskFileWriter.put" module="swift.obj.diskfile" names="swift.obj.diskfile.ECDiskFileWriter.put"><desc_name xml:space="preserve">put</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">metadata</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>The only difference between this method and the replication policy
                                DiskFileWriter method is adding the frag index to the metadata.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">metadata</literal_strong> – dictionary of metadata to be associated with object</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'clear_auditor_status()\ (in\ module\ swift.obj.diskfile)',\ u'swift.obj.diskfile.clear_auditor_status',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="clear_auditor_status" ids="swift.obj.diskfile.clear_auditor_status" module="swift.obj.diskfile" names="swift.obj.diskfile.clear_auditor_status"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">clear_auditor_status</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">devices</desc_parameter><desc_parameter xml:space="preserve">auditor_type='ALL'</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                </desc_content>
            </desc>
            <index entries="['single',\ u'consolidate_hashes()\ (in\ module\ swift.obj.diskfile)',\ u'swift.obj.diskfile.consolidate_hashes',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="consolidate_hashes" ids="swift.obj.diskfile.consolidate_hashes" module="swift.obj.diskfile" names="swift.obj.diskfile.consolidate_hashes"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">consolidate_hashes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">partition_dir</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Take what’s in hashes.pkl and hashes.invalid, combine them, write the
                        result back to hashes.pkl, and clear out hashes.invalid.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">partition_dir</literal_strong> – absolute path to partition dir containing hashes.pkl
                                    and hashes.invalid</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a dict, the suffix hashes (if any), the key ‘valid’ will be False
                                    if hashes.pkl is corrupt, cannot be read or does not exist</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'extract_policy()\ (in\ module\ swift.obj.diskfile)',\ u'swift.obj.diskfile.extract_policy',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="extract_policy" ids="swift.obj.diskfile.extract_policy" module="swift.obj.diskfile" names="swift.obj.diskfile.extract_policy"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">extract_policy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">obj_path</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Extracts the policy for an object (based on the name of the objects
                        directory) given the device-relative path to the object. Returns None in
                        the event that the path is malformed in some way.</paragraph>
                    <paragraph>The device-relative path is everything after the mount point; for example:</paragraph>
                    <definition_list>
                        <definition_list_item>
                            <term>/srv/node/d42/objects-5/30/179/</term>
                            <definition>
                                <paragraph>485dc017205a81df3af616d917c90179/1401811134.873649.data</paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                    <paragraph>would have device-relative path:</paragraph>
                    <paragraph>objects-5/30/179/485dc017205a81df3af616d917c90179/1401811134.873649.data</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">obj_path</literal_strong> – device-relative path of an object, or the full path</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a <reference internal="True" reftitle="swift.common.storage_policy.BaseStoragePolicy" refuri="misc#swift.common.storage_policy.BaseStoragePolicy"><literal classes="xref py py-class">BaseStoragePolicy</literal></reference> or None</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'get_auditor_status()\ (in\ module\ swift.obj.diskfile)',\ u'swift.obj.diskfile.get_auditor_status',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="get_auditor_status" ids="swift.obj.diskfile.get_auditor_status" module="swift.obj.diskfile" names="swift.obj.diskfile.get_auditor_status"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">get_auditor_status</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">datadir_path</desc_parameter><desc_parameter xml:space="preserve">logger</desc_parameter><desc_parameter xml:space="preserve">auditor_type</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                </desc_content>
            </desc>
            <index entries="['single',\ u'get_part_path()\ (in\ module\ swift.obj.diskfile)',\ u'swift.obj.diskfile.get_part_path',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="get_part_path" ids="swift.obj.diskfile.get_part_path" module="swift.obj.diskfile" names="swift.obj.diskfile.get_part_path"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">get_part_path</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">dev_path</desc_parameter><desc_parameter xml:space="preserve">policy</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Given the device path, policy, and partition, returns the full
                        path to the partition</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'invalidate_hash()\ (in\ module\ swift.obj.diskfile)',\ u'swift.obj.diskfile.invalidate_hash',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="invalidate_hash" ids="swift.obj.diskfile.invalidate_hash" module="swift.obj.diskfile" names="swift.obj.diskfile.invalidate_hash"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">invalidate_hash</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">suffix_dir</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Invalidates the hash for a suffix_dir in the partition’s hashes file.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">suffix_dir</literal_strong> – absolute path to suffix dir whose hash needs
                                    invalidating</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'object_audit_location_generator()\ (in\ module\ swift.obj.diskfile)',\ u'swift.obj.diskfile.object_audit_location_generator',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="object_audit_location_generator" ids="swift.obj.diskfile.object_audit_location_generator" module="swift.obj.diskfile" names="swift.obj.diskfile.object_audit_location_generator"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">object_audit_location_generator</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">devices</desc_parameter><desc_parameter xml:space="preserve">mount_check=True</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter><desc_parameter xml:space="preserve">device_dirs=None</desc_parameter><desc_parameter xml:space="preserve">auditor_type='ALL'</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Given a devices path (e.g. “/srv/node”), yield an AuditLocation for all
                        objects stored under that directory if device_dirs isn’t set.  If
                        device_dirs is set, only yield AuditLocation for the objects under the
                        entries in device_dirs. The AuditLocation only knows the path to the hash
                        directory, not to the .data file therein (if any). This is to avoid a
                        double listdir(hash_dir); the DiskFile object will always do one, so
                        we don’t.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">devices</literal_strong> – parent directory of the devices to be audited</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">mount_check</literal_strong> – flag to check if a mount check should be performed
                                            on devices</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">logger</literal_strong> – a logger object</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">device_dirs</literal_strong> – a list of directories under devices to traverse</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">auditor_type</literal_strong> – either ALL or ZBF</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'quarantine_renamer()\ (in\ module\ swift.obj.diskfile)',\ u'swift.obj.diskfile.quarantine_renamer',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="quarantine_renamer" ids="swift.obj.diskfile.quarantine_renamer" module="swift.obj.diskfile" names="swift.obj.diskfile.quarantine_renamer"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">quarantine_renamer</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">device_path</desc_parameter><desc_parameter xml:space="preserve">corrupted_file_path</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>In the case that a file is corrupted, move it to a quarantined
                        area to allow replication to fix it.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Params device_path</field_name>
                            <field_body>
                                <paragraph>The path to the device the corrupted file is on.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Params corrupted_file_path</field_name>
                            <field_body>
                                <paragraph>The path to the file you want quarantined.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>path (str) of directory the file was moved to</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>OSError</literal_strong> – re-raises non errno.EEXIST / errno.ENOTEMPTY
                                    exceptions from rename</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'read_hashes()\ (in\ module\ swift.obj.diskfile)',\ u'swift.obj.diskfile.read_hashes',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="read_hashes" ids="swift.obj.diskfile.read_hashes" module="swift.obj.diskfile" names="swift.obj.diskfile.read_hashes"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">read_hashes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">partition_dir</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Read the existing hashes.pkl</paragraph>
                    <field_list>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a dict, the suffix hashes (if any), the key ‘valid’ will be False
                                    if hashes.pkl is corrupt, cannot be read or does not exist</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'read_metadata()\ (in\ module\ swift.obj.diskfile)',\ u'swift.obj.diskfile.read_metadata',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="read_metadata" ids="swift.obj.diskfile.read_metadata" module="swift.obj.diskfile" names="swift.obj.diskfile.read_metadata"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">read_metadata</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">fd</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Helper function to read the pickled metadata from an object file.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">fd</literal_strong> – file descriptor or filename to load the metadata from</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>dictionary of metadata</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'relink_paths()\ (in\ module\ swift.obj.diskfile)',\ u'swift.obj.diskfile.relink_paths',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="relink_paths" ids="swift.obj.diskfile.relink_paths" module="swift.obj.diskfile" names="swift.obj.diskfile.relink_paths"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">relink_paths</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">target_path</desc_parameter><desc_parameter xml:space="preserve">new_target_path</desc_parameter><desc_parameter xml:space="preserve">check_existing=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Hard-links a file located in target_path using the second path
                        new_target_path. Creates intermediate directories if required.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">target_path</literal_strong> – current absolute filename</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">new_target_path</literal_strong> – new absolute filename for the hardlink</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">check_existing</literal_strong> – if True, check whether the link is already present
                                            before attempting to create a new one</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'strip_self()\ (in\ module\ swift.obj.diskfile)',\ u'swift.obj.diskfile.strip_self',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="strip_self" ids="swift.obj.diskfile.strip_self" module="swift.obj.diskfile" names="swift.obj.diskfile.strip_self"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">strip_self</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">f</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Wrapper to attach module level functions to base class.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'update_auditor_status()\ (in\ module\ swift.obj.diskfile)',\ u'swift.obj.diskfile.update_auditor_status',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="update_auditor_status" ids="swift.obj.diskfile.update_auditor_status" module="swift.obj.diskfile" names="swift.obj.diskfile.update_auditor_status"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">update_auditor_status</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">datadir_path</desc_parameter><desc_parameter xml:space="preserve">logger</desc_parameter><desc_parameter xml:space="preserve">partitions</desc_parameter><desc_parameter xml:space="preserve">auditor_type</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                </desc_content>
            </desc>
            <index entries="['single',\ u'write_hashes()\ (in\ module\ swift.obj.diskfile)',\ u'swift.obj.diskfile.write_hashes',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="write_hashes" ids="swift.obj.diskfile.write_hashes" module="swift.obj.diskfile" names="swift.obj.diskfile.write_hashes"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">write_hashes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">partition_dir</desc_parameter><desc_parameter xml:space="preserve">hashes</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Write hashes to hashes.pkl</paragraph>
                    <paragraph>The updated key is added to hashes before it is written.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'write_metadata()\ (in\ module\ swift.obj.diskfile)',\ u'swift.obj.diskfile.write_metadata',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="write_metadata" ids="swift.obj.diskfile.write_metadata" module="swift.obj.diskfile" names="swift.obj.diskfile.write_metadata"><desc_addname xml:space="preserve">swift.obj.diskfile.</desc_addname><desc_name xml:space="preserve">write_metadata</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">fd</desc_parameter><desc_parameter xml:space="preserve">metadata</desc_parameter><desc_parameter xml:space="preserve">xattr_size=65536</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Helper function to write pickled metadata for an object file.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">fd</literal_strong> – file descriptor or filename to write the metadata</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">metadata</literal_strong> – metadata to write</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <target refid="object-replicator"></target>
        </section>
        <section ids="module-swift.obj.replicator id3 object-replicator" names="object\ replicator object-replicator">
            <title>Object Replicator</title>
            <index entries="['single',\ u'swift.obj.replicator\ (module)',\ u'module-swift.obj.replicator',\ '',\ None]"></index>
            <index entries="['single',\ u'ObjectReplicator\ (class\ in\ swift.obj.replicator)',\ u'swift.obj.replicator.ObjectReplicator',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ObjectReplicator" ids="swift.obj.replicator.ObjectReplicator" module="swift.obj.replicator" names="swift.obj.replicator.ObjectReplicator"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.replicator.</desc_addname><desc_name xml:space="preserve">ObjectReplicator</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">swift.common.daemon.Daemon</literal></paragraph>
                    <paragraph>Replicate objects.</paragraph>
                    <paragraph>Encapsulates most logic and data needed by the object replication process.
                        Each call to .replicate() performs one replication pass.  It’s up to the
                        caller to do this in a loop.</paragraph>
                    <index entries="['single',\ u'build_replication_jobs()\ (swift.obj.replicator.ObjectReplicator\ method)',\ u'swift.obj.replicator.ObjectReplicator.build_replication_jobs',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReplicator" first="False" fullname="ObjectReplicator.build_replication_jobs" ids="swift.obj.replicator.ObjectReplicator.build_replication_jobs" module="swift.obj.replicator" names="swift.obj.replicator.ObjectReplicator.build_replication_jobs"><desc_name xml:space="preserve">build_replication_jobs</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">policy</desc_parameter><desc_parameter xml:space="preserve">ips</desc_parameter><desc_parameter xml:space="preserve">override_devices=None</desc_parameter><desc_parameter xml:space="preserve">override_partitions=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Helper function for collect_jobs to build jobs for replication
                                using replication style storage policy</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'check_ring()\ (swift.obj.replicator.ObjectReplicator\ method)',\ u'swift.obj.replicator.ObjectReplicator.check_ring',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReplicator" first="False" fullname="ObjectReplicator.check_ring" ids="swift.obj.replicator.ObjectReplicator.check_ring" module="swift.obj.replicator" names="swift.obj.replicator.ObjectReplicator.check_ring"><desc_name xml:space="preserve">check_ring</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">object_ring</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Check to see if the ring has been updated
                                :param object_ring: the ring to check</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>boolean indicating whether or not the ring has changed</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'collect_jobs()\ (swift.obj.replicator.ObjectReplicator\ method)',\ u'swift.obj.replicator.ObjectReplicator.collect_jobs',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReplicator" first="False" fullname="ObjectReplicator.collect_jobs" ids="swift.obj.replicator.ObjectReplicator.collect_jobs" module="swift.obj.replicator" names="swift.obj.replicator.ObjectReplicator.collect_jobs"><desc_name xml:space="preserve">collect_jobs</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">override_devices=None</desc_parameter><desc_parameter xml:space="preserve">override_partitions=None</desc_parameter><desc_parameter xml:space="preserve">override_policies=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns a sorted list of jobs (dictionaries) that specify the
                                partitions, nodes, etc to be rsynced.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">override_devices</literal_strong> – if set, only jobs on these devices
                                                    will be returned</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">override_partitions</literal_strong> – if set, only jobs on these partitions
                                                    will be returned</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">override_policies</literal_strong> – if set, only jobs in these storage
                                                    policies will be returned</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'delete_handoff_objs()\ (swift.obj.replicator.ObjectReplicator\ method)',\ u'swift.obj.replicator.ObjectReplicator.delete_handoff_objs',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReplicator" first="False" fullname="ObjectReplicator.delete_handoff_objs" ids="swift.obj.replicator.ObjectReplicator.delete_handoff_objs" module="swift.obj.replicator" names="swift.obj.replicator.ObjectReplicator.delete_handoff_objs"><desc_name xml:space="preserve">delete_handoff_objs</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">job</desc_parameter><desc_parameter xml:space="preserve">delete_objs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'delete_partition()\ (swift.obj.replicator.ObjectReplicator\ method)',\ u'swift.obj.replicator.ObjectReplicator.delete_partition',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReplicator" first="False" fullname="ObjectReplicator.delete_partition" ids="swift.obj.replicator.ObjectReplicator.delete_partition" module="swift.obj.replicator" names="swift.obj.replicator.ObjectReplicator.delete_partition"><desc_name xml:space="preserve">delete_partition</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">path</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'detect_lockups()\ (swift.obj.replicator.ObjectReplicator\ method)',\ u'swift.obj.replicator.ObjectReplicator.detect_lockups',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReplicator" first="False" fullname="ObjectReplicator.detect_lockups" ids="swift.obj.replicator.ObjectReplicator.detect_lockups" module="swift.obj.replicator" names="swift.obj.replicator.ObjectReplicator.detect_lockups"><desc_name xml:space="preserve">detect_lockups</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>In testing, the pool.waitall() call very occasionally failed to return.
                                This is an attempt to make sure the replicator finishes its replication
                                pass in some eventuality.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'heartbeat()\ (swift.obj.replicator.ObjectReplicator\ method)',\ u'swift.obj.replicator.ObjectReplicator.heartbeat',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReplicator" first="False" fullname="ObjectReplicator.heartbeat" ids="swift.obj.replicator.ObjectReplicator.heartbeat" module="swift.obj.replicator" names="swift.obj.replicator.ObjectReplicator.heartbeat"><desc_name xml:space="preserve">heartbeat</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Loop that runs in the background during replication.  It periodically
                                logs progress.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'kill_coros()\ (swift.obj.replicator.ObjectReplicator\ method)',\ u'swift.obj.replicator.ObjectReplicator.kill_coros',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReplicator" first="False" fullname="ObjectReplicator.kill_coros" ids="swift.obj.replicator.ObjectReplicator.kill_coros" module="swift.obj.replicator" names="swift.obj.replicator.ObjectReplicator.kill_coros"><desc_name xml:space="preserve">kill_coros</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Utility function that kills all coroutines currently running.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'load_object_ring()\ (swift.obj.replicator.ObjectReplicator\ method)',\ u'swift.obj.replicator.ObjectReplicator.load_object_ring',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReplicator" first="False" fullname="ObjectReplicator.load_object_ring" ids="swift.obj.replicator.ObjectReplicator.load_object_ring" module="swift.obj.replicator" names="swift.obj.replicator.ObjectReplicator.load_object_ring"><desc_name xml:space="preserve">load_object_ring</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">policy</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Make sure the policy’s rings are loaded.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">policy</literal_strong> – the StoragePolicy instance</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>appropriate ring object</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'replicate()\ (swift.obj.replicator.ObjectReplicator\ method)',\ u'swift.obj.replicator.ObjectReplicator.replicate',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReplicator" first="False" fullname="ObjectReplicator.replicate" ids="swift.obj.replicator.ObjectReplicator.replicate" module="swift.obj.replicator" names="swift.obj.replicator.ObjectReplicator.replicate"><desc_name xml:space="preserve">replicate</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">override_devices=None</desc_parameter><desc_parameter xml:space="preserve">override_partitions=None</desc_parameter><desc_parameter xml:space="preserve">override_policies=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Run a replication pass</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'rsync()\ (swift.obj.replicator.ObjectReplicator\ method)',\ u'swift.obj.replicator.ObjectReplicator.rsync',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReplicator" first="False" fullname="ObjectReplicator.rsync" ids="swift.obj.replicator.ObjectReplicator.rsync" module="swift.obj.replicator" names="swift.obj.replicator.ObjectReplicator.rsync"><desc_name xml:space="preserve">rsync</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">job</desc_parameter><desc_parameter xml:space="preserve">suffixes</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Uses rsync to implement the sync method. This was the first
                                sync method in Swift.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'run_forever()\ (swift.obj.replicator.ObjectReplicator\ method)',\ u'swift.obj.replicator.ObjectReplicator.run_forever',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReplicator" first="False" fullname="ObjectReplicator.run_forever" ids="swift.obj.replicator.ObjectReplicator.run_forever" module="swift.obj.replicator" names="swift.obj.replicator.ObjectReplicator.run_forever"><desc_name xml:space="preserve">run_forever</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'run_once()\ (swift.obj.replicator.ObjectReplicator\ method)',\ u'swift.obj.replicator.ObjectReplicator.run_once',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReplicator" first="False" fullname="ObjectReplicator.run_once" ids="swift.obj.replicator.ObjectReplicator.run_once" module="swift.obj.replicator" names="swift.obj.replicator.ObjectReplicator.run_once"><desc_name xml:space="preserve">run_once</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'ssync()\ (swift.obj.replicator.ObjectReplicator\ method)',\ u'swift.obj.replicator.ObjectReplicator.ssync',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReplicator" first="False" fullname="ObjectReplicator.ssync" ids="swift.obj.replicator.ObjectReplicator.ssync" module="swift.obj.replicator" names="swift.obj.replicator.ObjectReplicator.ssync"><desc_name xml:space="preserve">ssync</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">job</desc_parameter><desc_parameter xml:space="preserve">suffixes</desc_parameter><desc_parameter xml:space="preserve">remote_check_objs=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'stats_line()\ (swift.obj.replicator.ObjectReplicator\ method)',\ u'swift.obj.replicator.ObjectReplicator.stats_line',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReplicator" first="False" fullname="ObjectReplicator.stats_line" ids="swift.obj.replicator.ObjectReplicator.stats_line" module="swift.obj.replicator" names="swift.obj.replicator.ObjectReplicator.stats_line"><desc_name xml:space="preserve">stats_line</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Logs various stats for the currently running replication pass.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'sync()\ (swift.obj.replicator.ObjectReplicator\ method)',\ u'swift.obj.replicator.ObjectReplicator.sync',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReplicator" first="False" fullname="ObjectReplicator.sync" ids="swift.obj.replicator.ObjectReplicator.sync" module="swift.obj.replicator" names="swift.obj.replicator.ObjectReplicator.sync"><desc_name xml:space="preserve">sync</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">job</desc_parameter><desc_parameter xml:space="preserve">suffixes</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Synchronize local suffix directories from a partition with a remote
                                node.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">node</literal_strong> – the “dev” entry for the remote node to sync with</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">job</literal_strong> – information about the partition being synced</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">suffixes</literal_strong> – a list of suffixes which need to be pushed</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>boolean and dictionary, boolean indicating success or failure</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'update()\ (swift.obj.replicator.ObjectReplicator\ method)',\ u'swift.obj.replicator.ObjectReplicator.update',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReplicator" first="False" fullname="ObjectReplicator.update" ids="swift.obj.replicator.ObjectReplicator.update" module="swift.obj.replicator" names="swift.obj.replicator.ObjectReplicator.update"><desc_name xml:space="preserve">update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">job</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>High-level method that replicates a single partition.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">job</literal_strong> – a dict containing info about the partition to be replicated</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'update_deleted()\ (swift.obj.replicator.ObjectReplicator\ method)',\ u'swift.obj.replicator.ObjectReplicator.update_deleted',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReplicator" first="False" fullname="ObjectReplicator.update_deleted" ids="swift.obj.replicator.ObjectReplicator.update_deleted" module="swift.obj.replicator" names="swift.obj.replicator.ObjectReplicator.update_deleted"><desc_name xml:space="preserve">update_deleted</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">job</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>High-level method that replicates a single partition that doesn’t
                                belong on this node.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">job</literal_strong> – a dict containing info about the partition to be replicated</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <target ids="module-swift.obj.ssync_sender" ismod="True"></target>
            <index entries="['single',\ u'swift.obj.ssync_sender\ (module)',\ u'module-swift.obj.ssync_sender',\ '',\ None]"></index>
            <index entries="['single',\ u'Sender\ (class\ in\ swift.obj.ssync_sender)',\ u'swift.obj.ssync_sender.Sender',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="Sender" ids="swift.obj.ssync_sender.Sender" module="swift.obj.ssync_sender" names="swift.obj.ssync_sender.Sender"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.ssync_sender.</desc_addname><desc_name xml:space="preserve">Sender</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">daemon</desc_parameter><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">job</desc_parameter><desc_parameter xml:space="preserve">suffixes</desc_parameter><desc_parameter xml:space="preserve">remote_check_objs=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Sends SSYNC requests to the object server.</paragraph>
                    <paragraph>These requests are eventually handled by
                        <reference internal="True" refid="module-swift.obj.ssync_receiver" reftitle="swift.obj.ssync_receiver"><literal classes="xref py py-mod">ssync_receiver</literal></reference> and full documentation about the
                        process is there.</paragraph>
                    <index entries="['single',\ u'connect()\ (swift.obj.ssync_sender.Sender\ method)',\ u'swift.obj.ssync_sender.Sender.connect',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Sender" first="False" fullname="Sender.connect" ids="swift.obj.ssync_sender.Sender.connect" module="swift.obj.ssync_sender" names="swift.obj.ssync_sender.Sender.connect"><desc_name xml:space="preserve">connect</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Establishes a connection and starts an SSYNC request
                                with the object server.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'disconnect()\ (swift.obj.ssync_sender.Sender\ method)',\ u'swift.obj.ssync_sender.Sender.disconnect',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Sender" first="False" fullname="Sender.disconnect" ids="swift.obj.ssync_sender.Sender.disconnect" module="swift.obj.ssync_sender" names="swift.obj.ssync_sender.Sender.disconnect"><desc_name xml:space="preserve">disconnect</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Closes down the connection to the object server once done
                                with the SSYNC request.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'missing_check()\ (swift.obj.ssync_sender.Sender\ method)',\ u'swift.obj.ssync_sender.Sender.missing_check',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Sender" first="False" fullname="Sender.missing_check" ids="swift.obj.ssync_sender.Sender.missing_check" module="swift.obj.ssync_sender" names="swift.obj.ssync_sender.Sender.missing_check"><desc_name xml:space="preserve">missing_check</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Handles the sender-side of the MISSING_CHECK step of a
                                SSYNC request.</paragraph>
                            <paragraph>Full documentation of this can be found at
                                <reference internal="True" refid="swift.obj.ssync_receiver.Receiver.missing_check" reftitle="swift.obj.ssync_receiver.Receiver.missing_check"><literal classes="xref py py-meth">Receiver.missing_check()</literal></reference>.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'readline()\ (swift.obj.ssync_sender.Sender\ method)',\ u'swift.obj.ssync_sender.Sender.readline',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Sender" first="False" fullname="Sender.readline" ids="swift.obj.ssync_sender.Sender.readline" module="swift.obj.ssync_sender" names="swift.obj.ssync_sender.Sender.readline"><desc_name xml:space="preserve">readline</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Reads a line from the SSYNC response body.</paragraph>
                            <paragraph>httplib has no readline and will block on read(x) until x is
                                read, so we have to do the work ourselves. A bit of this is
                                taken from Python’s httplib itself.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'send_delete()\ (swift.obj.ssync_sender.Sender\ method)',\ u'swift.obj.ssync_sender.Sender.send_delete',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Sender" first="False" fullname="Sender.send_delete" ids="swift.obj.ssync_sender.Sender.send_delete" module="swift.obj.ssync_sender" names="swift.obj.ssync_sender.Sender.send_delete"><desc_name xml:space="preserve">send_delete</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">url_path</desc_parameter><desc_parameter xml:space="preserve">timestamp</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Sends a DELETE subrequest with the given information.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'send_post()\ (swift.obj.ssync_sender.Sender\ method)',\ u'swift.obj.ssync_sender.Sender.send_post',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Sender" first="False" fullname="Sender.send_post" ids="swift.obj.ssync_sender.Sender.send_post" module="swift.obj.ssync_sender" names="swift.obj.ssync_sender.Sender.send_post"><desc_name xml:space="preserve">send_post</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">url_path</desc_parameter><desc_parameter xml:space="preserve">df</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'send_put()\ (swift.obj.ssync_sender.Sender\ method)',\ u'swift.obj.ssync_sender.Sender.send_put',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Sender" first="False" fullname="Sender.send_put" ids="swift.obj.ssync_sender.Sender.send_put" module="swift.obj.ssync_sender" names="swift.obj.ssync_sender.Sender.send_put"><desc_name xml:space="preserve">send_put</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">url_path</desc_parameter><desc_parameter xml:space="preserve">df</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Sends a PUT subrequest for the url_path using the source df
                                (DiskFile) and content_length.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'updates()\ (swift.obj.ssync_sender.Sender\ method)',\ u'swift.obj.ssync_sender.Sender.updates',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Sender" first="False" fullname="Sender.updates" ids="swift.obj.ssync_sender.Sender.updates" module="swift.obj.ssync_sender" names="swift.obj.ssync_sender.Sender.updates"><desc_name xml:space="preserve">updates</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Handles the sender-side of the UPDATES step of an SSYNC
                                request.</paragraph>
                            <paragraph>Full documentation of this can be found at
                                <reference internal="True" refid="swift.obj.ssync_receiver.Receiver.updates" reftitle="swift.obj.ssync_receiver.Receiver.updates"><literal classes="xref py py-meth">Receiver.updates()</literal></reference>.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'decode_wanted()\ (in\ module\ swift.obj.ssync_sender)',\ u'swift.obj.ssync_sender.decode_wanted',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="decode_wanted" ids="swift.obj.ssync_sender.decode_wanted" module="swift.obj.ssync_sender" names="swift.obj.ssync_sender.decode_wanted"><desc_addname xml:space="preserve">swift.obj.ssync_sender.</desc_addname><desc_name xml:space="preserve">decode_wanted</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">parts</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Parse missing_check line parts to determine which parts of local
                        diskfile were wanted by the receiver.</paragraph>
                    <paragraph>The encoder for parts is
                        <reference internal="True" refid="swift.obj.ssync_receiver.encode_wanted" reftitle="swift.obj.ssync_receiver.encode_wanted"><literal classes="xref py py-func">encode_wanted()</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'encode_missing()\ (in\ module\ swift.obj.ssync_sender)',\ u'swift.obj.ssync_sender.encode_missing',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="encode_missing" ids="swift.obj.ssync_sender.encode_missing" module="swift.obj.ssync_sender" names="swift.obj.ssync_sender.encode_missing"><desc_addname xml:space="preserve">swift.obj.ssync_sender.</desc_addname><desc_name xml:space="preserve">encode_missing</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">object_hash</desc_parameter><desc_parameter xml:space="preserve">ts_data</desc_parameter><desc_parameter xml:space="preserve">ts_meta=None</desc_parameter><desc_parameter xml:space="preserve">ts_ctype=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns a string representing the object hash, its data file timestamp
                        and the delta forwards to its metafile and content-type timestamps, if
                        non-zero, in the form:
                        <literal>&lt;hash&gt; &lt;ts_data&gt; [m:&lt;hex delta to ts_meta&gt;[,t:&lt;hex delta to ts_ctype&gt;]]</literal></paragraph>
                    <paragraph>The decoder for this line is
                        <reference internal="True" refid="swift.obj.ssync_receiver.decode_missing" reftitle="swift.obj.ssync_receiver.decode_missing"><literal classes="xref py py-func">decode_missing()</literal></reference></paragraph>
                </desc_content>
            </desc>
            <target ids="module-swift.obj.ssync_receiver" ismod="True"></target>
            <index entries="['single',\ u'swift.obj.ssync_receiver\ (module)',\ u'module-swift.obj.ssync_receiver',\ '',\ None]"></index>
            <index entries="['single',\ u'Receiver\ (class\ in\ swift.obj.ssync_receiver)',\ u'swift.obj.ssync_receiver.Receiver',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="Receiver" ids="swift.obj.ssync_receiver.Receiver" module="swift.obj.ssync_receiver" names="swift.obj.ssync_receiver.Receiver"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.ssync_receiver.</desc_addname><desc_name xml:space="preserve">Receiver</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">app</desc_parameter><desc_parameter xml:space="preserve">request</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Handles incoming SSYNC requests to the object server.</paragraph>
                    <paragraph>These requests come from the object-replicator daemon that uses
                        <reference internal="True" refid="module-swift.obj.ssync_sender" reftitle="swift.obj.ssync_sender"><literal classes="xref py py-mod">ssync_sender</literal></reference>.</paragraph>
                    <paragraph>The number of concurrent SSYNC requests is restricted by
                        use of a replication_semaphore and can be configured with the
                        object-server.conf [object-server] replication_concurrency
                        setting.</paragraph>
                    <paragraph>An SSYNC request is really just an HTTP conduit for
                        sender/receiver replication communication. The overall
                        SSYNC request should always succeed, but it will contain
                        multiple requests within its request and response bodies. This
                        “hack” is done so that replication concurrency can be managed.</paragraph>
                    <paragraph>The general process inside an SSYNC request is:</paragraph>
                    <block_quote>
                        <enumerated_list enumtype="arabic" prefix="" suffix=".">
                            <list_item>
                                <paragraph>Initialize the request: Basic request validation, mount check,
                                    acquire semaphore lock, etc..</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Missing check: Sender sends the hashes and timestamps of
                                    the object information it can send, receiver sends back
                                    the hashes it wants (doesn’t have or has an older
                                    timestamp).</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Updates: Sender sends the object information requested.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Close down: Release semaphore lock, etc.</paragraph>
                            </list_item>
                        </enumerated_list>
                    </block_quote>
                    <index entries="['single',\ u'initialize_request()\ (swift.obj.ssync_receiver.Receiver\ method)',\ u'swift.obj.ssync_receiver.Receiver.initialize_request',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Receiver" first="False" fullname="Receiver.initialize_request" ids="swift.obj.ssync_receiver.Receiver.initialize_request" module="swift.obj.ssync_receiver" names="swift.obj.ssync_receiver.Receiver.initialize_request"><desc_name xml:space="preserve">initialize_request</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Basic validation of request and mount check.</paragraph>
                            <paragraph>This function will be called before attempting to acquire a
                                replication semaphore lock, so contains only quick checks.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'missing_check()\ (swift.obj.ssync_receiver.Receiver\ method)',\ u'swift.obj.ssync_receiver.Receiver.missing_check',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Receiver" first="False" fullname="Receiver.missing_check" ids="swift.obj.ssync_receiver.Receiver.missing_check" module="swift.obj.ssync_receiver" names="swift.obj.ssync_receiver.Receiver.missing_check"><desc_name xml:space="preserve">missing_check</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Handles the receiver-side of the MISSING_CHECK step of a
                                SSYNC request.</paragraph>
                            <paragraph>Receives a list of hashes and timestamps of object
                                information the sender can provide and responds with a list
                                of hashes desired, either because they’re missing or have an
                                older timestamp locally.</paragraph>
                            <paragraph>The process is generally:</paragraph>
                            <block_quote>
                                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                                    <list_item>
                                        <paragraph>Sender sends <title_reference>:MISSING_CHECK: START</title_reference> and begins
                                            sending <title_reference>hash timestamp</title_reference> lines.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>Receiver gets <title_reference>:MISSING_CHECK: START</title_reference> and begins
                                            reading the <title_reference>hash timestamp</title_reference> lines, collecting the
                                            hashes of those it desires.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>Sender sends <title_reference>:MISSING_CHECK: END</title_reference>.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>Receiver gets <title_reference>:MISSING_CHECK: END</title_reference>, responds with
                                            <title_reference>:MISSING_CHECK: START</title_reference>, followed by the list of
                                            &lt;wanted_hash&gt; specifiers it collected as being wanted
                                            (one per line), <title_reference>:MISSING_CHECK: END</title_reference>, and flushes any
                                            buffers.</paragraph>
                                        <paragraph>Each &lt;wanted_hash&gt; specifier has the form &lt;hash&gt;[ &lt;parts&gt;] where
                                            &lt;parts&gt; is a string containing characters ‘d’ and/or ‘m’
                                            indicating that only data or meta part of object respectively is
                                            required to be sync’d.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>Sender gets <title_reference>:MISSING_CHECK: START</title_reference> and reads the list
                                            of hashes desired by the receiver until reading
                                            <title_reference>:MISSING_CHECK: END</title_reference>.</paragraph>
                                    </list_item>
                                </enumerated_list>
                            </block_quote>
                            <paragraph>The collection and then response is so the sender doesn’t
                                have to read while it writes to ensure network buffers don’t
                                fill up and block everything.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'updates()\ (swift.obj.ssync_receiver.Receiver\ method)',\ u'swift.obj.ssync_receiver.Receiver.updates',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Receiver" first="False" fullname="Receiver.updates" ids="swift.obj.ssync_receiver.Receiver.updates" module="swift.obj.ssync_receiver" names="swift.obj.ssync_receiver.Receiver.updates"><desc_name xml:space="preserve">updates</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Handles the UPDATES step of an SSYNC request.</paragraph>
                            <paragraph>Receives a set of PUT and DELETE subrequests that will be
                                routed to the object server itself for processing. These
                                contain the information requested by the MISSING_CHECK step.</paragraph>
                            <paragraph>The PUT and DELETE subrequests are formatted pretty much
                                exactly like regular HTTP requests, excepting the HTTP
                                version on the first request line.</paragraph>
                            <paragraph>The process is generally:</paragraph>
                            <block_quote>
                                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                                    <list_item>
                                        <paragraph>Sender sends <title_reference>:UPDATES: START</title_reference> and begins sending the
                                            PUT and DELETE subrequests.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>Receiver gets <title_reference>:UPDATES: START</title_reference> and begins routing the
                                            subrequests to the object server.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>Sender sends <title_reference>:UPDATES: END</title_reference>.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>Receiver gets <title_reference>:UPDATES: END</title_reference> and sends <title_reference>:UPDATES:
                                                START</title_reference> and <title_reference>:UPDATES: END</title_reference> (assuming no errors).</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>Sender gets <title_reference>:UPDATES: START</title_reference> and <title_reference>:UPDATES: END</title_reference>.</paragraph>
                                    </list_item>
                                </enumerated_list>
                            </block_quote>
                            <paragraph>If too many subrequests fail, as configured by
                                replication_failure_threshold and replication_failure_ratio,
                                the receiver will hang up the request early so as to not
                                waste any more time.</paragraph>
                            <paragraph>At step 4, the receiver will send back an error if there were
                                any failures (that didn’t cause a hangup due to the above
                                thresholds) so the sender knows the whole was not entirely a
                                success. This is so the sender knows if it can remove an out
                                of place partition, for example.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'decode_missing()\ (in\ module\ swift.obj.ssync_receiver)',\ u'swift.obj.ssync_receiver.decode_missing',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="decode_missing" ids="swift.obj.ssync_receiver.decode_missing" module="swift.obj.ssync_receiver" names="swift.obj.ssync_receiver.decode_missing"><desc_addname xml:space="preserve">swift.obj.ssync_receiver.</desc_addname><desc_name xml:space="preserve">decode_missing</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">line</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Parse a string of the form generated by
                        <reference internal="True" refid="swift.obj.ssync_sender.encode_missing" reftitle="swift.obj.ssync_sender.encode_missing"><literal classes="xref py py-func">encode_missing()</literal></reference> and return a dict
                        with keys <literal>object_hash</literal>, <literal>ts_data</literal>, <literal>ts_meta</literal>, <literal>ts_ctype</literal>.</paragraph>
                    <paragraph>The encoder for this line is
                        <reference internal="True" refid="swift.obj.ssync_sender.encode_missing" reftitle="swift.obj.ssync_sender.encode_missing"><literal classes="xref py py-func">encode_missing()</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'encode_wanted()\ (in\ module\ swift.obj.ssync_receiver)',\ u'swift.obj.ssync_receiver.encode_wanted',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="encode_wanted" ids="swift.obj.ssync_receiver.encode_wanted" module="swift.obj.ssync_receiver" names="swift.obj.ssync_receiver.encode_wanted"><desc_addname xml:space="preserve">swift.obj.ssync_receiver.</desc_addname><desc_name xml:space="preserve">encode_wanted</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">remote</desc_parameter><desc_parameter xml:space="preserve">local</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Compare a remote and local results and generate a wanted line.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">remote</literal_strong> – a dict, with ts_data and ts_meta keys in the form
                                            returned by <reference internal="True" refid="swift.obj.ssync_receiver.decode_missing" reftitle="swift.obj.ssync_receiver.decode_missing"><literal classes="xref py py-func">decode_missing()</literal></reference></paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">local</literal_strong> – a dict, possibly empty, with ts_data and ts_meta keys
                                            in the form returned <literal classes="xref py py-meth">Receiver._check_local()</literal></paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                    <paragraph>The decoder for this line is
                        <reference internal="True" refid="swift.obj.ssync_sender.decode_wanted" reftitle="swift.obj.ssync_sender.decode_wanted"><literal classes="xref py py-func">decode_wanted()</literal></reference></paragraph>
                </desc_content>
            </desc>
            <target refid="object-reconstructor"></target>
        </section>
        <section ids="module-swift.obj.reconstructor id4 object-reconstructor" names="object\ reconstructor object-reconstructor">
            <title>Object Reconstructor</title>
            <index entries="['single',\ u'swift.obj.reconstructor\ (module)',\ u'module-swift.obj.reconstructor',\ '',\ None]"></index>
            <index entries="['single',\ u'ObjectReconstructor\ (class\ in\ swift.obj.reconstructor)',\ u'swift.obj.reconstructor.ObjectReconstructor',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ObjectReconstructor" ids="swift.obj.reconstructor.ObjectReconstructor" module="swift.obj.reconstructor" names="swift.obj.reconstructor.ObjectReconstructor"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.reconstructor.</desc_addname><desc_name xml:space="preserve">ObjectReconstructor</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">swift.common.daemon.Daemon</literal></paragraph>
                    <paragraph>Reconstruct objects using erasure code.  And also rebalance EC Fragment
                        Archive objects off handoff nodes.</paragraph>
                    <paragraph>Encapsulates most logic and data needed by the object reconstruction
                        process. Each call to .reconstruct() performs one pass.  It’s up to the
                        caller to do this in a loop.</paragraph>
                    <index entries="['single',\ u'aggregate_recon_update()\ (swift.obj.reconstructor.ObjectReconstructor\ method)',\ u'swift.obj.reconstructor.ObjectReconstructor.aggregate_recon_update',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReconstructor" first="False" fullname="ObjectReconstructor.aggregate_recon_update" ids="swift.obj.reconstructor.ObjectReconstructor.aggregate_recon_update" module="swift.obj.reconstructor" names="swift.obj.reconstructor.ObjectReconstructor.aggregate_recon_update"><desc_name xml:space="preserve">aggregate_recon_update</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Aggregate per-disk rcache updates from child workers.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'build_reconstruction_jobs()\ (swift.obj.reconstructor.ObjectReconstructor\ method)',\ u'swift.obj.reconstructor.ObjectReconstructor.build_reconstruction_jobs',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReconstructor" first="False" fullname="ObjectReconstructor.build_reconstruction_jobs" ids="swift.obj.reconstructor.ObjectReconstructor.build_reconstruction_jobs" module="swift.obj.reconstructor" names="swift.obj.reconstructor.ObjectReconstructor.build_reconstruction_jobs"><desc_name xml:space="preserve">build_reconstruction_jobs</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">part_info</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Helper function for collect_jobs to build jobs for reconstruction
                                using EC style storage policy</paragraph>
                            <paragraph>N.B. If this function ever returns an empty list of jobs the entire
                                partition will be deleted.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'check_ring()\ (swift.obj.reconstructor.ObjectReconstructor\ method)',\ u'swift.obj.reconstructor.ObjectReconstructor.check_ring',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReconstructor" first="False" fullname="ObjectReconstructor.check_ring" ids="swift.obj.reconstructor.ObjectReconstructor.check_ring" module="swift.obj.reconstructor" names="swift.obj.reconstructor.ObjectReconstructor.check_ring"><desc_name xml:space="preserve">check_ring</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">object_ring</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Check to see if the ring has been updated</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">object_ring</literal_strong> – the ring to check</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>boolean indicating whether or not the ring has changed</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'collect_parts()\ (swift.obj.reconstructor.ObjectReconstructor\ method)',\ u'swift.obj.reconstructor.ObjectReconstructor.collect_parts',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReconstructor" first="False" fullname="ObjectReconstructor.collect_parts" ids="swift.obj.reconstructor.ObjectReconstructor.collect_parts" module="swift.obj.reconstructor" names="swift.obj.reconstructor.ObjectReconstructor.collect_parts"><desc_name xml:space="preserve">collect_parts</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">override_devices=None</desc_parameter><desc_parameter xml:space="preserve">override_partitions=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Helper for getting partitions in the top level reconstructor</paragraph>
                            <paragraph>In handoffs_only mode primary partitions will not be included in the
                                returned (possibly empty) list.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'delete_partition()\ (swift.obj.reconstructor.ObjectReconstructor\ method)',\ u'swift.obj.reconstructor.ObjectReconstructor.delete_partition',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReconstructor" first="False" fullname="ObjectReconstructor.delete_partition" ids="swift.obj.reconstructor.ObjectReconstructor.delete_partition" module="swift.obj.reconstructor" names="swift.obj.reconstructor.ObjectReconstructor.delete_partition"><desc_name xml:space="preserve">delete_partition</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">path</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'delete_reverted_objs()\ (swift.obj.reconstructor.ObjectReconstructor\ method)',\ u'swift.obj.reconstructor.ObjectReconstructor.delete_reverted_objs',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReconstructor" first="False" fullname="ObjectReconstructor.delete_reverted_objs" ids="swift.obj.reconstructor.ObjectReconstructor.delete_reverted_objs" module="swift.obj.reconstructor" names="swift.obj.reconstructor.ObjectReconstructor.delete_reverted_objs"><desc_name xml:space="preserve">delete_reverted_objs</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">job</desc_parameter><desc_parameter xml:space="preserve">objects</desc_parameter><desc_parameter xml:space="preserve">frag_index</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>For EC we can potentially revert only some of a partition
                                so we’ll delete reverted objects here. Note that we delete
                                the fragment index of the file we sent to the remote node.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">job</literal_strong> – the job being processed</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">objects</literal_strong> – a dict of objects to be deleted, each entry maps
                                                    hash=&gt;timestamp</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">frag_index</literal_strong> – (int) the fragment index of data files to be deleted</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'detect_lockups()\ (swift.obj.reconstructor.ObjectReconstructor\ method)',\ u'swift.obj.reconstructor.ObjectReconstructor.detect_lockups',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReconstructor" first="False" fullname="ObjectReconstructor.detect_lockups" ids="swift.obj.reconstructor.ObjectReconstructor.detect_lockups" module="swift.obj.reconstructor" names="swift.obj.reconstructor.ObjectReconstructor.detect_lockups"><desc_name xml:space="preserve">detect_lockups</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>In testing, the pool.waitall() call very occasionally failed to return.
                                This is an attempt to make sure the reconstructor finishes its
                                reconstruction pass in some eventuality.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'final_recon_dump()\ (swift.obj.reconstructor.ObjectReconstructor\ method)',\ u'swift.obj.reconstructor.ObjectReconstructor.final_recon_dump',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReconstructor" first="False" fullname="ObjectReconstructor.final_recon_dump" ids="swift.obj.reconstructor.ObjectReconstructor.final_recon_dump" module="swift.obj.reconstructor" names="swift.obj.reconstructor.ObjectReconstructor.final_recon_dump"><desc_name xml:space="preserve">final_recon_dump</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">total</desc_parameter><desc_parameter xml:space="preserve">override_devices=None</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Add stats for this worker’s run to recon cache.</paragraph>
                            <paragraph>When in worker mode (per_disk_stats == True) this worker’s stats are
                                added per device instead of in the top level keys (aggregation is
                                serialized in the parent process).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">total</literal_strong> – the runtime of cycle in minutes</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">override_devices</literal_strong> – (optional) list of device that are being
                                                    reconstructed</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_local_devices()\ (swift.obj.reconstructor.ObjectReconstructor\ method)',\ u'swift.obj.reconstructor.ObjectReconstructor.get_local_devices',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReconstructor" first="False" fullname="ObjectReconstructor.get_local_devices" ids="swift.obj.reconstructor.ObjectReconstructor.get_local_devices" module="swift.obj.reconstructor" names="swift.obj.reconstructor.ObjectReconstructor.get_local_devices"><desc_name xml:space="preserve">get_local_devices</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns a set of all local devices in all EC policies.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_policy2devices()\ (swift.obj.reconstructor.ObjectReconstructor\ method)',\ u'swift.obj.reconstructor.ObjectReconstructor.get_policy2devices',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReconstructor" first="False" fullname="ObjectReconstructor.get_policy2devices" ids="swift.obj.reconstructor.ObjectReconstructor.get_policy2devices" module="swift.obj.reconstructor" names="swift.obj.reconstructor.ObjectReconstructor.get_policy2devices"><desc_name xml:space="preserve">get_policy2devices</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_suffix_delta()\ (swift.obj.reconstructor.ObjectReconstructor\ method)',\ u'swift.obj.reconstructor.ObjectReconstructor.get_suffix_delta',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReconstructor" first="False" fullname="ObjectReconstructor.get_suffix_delta" ids="swift.obj.reconstructor.ObjectReconstructor.get_suffix_delta" module="swift.obj.reconstructor" names="swift.obj.reconstructor.ObjectReconstructor.get_suffix_delta"><desc_name xml:space="preserve">get_suffix_delta</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">local_suff</desc_parameter><desc_parameter xml:space="preserve">local_index</desc_parameter><desc_parameter xml:space="preserve">remote_suff</desc_parameter><desc_parameter xml:space="preserve">remote_index</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Compare the local suffix hashes with the remote suffix hashes
                                for the given local and remote fragment indexes.  Return those
                                suffixes which should be synced.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">local_suff</literal_strong> – the local suffix hashes (from _get_hashes)</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">local_index</literal_strong> – the local fragment index for the job</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">remote_suff</literal_strong> – the remote suffix hashes (from remote
                                                    REPLICATE request)</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">remote_index</literal_strong> – the remote fragment index for the job</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a list of strings, the suffix dirs to sync</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_worker_args()\ (swift.obj.reconstructor.ObjectReconstructor\ method)',\ u'swift.obj.reconstructor.ObjectReconstructor.get_worker_args',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReconstructor" first="False" fullname="ObjectReconstructor.get_worker_args" ids="swift.obj.reconstructor.ObjectReconstructor.get_worker_args" module="swift.obj.reconstructor" names="swift.obj.reconstructor.ObjectReconstructor.get_worker_args"><desc_name xml:space="preserve">get_worker_args</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">once=False</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Take the set of all local devices for this node from all the EC
                                policies rings, and distribute them evenly into the number of workers
                                to be spawned according to the configured worker count. If <title_reference>devices</title_reference> is
                                given in <title_reference>kwargs</title_reference> then distribute only those devices.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">once</literal_strong> – False if the worker(s) will be daemonized, True if the
                                                    worker(s) will be run once</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">kwargs</literal_strong> – optional overrides from the command line</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'heartbeat()\ (swift.obj.reconstructor.ObjectReconstructor\ method)',\ u'swift.obj.reconstructor.ObjectReconstructor.heartbeat',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReconstructor" first="False" fullname="ObjectReconstructor.heartbeat" ids="swift.obj.reconstructor.ObjectReconstructor.heartbeat" module="swift.obj.reconstructor" names="swift.obj.reconstructor.ObjectReconstructor.heartbeat"><desc_name xml:space="preserve">heartbeat</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Loop that runs in the background during reconstruction.  It
                                periodically logs progress.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'is_healthy()\ (swift.obj.reconstructor.ObjectReconstructor\ method)',\ u'swift.obj.reconstructor.ObjectReconstructor.is_healthy',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReconstructor" first="False" fullname="ObjectReconstructor.is_healthy" ids="swift.obj.reconstructor.ObjectReconstructor.is_healthy" module="swift.obj.reconstructor" names="swift.obj.reconstructor.ObjectReconstructor.is_healthy"><desc_name xml:space="preserve">is_healthy</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Check whether rings have changed, and maybe do a recon update.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>False if any ec ring has changed</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'kill_coros()\ (swift.obj.reconstructor.ObjectReconstructor\ method)',\ u'swift.obj.reconstructor.ObjectReconstructor.kill_coros',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReconstructor" first="False" fullname="ObjectReconstructor.kill_coros" ids="swift.obj.reconstructor.ObjectReconstructor.kill_coros" module="swift.obj.reconstructor" names="swift.obj.reconstructor.ObjectReconstructor.kill_coros"><desc_name xml:space="preserve">kill_coros</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Utility function that kills all coroutines currently running.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'load_object_ring()\ (swift.obj.reconstructor.ObjectReconstructor\ method)',\ u'swift.obj.reconstructor.ObjectReconstructor.load_object_ring',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReconstructor" first="False" fullname="ObjectReconstructor.load_object_ring" ids="swift.obj.reconstructor.ObjectReconstructor.load_object_ring" module="swift.obj.reconstructor" names="swift.obj.reconstructor.ObjectReconstructor.load_object_ring"><desc_name xml:space="preserve">load_object_ring</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">policy</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Make sure the policy’s rings are loaded.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">policy</literal_strong> – the StoragePolicy instance</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>appropriate ring object</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'make_rebuilt_fragment_iter()\ (swift.obj.reconstructor.ObjectReconstructor\ method)',\ u'swift.obj.reconstructor.ObjectReconstructor.make_rebuilt_fragment_iter',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReconstructor" first="False" fullname="ObjectReconstructor.make_rebuilt_fragment_iter" ids="swift.obj.reconstructor.ObjectReconstructor.make_rebuilt_fragment_iter" module="swift.obj.reconstructor" names="swift.obj.reconstructor.ObjectReconstructor.make_rebuilt_fragment_iter"><desc_name xml:space="preserve">make_rebuilt_fragment_iter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">responses</desc_parameter><desc_parameter xml:space="preserve">path</desc_parameter><desc_parameter xml:space="preserve">policy</desc_parameter><desc_parameter xml:space="preserve">frag_index</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Turn a set of connections from backend object servers into a generator
                                that yields up the rebuilt fragment archive for frag_index.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'process_job()\ (swift.obj.reconstructor.ObjectReconstructor\ method)',\ u'swift.obj.reconstructor.ObjectReconstructor.process_job',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReconstructor" first="False" fullname="ObjectReconstructor.process_job" ids="swift.obj.reconstructor.ObjectReconstructor.process_job" module="swift.obj.reconstructor" names="swift.obj.reconstructor.ObjectReconstructor.process_job"><desc_name xml:space="preserve">process_job</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">job</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Sync the local partition with the remote node(s) according to
                                the parameters of the job.  For primary nodes, the SYNC job type
                                will define both left and right hand sync_to nodes to ssync with
                                as defined by this primary nodes index in the node list based on
                                the fragment index found in the partition.  For non-primary
                                nodes (either handoff revert, or rebalance) the REVERT job will
                                define a single node in sync_to which is the proper/new home for
                                the fragment index.</paragraph>
                            <paragraph>N.B. ring rebalancing can be time consuming and handoff nodes’
                                fragment indexes do not have a stable order, it’s possible to
                                have more than one REVERT job for a partition, and in some rare
                                failure conditions there may even also be a SYNC job for the
                                same partition - but each one will be processed separately
                                because each job will define a separate list of node(s) to
                                ‘sync_to’.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Param</field_name>
                                    <field_body>
                                        <paragraph>the job dict, with the keys defined in <literal>_get_job_info</literal></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'reconstruct()\ (swift.obj.reconstructor.ObjectReconstructor\ method)',\ u'swift.obj.reconstructor.ObjectReconstructor.reconstruct',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReconstructor" first="False" fullname="ObjectReconstructor.reconstruct" ids="swift.obj.reconstructor.ObjectReconstructor.reconstruct" module="swift.obj.reconstructor" names="swift.obj.reconstructor.ObjectReconstructor.reconstruct"><desc_name xml:space="preserve">reconstruct</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Run a reconstruction pass</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'reconstruct_fa()\ (swift.obj.reconstructor.ObjectReconstructor\ method)',\ u'swift.obj.reconstructor.ObjectReconstructor.reconstruct_fa',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReconstructor" first="False" fullname="ObjectReconstructor.reconstruct_fa" ids="swift.obj.reconstructor.ObjectReconstructor.reconstruct_fa" module="swift.obj.reconstructor" names="swift.obj.reconstructor.ObjectReconstructor.reconstruct_fa"><desc_name xml:space="preserve">reconstruct_fa</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">job</desc_parameter><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">datafile_metadata</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Reconstructs a fragment archive - this method is called from ssync
                                after a remote node responds that is missing this object - the local
                                diskfile is opened to provide metadata - but to reconstruct the
                                missing fragment archive we must connect to multiple object servers.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">job</literal_strong> – job from ssync_sender</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">node</literal_strong> – node that we’re rebuilding to</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">datafile_metadata</literal_strong> – the datafile metadata to attach to
                                                    the rebuilt fragment archive</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a DiskFile like class for use by ssync</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="swift.common.exceptions.DiskFileError" refuri="misc#swift.common.exceptions.DiskFileError"><literal_strong>DiskFileError</literal_strong></reference> – if the fragment archive cannot be reconstructed</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'rehash_remote()\ (swift.obj.reconstructor.ObjectReconstructor\ method)',\ u'swift.obj.reconstructor.ObjectReconstructor.rehash_remote',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReconstructor" first="False" fullname="ObjectReconstructor.rehash_remote" ids="swift.obj.reconstructor.ObjectReconstructor.rehash_remote" module="swift.obj.reconstructor" names="swift.obj.reconstructor.ObjectReconstructor.rehash_remote"><desc_name xml:space="preserve">rehash_remote</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">job</desc_parameter><desc_parameter xml:space="preserve">suffixes</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'run_forever()\ (swift.obj.reconstructor.ObjectReconstructor\ method)',\ u'swift.obj.reconstructor.ObjectReconstructor.run_forever',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReconstructor" first="False" fullname="ObjectReconstructor.run_forever" ids="swift.obj.reconstructor.ObjectReconstructor.run_forever" module="swift.obj.reconstructor" names="swift.obj.reconstructor.ObjectReconstructor.run_forever"><desc_name xml:space="preserve">run_forever</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'run_once()\ (swift.obj.reconstructor.ObjectReconstructor\ method)',\ u'swift.obj.reconstructor.ObjectReconstructor.run_once',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReconstructor" first="False" fullname="ObjectReconstructor.run_once" ids="swift.obj.reconstructor.ObjectReconstructor.run_once" module="swift.obj.reconstructor" names="swift.obj.reconstructor.ObjectReconstructor.run_once"><desc_name xml:space="preserve">run_once</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'stats_line()\ (swift.obj.reconstructor.ObjectReconstructor\ method)',\ u'swift.obj.reconstructor.ObjectReconstructor.stats_line',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectReconstructor" first="False" fullname="ObjectReconstructor.stats_line" ids="swift.obj.reconstructor.ObjectReconstructor.stats_line" module="swift.obj.reconstructor" names="swift.obj.reconstructor.ObjectReconstructor.stats_line"><desc_name xml:space="preserve">stats_line</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Logs various stats for the currently running reconstruction pass.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'RebuildingECDiskFileStream\ (class\ in\ swift.obj.reconstructor)',\ u'swift.obj.reconstructor.RebuildingECDiskFileStream',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="RebuildingECDiskFileStream" ids="swift.obj.reconstructor.RebuildingECDiskFileStream" module="swift.obj.reconstructor" names="swift.obj.reconstructor.RebuildingECDiskFileStream"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.reconstructor.</desc_addname><desc_name xml:space="preserve">RebuildingECDiskFileStream</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">datafile_metadata</desc_parameter><desc_parameter xml:space="preserve">frag_index</desc_parameter><desc_parameter xml:space="preserve">rebuilt_fragment_iter</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>This class wraps the reconstructed fragment archive data and
                        metadata in the DiskFile interface for ssync.</paragraph>
                    <index entries="['single',\ u'content_length\ (swift.obj.reconstructor.RebuildingECDiskFileStream\ attribute)',\ u'swift.obj.reconstructor.RebuildingECDiskFileStream.content_length',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="RebuildingECDiskFileStream" first="False" fullname="RebuildingECDiskFileStream.content_length" ids="swift.obj.reconstructor.RebuildingECDiskFileStream.content_length" module="swift.obj.reconstructor" names="swift.obj.reconstructor.RebuildingECDiskFileStream.content_length"><desc_name xml:space="preserve">content_length</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_datafile_metadata()\ (swift.obj.reconstructor.RebuildingECDiskFileStream\ method)',\ u'swift.obj.reconstructor.RebuildingECDiskFileStream.get_datafile_metadata',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RebuildingECDiskFileStream" first="False" fullname="RebuildingECDiskFileStream.get_datafile_metadata" ids="swift.obj.reconstructor.RebuildingECDiskFileStream.get_datafile_metadata" module="swift.obj.reconstructor" names="swift.obj.reconstructor.RebuildingECDiskFileStream.get_datafile_metadata"><desc_name xml:space="preserve">get_datafile_metadata</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_metadata()\ (swift.obj.reconstructor.RebuildingECDiskFileStream\ method)',\ u'swift.obj.reconstructor.RebuildingECDiskFileStream.get_metadata',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RebuildingECDiskFileStream" first="False" fullname="RebuildingECDiskFileStream.get_metadata" ids="swift.obj.reconstructor.RebuildingECDiskFileStream.get_metadata" module="swift.obj.reconstructor" names="swift.obj.reconstructor.RebuildingECDiskFileStream.get_metadata"><desc_name xml:space="preserve">get_metadata</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'reader()\ (swift.obj.reconstructor.RebuildingECDiskFileStream\ method)',\ u'swift.obj.reconstructor.RebuildingECDiskFileStream.reader',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="RebuildingECDiskFileStream" first="False" fullname="RebuildingECDiskFileStream.reader" ids="swift.obj.reconstructor.RebuildingECDiskFileStream.reader" module="swift.obj.reconstructor" names="swift.obj.reconstructor.RebuildingECDiskFileStream.reader"><desc_name xml:space="preserve">reader</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'parse_override_options()\ (in\ module\ swift.obj.reconstructor)',\ u'swift.obj.reconstructor.parse_override_options',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="parse_override_options" ids="swift.obj.reconstructor.parse_override_options" module="swift.obj.reconstructor" names="swift.obj.reconstructor.parse_override_options"><desc_addname xml:space="preserve">swift.obj.reconstructor.</desc_addname><desc_name xml:space="preserve">parse_override_options</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Return a dict with keys <title_reference>override_devices</title_reference> and <title_reference>override_partitions</title_reference> whose
                        values have been parsed from <title_reference>kwargs</title_reference>. If either key is found in <title_reference>kwargs</title_reference>
                        then copy its value from kwargs. Otherwise, if <title_reference>once</title_reference> is set in <title_reference>kwargs</title_reference>
                        then parse <title_reference>devices</title_reference> and <title_reference>partitions</title_reference> keys for the value of
                        <title_reference>override_devices</title_reference> and <title_reference>override_partitions</title_reference> respectively.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a dict with keys <title_reference>override_devices</title_reference> and <title_reference>override_partitions</title_reference></paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <target refid="object-server"></target>
        </section>
        <section ids="module-swift.obj.server id5 object-server" names="object\ server object-server">
            <title>Object Server</title>
            <index entries="['single',\ u'swift.obj.server\ (module)',\ u'module-swift.obj.server',\ '',\ None]"></index>
            <paragraph>Object Server for Swift</paragraph>
            <index entries="['single',\ u'EventletPlungerString\ (class\ in\ swift.obj.server)',\ u'swift.obj.server.EventletPlungerString',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="EventletPlungerString" ids="swift.obj.server.EventletPlungerString" module="swift.obj.server" names="swift.obj.server.EventletPlungerString"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.server.</desc_addname><desc_name xml:space="preserve">EventletPlungerString</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">str</literal></paragraph>
                    <paragraph>Eventlet won’t send headers until it’s accumulated at least
                        eventlet.wsgi.MINIMUM_CHUNK_SIZE bytes or the app iter is exhausted. If we
                        want to send the response body behind Eventlet’s back, perhaps with some
                        zero-copy wizardry, then we have to unclog the plumbing in eventlet.wsgi
                        to force the headers out, so we use an EventletPlungerString to empty out
                        all of Eventlet’s buffers.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ObjectController\ (class\ in\ swift.obj.server)',\ u'swift.obj.server.ObjectController',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ObjectController" ids="swift.obj.server.ObjectController" module="swift.obj.server" names="swift.obj.server.ObjectController"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.server.</desc_addname><desc_name xml:space="preserve">ObjectController</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">swift.common.base_storage_server.BaseStorageServer</literal></paragraph>
                    <paragraph>Implements the WSGI application for the Swift Object Server.</paragraph>
                    <index entries="['single',\ u'DELETE()\ (swift.obj.server.ObjectController\ method)',\ u'swift.obj.server.ObjectController.DELETE',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectController" first="False" fullname="ObjectController.DELETE" ids="swift.obj.server.ObjectController.DELETE" module="swift.obj.server" names="swift.obj.server.ObjectController.DELETE"><desc_name xml:space="preserve">DELETE</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctrl</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Handle HTTP DELETE requests for the Swift Object Server.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'GET()\ (swift.obj.server.ObjectController\ method)',\ u'swift.obj.server.ObjectController.GET',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectController" first="False" fullname="ObjectController.GET" ids="swift.obj.server.ObjectController.GET" module="swift.obj.server" names="swift.obj.server.ObjectController.GET"><desc_name xml:space="preserve">GET</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctrl</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Handle HTTP GET requests for the Swift Object Server.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'HEAD()\ (swift.obj.server.ObjectController\ method)',\ u'swift.obj.server.ObjectController.HEAD',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectController" first="False" fullname="ObjectController.HEAD" ids="swift.obj.server.ObjectController.HEAD" module="swift.obj.server" names="swift.obj.server.ObjectController.HEAD"><desc_name xml:space="preserve">HEAD</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctrl</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Handle HTTP HEAD requests for the Swift Object Server.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'POST()\ (swift.obj.server.ObjectController\ method)',\ u'swift.obj.server.ObjectController.POST',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectController" first="False" fullname="ObjectController.POST" ids="swift.obj.server.ObjectController.POST" module="swift.obj.server" names="swift.obj.server.ObjectController.POST"><desc_name xml:space="preserve">POST</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctrl</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Handle HTTP POST requests for the Swift Object Server.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'PUT()\ (swift.obj.server.ObjectController\ method)',\ u'swift.obj.server.ObjectController.PUT',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectController" first="False" fullname="ObjectController.PUT" ids="swift.obj.server.ObjectController.PUT" module="swift.obj.server" names="swift.obj.server.ObjectController.PUT"><desc_name xml:space="preserve">PUT</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctrl</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Handle HTTP PUT requests for the Swift Object Server.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'REPLICATE()\ (swift.obj.server.ObjectController\ method)',\ u'swift.obj.server.ObjectController.REPLICATE',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectController" first="False" fullname="ObjectController.REPLICATE" ids="swift.obj.server.ObjectController.REPLICATE" module="swift.obj.server" names="swift.obj.server.ObjectController.REPLICATE"><desc_name xml:space="preserve">REPLICATE</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctrl</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Handle REPLICATE requests for the Swift Object Server.  This is used
                                by the object replicator to get hashes for directories.</paragraph>
                            <paragraph>Note that the name REPLICATE is preserved for historical reasons as
                                this verb really just returns the hashes information for the specified
                                parameters and is used, for example, by both replication and EC.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'SSYNC()\ (swift.obj.server.ObjectController\ method)',\ u'swift.obj.server.ObjectController.SSYNC',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectController" first="False" fullname="ObjectController.SSYNC" ids="swift.obj.server.ObjectController.SSYNC" module="swift.obj.server" names="swift.obj.server.ObjectController.SSYNC"><desc_name xml:space="preserve">SSYNC</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctrl</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'async_update()\ (swift.obj.server.ObjectController\ method)',\ u'swift.obj.server.ObjectController.async_update',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectController" first="False" fullname="ObjectController.async_update" ids="swift.obj.server.ObjectController.async_update" module="swift.obj.server" names="swift.obj.server.ObjectController.async_update"><desc_name xml:space="preserve">async_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">op</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">obj</desc_parameter><desc_parameter xml:space="preserve">host</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">contdevice</desc_parameter><desc_parameter xml:space="preserve">headers_out</desc_parameter><desc_parameter xml:space="preserve">objdevice</desc_parameter><desc_parameter xml:space="preserve">policy</desc_parameter><desc_parameter xml:space="preserve">logger_thread_locals=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Sends or saves an async update.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">op</literal_strong> – operation performed (ex: ‘PUT’, or ‘DELETE’)</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – account name for the object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> – container name for the object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">obj</literal_strong> – object name</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">host</literal_strong> – host that the container is on</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">partition</literal_strong> – partition that the container is on</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">contdevice</literal_strong> – device name that the container is on</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">headers_out</literal_strong> – dictionary of headers to send in the container
                                                    request</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">objdevice</literal_strong> – device name that the object is in</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">policy</literal_strong> – the associated BaseStoragePolicy instance</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">logger_thread_locals</literal_strong> – The thread local values to be set on the
                                                    self.logger to retain transaction
                                                    logging information.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'container_update()\ (swift.obj.server.ObjectController\ method)',\ u'swift.obj.server.ObjectController.container_update',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectController" first="False" fullname="ObjectController.container_update" ids="swift.obj.server.ObjectController.container_update" module="swift.obj.server" names="swift.obj.server.ObjectController.container_update"><desc_name xml:space="preserve">container_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">op</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">obj</desc_parameter><desc_parameter xml:space="preserve">request</desc_parameter><desc_parameter xml:space="preserve">headers_out</desc_parameter><desc_parameter xml:space="preserve">objdevice</desc_parameter><desc_parameter xml:space="preserve">policy</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Update the container when objects are updated.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">op</literal_strong> – operation performed (ex: ‘PUT’, or ‘DELETE’)</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – account name for the object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> – container name for the object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">obj</literal_strong> – object name</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">request</literal_strong> – the original request object driving the update</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">headers_out</literal_strong> – dictionary of headers to send in the container
                                                    request(s)</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">objdevice</literal_strong> – device name that the object is in</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">policy</literal_strong> – the BaseStoragePolicy instance</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'delete_at_update()\ (swift.obj.server.ObjectController\ method)',\ u'swift.obj.server.ObjectController.delete_at_update',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectController" first="False" fullname="ObjectController.delete_at_update" ids="swift.obj.server.ObjectController.delete_at_update" module="swift.obj.server" names="swift.obj.server.ObjectController.delete_at_update"><desc_name xml:space="preserve">delete_at_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">op</desc_parameter><desc_parameter xml:space="preserve">delete_at</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">obj</desc_parameter><desc_parameter xml:space="preserve">request</desc_parameter><desc_parameter xml:space="preserve">objdevice</desc_parameter><desc_parameter xml:space="preserve">policy</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Update the expiring objects container when objects are updated.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">op</literal_strong> – operation performed (ex: ‘PUT’, or ‘DELETE’)</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">delete_at</literal_strong> – scheduled delete in UNIX seconds, int</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – account name for the object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> – container name for the object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">obj</literal_strong> – object name</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">request</literal_strong> – the original request driving the update</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">objdevice</literal_strong> – device name that the object is in</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">policy</literal_strong> – the BaseStoragePolicy instance (used for tmp dir)</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_diskfile()\ (swift.obj.server.ObjectController\ method)',\ u'swift.obj.server.ObjectController.get_diskfile',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectController" first="False" fullname="ObjectController.get_diskfile" ids="swift.obj.server.ObjectController.get_diskfile" module="swift.obj.server" names="swift.obj.server.ObjectController.get_diskfile"><desc_name xml:space="preserve">get_diskfile</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">device</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">obj</desc_parameter><desc_parameter xml:space="preserve">policy</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Utility method for instantiating a DiskFile object supporting a given
                                REST API.</paragraph>
                            <paragraph>An implementation of the object server that wants to use a different
                                DiskFile class would simply over-ride this method to provide that
                                behavior.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'server_type\ (swift.obj.server.ObjectController\ attribute)',\ u'swift.obj.server.ObjectController.server_type',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ObjectController" first="False" fullname="ObjectController.server_type" ids="swift.obj.server.ObjectController.server_type" module="swift.obj.server" names="swift.obj.server.ObjectController.server_type"><desc_name xml:space="preserve">server_type</desc_name><desc_annotation xml:space="preserve"> = 'object-server'</desc_annotation></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'setup()\ (swift.obj.server.ObjectController\ method)',\ u'swift.obj.server.ObjectController.setup',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectController" first="False" fullname="ObjectController.setup" ids="swift.obj.server.ObjectController.setup" module="swift.obj.server" names="swift.obj.server.ObjectController.setup"><desc_name xml:space="preserve">setup</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Implementation specific setup. This method is called at the very end
                                by the constructor to allow a specific implementation to modify
                                existing attributes or add its own attributes.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">conf</literal_strong> – WSGI configuration parameter</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'app_factory()\ (in\ module\ swift.obj.server)',\ u'swift.obj.server.app_factory',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="app_factory" ids="swift.obj.server.app_factory" module="swift.obj.server" names="swift.obj.server.app_factory"><desc_addname xml:space="preserve">swift.obj.server.</desc_addname><desc_name xml:space="preserve">app_factory</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">global_conf</desc_parameter><desc_parameter xml:space="preserve">**local_conf</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>paste.deploy app factory for creating WSGI object server apps</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'drain()\ (in\ module\ swift.obj.server)',\ u'swift.obj.server.drain',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="drain" ids="swift.obj.server.drain" module="swift.obj.server" names="swift.obj.server.drain"><desc_addname xml:space="preserve">swift.obj.server.</desc_addname><desc_name xml:space="preserve">drain</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">file_like</desc_parameter><desc_parameter xml:space="preserve">read_size</desc_parameter><desc_parameter xml:space="preserve">timeout</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Read and discard any bytes from file_like.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">file_like</literal_strong> – file-like object to read from</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">read_size</literal_strong> – how big a chunk to read at a time</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">timeout</literal_strong> – how long to wait for a read (use None for no timeout)</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><reference internal="True" reftitle="swift.common.exceptions.ChunkReadTimeout" refuri="misc#swift.common.exceptions.ChunkReadTimeout"><literal_strong>ChunkReadTimeout</literal_strong></reference> – if no chunk was read in time</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'global_conf_callback()\ (in\ module\ swift.obj.server)',\ u'swift.obj.server.global_conf_callback',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="global_conf_callback" ids="swift.obj.server.global_conf_callback" module="swift.obj.server" names="swift.obj.server.global_conf_callback"><desc_addname xml:space="preserve">swift.obj.server.</desc_addname><desc_name xml:space="preserve">global_conf_callback</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">preloaded_app_conf</desc_parameter><desc_parameter xml:space="preserve">global_conf</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Callback for swift.common.wsgi.run_wsgi during the global_conf
                        creation so that we can add our replication_semaphore, used to
                        limit the number of concurrent SSYNC_REQUESTS across all
                        workers.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">preloaded_app_conf</literal_strong> – The preloaded conf for the WSGI app.
                                            This conf instance will go away, so
                                            just read from it, don’t write.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">global_conf</literal_strong> – The global conf that will eventually be
                                            passed to the app_factory function later.
                                            This conf is created before the worker
                                            subprocesses are forked, so can be useful to
                                            set up semaphores, shared memory, etc.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'iter_mime_headers_and_bodies()\ (in\ module\ swift.obj.server)',\ u'swift.obj.server.iter_mime_headers_and_bodies',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="iter_mime_headers_and_bodies" ids="swift.obj.server.iter_mime_headers_and_bodies" module="swift.obj.server" names="swift.obj.server.iter_mime_headers_and_bodies"><desc_addname xml:space="preserve">swift.obj.server.</desc_addname><desc_name xml:space="preserve">iter_mime_headers_and_bodies</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">wsgi_input</desc_parameter><desc_parameter xml:space="preserve">mime_boundary</desc_parameter><desc_parameter xml:space="preserve">read_chunk_size</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                </desc_content>
            </desc>
            <target refid="object-updater"></target>
        </section>
        <section ids="module-swift.obj.updater id6 object-updater" names="object\ updater object-updater">
            <title>Object Updater</title>
            <index entries="['single',\ u'swift.obj.updater\ (module)',\ u'module-swift.obj.updater',\ '',\ None]"></index>
            <index entries="['single',\ u'ObjectUpdater\ (class\ in\ swift.obj.updater)',\ u'swift.obj.updater.ObjectUpdater',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ObjectUpdater" ids="swift.obj.updater.ObjectUpdater" module="swift.obj.updater" names="swift.obj.updater.ObjectUpdater"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.obj.updater.</desc_addname><desc_name xml:space="preserve">ObjectUpdater</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">swift.common.daemon.Daemon</literal></paragraph>
                    <paragraph>Update object information in container listings.</paragraph>
                    <index entries="['single',\ u'get_container_ring()\ (swift.obj.updater.ObjectUpdater\ method)',\ u'swift.obj.updater.ObjectUpdater.get_container_ring',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectUpdater" first="False" fullname="ObjectUpdater.get_container_ring" ids="swift.obj.updater.ObjectUpdater.get_container_ring" module="swift.obj.updater" names="swift.obj.updater.ObjectUpdater.get_container_ring"><desc_name xml:space="preserve">get_container_ring</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get the container ring.  Load it, if it hasn’t been yet.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'object_sweep()\ (swift.obj.updater.ObjectUpdater\ method)',\ u'swift.obj.updater.ObjectUpdater.object_sweep',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectUpdater" first="False" fullname="ObjectUpdater.object_sweep" ids="swift.obj.updater.ObjectUpdater.object_sweep" module="swift.obj.updater" names="swift.obj.updater.ObjectUpdater.object_sweep"><desc_name xml:space="preserve">object_sweep</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">device</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>If there are async pendings on the device, walk each one and update.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">device</literal_strong> – path to device</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'object_update()\ (swift.obj.updater.ObjectUpdater\ method)',\ u'swift.obj.updater.ObjectUpdater.object_update',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectUpdater" first="False" fullname="ObjectUpdater.object_update" ids="swift.obj.updater.ObjectUpdater.object_update" module="swift.obj.updater" names="swift.obj.updater.ObjectUpdater.object_update"><desc_name xml:space="preserve">object_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">part</desc_parameter><desc_parameter xml:space="preserve">op</desc_parameter><desc_parameter xml:space="preserve">obj</desc_parameter><desc_parameter xml:space="preserve">headers_out</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Perform the object update to the container</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">node</literal_strong> – node dictionary from the container ring</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">part</literal_strong> – partition that holds the container</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">op</literal_strong> – operation performed (ex: ‘PUT’ or ‘DELETE’)</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">obj</literal_strong> – object name being updated</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">headers_out</literal_strong> – headers to send with the update</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'process_object_update()\ (swift.obj.updater.ObjectUpdater\ method)',\ u'swift.obj.updater.ObjectUpdater.process_object_update',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectUpdater" first="False" fullname="ObjectUpdater.process_object_update" ids="swift.obj.updater.ObjectUpdater.process_object_update" module="swift.obj.updater" names="swift.obj.updater.ObjectUpdater.process_object_update"><desc_name xml:space="preserve">process_object_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">update_path</desc_parameter><desc_parameter xml:space="preserve">device</desc_parameter><desc_parameter xml:space="preserve">policy</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Process the object information to be updated and update.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">update_path</literal_strong> – path to pickled object update file</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">device</literal_strong> – path to device</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">policy</literal_strong> – storage policy of object update</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'run_forever()\ (swift.obj.updater.ObjectUpdater\ method)',\ u'swift.obj.updater.ObjectUpdater.run_forever',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectUpdater" first="False" fullname="ObjectUpdater.run_forever" ids="swift.obj.updater.ObjectUpdater.run_forever" module="swift.obj.updater" names="swift.obj.updater.ObjectUpdater.run_forever"><desc_name xml:space="preserve">run_forever</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Run the updater continuously.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'run_once()\ (swift.obj.updater.ObjectUpdater\ method)',\ u'swift.obj.updater.ObjectUpdater.run_once',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ObjectUpdater" first="False" fullname="ObjectUpdater.run_once" ids="swift.obj.updater.ObjectUpdater.run_once" module="swift.obj.updater" names="swift.obj.updater.ObjectUpdater.run_once"><desc_name xml:space="preserve">run_once</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Run the updater once.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'random()\ (in\ module\ swift.obj.updater)',\ u'swift.obj.updater.random',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="random" ids="swift.obj.updater.random" module="swift.obj.updater" names="swift.obj.updater.random"><desc_addname xml:space="preserve">swift.obj.updater.</desc_addname><desc_name xml:space="preserve">random</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist><desc_returns xml:space="preserve">x in the interval [0, 1).</desc_returns></desc_signature>
                <desc_content>
                </desc_content>
            </desc>
        </section>
    </section>
</document>
