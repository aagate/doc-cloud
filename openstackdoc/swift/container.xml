<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/swift/doc/source/container.rst">
    <target refid="container"></target>
    <section dupnames="container" ids="container id1" names="container">
        <title>Container</title>
        <target refid="container-auditor"></target>
        <section ids="module-swift.container.auditor id2 container-auditor" names="container\ auditor container-auditor">
            <title>Container Auditor</title>
            <index entries="['single',\ u'swift.container.auditor\ (module)',\ u'module-swift.container.auditor',\ '',\ None]"></index>
            <index entries="['single',\ u'ContainerAuditor\ (class\ in\ swift.container.auditor)',\ u'swift.container.auditor.ContainerAuditor',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ContainerAuditor" ids="swift.container.auditor.ContainerAuditor" module="swift.container.auditor" names="swift.container.auditor.ContainerAuditor"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.container.auditor.</desc_addname><desc_name xml:space="preserve">ContainerAuditor</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">swift.common.daemon.Daemon</literal></paragraph>
                    <paragraph>Audit containers.</paragraph>
                    <index entries="['single',\ u'container_audit()\ (swift.container.auditor.ContainerAuditor\ method)',\ u'swift.container.auditor.ContainerAuditor.container_audit',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerAuditor" first="False" fullname="ContainerAuditor.container_audit" ids="swift.container.auditor.ContainerAuditor.container_audit" module="swift.container.auditor" names="swift.container.auditor.ContainerAuditor.container_audit"><desc_name xml:space="preserve">container_audit</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">path</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Audits the given container path</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">path</literal_strong> – the path to a container db</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'run_forever()\ (swift.container.auditor.ContainerAuditor\ method)',\ u'swift.container.auditor.ContainerAuditor.run_forever',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerAuditor" first="False" fullname="ContainerAuditor.run_forever" ids="swift.container.auditor.ContainerAuditor.run_forever" module="swift.container.auditor" names="swift.container.auditor.ContainerAuditor.run_forever"><desc_name xml:space="preserve">run_forever</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Run the container audit until stopped.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'run_once()\ (swift.container.auditor.ContainerAuditor\ method)',\ u'swift.container.auditor.ContainerAuditor.run_once',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerAuditor" first="False" fullname="ContainerAuditor.run_once" ids="swift.container.auditor.ContainerAuditor.run_once" module="swift.container.auditor" names="swift.container.auditor.ContainerAuditor.run_once"><desc_name xml:space="preserve">run_once</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Run the container audit once.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'random()\ (in\ module\ swift.container.auditor)',\ u'swift.container.auditor.random',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="random" ids="swift.container.auditor.random" module="swift.container.auditor" names="swift.container.auditor.random"><desc_addname xml:space="preserve">swift.container.auditor.</desc_addname><desc_name xml:space="preserve">random</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist><desc_returns xml:space="preserve">x in the interval [0, 1).</desc_returns></desc_signature>
                <desc_content>
                </desc_content>
            </desc>
            <target refid="container-backend"></target>
        </section>
        <section ids="module-swift.container.backend id3 container-backend" names="container\ backend container-backend">
            <title>Container Backend</title>
            <index entries="['single',\ u'swift.container.backend\ (module)',\ u'module-swift.container.backend',\ '',\ None]"></index>
            <paragraph>Pluggable Back-ends for Container Server</paragraph>
            <index entries="['single',\ u'ContainerBroker\ (class\ in\ swift.container.backend)',\ u'swift.container.backend.ContainerBroker',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ContainerBroker" ids="swift.container.backend.ContainerBroker" module="swift.container.backend" names="swift.container.backend.ContainerBroker"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.container.backend.</desc_addname><desc_name xml:space="preserve">ContainerBroker</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">db_file</desc_parameter><desc_parameter xml:space="preserve">timeout=25</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter><desc_parameter xml:space="preserve">account=None</desc_parameter><desc_parameter xml:space="preserve">container=None</desc_parameter><desc_parameter xml:space="preserve">pending_timeout=None</desc_parameter><desc_parameter xml:space="preserve">stale_reads_ok=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" reftitle="swift.common.db.DatabaseBroker" refuri="db#swift.common.db.DatabaseBroker"><literal classes="xref py py-class">swift.common.db.DatabaseBroker</literal></reference></paragraph>
                    <paragraph>Encapsulates working with a container database.</paragraph>
                    <index entries="['single',\ u'create_container_info_table()\ (swift.container.backend.ContainerBroker\ method)',\ u'swift.container.backend.ContainerBroker.create_container_info_table',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.create_container_info_table" ids="swift.container.backend.ContainerBroker.create_container_info_table" module="swift.container.backend" names="swift.container.backend.ContainerBroker.create_container_info_table"><desc_name xml:space="preserve">create_container_info_table</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conn</desc_parameter><desc_parameter xml:space="preserve">put_timestamp</desc_parameter><desc_parameter xml:space="preserve">storage_policy_index</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create the container_info table which is specific to the container DB.
                                Not a part of Pluggable Back-ends, internal to the baseline code.
                                Also creates the container_stat view.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">conn</literal_strong> – DB connection object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">put_timestamp</literal_strong> – put timestamp</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">storage_policy_index</literal_strong> – storage policy index</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'create_object_table()\ (swift.container.backend.ContainerBroker\ method)',\ u'swift.container.backend.ContainerBroker.create_object_table',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.create_object_table" ids="swift.container.backend.ContainerBroker.create_object_table" module="swift.container.backend" names="swift.container.backend.ContainerBroker.create_object_table"><desc_name xml:space="preserve">create_object_table</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conn</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create the object table which is specific to the container DB.
                                Not a part of Pluggable Back-ends, internal to the baseline code.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">conn</literal_strong> – DB connection object</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'create_policy_stat_table()\ (swift.container.backend.ContainerBroker\ method)',\ u'swift.container.backend.ContainerBroker.create_policy_stat_table',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.create_policy_stat_table" ids="swift.container.backend.ContainerBroker.create_policy_stat_table" module="swift.container.backend" names="swift.container.backend.ContainerBroker.create_policy_stat_table"><desc_name xml:space="preserve">create_policy_stat_table</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conn</desc_parameter><desc_parameter xml:space="preserve">storage_policy_index=0</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create policy_stat table.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">conn</literal_strong> – DB connection object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">storage_policy_index</literal_strong> – the policy_index the container is
                                                    being created with</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'db_contains_type\ (swift.container.backend.ContainerBroker\ attribute)',\ u'swift.container.backend.ContainerBroker.db_contains_type',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.db_contains_type" ids="swift.container.backend.ContainerBroker.db_contains_type" module="swift.container.backend" names="swift.container.backend.ContainerBroker.db_contains_type"><desc_name xml:space="preserve">db_contains_type</desc_name><desc_annotation xml:space="preserve"> = 'object'</desc_annotation></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'db_reclaim_timestamp\ (swift.container.backend.ContainerBroker\ attribute)',\ u'swift.container.backend.ContainerBroker.db_reclaim_timestamp',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.db_reclaim_timestamp" ids="swift.container.backend.ContainerBroker.db_reclaim_timestamp" module="swift.container.backend" names="swift.container.backend.ContainerBroker.db_reclaim_timestamp"><desc_name xml:space="preserve">db_reclaim_timestamp</desc_name><desc_annotation xml:space="preserve"> = 'created_at'</desc_annotation></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'db_type\ (swift.container.backend.ContainerBroker\ attribute)',\ u'swift.container.backend.ContainerBroker.db_type',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.db_type" ids="swift.container.backend.ContainerBroker.db_type" module="swift.container.backend" names="swift.container.backend.ContainerBroker.db_type"><desc_name xml:space="preserve">db_type</desc_name><desc_annotation xml:space="preserve"> = 'container'</desc_annotation></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'delete_object()\ (swift.container.backend.ContainerBroker\ method)',\ u'swift.container.backend.ContainerBroker.delete_object',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.delete_object" ids="swift.container.backend.ContainerBroker.delete_object" module="swift.container.backend" names="swift.container.backend.ContainerBroker.delete_object"><desc_name xml:space="preserve">delete_object</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">timestamp</desc_parameter><desc_parameter xml:space="preserve">storage_policy_index=0</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Mark an object deleted.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">name</literal_strong> – object name to be deleted</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">timestamp</literal_strong> – timestamp when the object was marked as deleted</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">storage_policy_index</literal_strong> – the storage policy index for the object</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'empty()\ (swift.container.backend.ContainerBroker\ method)',\ u'swift.container.backend.ContainerBroker.empty',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.empty" ids="swift.container.backend.ContainerBroker.empty" module="swift.container.backend" names="swift.container.backend.ContainerBroker.empty"><desc_name xml:space="preserve">empty</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Check if container DB is empty.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>True if the database has no active objects, False otherwise</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_db_version()\ (swift.container.backend.ContainerBroker\ method)',\ u'swift.container.backend.ContainerBroker.get_db_version',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.get_db_version" ids="swift.container.backend.ContainerBroker.get_db_version" module="swift.container.backend" names="swift.container.backend.ContainerBroker.get_db_version"><desc_name xml:space="preserve">get_db_version</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conn</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_info()\ (swift.container.backend.ContainerBroker\ method)',\ u'swift.container.backend.ContainerBroker.get_info',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.get_info" ids="swift.container.backend.ContainerBroker.get_info" module="swift.container.backend" names="swift.container.backend.ContainerBroker.get_info"><desc_name xml:space="preserve">get_info</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get global data for the container.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>dict with keys: account, container, created_at,
                                            put_timestamp, delete_timestamp, status_changed_at,
                                            object_count, bytes_used, reported_put_timestamp,
                                            reported_delete_timestamp, reported_object_count,
                                            reported_bytes_used, hash, id, x_container_sync_point1,
                                            x_container_sync_point2, and storage_policy_index.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_info_is_deleted()\ (swift.container.backend.ContainerBroker\ method)',\ u'swift.container.backend.ContainerBroker.get_info_is_deleted',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.get_info_is_deleted" ids="swift.container.backend.ContainerBroker.get_info_is_deleted" module="swift.container.backend" names="swift.container.backend.ContainerBroker.get_info_is_deleted"><desc_name xml:space="preserve">get_info_is_deleted</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get the is_deleted status and info for the container.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a tuple, in the form (info, is_deleted) info is a dict as
                                            returned by get_info and is_deleted is a boolean.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_misplaced_since()\ (swift.container.backend.ContainerBroker\ method)',\ u'swift.container.backend.ContainerBroker.get_misplaced_since',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.get_misplaced_since" ids="swift.container.backend.ContainerBroker.get_misplaced_since" module="swift.container.backend" names="swift.container.backend.ContainerBroker.get_misplaced_since"><desc_name xml:space="preserve">get_misplaced_since</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">start</desc_parameter><desc_parameter xml:space="preserve">count</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get a list of objects which are in a storage policy different
                                from the container’s storage policy.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">start</literal_strong> – last reconciler sync point</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">count</literal_strong> – maximum number of entries to get</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>list of dicts with keys: name, created_at, size,
                                            content_type, etag, storage_policy_index</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_policy_stats()\ (swift.container.backend.ContainerBroker\ method)',\ u'swift.container.backend.ContainerBroker.get_policy_stats',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.get_policy_stats" ids="swift.container.backend.ContainerBroker.get_policy_stats" module="swift.container.backend" names="swift.container.backend.ContainerBroker.get_policy_stats"><desc_name xml:space="preserve">get_policy_stats</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_reconciler_sync()\ (swift.container.backend.ContainerBroker\ method)',\ u'swift.container.backend.ContainerBroker.get_reconciler_sync',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.get_reconciler_sync" ids="swift.container.backend.ContainerBroker.get_reconciler_sync" module="swift.container.backend" names="swift.container.backend.ContainerBroker.get_reconciler_sync"><desc_name xml:space="preserve">get_reconciler_sync</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'has_multiple_policies()\ (swift.container.backend.ContainerBroker\ method)',\ u'swift.container.backend.ContainerBroker.has_multiple_policies',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.has_multiple_policies" ids="swift.container.backend.ContainerBroker.has_multiple_policies" module="swift.container.backend" names="swift.container.backend.ContainerBroker.has_multiple_policies"><desc_name xml:space="preserve">has_multiple_policies</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'list_objects_iter()\ (swift.container.backend.ContainerBroker\ method)',\ u'swift.container.backend.ContainerBroker.list_objects_iter',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.list_objects_iter" ids="swift.container.backend.ContainerBroker.list_objects_iter" module="swift.container.backend" names="swift.container.backend.ContainerBroker.list_objects_iter"><desc_name xml:space="preserve">list_objects_iter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">limit</desc_parameter><desc_parameter xml:space="preserve">marker</desc_parameter><desc_parameter xml:space="preserve">end_marker</desc_parameter><desc_parameter xml:space="preserve">prefix</desc_parameter><desc_parameter xml:space="preserve">delimiter</desc_parameter><desc_parameter xml:space="preserve">path=None</desc_parameter><desc_parameter xml:space="preserve">storage_policy_index=0</desc_parameter><desc_parameter xml:space="preserve">reverse=False</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get a list of objects sorted by name starting at marker onward, up
                                to limit entries.  Entries will begin with the prefix and will not
                                have the delimiter after the prefix.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">limit</literal_strong> – maximum number of entries to get</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">marker</literal_strong> – marker query</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">end_marker</literal_strong> – end marker query</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">prefix</literal_strong> – prefix query</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">delimiter</literal_strong> – delimiter for query</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">path</literal_strong> – if defined, will set the prefix and delimiter based on
                                                    the path</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">storage_policy_index</literal_strong> – storage policy index for query</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">reverse</literal_strong> – reverse the result order.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>list of tuples of (name, created_at, size, content_type,
                                            etag)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'make_tuple_for_pickle()\ (swift.container.backend.ContainerBroker\ method)',\ u'swift.container.backend.ContainerBroker.make_tuple_for_pickle',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.make_tuple_for_pickle" ids="swift.container.backend.ContainerBroker.make_tuple_for_pickle" module="swift.container.backend" names="swift.container.backend.ContainerBroker.make_tuple_for_pickle"><desc_name xml:space="preserve">make_tuple_for_pickle</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">record</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'merge_items()\ (swift.container.backend.ContainerBroker\ method)',\ u'swift.container.backend.ContainerBroker.merge_items',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.merge_items" ids="swift.container.backend.ContainerBroker.merge_items" module="swift.container.backend" names="swift.container.backend.ContainerBroker.merge_items"><desc_name xml:space="preserve">merge_items</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">item_list</desc_parameter><desc_parameter xml:space="preserve">source=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Merge items into the object table.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">item_list</literal_strong> – list of dictionaries of {‘name’, ‘created_at’,
                                                    ‘size’, ‘content_type’, ‘etag’, ‘deleted’,
                                                    ‘storage_policy_index’, ‘ctype_timestamp’,
                                                    ‘meta_timestamp’}</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">source</literal_strong> – if defined, update incoming_sync with the source</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'put_object()\ (swift.container.backend.ContainerBroker\ method)',\ u'swift.container.backend.ContainerBroker.put_object',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.put_object" ids="swift.container.backend.ContainerBroker.put_object" module="swift.container.backend" names="swift.container.backend.ContainerBroker.put_object"><desc_name xml:space="preserve">put_object</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">timestamp</desc_parameter><desc_parameter xml:space="preserve">size</desc_parameter><desc_parameter xml:space="preserve">content_type</desc_parameter><desc_parameter xml:space="preserve">etag</desc_parameter><desc_parameter xml:space="preserve">deleted=0</desc_parameter><desc_parameter xml:space="preserve">storage_policy_index=0</desc_parameter><desc_parameter xml:space="preserve">ctype_timestamp=None</desc_parameter><desc_parameter xml:space="preserve">meta_timestamp=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Creates an object in the DB with its metadata.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">name</literal_strong> – object name to be created</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">timestamp</literal_strong> – timestamp of when the object was created</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">size</literal_strong> – object size</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">content_type</literal_strong> – object content-type</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">etag</literal_strong> – object etag</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">deleted</literal_strong> – if True, marks the object as deleted and sets the
                                                    deleted_at timestamp to timestamp</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">storage_policy_index</literal_strong> – the storage policy index for the object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">ctype_timestamp</literal_strong> – timestamp of when content_type was last
                                                    updated</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">meta_timestamp</literal_strong> – timestamp of when metadata was last updated</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'reported()\ (swift.container.backend.ContainerBroker\ method)',\ u'swift.container.backend.ContainerBroker.reported',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.reported" ids="swift.container.backend.ContainerBroker.reported" module="swift.container.backend" names="swift.container.backend.ContainerBroker.reported"><desc_name xml:space="preserve">reported</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">put_timestamp</desc_parameter><desc_parameter xml:space="preserve">delete_timestamp</desc_parameter><desc_parameter xml:space="preserve">object_count</desc_parameter><desc_parameter xml:space="preserve">bytes_used</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Update reported stats, available with container’s <title_reference>get_info</title_reference>.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">put_timestamp</literal_strong> – put_timestamp to update</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">delete_timestamp</literal_strong> – delete_timestamp to update</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">object_count</literal_strong> – object_count to update</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">bytes_used</literal_strong> – bytes_used to update</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_storage_policy_index()\ (swift.container.backend.ContainerBroker\ method)',\ u'swift.container.backend.ContainerBroker.set_storage_policy_index',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.set_storage_policy_index" ids="swift.container.backend.ContainerBroker.set_storage_policy_index" module="swift.container.backend" names="swift.container.backend.ContainerBroker.set_storage_policy_index"><desc_name xml:space="preserve">set_storage_policy_index</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">policy_index</desc_parameter><desc_parameter xml:space="preserve">timestamp=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Update the container_stat policy_index and status_changed_at.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_x_container_sync_points()\ (swift.container.backend.ContainerBroker\ method)',\ u'swift.container.backend.ContainerBroker.set_x_container_sync_points',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.set_x_container_sync_points" ids="swift.container.backend.ContainerBroker.set_x_container_sync_points" module="swift.container.backend" names="swift.container.backend.ContainerBroker.set_x_container_sync_points"><desc_name xml:space="preserve">set_x_container_sync_points</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">sync_point1</desc_parameter><desc_parameter xml:space="preserve">sync_point2</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'storage_policy_index\ (swift.container.backend.ContainerBroker\ attribute)',\ u'swift.container.backend.ContainerBroker.storage_policy_index',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.storage_policy_index" ids="swift.container.backend.ContainerBroker.storage_policy_index" module="swift.container.backend" names="swift.container.backend.ContainerBroker.storage_policy_index"><desc_name xml:space="preserve">storage_policy_index</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'update_reconciler_sync()\ (swift.container.backend.ContainerBroker\ method)',\ u'swift.container.backend.ContainerBroker.update_reconciler_sync',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerBroker" first="False" fullname="ContainerBroker.update_reconciler_sync" ids="swift.container.backend.ContainerBroker.update_reconciler_sync" module="swift.container.backend" names="swift.container.backend.ContainerBroker.update_reconciler_sync"><desc_name xml:space="preserve">update_reconciler_sync</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">point</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'update_new_item_from_existing()\ (in\ module\ swift.container.backend)',\ u'swift.container.backend.update_new_item_from_existing',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="update_new_item_from_existing" ids="swift.container.backend.update_new_item_from_existing" module="swift.container.backend" names="swift.container.backend.update_new_item_from_existing"><desc_addname xml:space="preserve">swift.container.backend.</desc_addname><desc_name xml:space="preserve">update_new_item_from_existing</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">new_item</desc_parameter><desc_parameter xml:space="preserve">existing</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Compare the data and meta related timestamps of a new object item with
                        the timestamps of an existing object record, and update the new item
                        with data and/or meta related attributes from the existing record if
                        their timestamps are newer.</paragraph>
                    <paragraph>The multiple timestamps are encoded into a single string for storing
                        in the ‘created_at’ column of the objects db table.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">new_item</literal_strong> – A dict of object update attributes</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">existing</literal_strong> – A dict of existing object attributes</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>True if any attributes of the new item dict were found to be
                                    newer than the existing and therefore not updated, otherwise
                                    False implying that the updated item is equal to the existing.</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <target refid="container-server"></target>
        </section>
        <section ids="module-swift.container.server id4 container-server" names="container\ server container-server">
            <title>Container Server</title>
            <index entries="['single',\ u'swift.container.server\ (module)',\ u'module-swift.container.server',\ '',\ None]"></index>
            <index entries="['single',\ u'ContainerController\ (class\ in\ swift.container.server)',\ u'swift.container.server.ContainerController',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ContainerController" ids="swift.container.server.ContainerController" module="swift.container.server" names="swift.container.server.ContainerController"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.container.server.</desc_addname><desc_name xml:space="preserve">ContainerController</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">swift.common.base_storage_server.BaseStorageServer</literal></paragraph>
                    <paragraph>WSGI Controller for the container server.</paragraph>
                    <index entries="['single',\ u'DELETE()\ (swift.container.server.ContainerController\ method)',\ u'swift.container.server.ContainerController.DELETE',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerController" first="False" fullname="ContainerController.DELETE" ids="swift.container.server.ContainerController.DELETE" module="swift.container.server" names="swift.container.server.ContainerController.DELETE"><desc_name xml:space="preserve">DELETE</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctrl</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Handle HTTP DELETE request.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'GET()\ (swift.container.server.ContainerController\ method)',\ u'swift.container.server.ContainerController.GET',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerController" first="False" fullname="ContainerController.GET" ids="swift.container.server.ContainerController.GET" module="swift.container.server" names="swift.container.server.ContainerController.GET"><desc_name xml:space="preserve">GET</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctrl</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Handle HTTP GET request.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'HEAD()\ (swift.container.server.ContainerController\ method)',\ u'swift.container.server.ContainerController.HEAD',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerController" first="False" fullname="ContainerController.HEAD" ids="swift.container.server.ContainerController.HEAD" module="swift.container.server" names="swift.container.server.ContainerController.HEAD"><desc_name xml:space="preserve">HEAD</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctrl</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Handle HTTP HEAD request.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'POST()\ (swift.container.server.ContainerController\ method)',\ u'swift.container.server.ContainerController.POST',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerController" first="False" fullname="ContainerController.POST" ids="swift.container.server.ContainerController.POST" module="swift.container.server" names="swift.container.server.ContainerController.POST"><desc_name xml:space="preserve">POST</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctrl</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Handle HTTP POST request.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'PUT()\ (swift.container.server.ContainerController\ method)',\ u'swift.container.server.ContainerController.PUT',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerController" first="False" fullname="ContainerController.PUT" ids="swift.container.server.ContainerController.PUT" module="swift.container.server" names="swift.container.server.ContainerController.PUT"><desc_name xml:space="preserve">PUT</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctrl</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Handle HTTP PUT request.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'REPLICATE()\ (swift.container.server.ContainerController\ method)',\ u'swift.container.server.ContainerController.REPLICATE',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerController" first="False" fullname="ContainerController.REPLICATE" ids="swift.container.server.ContainerController.REPLICATE" module="swift.container.server" names="swift.container.server.ContainerController.REPLICATE"><desc_name xml:space="preserve">REPLICATE</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctrl</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Handle HTTP REPLICATE request (json-encoded RPC calls for replication.)</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'account_update()\ (swift.container.server.ContainerController\ method)',\ u'swift.container.server.ContainerController.account_update',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerController" first="False" fullname="ContainerController.account_update" ids="swift.container.server.ContainerController.account_update" module="swift.container.server" names="swift.container.server.ContainerController.account_update"><desc_name xml:space="preserve">account_update</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">broker</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Update the account server(s) with latest container info.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">req</literal_strong> – swob.Request object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – account name</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> – container name</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">broker</literal_strong> – container DB broker object</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>if all the account requests return a 404 error code,
                                            HTTPNotFound response object,
                                            if the account cannot be updated due to a malformed header,
                                            an HTTPBadRequest response object,
                                            otherwise None.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'allowed_sync_hosts\ (swift.container.server.ContainerController\ attribute)',\ u'swift.container.server.ContainerController.allowed_sync_hosts',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerController" first="False" fullname="ContainerController.allowed_sync_hosts" ids="swift.container.server.ContainerController.allowed_sync_hosts" module="swift.container.server" names="swift.container.server.ContainerController.allowed_sync_hosts"><desc_name xml:space="preserve">allowed_sync_hosts</desc_name><desc_annotation xml:space="preserve"> = None</desc_annotation></desc_signature>
                        <desc_content>
                            <paragraph>The list of hosts we’re allowed to send syncs to. This can be
                                overridden by data in self.realms_conf</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'create_listing()\ (swift.container.server.ContainerController\ method)',\ u'swift.container.server.ContainerController.create_listing',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerController" first="False" fullname="ContainerController.create_listing" ids="swift.container.server.ContainerController.create_listing" module="swift.container.server" names="swift.container.server.ContainerController.create_listing"><desc_name xml:space="preserve">create_listing</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter><desc_parameter xml:space="preserve">out_content_type</desc_parameter><desc_parameter xml:space="preserve">info</desc_parameter><desc_parameter xml:space="preserve">resp_headers</desc_parameter><desc_parameter xml:space="preserve">metadata</desc_parameter><desc_parameter xml:space="preserve">container_list</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_and_validate_policy_index()\ (swift.container.server.ContainerController\ method)',\ u'swift.container.server.ContainerController.get_and_validate_policy_index',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerController" first="False" fullname="ContainerController.get_and_validate_policy_index" ids="swift.container.server.ContainerController.get_and_validate_policy_index" module="swift.container.server" names="swift.container.server.ContainerController.get_and_validate_policy_index"><desc_name xml:space="preserve">get_and_validate_policy_index</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Validate that the index supplied maps to a policy.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>policy index from request, or None if not present</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><literal_strong>HTTPBadRequest</literal_strong> – if the supplied index is bogus</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'realms_conf\ (swift.container.server.ContainerController\ attribute)',\ u'swift.container.server.ContainerController.realms_conf',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerController" first="False" fullname="ContainerController.realms_conf" ids="swift.container.server.ContainerController.realms_conf" module="swift.container.server" names="swift.container.server.ContainerController.realms_conf"><desc_name xml:space="preserve">realms_conf</desc_name><desc_annotation xml:space="preserve"> = None</desc_annotation></desc_signature>
                        <desc_content>
                            <paragraph>ContainerSyncCluster instance for validating sync-to values.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'save_headers\ (swift.container.server.ContainerController\ attribute)',\ u'swift.container.server.ContainerController.save_headers',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerController" first="False" fullname="ContainerController.save_headers" ids="swift.container.server.ContainerController.save_headers" module="swift.container.server" names="swift.container.server.ContainerController.save_headers"><desc_name xml:space="preserve">save_headers</desc_name><desc_annotation xml:space="preserve"> = ['x-container-read', 'x-container-write', 'x-container-sync-key', 'x-container-sync-to']</desc_annotation></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'server_type\ (swift.container.server.ContainerController\ attribute)',\ u'swift.container.server.ContainerController.server_type',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerController" first="False" fullname="ContainerController.server_type" ids="swift.container.server.ContainerController.server_type" module="swift.container.server" names="swift.container.server.ContainerController.server_type"><desc_name xml:space="preserve">server_type</desc_name><desc_annotation xml:space="preserve"> = 'container-server'</desc_annotation></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'update_data_record()\ (swift.container.server.ContainerController\ method)',\ u'swift.container.server.ContainerController.update_data_record',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerController" first="False" fullname="ContainerController.update_data_record" ids="swift.container.server.ContainerController.update_data_record" module="swift.container.server" names="swift.container.server.ContainerController.update_data_record"><desc_name xml:space="preserve">update_data_record</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">record</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Perform any mutations to container listing records that are common to
                                all serialization formats, and returns it as a dict.</paragraph>
                            <paragraph>Converts created time to iso timestamp.
                                Replaces size with ‘swift_bytes’ content type parameter.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Params record</field_name>
                                    <field_body>
                                        <paragraph>object entry record</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>modified record</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'app_factory()\ (in\ module\ swift.container.server)',\ u'swift.container.server.app_factory',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="app_factory" ids="swift.container.server.app_factory" module="swift.container.server" names="swift.container.server.app_factory"><desc_addname xml:space="preserve">swift.container.server.</desc_addname><desc_name xml:space="preserve">app_factory</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">global_conf</desc_parameter><desc_parameter xml:space="preserve">**local_conf</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>paste.deploy app factory for creating WSGI container server apps</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'gen_resp_headers()\ (in\ module\ swift.container.server)',\ u'swift.container.server.gen_resp_headers',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="gen_resp_headers" ids="swift.container.server.gen_resp_headers" module="swift.container.server" names="swift.container.server.gen_resp_headers"><desc_addname xml:space="preserve">swift.container.server.</desc_addname><desc_name xml:space="preserve">gen_resp_headers</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">info</desc_parameter><desc_parameter xml:space="preserve">is_deleted=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Convert container info dict to headers.</paragraph>
                </desc_content>
            </desc>
            <target refid="container-replicator"></target>
        </section>
        <section ids="module-swift.container.replicator id5 container-replicator" names="container\ replicator container-replicator">
            <title>Container Replicator</title>
            <index entries="['single',\ u'swift.container.replicator\ (module)',\ u'module-swift.container.replicator',\ '',\ None]"></index>
            <index entries="['single',\ u'ContainerReplicator\ (class\ in\ swift.container.replicator)',\ u'swift.container.replicator.ContainerReplicator',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ContainerReplicator" ids="swift.container.replicator.ContainerReplicator" module="swift.container.replicator" names="swift.container.replicator.ContainerReplicator"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.container.replicator.</desc_addname><desc_name xml:space="preserve">ContainerReplicator</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" reftitle="swift.common.db_replicator.Replicator" refuri="db#swift.common.db_replicator.Replicator"><literal classes="xref py py-class">swift.common.db_replicator.Replicator</literal></reference></paragraph>
                    <index entries="['single',\ u'brokerclass\ (swift.container.replicator.ContainerReplicator\ attribute)',\ u'swift.container.replicator.ContainerReplicator.brokerclass',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerReplicator" first="False" fullname="ContainerReplicator.brokerclass" ids="swift.container.replicator.ContainerReplicator.brokerclass" module="swift.container.replicator" names="swift.container.replicator.ContainerReplicator.brokerclass"><desc_name xml:space="preserve">brokerclass</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>alias of <literal classes="xref py py-class">ContainerBroker</literal></paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'datadir\ (swift.container.replicator.ContainerReplicator\ attribute)',\ u'swift.container.replicator.ContainerReplicator.datadir',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerReplicator" first="False" fullname="ContainerReplicator.datadir" ids="swift.container.replicator.ContainerReplicator.datadir" module="swift.container.replicator" names="swift.container.replicator.ContainerReplicator.datadir"><desc_name xml:space="preserve">datadir</desc_name><desc_annotation xml:space="preserve"> = 'containers'</desc_annotation></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'default_port\ (swift.container.replicator.ContainerReplicator\ attribute)',\ u'swift.container.replicator.ContainerReplicator.default_port',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerReplicator" first="False" fullname="ContainerReplicator.default_port" ids="swift.container.replicator.ContainerReplicator.default_port" module="swift.container.replicator" names="swift.container.replicator.ContainerReplicator.default_port"><desc_name xml:space="preserve">default_port</desc_name><desc_annotation xml:space="preserve"> = 6201</desc_annotation></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'delete_db()\ (swift.container.replicator.ContainerReplicator\ method)',\ u'swift.container.replicator.ContainerReplicator.delete_db',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerReplicator" first="False" fullname="ContainerReplicator.delete_db" ids="swift.container.replicator.ContainerReplicator.delete_db" module="swift.container.replicator" names="swift.container.replicator.ContainerReplicator.delete_db"><desc_name xml:space="preserve">delete_db</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">broker</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Ensure that reconciler databases are only cleaned up at the end of the
                                replication run.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'dump_to_reconciler()\ (swift.container.replicator.ContainerReplicator\ method)',\ u'swift.container.replicator.ContainerReplicator.dump_to_reconciler',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerReplicator" first="False" fullname="ContainerReplicator.dump_to_reconciler" ids="swift.container.replicator.ContainerReplicator.dump_to_reconciler" module="swift.container.replicator" names="swift.container.replicator.ContainerReplicator.dump_to_reconciler"><desc_name xml:space="preserve">dump_to_reconciler</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">broker</desc_parameter><desc_parameter xml:space="preserve">point</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Look for object rows for objects updates in the wrong storage policy
                                in broker with a <literal>ROWID</literal> greater than the rowid given as point.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">broker</literal_strong> – the container broker with misplaced objects</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">point</literal_strong> – the last verified <literal>reconciler_sync_point</literal></paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>the last successful enqueued rowid</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'feed_reconciler()\ (swift.container.replicator.ContainerReplicator\ method)',\ u'swift.container.replicator.ContainerReplicator.feed_reconciler',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerReplicator" first="False" fullname="ContainerReplicator.feed_reconciler" ids="swift.container.replicator.ContainerReplicator.feed_reconciler" module="swift.container.replicator" names="swift.container.replicator.ContainerReplicator.feed_reconciler"><desc_name xml:space="preserve">feed_reconciler</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">item_list</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Add queue entries for rows in item_list to the local reconciler
                                container database.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> – the name of the reconciler container</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">item_list</literal_strong> – the list of rows to enqueue</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>True if successfully enqueued</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'find_local_handoff_for_part()\ (swift.container.replicator.ContainerReplicator\ method)',\ u'swift.container.replicator.ContainerReplicator.find_local_handoff_for_part',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerReplicator" first="False" fullname="ContainerReplicator.find_local_handoff_for_part" ids="swift.container.replicator.ContainerReplicator.find_local_handoff_for_part" module="swift.container.replicator" names="swift.container.replicator.ContainerReplicator.find_local_handoff_for_part"><desc_name xml:space="preserve">find_local_handoff_for_part</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">part</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Look through devices in the ring for the first handoff device that was
                                identified during job creation as available on this node.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a node entry from the ring</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_reconciler_broker()\ (swift.container.replicator.ContainerReplicator\ method)',\ u'swift.container.replicator.ContainerReplicator.get_reconciler_broker',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerReplicator" first="False" fullname="ContainerReplicator.get_reconciler_broker" ids="swift.container.replicator.ContainerReplicator.get_reconciler_broker" module="swift.container.replicator" names="swift.container.replicator.ContainerReplicator.get_reconciler_broker"><desc_name xml:space="preserve">get_reconciler_broker</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">timestamp</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get a local instance of the reconciler container broker that is
                                appropriate to enqueue the given timestamp.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">timestamp</literal_strong> – the timestamp of the row to be enqueued</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a local reconciler broker</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'replicate_reconcilers()\ (swift.container.replicator.ContainerReplicator\ method)',\ u'swift.container.replicator.ContainerReplicator.replicate_reconcilers',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerReplicator" first="False" fullname="ContainerReplicator.replicate_reconcilers" ids="swift.container.replicator.ContainerReplicator.replicate_reconcilers" module="swift.container.replicator" names="swift.container.replicator.ContainerReplicator.replicate_reconcilers"><desc_name xml:space="preserve">replicate_reconcilers</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Ensure any items merged to reconciler containers during replication
                                are pushed out to correct nodes and any reconciler containers that do
                                not belong on this node are removed.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'report_up_to_date()\ (swift.container.replicator.ContainerReplicator\ method)',\ u'swift.container.replicator.ContainerReplicator.report_up_to_date',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerReplicator" first="False" fullname="ContainerReplicator.report_up_to_date" ids="swift.container.replicator.ContainerReplicator.report_up_to_date" module="swift.container.replicator" names="swift.container.replicator.ContainerReplicator.report_up_to_date"><desc_name xml:space="preserve">report_up_to_date</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">full_info</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'run_once()\ (swift.container.replicator.ContainerReplicator\ method)',\ u'swift.container.replicator.ContainerReplicator.run_once',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerReplicator" first="False" fullname="ContainerReplicator.run_once" ids="swift.container.replicator.ContainerReplicator.run_once" module="swift.container.replicator" names="swift.container.replicator.ContainerReplicator.run_once"><desc_name xml:space="preserve">run_once</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'server_type\ (swift.container.replicator.ContainerReplicator\ attribute)',\ u'swift.container.replicator.ContainerReplicator.server_type',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerReplicator" first="False" fullname="ContainerReplicator.server_type" ids="swift.container.replicator.ContainerReplicator.server_type" module="swift.container.replicator" names="swift.container.replicator.ContainerReplicator.server_type"><desc_name xml:space="preserve">server_type</desc_name><desc_annotation xml:space="preserve"> = 'container'</desc_annotation></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ContainerReplicatorRpc\ (class\ in\ swift.container.replicator)',\ u'swift.container.replicator.ContainerReplicatorRpc',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ContainerReplicatorRpc" ids="swift.container.replicator.ContainerReplicatorRpc" module="swift.container.replicator" names="swift.container.replicator.ContainerReplicatorRpc"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.container.replicator.</desc_addname><desc_name xml:space="preserve">ContainerReplicatorRpc</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">root</desc_parameter><desc_parameter xml:space="preserve">datadir</desc_parameter><desc_parameter xml:space="preserve">broker_class</desc_parameter><desc_parameter xml:space="preserve">mount_check=True</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" reftitle="swift.common.db_replicator.ReplicatorRpc" refuri="db#swift.common.db_replicator.ReplicatorRpc"><literal classes="xref py py-class">swift.common.db_replicator.ReplicatorRpc</literal></reference></paragraph>
                </desc_content>
            </desc>
            <target refid="container-sync-daemon"></target>
        </section>
        <section ids="module-swift.container.sync container-sync container-sync-daemon" names="container\ sync container-sync-daemon">
            <title>Container Sync</title>
            <index entries="['single',\ u'swift.container.sync\ (module)',\ u'module-swift.container.sync',\ '',\ None]"></index>
            <index entries="['single',\ u'ContainerSync\ (class\ in\ swift.container.sync)',\ u'swift.container.sync.ContainerSync',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ContainerSync" ids="swift.container.sync.ContainerSync" module="swift.container.sync" names="swift.container.sync.ContainerSync"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.container.sync.</desc_addname><desc_name xml:space="preserve">ContainerSync</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter><desc_parameter xml:space="preserve">container_ring=None</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">swift.common.daemon.Daemon</literal></paragraph>
                    <paragraph>Daemon to sync syncable containers.</paragraph>
                    <paragraph>This is done by scanning the local devices for container databases and
                        checking for x-container-sync-to and x-container-sync-key metadata values.
                        If they exist, newer rows since the last sync will trigger PUTs or DELETEs
                        to the other container.</paragraph>
                    <paragraph>The actual syncing is slightly more complicated to make use of the three
                        (or number-of-replicas) main nodes for a container without each trying to
                        do the exact same work but also without missing work if one node happens to
                        be down.</paragraph>
                    <paragraph>Two sync points are kept per container database. All rows between the two
                        sync points trigger updates. Any rows newer than both sync points cause
                        updates depending on the node’s position for the container (primary nodes
                        do one third, etc. depending on the replica count of course). After a sync
                        run, the first sync point is set to the newest ROWID known and the second
                        sync point is set to newest ROWID for which all updates have been sent.</paragraph>
                    <paragraph>An example may help. Assume replica count is 3 and perfectly matching
                        ROWIDs starting at 1.</paragraph>
                    <block_quote>
                        <paragraph>First sync run, database has 6 rows:</paragraph>
                        <block_quote>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>SyncPoint1 starts as -1.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>SyncPoint2 starts as -1.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>No rows between points, so no “all updates” rows.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>Six rows newer than SyncPoint1, so a third of the rows are sent
                                        by node 1, another third by node 2, remaining third by node 3.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>SyncPoint1 is set as 6 (the newest ROWID known).</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>SyncPoint2 is left as -1 since no “all updates” rows were synced.</paragraph>
                                </list_item>
                            </bullet_list>
                        </block_quote>
                        <paragraph>Next sync run, database has 12 rows:</paragraph>
                        <block_quote>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>SyncPoint1 starts as 6.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>SyncPoint2 starts as -1.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>The rows between -1 and 6 all trigger updates (most of which
                                        should short-circuit on the remote end as having already been
                                        done).</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>Six more rows newer than SyncPoint1, so a third of the rows are
                                        sent by node 1, another third by node 2, remaining third by node
                                        3.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>SyncPoint1 is set as 12 (the newest ROWID known).</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>SyncPoint2 is set as 6 (the newest “all updates” ROWID).</paragraph>
                                </list_item>
                            </bullet_list>
                        </block_quote>
                    </block_quote>
                    <paragraph>In this way, under normal circumstances each node sends its share of
                        updates each run and just sends a batch of older updates to ensure nothing
                        was missed.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">conf</literal_strong> – The dict of configuration values from the [container-sync]
                                            section of the container-server.conf</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">container_ring</literal_strong> – If None, the &lt;swift_dir&gt;/container.ring.gz will be
                                            loaded. This is overridden by unit tests.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                    <index entries="['single',\ u'allowed_sync_hosts\ (swift.container.sync.ContainerSync\ attribute)',\ u'swift.container.sync.ContainerSync.allowed_sync_hosts',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerSync" first="False" fullname="ContainerSync.allowed_sync_hosts" ids="swift.container.sync.ContainerSync.allowed_sync_hosts" module="swift.container.sync" names="swift.container.sync.ContainerSync.allowed_sync_hosts"><desc_name xml:space="preserve">allowed_sync_hosts</desc_name><desc_annotation xml:space="preserve"> = None</desc_annotation></desc_signature>
                        <desc_content>
                            <paragraph>The list of hosts we’re allowed to send syncs to. This can be
                                overridden by data in self.realms_conf</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'conf\ (swift.container.sync.ContainerSync\ attribute)',\ u'swift.container.sync.ContainerSync.conf',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerSync" first="False" fullname="ContainerSync.conf" ids="swift.container.sync.ContainerSync.conf" module="swift.container.sync" names="swift.container.sync.ContainerSync.conf"><desc_name xml:space="preserve">conf</desc_name><desc_annotation xml:space="preserve"> = None</desc_annotation></desc_signature>
                        <desc_content>
                            <paragraph>The dict of configuration values from the [container-sync] section
                                of the container-server.conf.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'container_deletes\ (swift.container.sync.ContainerSync\ attribute)',\ u'swift.container.sync.ContainerSync.container_deletes',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerSync" first="False" fullname="ContainerSync.container_deletes" ids="swift.container.sync.ContainerSync.container_deletes" module="swift.container.sync" names="swift.container.sync.ContainerSync.container_deletes"><desc_name xml:space="preserve">container_deletes</desc_name><desc_annotation xml:space="preserve"> = None</desc_annotation></desc_signature>
                        <desc_content>
                            <paragraph>Number of successful DELETEs triggered.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'container_failures\ (swift.container.sync.ContainerSync\ attribute)',\ u'swift.container.sync.ContainerSync.container_failures',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerSync" first="False" fullname="ContainerSync.container_failures" ids="swift.container.sync.ContainerSync.container_failures" module="swift.container.sync" names="swift.container.sync.ContainerSync.container_failures"><desc_name xml:space="preserve">container_failures</desc_name><desc_annotation xml:space="preserve"> = None</desc_annotation></desc_signature>
                        <desc_content>
                            <paragraph>Number of containers that had a failure of some type.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'container_puts\ (swift.container.sync.ContainerSync\ attribute)',\ u'swift.container.sync.ContainerSync.container_puts',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerSync" first="False" fullname="ContainerSync.container_puts" ids="swift.container.sync.ContainerSync.container_puts" module="swift.container.sync" names="swift.container.sync.ContainerSync.container_puts"><desc_name xml:space="preserve">container_puts</desc_name><desc_annotation xml:space="preserve"> = None</desc_annotation></desc_signature>
                        <desc_content>
                            <paragraph>Number of successful PUTs triggered.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'container_report()\ (swift.container.sync.ContainerSync\ method)',\ u'swift.container.sync.ContainerSync.container_report',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerSync" first="False" fullname="ContainerSync.container_report" ids="swift.container.sync.ContainerSync.container_report" module="swift.container.sync" names="swift.container.sync.ContainerSync.container_report"><desc_name xml:space="preserve">container_report</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">start</desc_parameter><desc_parameter xml:space="preserve">end</desc_parameter><desc_parameter xml:space="preserve">sync_point1</desc_parameter><desc_parameter xml:space="preserve">sync_point2</desc_parameter><desc_parameter xml:space="preserve">info</desc_parameter><desc_parameter xml:space="preserve">max_row</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'container_ring\ (swift.container.sync.ContainerSync\ attribute)',\ u'swift.container.sync.ContainerSync.container_ring',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerSync" first="False" fullname="ContainerSync.container_ring" ids="swift.container.sync.ContainerSync.container_ring" module="swift.container.sync" names="swift.container.sync.ContainerSync.container_ring"><desc_name xml:space="preserve">container_ring</desc_name><desc_annotation xml:space="preserve"> = None</desc_annotation></desc_signature>
                        <desc_content>
                            <paragraph>swift.common.ring.Ring for locating containers.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'container_skips\ (swift.container.sync.ContainerSync\ attribute)',\ u'swift.container.sync.ContainerSync.container_skips',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerSync" first="False" fullname="ContainerSync.container_skips" ids="swift.container.sync.ContainerSync.container_skips" module="swift.container.sync" names="swift.container.sync.ContainerSync.container_skips"><desc_name xml:space="preserve">container_skips</desc_name><desc_annotation xml:space="preserve"> = None</desc_annotation></desc_signature>
                        <desc_content>
                            <paragraph>Number of containers whose sync has been turned off, but
                                are not yet cleared from the sync store.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'container_stats\ (swift.container.sync.ContainerSync\ attribute)',\ u'swift.container.sync.ContainerSync.container_stats',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerSync" first="False" fullname="ContainerSync.container_stats" ids="swift.container.sync.ContainerSync.container_stats" module="swift.container.sync" names="swift.container.sync.ContainerSync.container_stats"><desc_name xml:space="preserve">container_stats</desc_name><desc_annotation xml:space="preserve"> = None</desc_annotation></desc_signature>
                        <desc_content>
                            <paragraph>Per container stats. These are collected per container.
                                puts - the number of puts that were done for the container
                                deletes - the number of deletes that were fot the container
                                bytes - the total number of bytes transferred per the container</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'container_sync()\ (swift.container.sync.ContainerSync\ method)',\ u'swift.container.sync.ContainerSync.container_sync',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerSync" first="False" fullname="ContainerSync.container_sync" ids="swift.container.sync.ContainerSync.container_sync" module="swift.container.sync" names="swift.container.sync.ContainerSync.container_sync"><desc_name xml:space="preserve">container_sync</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">path</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Checks the given path for a container database, determines if syncing
                                is turned on for that database and, if so, sends any updates to the
                                other container.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">path</literal_strong> – the path to a container db</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'container_sync_row()\ (swift.container.sync.ContainerSync\ method)',\ u'swift.container.sync.ContainerSync.container_sync_row',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerSync" first="False" fullname="ContainerSync.container_sync_row" ids="swift.container.sync.ContainerSync.container_sync_row" module="swift.container.sync" names="swift.container.sync.ContainerSync.container_sync_row"><desc_name xml:space="preserve">container_sync_row</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">row</desc_parameter><desc_parameter xml:space="preserve">sync_to</desc_parameter><desc_parameter xml:space="preserve">user_key</desc_parameter><desc_parameter xml:space="preserve">broker</desc_parameter><desc_parameter xml:space="preserve">info</desc_parameter><desc_parameter xml:space="preserve">realm</desc_parameter><desc_parameter xml:space="preserve">realm_key</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Sends the update the row indicates to the sync_to container.
                                Update can be either delete or put.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">row</literal_strong> – The updated row in the local database triggering the sync
                                                    update.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">sync_to</literal_strong> – The URL to the remote container.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">user_key</literal_strong> – The X-Container-Sync-Key to use when sending requests
                                                    to the other container.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">broker</literal_strong> – The local container database broker.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">info</literal_strong> – The get_info result from the local container database
                                                    broker.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">realm</literal_strong> – The realm from self.realms_conf, if there is one.
                                                    If None, fallback to using the older allowed_sync_hosts
                                                    way of syncing.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">realm_key</literal_strong> – The realm key from self.realms_conf, if there
                                                    is one. If None, fallback to using the older
                                                    allowed_sync_hosts way of syncing.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>True on success</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'container_syncs\ (swift.container.sync.ContainerSync\ attribute)',\ u'swift.container.sync.ContainerSync.container_syncs',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerSync" first="False" fullname="ContainerSync.container_syncs" ids="swift.container.sync.ContainerSync.container_syncs" module="swift.container.sync" names="swift.container.sync.ContainerSync.container_syncs"><desc_name xml:space="preserve">container_syncs</desc_name><desc_annotation xml:space="preserve"> = None</desc_annotation></desc_signature>
                        <desc_content>
                            <paragraph>Number of containers with sync turned on that were successfully
                                synced.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'container_time\ (swift.container.sync.ContainerSync\ attribute)',\ u'swift.container.sync.ContainerSync.container_time',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerSync" first="False" fullname="ContainerSync.container_time" ids="swift.container.sync.ContainerSync.container_time" module="swift.container.sync" names="swift.container.sync.ContainerSync.container_time"><desc_name xml:space="preserve">container_time</desc_name><desc_annotation xml:space="preserve"> = None</desc_annotation></desc_signature>
                        <desc_content>
                            <paragraph>Maximum amount of time to spend syncing a container before moving on
                                to the next one. If a container sync hasn’t finished in this time,
                                it’ll just be resumed next scan.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'devices\ (swift.container.sync.ContainerSync\ attribute)',\ u'swift.container.sync.ContainerSync.devices',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerSync" first="False" fullname="ContainerSync.devices" ids="swift.container.sync.ContainerSync.devices" module="swift.container.sync" names="swift.container.sync.ContainerSync.devices"><desc_name xml:space="preserve">devices</desc_name><desc_annotation xml:space="preserve"> = None</desc_annotation></desc_signature>
                        <desc_content>
                            <paragraph>Path to the local device mount points.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'interval\ (swift.container.sync.ContainerSync\ attribute)',\ u'swift.container.sync.ContainerSync.interval',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerSync" first="False" fullname="ContainerSync.interval" ids="swift.container.sync.ContainerSync.interval" module="swift.container.sync" names="swift.container.sync.ContainerSync.interval"><desc_name xml:space="preserve">interval</desc_name><desc_annotation xml:space="preserve"> = None</desc_annotation></desc_signature>
                        <desc_content>
                            <paragraph>Minimum time between full scans. This is to keep the daemon from
                                running wild on near empty systems.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'logger\ (swift.container.sync.ContainerSync\ attribute)',\ u'swift.container.sync.ContainerSync.logger',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerSync" first="False" fullname="ContainerSync.logger" ids="swift.container.sync.ContainerSync.logger" module="swift.container.sync" names="swift.container.sync.ContainerSync.logger"><desc_name xml:space="preserve">logger</desc_name><desc_annotation xml:space="preserve"> = None</desc_annotation></desc_signature>
                        <desc_content>
                            <paragraph>Logger to use for container-sync log lines.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'mount_check\ (swift.container.sync.ContainerSync\ attribute)',\ u'swift.container.sync.ContainerSync.mount_check',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerSync" first="False" fullname="ContainerSync.mount_check" ids="swift.container.sync.ContainerSync.mount_check" module="swift.container.sync" names="swift.container.sync.ContainerSync.mount_check"><desc_name xml:space="preserve">mount_check</desc_name><desc_annotation xml:space="preserve"> = None</desc_annotation></desc_signature>
                        <desc_content>
                            <paragraph>Indicates whether mount points should be verified as actual mount
                                points (normally true, false for tests and SAIO).</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'realms_conf\ (swift.container.sync.ContainerSync\ attribute)',\ u'swift.container.sync.ContainerSync.realms_conf',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerSync" first="False" fullname="ContainerSync.realms_conf" ids="swift.container.sync.ContainerSync.realms_conf" module="swift.container.sync" names="swift.container.sync.ContainerSync.realms_conf"><desc_name xml:space="preserve">realms_conf</desc_name><desc_annotation xml:space="preserve"> = None</desc_annotation></desc_signature>
                        <desc_content>
                            <paragraph>ContainerSyncCluster instance for validating sync-to values.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'report()\ (swift.container.sync.ContainerSync\ method)',\ u'swift.container.sync.ContainerSync.report',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerSync" first="False" fullname="ContainerSync.report" ids="swift.container.sync.ContainerSync.report" module="swift.container.sync" names="swift.container.sync.ContainerSync.report"><desc_name xml:space="preserve">report</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Writes a report of the stats to the logger and resets the stats for the
                                next report.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'reported\ (swift.container.sync.ContainerSync\ attribute)',\ u'swift.container.sync.ContainerSync.reported',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerSync" first="False" fullname="ContainerSync.reported" ids="swift.container.sync.ContainerSync.reported" module="swift.container.sync" names="swift.container.sync.ContainerSync.reported"><desc_name xml:space="preserve">reported</desc_name><desc_annotation xml:space="preserve"> = None</desc_annotation></desc_signature>
                        <desc_content>
                            <paragraph>Time of last stats report.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'run_forever()\ (swift.container.sync.ContainerSync\ method)',\ u'swift.container.sync.ContainerSync.run_forever',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerSync" first="False" fullname="ContainerSync.run_forever" ids="swift.container.sync.ContainerSync.run_forever" module="swift.container.sync" names="swift.container.sync.ContainerSync.run_forever"><desc_name xml:space="preserve">run_forever</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Runs container sync scans until stopped.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'run_once()\ (swift.container.sync.ContainerSync\ method)',\ u'swift.container.sync.ContainerSync.run_once',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerSync" first="False" fullname="ContainerSync.run_once" ids="swift.container.sync.ContainerSync.run_once" module="swift.container.sync" names="swift.container.sync.ContainerSync.run_once"><desc_name xml:space="preserve">run_once</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Runs a single container sync scan.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'select_http_proxy()\ (swift.container.sync.ContainerSync\ method)',\ u'swift.container.sync.ContainerSync.select_http_proxy',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerSync" first="False" fullname="ContainerSync.select_http_proxy" ids="swift.container.sync.ContainerSync.select_http_proxy" module="swift.container.sync" names="swift.container.sync.ContainerSync.select_http_proxy"><desc_name xml:space="preserve">select_http_proxy</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'sync_store\ (swift.container.sync.ContainerSync\ attribute)',\ u'swift.container.sync.ContainerSync.sync_store',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ContainerSync" first="False" fullname="ContainerSync.sync_store" ids="swift.container.sync.ContainerSync.sync_store" module="swift.container.sync" names="swift.container.sync.ContainerSync.sync_store"><desc_name xml:space="preserve">sync_store</desc_name><desc_annotation xml:space="preserve"> = None</desc_annotation></desc_signature>
                        <desc_content>
                            <paragraph>ContainerSyncStore instance for iterating over synced containers</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'random()\ (in\ module\ swift.container.sync)',\ u'swift.container.sync.random',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="random" ids="swift.container.sync.random" module="swift.container.sync" names="swift.container.sync.random"><desc_addname xml:space="preserve">swift.container.sync.</desc_addname><desc_name xml:space="preserve">random</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist><desc_returns xml:space="preserve">x in the interval [0, 1).</desc_returns></desc_signature>
                <desc_content>
                </desc_content>
            </desc>
            <target refid="container-updater"></target>
        </section>
        <section ids="module-swift.container.updater id6 container-updater" names="container\ updater container-updater">
            <title>Container Updater</title>
            <index entries="['single',\ u'swift.container.updater\ (module)',\ u'module-swift.container.updater',\ '',\ None]"></index>
            <index entries="['single',\ u'ContainerUpdater\ (class\ in\ swift.container.updater)',\ u'swift.container.updater.ContainerUpdater',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ContainerUpdater" ids="swift.container.updater.ContainerUpdater" module="swift.container.updater" names="swift.container.updater.ContainerUpdater"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.container.updater.</desc_addname><desc_name xml:space="preserve">ContainerUpdater</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">swift.common.daemon.Daemon</literal></paragraph>
                    <paragraph>Update container information in account listings.</paragraph>
                    <index entries="['single',\ u'container_report()\ (swift.container.updater.ContainerUpdater\ method)',\ u'swift.container.updater.ContainerUpdater.container_report',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerUpdater" first="False" fullname="ContainerUpdater.container_report" ids="swift.container.updater.ContainerUpdater.container_report" module="swift.container.updater" names="swift.container.updater.ContainerUpdater.container_report"><desc_name xml:space="preserve">container_report</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">part</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">put_timestamp</desc_parameter><desc_parameter xml:space="preserve">delete_timestamp</desc_parameter><desc_parameter xml:space="preserve">count</desc_parameter><desc_parameter xml:space="preserve">bytes</desc_parameter><desc_parameter xml:space="preserve">storage_policy_index</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Report container info to an account server.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">node</literal_strong> – node dictionary from the account ring</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">part</literal_strong> – partition the account is on</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> – container name</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">put_timestamp</literal_strong> – put timestamp</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">delete_timestamp</literal_strong> – delete timestamp</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">count</literal_strong> – object count in the container</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">bytes</literal_strong> – bytes used in the container</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">storage_policy_index</literal_strong> – the policy index for the container</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'container_sweep()\ (swift.container.updater.ContainerUpdater\ method)',\ u'swift.container.updater.ContainerUpdater.container_sweep',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerUpdater" first="False" fullname="ContainerUpdater.container_sweep" ids="swift.container.updater.ContainerUpdater.container_sweep" module="swift.container.updater" names="swift.container.updater.ContainerUpdater.container_sweep"><desc_name xml:space="preserve">container_sweep</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">path</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Walk the path looking for container DBs and process them.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">path</literal_strong> – path to walk</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_account_ring()\ (swift.container.updater.ContainerUpdater\ method)',\ u'swift.container.updater.ContainerUpdater.get_account_ring',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerUpdater" first="False" fullname="ContainerUpdater.get_account_ring" ids="swift.container.updater.ContainerUpdater.get_account_ring" module="swift.container.updater" names="swift.container.updater.ContainerUpdater.get_account_ring"><desc_name xml:space="preserve">get_account_ring</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get the account ring.  Load it if it hasn’t been yet.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_paths()\ (swift.container.updater.ContainerUpdater\ method)',\ u'swift.container.updater.ContainerUpdater.get_paths',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerUpdater" first="False" fullname="ContainerUpdater.get_paths" ids="swift.container.updater.ContainerUpdater.get_paths" module="swift.container.updater" names="swift.container.updater.ContainerUpdater.get_paths"><desc_name xml:space="preserve">get_paths</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get paths to all of the partitions on each drive to be processed.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a list of paths</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'process_container()\ (swift.container.updater.ContainerUpdater\ method)',\ u'swift.container.updater.ContainerUpdater.process_container',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerUpdater" first="False" fullname="ContainerUpdater.process_container" ids="swift.container.updater.ContainerUpdater.process_container" module="swift.container.updater" names="swift.container.updater.ContainerUpdater.process_container"><desc_name xml:space="preserve">process_container</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">dbfile</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Process a container, and update the information in the account.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">dbfile</literal_strong> – container DB to process</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'run_forever()\ (swift.container.updater.ContainerUpdater\ method)',\ u'swift.container.updater.ContainerUpdater.run_forever',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerUpdater" first="False" fullname="ContainerUpdater.run_forever" ids="swift.container.updater.ContainerUpdater.run_forever" module="swift.container.updater" names="swift.container.updater.ContainerUpdater.run_forever"><desc_name xml:space="preserve">run_forever</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Run the updater continuously.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'run_once()\ (swift.container.updater.ContainerUpdater\ method)',\ u'swift.container.updater.ContainerUpdater.run_once',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerUpdater" first="False" fullname="ContainerUpdater.run_once" ids="swift.container.updater.ContainerUpdater.run_once" module="swift.container.updater" names="swift.container.updater.ContainerUpdater.run_once"><desc_name xml:space="preserve">run_once</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Run the updater once.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'random()\ (in\ module\ swift.container.updater)',\ u'swift.container.updater.random',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="random" ids="swift.container.updater.random" module="swift.container.updater" names="swift.container.updater.random"><desc_addname xml:space="preserve">swift.container.updater.</desc_addname><desc_name xml:space="preserve">random</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist><desc_returns xml:space="preserve">x in the interval [0, 1).</desc_returns></desc_signature>
                <desc_content>
                </desc_content>
            </desc>
        </section>
    </section>
</document>
