<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/swift/doc/source/account.rst">
    <target refid="account"></target>
    <section dupnames="account" ids="account id1" names="account">
        <title>Account</title>
        <target refid="account-auditor"></target>
        <section ids="module-swift.account.auditor id2 account-auditor" names="account\ auditor account-auditor">
            <title>Account Auditor</title>
            <index entries="['single',\ u'swift.account.auditor\ (module)',\ u'module-swift.account.auditor',\ '',\ None]"></index>
            <index entries="['single',\ u'AccountAuditor\ (class\ in\ swift.account.auditor)',\ u'swift.account.auditor.AccountAuditor',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="AccountAuditor" ids="swift.account.auditor.AccountAuditor" module="swift.account.auditor" names="swift.account.auditor.AccountAuditor"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.account.auditor.</desc_addname><desc_name xml:space="preserve">AccountAuditor</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">swift.common.daemon.Daemon</literal></paragraph>
                    <paragraph>Audit accounts.</paragraph>
                    <index entries="['single',\ u'account_audit()\ (swift.account.auditor.AccountAuditor\ method)',\ u'swift.account.auditor.AccountAuditor.account_audit',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountAuditor" first="False" fullname="AccountAuditor.account_audit" ids="swift.account.auditor.AccountAuditor.account_audit" module="swift.account.auditor" names="swift.account.auditor.AccountAuditor.account_audit"><desc_name xml:space="preserve">account_audit</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">path</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Audits the given account path</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">path</literal_strong> â€“ the path to an account db</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'run_forever()\ (swift.account.auditor.AccountAuditor\ method)',\ u'swift.account.auditor.AccountAuditor.run_forever',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountAuditor" first="False" fullname="AccountAuditor.run_forever" ids="swift.account.auditor.AccountAuditor.run_forever" module="swift.account.auditor" names="swift.account.auditor.AccountAuditor.run_forever"><desc_name xml:space="preserve">run_forever</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Run the account audit until stopped.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'run_once()\ (swift.account.auditor.AccountAuditor\ method)',\ u'swift.account.auditor.AccountAuditor.run_once',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountAuditor" first="False" fullname="AccountAuditor.run_once" ids="swift.account.auditor.AccountAuditor.run_once" module="swift.account.auditor" names="swift.account.auditor.AccountAuditor.run_once"><desc_name xml:space="preserve">run_once</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Run the account audit once.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'validate_per_policy_counts()\ (swift.account.auditor.AccountAuditor\ method)',\ u'swift.account.auditor.AccountAuditor.validate_per_policy_counts',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountAuditor" first="False" fullname="AccountAuditor.validate_per_policy_counts" ids="swift.account.auditor.AccountAuditor.validate_per_policy_counts" module="swift.account.auditor" names="swift.account.auditor.AccountAuditor.validate_per_policy_counts"><desc_name xml:space="preserve">validate_per_policy_counts</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">broker</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'random()\ (in\ module\ swift.account.auditor)',\ u'swift.account.auditor.random',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="random" ids="swift.account.auditor.random" module="swift.account.auditor" names="swift.account.auditor.random"><desc_addname xml:space="preserve">swift.account.auditor.</desc_addname><desc_name xml:space="preserve">random</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist><desc_returns xml:space="preserve">x in the interval [0, 1).</desc_returns></desc_signature>
                <desc_content>
                </desc_content>
            </desc>
            <target refid="account-backend"></target>
        </section>
        <section ids="module-swift.account.backend id3 account-backend" names="account\ backend account-backend">
            <title>Account Backend</title>
            <index entries="['single',\ u'swift.account.backend\ (module)',\ u'module-swift.account.backend',\ '',\ None]"></index>
            <paragraph>Pluggable Back-end for Account Server</paragraph>
            <index entries="['single',\ u'AccountBroker\ (class\ in\ swift.account.backend)',\ u'swift.account.backend.AccountBroker',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="AccountBroker" ids="swift.account.backend.AccountBroker" module="swift.account.backend" names="swift.account.backend.AccountBroker"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.account.backend.</desc_addname><desc_name xml:space="preserve">AccountBroker</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">db_file</desc_parameter><desc_parameter xml:space="preserve">timeout=25</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter><desc_parameter xml:space="preserve">account=None</desc_parameter><desc_parameter xml:space="preserve">container=None</desc_parameter><desc_parameter xml:space="preserve">pending_timeout=None</desc_parameter><desc_parameter xml:space="preserve">stale_reads_ok=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" reftitle="swift.common.db.DatabaseBroker" refuri="db#swift.common.db.DatabaseBroker"><literal classes="xref py py-class">swift.common.db.DatabaseBroker</literal></reference></paragraph>
                    <paragraph>Encapsulates working with an account database.</paragraph>
                    <index entries="['single',\ u'create_account_stat_table()\ (swift.account.backend.AccountBroker\ method)',\ u'swift.account.backend.AccountBroker.create_account_stat_table',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountBroker" first="False" fullname="AccountBroker.create_account_stat_table" ids="swift.account.backend.AccountBroker.create_account_stat_table" module="swift.account.backend" names="swift.account.backend.AccountBroker.create_account_stat_table"><desc_name xml:space="preserve">create_account_stat_table</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conn</desc_parameter><desc_parameter xml:space="preserve">put_timestamp</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create account_stat table which is specific to the account DB.
                                Not a part of Pluggable Back-ends, internal to the baseline code.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">conn</literal_strong> â€“ DB connection object</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">put_timestamp</literal_strong> â€“ put timestamp</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'create_container_table()\ (swift.account.backend.AccountBroker\ method)',\ u'swift.account.backend.AccountBroker.create_container_table',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountBroker" first="False" fullname="AccountBroker.create_container_table" ids="swift.account.backend.AccountBroker.create_container_table" module="swift.account.backend" names="swift.account.backend.AccountBroker.create_container_table"><desc_name xml:space="preserve">create_container_table</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conn</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create container table which is specific to the account DB.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">conn</literal_strong> â€“ DB connection object</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'create_policy_stat_table()\ (swift.account.backend.AccountBroker\ method)',\ u'swift.account.backend.AccountBroker.create_policy_stat_table',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountBroker" first="False" fullname="AccountBroker.create_policy_stat_table" ids="swift.account.backend.AccountBroker.create_policy_stat_table" module="swift.account.backend" names="swift.account.backend.AccountBroker.create_policy_stat_table"><desc_name xml:space="preserve">create_policy_stat_table</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conn</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create policy_stat table which is specific to the account DB.
                                Not a part of Pluggable Back-ends, internal to the baseline code.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">conn</literal_strong> â€“ DB connection object</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'db_contains_type\ (swift.account.backend.AccountBroker\ attribute)',\ u'swift.account.backend.AccountBroker.db_contains_type',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="AccountBroker" first="False" fullname="AccountBroker.db_contains_type" ids="swift.account.backend.AccountBroker.db_contains_type" module="swift.account.backend" names="swift.account.backend.AccountBroker.db_contains_type"><desc_name xml:space="preserve">db_contains_type</desc_name><desc_annotation xml:space="preserve"> = 'container'</desc_annotation></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'db_reclaim_timestamp\ (swift.account.backend.AccountBroker\ attribute)',\ u'swift.account.backend.AccountBroker.db_reclaim_timestamp',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="AccountBroker" first="False" fullname="AccountBroker.db_reclaim_timestamp" ids="swift.account.backend.AccountBroker.db_reclaim_timestamp" module="swift.account.backend" names="swift.account.backend.AccountBroker.db_reclaim_timestamp"><desc_name xml:space="preserve">db_reclaim_timestamp</desc_name><desc_annotation xml:space="preserve"> = 'delete_timestamp'</desc_annotation></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'db_type\ (swift.account.backend.AccountBroker\ attribute)',\ u'swift.account.backend.AccountBroker.db_type',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="AccountBroker" first="False" fullname="AccountBroker.db_type" ids="swift.account.backend.AccountBroker.db_type" module="swift.account.backend" names="swift.account.backend.AccountBroker.db_type"><desc_name xml:space="preserve">db_type</desc_name><desc_annotation xml:space="preserve"> = 'account'</desc_annotation></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'empty()\ (swift.account.backend.AccountBroker\ method)',\ u'swift.account.backend.AccountBroker.empty',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountBroker" first="False" fullname="AccountBroker.empty" ids="swift.account.backend.AccountBroker.empty" module="swift.account.backend" names="swift.account.backend.AccountBroker.empty"><desc_name xml:space="preserve">empty</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Check if the account DB is empty.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>True if the database has no active containers.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_db_version()\ (swift.account.backend.AccountBroker\ method)',\ u'swift.account.backend.AccountBroker.get_db_version',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountBroker" first="False" fullname="AccountBroker.get_db_version" ids="swift.account.backend.AccountBroker.get_db_version" module="swift.account.backend" names="swift.account.backend.AccountBroker.get_db_version"><desc_name xml:space="preserve">get_db_version</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conn</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_info()\ (swift.account.backend.AccountBroker\ method)',\ u'swift.account.backend.AccountBroker.get_info',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountBroker" first="False" fullname="AccountBroker.get_info" ids="swift.account.backend.AccountBroker.get_info" module="swift.account.backend" names="swift.account.backend.AccountBroker.get_info"><desc_name xml:space="preserve">get_info</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get global data for the account.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>dict with keys: account, created_at, put_timestamp,
                                            delete_timestamp, status_changed_at, container_count,
                                            object_count, bytes_used, hash, id</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_policy_stats()\ (swift.account.backend.AccountBroker\ method)',\ u'swift.account.backend.AccountBroker.get_policy_stats',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountBroker" first="False" fullname="AccountBroker.get_policy_stats" ids="swift.account.backend.AccountBroker.get_policy_stats" module="swift.account.backend" names="swift.account.backend.AccountBroker.get_policy_stats"><desc_name xml:space="preserve">get_policy_stats</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">do_migrations=False</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get global policy stats for the account.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">do_migrations</literal_strong> â€“ boolean, if True the policy stat dicts will
                                            always include the â€˜container_countâ€™ key;
                                            otherwise it may be omitted on legacy databases
                                            until they are migrated.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>dict of policy stats where the key is the policy index and
                                            the value is a dictionary like {â€˜object_countâ€™: M,
                                            â€˜bytes_usedâ€™: N, â€˜container_countâ€™: L}</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'is_status_deleted()\ (swift.account.backend.AccountBroker\ method)',\ u'swift.account.backend.AccountBroker.is_status_deleted',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountBroker" first="False" fullname="AccountBroker.is_status_deleted" ids="swift.account.backend.AccountBroker.is_status_deleted" module="swift.account.backend" names="swift.account.backend.AccountBroker.is_status_deleted"><desc_name xml:space="preserve">is_status_deleted</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Only returns true if the status field is set to DELETED.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'list_containers_iter()\ (swift.account.backend.AccountBroker\ method)',\ u'swift.account.backend.AccountBroker.list_containers_iter',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountBroker" first="False" fullname="AccountBroker.list_containers_iter" ids="swift.account.backend.AccountBroker.list_containers_iter" module="swift.account.backend" names="swift.account.backend.AccountBroker.list_containers_iter"><desc_name xml:space="preserve">list_containers_iter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">limit</desc_parameter><desc_parameter xml:space="preserve">marker</desc_parameter><desc_parameter xml:space="preserve">end_marker</desc_parameter><desc_parameter xml:space="preserve">prefix</desc_parameter><desc_parameter xml:space="preserve">delimiter</desc_parameter><desc_parameter xml:space="preserve">reverse=False</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get a list of containers sorted by name starting at marker onward, up
                                to limit entries. Entries will begin with the prefix and will not have
                                the delimiter after the prefix.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">limit</literal_strong> â€“ maximum number of entries to get</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">marker</literal_strong> â€“ marker query</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">end_marker</literal_strong> â€“ end marker query</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">prefix</literal_strong> â€“ prefix query</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">delimiter</literal_strong> â€“ delimiter for query</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">reverse</literal_strong> â€“ reverse the result order.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>list of tuples of (name, object_count, bytes_used,
                                            put_timestamp, 0)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'make_tuple_for_pickle()\ (swift.account.backend.AccountBroker\ method)',\ u'swift.account.backend.AccountBroker.make_tuple_for_pickle',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountBroker" first="False" fullname="AccountBroker.make_tuple_for_pickle" ids="swift.account.backend.AccountBroker.make_tuple_for_pickle" module="swift.account.backend" names="swift.account.backend.AccountBroker.make_tuple_for_pickle"><desc_name xml:space="preserve">make_tuple_for_pickle</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">record</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'merge_items()\ (swift.account.backend.AccountBroker\ method)',\ u'swift.account.backend.AccountBroker.merge_items',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountBroker" first="False" fullname="AccountBroker.merge_items" ids="swift.account.backend.AccountBroker.merge_items" module="swift.account.backend" names="swift.account.backend.AccountBroker.merge_items"><desc_name xml:space="preserve">merge_items</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">item_list</desc_parameter><desc_parameter xml:space="preserve">source=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Merge items into the container table.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">item_list</literal_strong> â€“ list of dictionaries of {â€˜nameâ€™, â€˜put_timestampâ€™,
                                                    â€˜delete_timestampâ€™, â€˜object_countâ€™, â€˜bytes_usedâ€™,
                                                    â€˜deletedâ€™, â€˜storage_policy_indexâ€™}</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">source</literal_strong> â€“ if defined, update incoming_sync with the source</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'put_container()\ (swift.account.backend.AccountBroker\ method)',\ u'swift.account.backend.AccountBroker.put_container',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountBroker" first="False" fullname="AccountBroker.put_container" ids="swift.account.backend.AccountBroker.put_container" module="swift.account.backend" names="swift.account.backend.AccountBroker.put_container"><desc_name xml:space="preserve">put_container</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">put_timestamp</desc_parameter><desc_parameter xml:space="preserve">delete_timestamp</desc_parameter><desc_parameter xml:space="preserve">object_count</desc_parameter><desc_parameter xml:space="preserve">bytes_used</desc_parameter><desc_parameter xml:space="preserve">storage_policy_index</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create a container with the given attributes.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">name</literal_strong> â€“ name of the container to create</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">put_timestamp</literal_strong> â€“ put_timestamp of the container to create</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">delete_timestamp</literal_strong> â€“ delete_timestamp of the container to create</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">object_count</literal_strong> â€“ number of objects in the container</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">bytes_used</literal_strong> â€“ number of bytes used by the container</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">storage_policy_index</literal_strong> â€“ the storage policy for this container</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <target refid="account-reaper"></target>
        </section>
        <section ids="module-swift.account.reaper id4 account-reaper" names="account\ reaper account-reaper">
            <title>Account Reaper</title>
            <index entries="['single',\ u'swift.account.reaper\ (module)',\ u'module-swift.account.reaper',\ '',\ None]"></index>
            <index entries="['single',\ u'AccountReaper\ (class\ in\ swift.account.reaper)',\ u'swift.account.reaper.AccountReaper',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="AccountReaper" ids="swift.account.reaper.AccountReaper" module="swift.account.reaper" names="swift.account.reaper.AccountReaper"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.account.reaper.</desc_addname><desc_name xml:space="preserve">AccountReaper</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">swift.common.daemon.Daemon</literal></paragraph>
                    <paragraph>Removes data from status=DELETED accounts. These are accounts that have
                        been asked to be removed by the reseller via services
                        remove_storage_account XMLRPC call.</paragraph>
                    <paragraph>The account is not deleted immediately by the services call, but instead
                        the account is simply marked for deletion by setting the status column in
                        the account_stat table of the account database. This account reaper scans
                        for such accounts and removes the data in the background. The background
                        deletion process will occur on the primary account server for the account.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">server_conf</literal_strong> â€“ The [account-server] dictionary of the account server
                                            configuration file</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">reaper_conf</literal_strong> â€“ The [account-reaper] dictionary of the account server
                                            configuration file</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                    <paragraph>See the etc/account-server.conf-sample for information on the possible
                        configuration parameters.</paragraph>
                    <index entries="['single',\ u'get_account_ring()\ (swift.account.reaper.AccountReaper\ method)',\ u'swift.account.reaper.AccountReaper.get_account_ring',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountReaper" first="False" fullname="AccountReaper.get_account_ring" ids="swift.account.reaper.AccountReaper.get_account_ring" module="swift.account.reaper" names="swift.account.reaper.AccountReaper.get_account_ring"><desc_name xml:space="preserve">get_account_ring</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>The account <literal classes="xref py py-class">swift.common.ring.Ring</literal> for the cluster.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_container_ring()\ (swift.account.reaper.AccountReaper\ method)',\ u'swift.account.reaper.AccountReaper.get_container_ring',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountReaper" first="False" fullname="AccountReaper.get_container_ring" ids="swift.account.reaper.AccountReaper.get_container_ring" module="swift.account.reaper" names="swift.account.reaper.AccountReaper.get_container_ring"><desc_name xml:space="preserve">get_container_ring</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>The container <literal classes="xref py py-class">swift.common.ring.Ring</literal> for the cluster.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_object_ring()\ (swift.account.reaper.AccountReaper\ method)',\ u'swift.account.reaper.AccountReaper.get_object_ring',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountReaper" first="False" fullname="AccountReaper.get_object_ring" ids="swift.account.reaper.AccountReaper.get_object_ring" module="swift.account.reaper" names="swift.account.reaper.AccountReaper.get_object_ring"><desc_name xml:space="preserve">get_object_ring</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">policy_idx</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get the ring identified by the policy index</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">policy_idx</literal_strong> â€“ Storage policy index</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>A ring matching the storage policy</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'reap_account()\ (swift.account.reaper.AccountReaper\ method)',\ u'swift.account.reaper.AccountReaper.reap_account',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountReaper" first="False" fullname="AccountReaper.reap_account" ids="swift.account.reaper.AccountReaper.reap_account" module="swift.account.reaper" names="swift.account.reaper.AccountReaper.reap_account"><desc_name xml:space="preserve">reap_account</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">broker</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">nodes</desc_parameter><desc_parameter xml:space="preserve">container_shard=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Called once per pass for each account this server is the primary for
                                and attempts to delete the data for the given account. The reaper will
                                only delete one account at any given time. It will call
                                <reference internal="True" refid="swift.account.reaper.AccountReaper.reap_container" reftitle="swift.account.reaper.AccountReaper.reap_container"><literal classes="xref py py-func">reap_container()</literal></reference> up to sqrt(self.concurrency) times concurrently
                                while reaping the account.</paragraph>
                            <paragraph>If there is any exception while deleting a single container, the
                                process will continue for any other containers and the failed
                                containers will be tried again the next time this function is called
                                with the same parameters.</paragraph>
                            <paragraph>If there is any exception while listing the containers for deletion,
                                the process will stop (but will obviously be tried again the next time
                                this function is called with the same parameters). This isnâ€™t likely
                                since the listing comes from the local database.</paragraph>
                            <paragraph>After the process completes (successfully or not) statistics about what
                                was accomplished will be logged.</paragraph>
                            <paragraph>This function returns nothing and should raise no exception but only
                                update various self.stats_* values for what occurs.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">broker</literal_strong> â€“ The AccountBroker for the account to delete.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">partition</literal_strong> â€“ The partition in the account ring the account is on.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">nodes</literal_strong> â€“ The primary node dicts for the account to delete.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container_shard</literal_strong> â€“ int used to shard containers reaped. If None,
                                                    will reap all containers.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                            <seealso>
                                <paragraph><reference internal="True" refid="swift.account.backend.AccountBroker" reftitle="swift.account.backend.AccountBroker"><literal classes="xref py py-class">swift.account.backend.AccountBroker</literal></reference> for the broker class.</paragraph>
                            </seealso>
                            <seealso>
                                <paragraph><literal classes="xref py py-func">swift.common.ring.Ring.get_nodes()</literal> for a description
                                    of the node dicts.</paragraph>
                            </seealso>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'reap_container()\ (swift.account.reaper.AccountReaper\ method)',\ u'swift.account.reaper.AccountReaper.reap_container',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountReaper" first="False" fullname="AccountReaper.reap_container" ids="swift.account.reaper.AccountReaper.reap_container" module="swift.account.reaper" names="swift.account.reaper.AccountReaper.reap_container"><desc_name xml:space="preserve">reap_container</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">account_partition</desc_parameter><desc_parameter xml:space="preserve">account_nodes</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Deletes the data and the container itself for the given container. This
                                will call <reference internal="True" refid="swift.account.reaper.AccountReaper.reap_object" reftitle="swift.account.reaper.AccountReaper.reap_object"><literal classes="xref py py-func">reap_object()</literal></reference> up to sqrt(self.concurrency) times
                                concurrently for the objects in the container.</paragraph>
                            <paragraph>If there is any exception while deleting a single object, the process
                                will continue for any other objects in the container and the failed
                                objects will be tried again the next time this function is called with
                                the same parameters.</paragraph>
                            <paragraph>If there is any exception while listing the objects for deletion, the
                                process will stop (but will obviously be tried again the next time this
                                function is called with the same parameters). This is a possibility
                                since the listing comes from querying just the primary remote container
                                server.</paragraph>
                            <paragraph>Once all objects have been attempted to be deleted, the container
                                itself will be attempted to be deleted by sending a delete request to
                                all container nodes. The format of the delete request is such that each
                                container server will update a corresponding account server, removing
                                the container from the accountâ€™s listing.</paragraph>
                            <paragraph>This function returns nothing and should raise no exception but only
                                update various self.stats_* values for what occurs.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> â€“ The name of the account for the container.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account_partition</literal_strong> â€“ The partition for the account on the account
                                                    ring.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account_nodes</literal_strong> â€“ The primary node dicts for the account.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> â€“ The name of the container to delete.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>See also: <literal classes="xref py py-func">swift.common.ring.Ring.get_nodes()</literal> for a description
                                        of the account node dicts.</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'reap_device()\ (swift.account.reaper.AccountReaper\ method)',\ u'swift.account.reaper.AccountReaper.reap_device',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountReaper" first="False" fullname="AccountReaper.reap_device" ids="swift.account.reaper.AccountReaper.reap_device" module="swift.account.reaper" names="swift.account.reaper.AccountReaper.reap_device"><desc_name xml:space="preserve">reap_device</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">device</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Called once per pass for each device on the server. This will scan the
                                accounts directory for the device, looking for partitions this device
                                is the primary for, then looking for account databases that are marked
                                status=DELETED and still have containers and calling
                                <reference internal="True" refid="swift.account.reaper.AccountReaper.reap_account" reftitle="swift.account.reaper.AccountReaper.reap_account"><literal classes="xref py py-func">reap_account()</literal></reference>. Account databases marked status=DELETED that no
                                longer have containers will eventually be permanently removed by the
                                reclaim process within the account replicator (see
                                <literal classes="xref py py-mod">swift.db_replicator</literal>).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">device</literal_strong> â€“ The device to look for accounts to be deleted.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'reap_object()\ (swift.account.reaper.AccountReaper\ method)',\ u'swift.account.reaper.AccountReaper.reap_object',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountReaper" first="False" fullname="AccountReaper.reap_object" ids="swift.account.reaper.AccountReaper.reap_object" module="swift.account.reaper" names="swift.account.reaper.AccountReaper.reap_object"><desc_name xml:space="preserve">reap_object</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">container_partition</desc_parameter><desc_parameter xml:space="preserve">container_nodes</desc_parameter><desc_parameter xml:space="preserve">obj</desc_parameter><desc_parameter xml:space="preserve">policy_index</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Deletes the given object by issuing a delete request to each node for
                                the object. The format of the delete request is such that each object
                                server will update a corresponding container server, removing the
                                object from the containerâ€™s listing.</paragraph>
                            <paragraph>This function returns nothing and should raise no exception but only
                                update various self.stats_* values for what occurs.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> â€“ The name of the account for the object.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> â€“ The name of the container for the object.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container_partition</literal_strong> â€“ The partition for the container on the
                                                    container ring.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container_nodes</literal_strong> â€“ The primary node dicts for the container.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">obj</literal_strong> â€“ The name of the object to delete.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">policy_index</literal_strong> â€“ The storage policy index of the objectâ€™s container</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>See also: <literal classes="xref py py-func">swift.common.ring.Ring.get_nodes()</literal> for a description
                                        of the container node dicts.</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'reset_stats()\ (swift.account.reaper.AccountReaper\ method)',\ u'swift.account.reaper.AccountReaper.reset_stats',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountReaper" first="False" fullname="AccountReaper.reset_stats" ids="swift.account.reaper.AccountReaper.reset_stats" module="swift.account.reaper" names="swift.account.reaper.AccountReaper.reset_stats"><desc_name xml:space="preserve">reset_stats</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'run_forever()\ (swift.account.reaper.AccountReaper\ method)',\ u'swift.account.reaper.AccountReaper.run_forever',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountReaper" first="False" fullname="AccountReaper.run_forever" ids="swift.account.reaper.AccountReaper.run_forever" module="swift.account.reaper" names="swift.account.reaper.AccountReaper.run_forever"><desc_name xml:space="preserve">run_forever</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Main entry point when running the reaper in normal daemon mode.</paragraph>
                            <paragraph>This repeatedly calls <reference internal="True" refid="swift.account.reaper.AccountReaper.run_once" reftitle="swift.account.reaper.AccountReaper.run_once"><literal classes="xref py py-func">run_once()</literal></reference> no quicker than the
                                configuration interval.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'run_once()\ (swift.account.reaper.AccountReaper\ method)',\ u'swift.account.reaper.AccountReaper.run_once',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountReaper" first="False" fullname="AccountReaper.run_once" ids="swift.account.reaper.AccountReaper.run_once" module="swift.account.reaper" names="swift.account.reaper.AccountReaper.run_once"><desc_name xml:space="preserve">run_once</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Main entry point when running the reaper in â€˜onceâ€™ mode, where it will
                                do a single pass over all accounts on the server. This is called
                                repeatedly by <reference internal="True" refid="swift.account.reaper.AccountReaper.run_forever" reftitle="swift.account.reaper.AccountReaper.run_forever"><literal classes="xref py py-func">run_forever()</literal></reference>. This will call <reference internal="True" refid="swift.account.reaper.AccountReaper.reap_device" reftitle="swift.account.reaper.AccountReaper.reap_device"><literal classes="xref py py-func">reap_device()</literal></reference>
                                once for each device on the server.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <target refid="account-server"></target>
        </section>
        <section ids="module-swift.account.server id5 account-server" names="account\ server account-server">
            <title>Account Server</title>
            <index entries="['single',\ u'swift.account.server\ (module)',\ u'module-swift.account.server',\ '',\ None]"></index>
            <index entries="['single',\ u'AccountController\ (class\ in\ swift.account.server)',\ u'swift.account.server.AccountController',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="AccountController" ids="swift.account.server.AccountController" module="swift.account.server" names="swift.account.server.AccountController"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.account.server.</desc_addname><desc_name xml:space="preserve">AccountController</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">swift.common.base_storage_server.BaseStorageServer</literal></paragraph>
                    <paragraph>WSGI controller for the account server.</paragraph>
                    <index entries="['single',\ u'DELETE()\ (swift.account.server.AccountController\ method)',\ u'swift.account.server.AccountController.DELETE',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountController" first="False" fullname="AccountController.DELETE" ids="swift.account.server.AccountController.DELETE" module="swift.account.server" names="swift.account.server.AccountController.DELETE"><desc_name xml:space="preserve">DELETE</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctrl</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Handle HTTP DELETE request.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'GET()\ (swift.account.server.AccountController\ method)',\ u'swift.account.server.AccountController.GET',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountController" first="False" fullname="AccountController.GET" ids="swift.account.server.AccountController.GET" module="swift.account.server" names="swift.account.server.AccountController.GET"><desc_name xml:space="preserve">GET</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctrl</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Handle HTTP GET request.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'HEAD()\ (swift.account.server.AccountController\ method)',\ u'swift.account.server.AccountController.HEAD',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountController" first="False" fullname="AccountController.HEAD" ids="swift.account.server.AccountController.HEAD" module="swift.account.server" names="swift.account.server.AccountController.HEAD"><desc_name xml:space="preserve">HEAD</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctrl</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Handle HTTP HEAD request.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'POST()\ (swift.account.server.AccountController\ method)',\ u'swift.account.server.AccountController.POST',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountController" first="False" fullname="AccountController.POST" ids="swift.account.server.AccountController.POST" module="swift.account.server" names="swift.account.server.AccountController.POST"><desc_name xml:space="preserve">POST</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctrl</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Handle HTTP POST request.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'PUT()\ (swift.account.server.AccountController\ method)',\ u'swift.account.server.AccountController.PUT',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountController" first="False" fullname="AccountController.PUT" ids="swift.account.server.AccountController.PUT" module="swift.account.server" names="swift.account.server.AccountController.PUT"><desc_name xml:space="preserve">PUT</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctrl</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Handle HTTP PUT request.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'REPLICATE()\ (swift.account.server.AccountController\ method)',\ u'swift.account.server.AccountController.REPLICATE',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="AccountController" first="False" fullname="AccountController.REPLICATE" ids="swift.account.server.AccountController.REPLICATE" module="swift.account.server" names="swift.account.server.AccountController.REPLICATE"><desc_name xml:space="preserve">REPLICATE</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctrl</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Handle HTTP REPLICATE request.
                                Handler for RPC calls for account replication.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'server_type\ (swift.account.server.AccountController\ attribute)',\ u'swift.account.server.AccountController.server_type',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="AccountController" first="False" fullname="AccountController.server_type" ids="swift.account.server.AccountController.server_type" module="swift.account.server" names="swift.account.server.AccountController.server_type"><desc_name xml:space="preserve">server_type</desc_name><desc_annotation xml:space="preserve"> = 'account-server'</desc_annotation></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'app_factory()\ (in\ module\ swift.account.server)',\ u'swift.account.server.app_factory',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="app_factory" ids="swift.account.server.app_factory" module="swift.account.server" names="swift.account.server.app_factory"><desc_addname xml:space="preserve">swift.account.server.</desc_addname><desc_name xml:space="preserve">app_factory</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">global_conf</desc_parameter><desc_parameter xml:space="preserve">**local_conf</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>paste.deploy app factory for creating WSGI account server apps</paragraph>
                </desc_content>
            </desc>
        </section>
    </section>
</document>
