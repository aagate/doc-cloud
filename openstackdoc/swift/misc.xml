<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/swift/doc/source/misc.rst">
    <target refid="misc"></target>
    <section dupnames="misc" ids="misc id1" names="misc">
        <title>Misc</title>
        <target refid="acls"></target>
        <section dupnames="acls" ids="acls id2" names="acls">
            <title>ACLs</title>
            <target ids="module-swift.common.middleware.acl" ismod="True"></target>
            <index entries="['single',\ u'swift.common.middleware.acl\ (module)',\ u'module-swift.common.middleware.acl',\ '',\ None]"></index>
            <index entries="['single',\ u'acls_from_account_info()\ (in\ module\ swift.common.middleware.acl)',\ u'swift.common.middleware.acl.acls_from_account_info',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="acls_from_account_info" ids="swift.common.middleware.acl.acls_from_account_info" module="swift.common.middleware.acl" names="swift.common.middleware.acl.acls_from_account_info"><desc_addname xml:space="preserve">swift.common.middleware.acl.</desc_addname><desc_name xml:space="preserve">acls_from_account_info</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">info</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Extract the account ACLs from the given account_info, and return the ACLs.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">info</literal_strong> – a dict of the form returned by get_account_info</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>None (no ACL system metadata is set), or a dict of the form::
                                    {‘admin’: […], ‘read-write’: […], ‘read-only’: […]}</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>ValueError</literal_strong> – on a syntactically invalid header</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'clean_acl()\ (in\ module\ swift.common.middleware.acl)',\ u'swift.common.middleware.acl.clean_acl',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="clean_acl" ids="swift.common.middleware.acl.clean_acl" module="swift.common.middleware.acl" names="swift.common.middleware.acl.clean_acl"><desc_addname xml:space="preserve">swift.common.middleware.acl.</desc_addname><desc_name xml:space="preserve">clean_acl</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">value</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns a cleaned ACL header value, validating that it meets the formatting
                        requirements for standard Swift ACL strings.</paragraph>
                    <paragraph>The ACL format is:</paragraph>
                    <literal_block xml:space="preserve">[item[,item...]]</literal_block>
                    <paragraph>Each item can be a group name to give access to or a referrer designation
                        to grant or deny based on the HTTP Referer header.</paragraph>
                    <paragraph>The referrer designation format is:</paragraph>
                    <literal_block xml:space="preserve">.r:[-]value</literal_block>
                    <paragraph>The <literal>.r</literal> can also be <literal>.ref</literal>, <literal>.referer</literal>, or <literal>.referrer</literal>; though it
                        will be shortened to just <literal>.r</literal> for decreased character count usage.</paragraph>
                    <paragraph>The value can be <literal>*</literal> to specify any referrer host is allowed access, a
                        specific host name like <literal>www.example.com</literal>, or if it has a leading period
                        <literal>.</literal> or leading <literal>*.</literal> it is a domain name specification, like
                        <literal>.example.com</literal> or <literal>*.example.com</literal>. The leading minus sign <literal>-</literal>
                        indicates referrer hosts that should be denied access.</paragraph>
                    <paragraph>Referrer access is applied in the order they are specified. For example,
                        .r:.example.com,.r:-thief.example.com would allow all hosts ending with
                        .example.com except for the specific host thief.example.com.</paragraph>
                    <paragraph>Example valid ACLs:</paragraph>
                    <literal_block xml:space="preserve">.r:*
.r:*,.r:-.thief.com
.r:*,.r:.example.com,.r:-thief.example.com
.r:*,.r:-.thief.com,bobs_account,sues_account:sue
bobs_account,sues_account:sue</literal_block>
                    <paragraph>Example invalid ACLs:</paragraph>
                    <literal_block xml:space="preserve">.r:
.r:-</literal_block>
                    <paragraph>By default, allowing read access via .r will not allow listing objects in
                        the container – just retrieving objects from the container. To turn on
                        listings, use the .rlistings directive.</paragraph>
                    <paragraph>Also, .r designations aren’t allowed in headers whose names include the
                        word ‘write’.</paragraph>
                    <paragraph>ACLs that are “messy” will be cleaned up. Examples:</paragraph>
                    <table>
                        <tgroup cols="2">
                            <colspec colwidth="22"></colspec>
                            <colspec colwidth="22"></colspec>
                            <tbody>
                                <row>
                                    <entry>
                                        <paragraph>Original</paragraph>
                                    </entry>
                                    <entry>
                                        <paragraph>Cleaned</paragraph>
                                    </entry>
                                </row>
                                <row>
                                    <entry>
                                        <paragraph><literal>bob, sue</literal></paragraph>
                                    </entry>
                                    <entry>
                                        <paragraph><literal>bob,sue</literal></paragraph>
                                    </entry>
                                </row>
                                <row>
                                    <entry>
                                        <paragraph><literal>bob , sue</literal></paragraph>
                                    </entry>
                                    <entry>
                                        <paragraph><literal>bob,sue</literal></paragraph>
                                    </entry>
                                </row>
                                <row>
                                    <entry>
                                        <paragraph><literal>bob,,,sue</literal></paragraph>
                                    </entry>
                                    <entry>
                                        <paragraph><literal>bob,sue</literal></paragraph>
                                    </entry>
                                </row>
                                <row>
                                    <entry>
                                        <paragraph><literal>.referrer : *</literal></paragraph>
                                    </entry>
                                    <entry>
                                        <paragraph><literal>.r:*</literal></paragraph>
                                    </entry>
                                </row>
                                <row>
                                    <entry>
                                        <paragraph><literal>.ref:*.example.com</literal></paragraph>
                                    </entry>
                                    <entry>
                                        <paragraph><literal>.r:.example.com</literal></paragraph>
                                    </entry>
                                </row>
                                <row>
                                    <entry>
                                        <paragraph><literal>.r:*, .rlistings</literal></paragraph>
                                    </entry>
                                    <entry>
                                        <paragraph><literal>.r:*,.rlistings</literal></paragraph>
                                    </entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </table>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> – The name of the header being cleaned, such as X-Container-Read
                                            or X-Container-Write.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">value</literal_strong> – The value of the header being cleaned.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>The value, cleaned of extraneous formatting.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>ValueError</literal_strong> – If the value does not meet the ACL formatting
                                    requirements; the error message will indicate why.</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'format_acl()\ (in\ module\ swift.common.middleware.acl)',\ u'swift.common.middleware.acl.format_acl',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="format_acl" ids="swift.common.middleware.acl.format_acl" module="swift.common.middleware.acl" names="swift.common.middleware.acl.format_acl"><desc_addname xml:space="preserve">swift.common.middleware.acl.</desc_addname><desc_name xml:space="preserve">format_acl</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">version=1</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Compatibility wrapper to help migrate ACL syntax from version 1 to 2.
                        Delegates to the appropriate version-specific format_acl method, defaulting
                        to version 1 for backward compatibility.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">kwargs</literal_strong> – keyword args appropriate for the selected ACL syntax version
                                    (see <reference internal="True" refid="swift.common.middleware.acl.format_acl_v1" reftitle="swift.common.middleware.acl.format_acl_v1"><literal classes="xref py py-func">format_acl_v1()</literal></reference> or <reference internal="True" refid="swift.common.middleware.acl.format_acl_v2" reftitle="swift.common.middleware.acl.format_acl_v2"><literal classes="xref py py-func">format_acl_v2()</literal></reference>)</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'format_acl_v1()\ (in\ module\ swift.common.middleware.acl)',\ u'swift.common.middleware.acl.format_acl_v1',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="format_acl_v1" ids="swift.common.middleware.acl.format_acl_v1" module="swift.common.middleware.acl" names="swift.common.middleware.acl.format_acl_v1"><desc_addname xml:space="preserve">swift.common.middleware.acl.</desc_addname><desc_name xml:space="preserve">format_acl_v1</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">groups=None</desc_parameter><desc_parameter xml:space="preserve">referrers=None</desc_parameter><desc_parameter xml:space="preserve">header_name=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns a standard Swift ACL string for the given inputs.</paragraph>
                    <paragraph>Caller is responsible for ensuring that :referrers: parameter is only given
                        if the ACL is being generated for X-Container-Read.  (X-Container-Write
                        and the account ACL headers don’t support referrers.)</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">groups</literal_strong> – a list of groups (and/or members in most auth systems) to
                                            grant access</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">referrers</literal_strong> – a list of referrer designations (without the leading .r:)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">header_name</literal_strong> – (optional) header name of the ACL we’re preparing, for
                                            clean_acl; if None, returned ACL won’t be cleaned</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a Swift ACL string for use in X-Container-{Read,Write},
                                    X-Account-Access-Control, etc.</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'format_acl_v2()\ (in\ module\ swift.common.middleware.acl)',\ u'swift.common.middleware.acl.format_acl_v2',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="format_acl_v2" ids="swift.common.middleware.acl.format_acl_v2" module="swift.common.middleware.acl" names="swift.common.middleware.acl.format_acl_v2"><desc_addname xml:space="preserve">swift.common.middleware.acl.</desc_addname><desc_name xml:space="preserve">format_acl_v2</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">acl_dict</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns a version-2 Swift ACL JSON string.</paragraph>
                    <definition_list>
                        <definition_list_item>
                            <term>HTTP headers for Version 2 ACLs have the following form:</term>
                            <definition>
                                <paragraph>Header-Name: {“arbitrary”:”json”,”encoded”:”string”}</paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                    <paragraph>JSON will be forced ASCII (containing six-char uNNNN sequences rather
                        than UTF-8; UTF-8 is valid JSON but clients vary in their support for
                        UTF-8 headers), and without extraneous whitespace.</paragraph>
                    <paragraph>Advantages over V1: forward compatibility (new keys don’t cause parsing
                        exceptions); Unicode support; no reserved words (you can have a user
                        named .rlistings if you want).</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">acl_dict</literal_strong> – dict of arbitrary data to put in the ACL; see specific
                                    auth systems such as tempauth for supported values</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a JSON string which encodes the ACL</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'parse_acl()\ (in\ module\ swift.common.middleware.acl)',\ u'swift.common.middleware.acl.parse_acl',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="parse_acl" ids="swift.common.middleware.acl.parse_acl" module="swift.common.middleware.acl" names="swift.common.middleware.acl.parse_acl"><desc_addname xml:space="preserve">swift.common.middleware.acl.</desc_addname><desc_name xml:space="preserve">parse_acl</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Compatibility wrapper to help migrate ACL syntax from version 1 to 2.
                        Delegates to the appropriate version-specific parse_acl method, attempting
                        to determine the version from the types of args/kwargs.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">args</literal_strong> – positional args for the selected ACL syntax version</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">kwargs</literal_strong> – keyword args for the selected ACL syntax version
                                            (see <reference internal="True" refid="swift.common.middleware.acl.parse_acl_v1" reftitle="swift.common.middleware.acl.parse_acl_v1"><literal classes="xref py py-func">parse_acl_v1()</literal></reference> or <reference internal="True" refid="swift.common.middleware.acl.parse_acl_v2" reftitle="swift.common.middleware.acl.parse_acl_v2"><literal classes="xref py py-func">parse_acl_v2()</literal></reference>)</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>the return value of <reference internal="True" refid="swift.common.middleware.acl.parse_acl_v1" reftitle="swift.common.middleware.acl.parse_acl_v1"><literal classes="xref py py-func">parse_acl_v1()</literal></reference> or <reference internal="True" refid="swift.common.middleware.acl.parse_acl_v2" reftitle="swift.common.middleware.acl.parse_acl_v2"><literal classes="xref py py-func">parse_acl_v2()</literal></reference></paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'parse_acl_v1()\ (in\ module\ swift.common.middleware.acl)',\ u'swift.common.middleware.acl.parse_acl_v1',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="parse_acl_v1" ids="swift.common.middleware.acl.parse_acl_v1" module="swift.common.middleware.acl" names="swift.common.middleware.acl.parse_acl_v1"><desc_addname xml:space="preserve">swift.common.middleware.acl.</desc_addname><desc_name xml:space="preserve">parse_acl_v1</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">acl_string</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Parses a standard Swift ACL string into a referrers list and groups list.</paragraph>
                    <paragraph>See <reference internal="True" refid="swift.common.middleware.acl.clean_acl" reftitle="swift.common.middleware.acl.clean_acl"><literal classes="xref py py-func">clean_acl()</literal></reference> for documentation of the standard Swift ACL format.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">acl_string</literal_strong> – The standard Swift ACL string to parse.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>A tuple of (referrers, groups) where referrers is a list of
                                    referrer designations (without the leading .r:) and groups is a
                                    list of groups to allow access.</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'parse_acl_v2()\ (in\ module\ swift.common.middleware.acl)',\ u'swift.common.middleware.acl.parse_acl_v2',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="parse_acl_v2" ids="swift.common.middleware.acl.parse_acl_v2" module="swift.common.middleware.acl" names="swift.common.middleware.acl.parse_acl_v2"><desc_addname xml:space="preserve">swift.common.middleware.acl.</desc_addname><desc_name xml:space="preserve">parse_acl_v2</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">data</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Parses a version-2 Swift ACL string and returns a dict of ACL info.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">data</literal_strong> – string containing the ACL data in JSON format</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>A dict (possibly empty) containing ACL info, e.g.:
                                    {“groups”: […], “referrers”: […]}</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>None if data is None, is not valid JSON or does not parse
                                    as a dict</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>empty dictionary if data is an empty string</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'referrer_allowed()\ (in\ module\ swift.common.middleware.acl)',\ u'swift.common.middleware.acl.referrer_allowed',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="referrer_allowed" ids="swift.common.middleware.acl.referrer_allowed" module="swift.common.middleware.acl" names="swift.common.middleware.acl.referrer_allowed"><desc_addname xml:space="preserve">swift.common.middleware.acl.</desc_addname><desc_name xml:space="preserve">referrer_allowed</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">referrer</desc_parameter><desc_parameter xml:space="preserve">referrer_acl</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns True if the referrer should be allowed based on the referrer_acl
                        list (as returned by <reference internal="True" refid="swift.common.middleware.acl.parse_acl" reftitle="swift.common.middleware.acl.parse_acl"><literal classes="xref py py-func">parse_acl()</literal></reference>).</paragraph>
                    <paragraph>See <reference internal="True" refid="swift.common.middleware.acl.clean_acl" reftitle="swift.common.middleware.acl.clean_acl"><literal classes="xref py py-func">clean_acl()</literal></reference> for documentation of the standard Swift ACL format.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">referrer</literal_strong> – The value of the HTTP Referer header.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">referrer_acl</literal_strong> – The list of referrer designations as returned by
                                            <reference internal="True" refid="swift.common.middleware.acl.parse_acl" reftitle="swift.common.middleware.acl.parse_acl"><literal classes="xref py py-func">parse_acl()</literal></reference>.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>True if the referrer should be allowed; False if not.</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <target refid="buffered-http"></target>
        </section>
        <section ids="module-swift.common.bufferedhttp id3 buffered-http" names="buffered\ http buffered_http">
            <title>Buffered HTTP</title>
            <index entries="['single',\ u'swift.common.bufferedhttp\ (module)',\ u'module-swift.common.bufferedhttp',\ '',\ None]"></index>
            <paragraph>Monkey Patch httplib.HTTPResponse to buffer reads of headers. This can improve
                performance when making large numbers of small HTTP requests.  This module
                also provides helper functions to make HTTP connections using
                BufferedHTTPResponse.</paragraph>
            <warning>
                <paragraph>If you use this, be sure that the libraries you are using do not access
                    the socket directly (xmlrpclib, I’m looking at you :/), and instead
                    make all calls through httplib.</paragraph>
            </warning>
            <index entries="['single',\ u'BufferedHTTPConnection\ (class\ in\ swift.common.bufferedhttp)',\ u'swift.common.bufferedhttp.BufferedHTTPConnection',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BufferedHTTPConnection" ids="swift.common.bufferedhttp.BufferedHTTPConnection" module="swift.common.bufferedhttp" names="swift.common.bufferedhttp.BufferedHTTPConnection"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.bufferedhttp.</desc_addname><desc_name xml:space="preserve">BufferedHTTPConnection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">host</desc_parameter><desc_parameter xml:space="preserve">port=None</desc_parameter><desc_parameter xml:space="preserve">strict=None</desc_parameter><desc_parameter xml:space="preserve">timeout=&lt;object object&gt;</desc_parameter><desc_parameter xml:space="preserve">source_address=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">httplib.HTTPConnection</literal></paragraph>
                    <paragraph>HTTPConnection class that uses BufferedHTTPResponse</paragraph>
                    <index entries="['single',\ u'response_class\ (swift.common.bufferedhttp.BufferedHTTPConnection\ attribute)',\ u'swift.common.bufferedhttp.BufferedHTTPConnection.response_class',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BufferedHTTPConnection" first="False" fullname="BufferedHTTPConnection.response_class" ids="swift.common.bufferedhttp.BufferedHTTPConnection.response_class" module="swift.common.bufferedhttp" names="swift.common.bufferedhttp.BufferedHTTPConnection.response_class"><desc_name xml:space="preserve">response_class</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>alias of <reference internal="True" refid="swift.common.bufferedhttp.BufferedHTTPResponse" reftitle="swift.common.bufferedhttp.BufferedHTTPResponse"><literal classes="xref py py-class">BufferedHTTPResponse</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'BufferedHTTPResponse\ (class\ in\ swift.common.bufferedhttp)',\ u'swift.common.bufferedhttp.BufferedHTTPResponse',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BufferedHTTPResponse" ids="swift.common.bufferedhttp.BufferedHTTPResponse" module="swift.common.bufferedhttp" names="swift.common.bufferedhttp.BufferedHTTPResponse"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.bufferedhttp.</desc_addname><desc_name xml:space="preserve">BufferedHTTPResponse</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">sock</desc_parameter><desc_parameter xml:space="preserve">debuglevel=0</desc_parameter><desc_parameter xml:space="preserve">strict=0</desc_parameter><desc_parameter xml:space="preserve">method=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">httplib.HTTPResponse</literal></paragraph>
                    <paragraph>HTTPResponse class that buffers reading of headers</paragraph>
                    <index entries="['single',\ u'nuke_from_orbit()\ (swift.common.bufferedhttp.BufferedHTTPResponse\ method)',\ u'swift.common.bufferedhttp.BufferedHTTPResponse.nuke_from_orbit',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BufferedHTTPResponse" first="False" fullname="BufferedHTTPResponse.nuke_from_orbit" ids="swift.common.bufferedhttp.BufferedHTTPResponse.nuke_from_orbit" module="swift.common.bufferedhttp" names="swift.common.bufferedhttp.BufferedHTTPResponse.nuke_from_orbit"><desc_name xml:space="preserve">nuke_from_orbit</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Terminate the socket with extreme prejudice.</paragraph>
                            <paragraph>Closes the underlying socket regardless of whether or not anyone else
                                has references to it. Use this when you are certain that nobody else
                                you care about has a reference to this socket.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'http_connect()\ (in\ module\ swift.common.bufferedhttp)',\ u'swift.common.bufferedhttp.http_connect',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="http_connect" ids="swift.common.bufferedhttp.http_connect" module="swift.common.bufferedhttp" names="swift.common.bufferedhttp.http_connect"><desc_addname xml:space="preserve">swift.common.bufferedhttp.</desc_addname><desc_name xml:space="preserve">http_connect</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ipaddr</desc_parameter><desc_parameter xml:space="preserve">port</desc_parameter><desc_parameter xml:space="preserve">device</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">method</desc_parameter><desc_parameter xml:space="preserve">path</desc_parameter><desc_parameter xml:space="preserve">headers=None</desc_parameter><desc_parameter xml:space="preserve">query_string=None</desc_parameter><desc_parameter xml:space="preserve">ssl=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Helper function to create an HTTPConnection object. If ssl is set True,
                        HTTPSConnection will be used. However, if ssl=False, BufferedHTTPConnection
                        will be used, which is buffered for backend Swift services.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">ipaddr</literal_strong> – IPv4 address to connect to</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">port</literal_strong> – port to connect to</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">device</literal_strong> – device of the node to query</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">partition</literal_strong> – partition on the device</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">method</literal_strong> – HTTP method to request (‘GET’, ‘PUT’, ‘POST’, etc.)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">path</literal_strong> – request path</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">headers</literal_strong> – dictionary of headers</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">query_string</literal_strong> – request query string</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">ssl</literal_strong> – set True if SSL should be used (default: False)</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>HTTPConnection object</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'http_connect_raw()\ (in\ module\ swift.common.bufferedhttp)',\ u'swift.common.bufferedhttp.http_connect_raw',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="http_connect_raw" ids="swift.common.bufferedhttp.http_connect_raw" module="swift.common.bufferedhttp" names="swift.common.bufferedhttp.http_connect_raw"><desc_addname xml:space="preserve">swift.common.bufferedhttp.</desc_addname><desc_name xml:space="preserve">http_connect_raw</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ipaddr</desc_parameter><desc_parameter xml:space="preserve">port</desc_parameter><desc_parameter xml:space="preserve">method</desc_parameter><desc_parameter xml:space="preserve">path</desc_parameter><desc_parameter xml:space="preserve">headers=None</desc_parameter><desc_parameter xml:space="preserve">query_string=None</desc_parameter><desc_parameter xml:space="preserve">ssl=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Helper function to create an HTTPConnection object. If ssl is set True,
                        HTTPSConnection will be used. However, if ssl=False, BufferedHTTPConnection
                        will be used, which is buffered for backend Swift services.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">ipaddr</literal_strong> – IPv4 address to connect to</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">port</literal_strong> – port to connect to</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">method</literal_strong> – HTTP method to request (‘GET’, ‘PUT’, ‘POST’, etc.)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">path</literal_strong> – request path</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">headers</literal_strong> – dictionary of headers</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">query_string</literal_strong> – request query string</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">ssl</literal_strong> – set True if SSL should be used (default: False)</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>HTTPConnection object</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <target refid="constraints"></target>
        </section>
        <section dupnames="constraints" ids="constraints id4" names="constraints">
            <title>Constraints</title>
            <target ids="module-swift.common.constraints" ismod="True"></target>
            <index entries="['single',\ u'swift.common.constraints\ (module)',\ u'module-swift.common.constraints',\ '',\ None]"></index>
            <index entries="['single',\ u'FORMAT2CONTENT_TYPE\ (in\ module\ swift.common.constraints)',\ u'swift.common.constraints.FORMAT2CONTENT_TYPE',\ '',\ None]"></index>
            <desc desctype="data" domain="py" noindex="False" objtype="data">
                <desc_signature class="" first="False" fullname="FORMAT2CONTENT_TYPE" ids="swift.common.constraints.FORMAT2CONTENT_TYPE" module="swift.common.constraints" names="swift.common.constraints.FORMAT2CONTENT_TYPE"><desc_addname xml:space="preserve">swift.common.constraints.</desc_addname><desc_name xml:space="preserve">FORMAT2CONTENT_TYPE</desc_name><desc_annotation xml:space="preserve"> = {'xml': 'application/xml', 'plain': 'text/plain', 'json': 'application/json'}</desc_annotation></desc_signature>
                <desc_content>
                    <paragraph>Query string format= values to their corresponding content-type values</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'check_delete_headers()\ (in\ module\ swift.common.constraints)',\ u'swift.common.constraints.check_delete_headers',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="check_delete_headers" ids="swift.common.constraints.check_delete_headers" module="swift.common.constraints" names="swift.common.constraints.check_delete_headers"><desc_addname xml:space="preserve">swift.common.constraints.</desc_addname><desc_name xml:space="preserve">check_delete_headers</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">request</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Validate if ‘x-delete’ headers are have correct values
                        values should be positive integers and correspond to
                        a time in the future.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">request</literal_strong> – the swob request object</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>HTTPBadRequest in case of invalid values
                                    or None if values are ok</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'check_dir()\ (in\ module\ swift.common.constraints)',\ u'swift.common.constraints.check_dir',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="check_dir" ids="swift.common.constraints.check_dir" module="swift.common.constraints" names="swift.common.constraints.check_dir"><desc_addname xml:space="preserve">swift.common.constraints.</desc_addname><desc_name xml:space="preserve">check_dir</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">root</desc_parameter><desc_parameter xml:space="preserve">drive</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Verify that the path to the device is a directory and is a lesser
                        constraint that is enforced when a full mount_check isn’t possible
                        with, for instance, a VM using loopback or partitions.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">root</literal_strong> – base path where the dir is</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">drive</literal_strong> – drive name to be checked</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>True if it is a valid directoy, False otherwise</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'check_float()\ (in\ module\ swift.common.constraints)',\ u'swift.common.constraints.check_float',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="check_float" ids="swift.common.constraints.check_float" module="swift.common.constraints" names="swift.common.constraints.check_float"><desc_addname xml:space="preserve">swift.common.constraints.</desc_addname><desc_name xml:space="preserve">check_float</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">string</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Helper function for checking if a string can be converted to a float.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">string</literal_strong> – string to be verified as a float</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>True if the string can be converted to a float, False otherwise</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'check_metadata()\ (in\ module\ swift.common.constraints)',\ u'swift.common.constraints.check_metadata',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="check_metadata" ids="swift.common.constraints.check_metadata" module="swift.common.constraints" names="swift.common.constraints.check_metadata"><desc_addname xml:space="preserve">swift.common.constraints.</desc_addname><desc_name xml:space="preserve">check_metadata</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter><desc_parameter xml:space="preserve">target_type</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Check metadata sent in the request headers.  This should only check
                        that the metadata in the request given is valid.  Checks against
                        account/container overall metadata should be forwarded on to its
                        respective server to be checked.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">req</literal_strong> – request object</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">target_type</literal_strong> – str: one of: object, container, or account: indicates
                                            which type the target storage for the metadata is</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>HTTPBadRequest with bad metadata otherwise None</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'check_mount()\ (in\ module\ swift.common.constraints)',\ u'swift.common.constraints.check_mount',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="check_mount" ids="swift.common.constraints.check_mount" module="swift.common.constraints" names="swift.common.constraints.check_mount"><desc_addname xml:space="preserve">swift.common.constraints.</desc_addname><desc_name xml:space="preserve">check_mount</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">root</desc_parameter><desc_parameter xml:space="preserve">drive</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Verify that the path to the device is a mount point and mounted.  This
                        allows us to fast fail on drives that have been unmounted because of
                        issues, and also prevents us for accidentally filling up the root
                        partition.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">root</literal_strong> – base path where the devices are mounted</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">drive</literal_strong> – drive name to be checked</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>True if it is a valid mounted device, False otherwise</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'check_name_format()\ (in\ module\ swift.common.constraints)',\ u'swift.common.constraints.check_name_format',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="check_name_format" ids="swift.common.constraints.check_name_format" module="swift.common.constraints" names="swift.common.constraints.check_name_format"><desc_addname xml:space="preserve">swift.common.constraints.</desc_addname><desc_name xml:space="preserve">check_name_format</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">target_type</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Validate that the header contains valid account or container name.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">req</literal_strong> – HTTP request object</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> – header value to validate</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">target_type</literal_strong> – which header is being validated (Account or Container)</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>A properly encoded account name or container name</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>HTTPPreconditionFailed</literal_strong> – if account header
                                    is not well formatted.</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'check_object_creation()\ (in\ module\ swift.common.constraints)',\ u'swift.common.constraints.check_object_creation',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="check_object_creation" ids="swift.common.constraints.check_object_creation" module="swift.common.constraints" names="swift.common.constraints.check_object_creation"><desc_addname xml:space="preserve">swift.common.constraints.</desc_addname><desc_name xml:space="preserve">check_object_creation</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter><desc_parameter xml:space="preserve">object_name</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Check to ensure that everything is alright about an object to be created.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">req</literal_strong> – HTTP request object</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">object_name</literal_strong> – name of object to be created</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>HTTPRequestEntityTooLarge – the object is too large</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>HTTPLengthRequired – missing content-length header and not
                                    a chunked request</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>HTTPBadRequest – missing or bad content-type header, or
                                    bad metadata</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>HTTPNotImplemented – unsupported transfer-encoding header value</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'check_utf8()\ (in\ module\ swift.common.constraints)',\ u'swift.common.constraints.check_utf8',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="check_utf8" ids="swift.common.constraints.check_utf8" module="swift.common.constraints" names="swift.common.constraints.check_utf8"><desc_addname xml:space="preserve">swift.common.constraints.</desc_addname><desc_name xml:space="preserve">check_utf8</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">string</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Validate if a string is valid UTF-8 str or unicode and that it
                        does not contain any null character.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">string</literal_strong> – string to be validated</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>True if the string is valid utf-8 str or unicode and
                                    contains no null characters, False otherwise</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'reload_constraints()\ (in\ module\ swift.common.constraints)',\ u'swift.common.constraints.reload_constraints',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="reload_constraints" ids="swift.common.constraints.reload_constraints" module="swift.common.constraints" names="swift.common.constraints.reload_constraints"><desc_addname xml:space="preserve">swift.common.constraints.</desc_addname><desc_name xml:space="preserve">reload_constraints</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Parse SWIFT_CONF_FILE and reset module level global constraint attrs,
                        populating OVERRIDE_CONSTRAINTS AND EFFECTIVE_CONSTRAINTS along the way.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'valid_api_version()\ (in\ module\ swift.common.constraints)',\ u'swift.common.constraints.valid_api_version',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="valid_api_version" ids="swift.common.constraints.valid_api_version" module="swift.common.constraints" names="swift.common.constraints.valid_api_version"><desc_addname xml:space="preserve">swift.common.constraints.</desc_addname><desc_name xml:space="preserve">valid_api_version</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">version</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Checks if the requested version is valid.</paragraph>
                    <paragraph>Currently Swift only supports “v1” and “v1.0”.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'valid_timestamp()\ (in\ module\ swift.common.constraints)',\ u'swift.common.constraints.valid_timestamp',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="valid_timestamp" ids="swift.common.constraints.valid_timestamp" module="swift.common.constraints" names="swift.common.constraints.valid_timestamp"><desc_addname xml:space="preserve">swift.common.constraints.</desc_addname><desc_name xml:space="preserve">valid_timestamp</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">request</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Helper function to extract a timestamp from requests that require one.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">request</literal_strong> – the swob request object</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a valid Timestamp instance</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>HTTPBadRequest</literal_strong> – on missing or invalid X-Timestamp</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
        </section>
        <section ids="module-swift.common.container_sync_realms container-sync-realms" names="container\ sync\ realms">
            <title>Container Sync Realms</title>
            <index entries="['single',\ u'swift.common.container_sync_realms\ (module)',\ u'module-swift.common.container_sync_realms',\ '',\ None]"></index>
            <index entries="['single',\ u'ContainerSyncRealms\ (class\ in\ swift.common.container_sync_realms)',\ u'swift.common.container_sync_realms.ContainerSyncRealms',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ContainerSyncRealms" ids="swift.common.container_sync_realms.ContainerSyncRealms" module="swift.common.container_sync_realms" names="swift.common.container_sync_realms.ContainerSyncRealms"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.container_sync_realms.</desc_addname><desc_name xml:space="preserve">ContainerSyncRealms</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf_path</desc_parameter><desc_parameter xml:space="preserve">logger</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Loads and parses the container-sync-realms.conf, occasionally
                        checking the file’s mtime to see if it needs to be reloaded.</paragraph>
                    <index entries="['single',\ u'clusters()\ (swift.common.container_sync_realms.ContainerSyncRealms\ method)',\ u'swift.common.container_sync_realms.ContainerSyncRealms.clusters',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerSyncRealms" first="False" fullname="ContainerSyncRealms.clusters" ids="swift.common.container_sync_realms.ContainerSyncRealms.clusters" module="swift.common.container_sync_realms" names="swift.common.container_sync_realms.ContainerSyncRealms.clusters"><desc_name xml:space="preserve">clusters</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">realm</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns a list of clusters for the realm.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'endpoint()\ (swift.common.container_sync_realms.ContainerSyncRealms\ method)',\ u'swift.common.container_sync_realms.ContainerSyncRealms.endpoint',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerSyncRealms" first="False" fullname="ContainerSyncRealms.endpoint" ids="swift.common.container_sync_realms.ContainerSyncRealms.endpoint" module="swift.common.container_sync_realms" names="swift.common.container_sync_realms.ContainerSyncRealms.endpoint"><desc_name xml:space="preserve">endpoint</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">realm</desc_parameter><desc_parameter xml:space="preserve">cluster</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns the endpoint for the cluster in the realm.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_sig()\ (swift.common.container_sync_realms.ContainerSyncRealms\ method)',\ u'swift.common.container_sync_realms.ContainerSyncRealms.get_sig',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerSyncRealms" first="False" fullname="ContainerSyncRealms.get_sig" ids="swift.common.container_sync_realms.ContainerSyncRealms.get_sig" module="swift.common.container_sync_realms" names="swift.common.container_sync_realms.ContainerSyncRealms.get_sig"><desc_name xml:space="preserve">get_sig</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">request_method</desc_parameter><desc_parameter xml:space="preserve">path</desc_parameter><desc_parameter xml:space="preserve">x_timestamp</desc_parameter><desc_parameter xml:space="preserve">nonce</desc_parameter><desc_parameter xml:space="preserve">realm_key</desc_parameter><desc_parameter xml:space="preserve">user_key</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns the hexdigest string of the HMAC-SHA1 (RFC 2104) for
                                the information given.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">request_method</literal_strong> – HTTP method of the request.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">path</literal_strong> – The path to the resource.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">x_timestamp</literal_strong> – The X-Timestamp header value for the request.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">nonce</literal_strong> – A unique value for the request.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">realm_key</literal_strong> – Shared secret at the cluster operator level.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">user_key</literal_strong> – Shared secret at the user’s container level.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>hexdigest str of the HMAC-SHA1 for the request.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'key()\ (swift.common.container_sync_realms.ContainerSyncRealms\ method)',\ u'swift.common.container_sync_realms.ContainerSyncRealms.key',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerSyncRealms" first="False" fullname="ContainerSyncRealms.key" ids="swift.common.container_sync_realms.ContainerSyncRealms.key" module="swift.common.container_sync_realms" names="swift.common.container_sync_realms.ContainerSyncRealms.key"><desc_name xml:space="preserve">key</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">realm</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns the key for the realm.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'key2()\ (swift.common.container_sync_realms.ContainerSyncRealms\ method)',\ u'swift.common.container_sync_realms.ContainerSyncRealms.key2',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerSyncRealms" first="False" fullname="ContainerSyncRealms.key2" ids="swift.common.container_sync_realms.ContainerSyncRealms.key2" module="swift.common.container_sync_realms" names="swift.common.container_sync_realms.ContainerSyncRealms.key2"><desc_name xml:space="preserve">key2</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">realm</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns the key2 for the realm.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'realms()\ (swift.common.container_sync_realms.ContainerSyncRealms\ method)',\ u'swift.common.container_sync_realms.ContainerSyncRealms.realms',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerSyncRealms" first="False" fullname="ContainerSyncRealms.realms" ids="swift.common.container_sync_realms.ContainerSyncRealms.realms" module="swift.common.container_sync_realms" names="swift.common.container_sync_realms.ContainerSyncRealms.realms"><desc_name xml:space="preserve">realms</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns a list of realms.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'reload()\ (swift.common.container_sync_realms.ContainerSyncRealms\ method)',\ u'swift.common.container_sync_realms.ContainerSyncRealms.reload',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ContainerSyncRealms" first="False" fullname="ContainerSyncRealms.reload" ids="swift.common.container_sync_realms.ContainerSyncRealms.reload" module="swift.common.container_sync_realms" names="swift.common.container_sync_realms.ContainerSyncRealms.reload"><desc_name xml:space="preserve">reload</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Forces a reload of the conf file.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <target refid="direct-client"></target>
        </section>
        <section ids="module-swift.common.direct_client id5 direct-client" names="direct\ client direct_client">
            <title>Direct Client</title>
            <index entries="['single',\ u'swift.common.direct_client\ (module)',\ u'module-swift.common.direct_client',\ '',\ None]"></index>
            <paragraph>Internal client library for making calls directly to the servers rather than
                through the proxy.</paragraph>
            <index entries="['single',\ u'DirectClientException',\ u'swift.common.direct_client.DirectClientException',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="DirectClientException" ids="swift.common.direct_client.DirectClientException" module="swift.common.direct_client" names="swift.common.direct_client.DirectClientException"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.direct_client.</desc_addname><desc_name xml:space="preserve">DirectClientException</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">stype</desc_parameter><desc_parameter xml:space="preserve">method</desc_parameter><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">part</desc_parameter><desc_parameter xml:space="preserve">path</desc_parameter><desc_parameter xml:space="preserve">resp</desc_parameter><desc_parameter xml:space="preserve">host=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.ClientException" reftitle="swift.common.exceptions.ClientException"><literal classes="xref py py-class">swift.common.exceptions.ClientException</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'direct_delete_account()\ (in\ module\ swift.common.direct_client)',\ u'swift.common.direct_client.direct_delete_account',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="direct_delete_account" ids="swift.common.direct_client.direct_delete_account" module="swift.common.direct_client" names="swift.common.direct_client.direct_delete_account"><desc_addname xml:space="preserve">swift.common.direct_client.</desc_addname><desc_name xml:space="preserve">direct_delete_account</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">part</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">conn_timeout=5</desc_parameter><desc_parameter xml:space="preserve">response_timeout=15</desc_parameter><desc_parameter xml:space="preserve">headers=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                </desc_content>
            </desc>
            <index entries="['single',\ u'direct_delete_container()\ (in\ module\ swift.common.direct_client)',\ u'swift.common.direct_client.direct_delete_container',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="direct_delete_container" ids="swift.common.direct_client.direct_delete_container" module="swift.common.direct_client" names="swift.common.direct_client.direct_delete_container"><desc_addname xml:space="preserve">swift.common.direct_client.</desc_addname><desc_name xml:space="preserve">direct_delete_container</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">part</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">conn_timeout=5</desc_parameter><desc_parameter xml:space="preserve">response_timeout=15</desc_parameter><desc_parameter xml:space="preserve">headers=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Delete container directly from the container server.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">node</literal_strong> – node dictionary from the ring</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">part</literal_strong> – partition the container is on</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">account</literal_strong> – account name</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">container</literal_strong> – container name</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">conn_timeout</literal_strong> – timeout in seconds for establishing the connection</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">response_timeout</literal_strong> – timeout in seconds for getting the response</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">headers</literal_strong> – dict to be passed into HTTPConnection headers</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><reference internal="True" refid="swift.common.exceptions.ClientException" reftitle="swift.common.exceptions.ClientException"><literal_strong>ClientException</literal_strong></reference> – HTTP DELETE request failed</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'direct_delete_container_object()\ (in\ module\ swift.common.direct_client)',\ u'swift.common.direct_client.direct_delete_container_object',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="direct_delete_container_object" ids="swift.common.direct_client.direct_delete_container_object" module="swift.common.direct_client" names="swift.common.direct_client.direct_delete_container_object"><desc_addname xml:space="preserve">swift.common.direct_client.</desc_addname><desc_name xml:space="preserve">direct_delete_container_object</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">part</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">obj</desc_parameter><desc_parameter xml:space="preserve">conn_timeout=5</desc_parameter><desc_parameter xml:space="preserve">response_timeout=15</desc_parameter><desc_parameter xml:space="preserve">headers=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                </desc_content>
            </desc>
            <index entries="['single',\ u'direct_delete_object()\ (in\ module\ swift.common.direct_client)',\ u'swift.common.direct_client.direct_delete_object',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="direct_delete_object" ids="swift.common.direct_client.direct_delete_object" module="swift.common.direct_client" names="swift.common.direct_client.direct_delete_object"><desc_addname xml:space="preserve">swift.common.direct_client.</desc_addname><desc_name xml:space="preserve">direct_delete_object</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">part</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">obj</desc_parameter><desc_parameter xml:space="preserve">conn_timeout=5</desc_parameter><desc_parameter xml:space="preserve">response_timeout=15</desc_parameter><desc_parameter xml:space="preserve">headers=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Delete object directly from the object server.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">node</literal_strong> – node dictionary from the ring</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">part</literal_strong> – partition the container is on</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">account</literal_strong> – account name</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">container</literal_strong> – container name</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">obj</literal_strong> – object name</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">conn_timeout</literal_strong> – timeout in seconds for establishing the connection</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">response_timeout</literal_strong> – timeout in seconds for getting the response</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><reference internal="True" refid="swift.common.exceptions.ClientException" reftitle="swift.common.exceptions.ClientException"><literal_strong>ClientException</literal_strong></reference> – HTTP DELETE request failed</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'direct_get_account()\ (in\ module\ swift.common.direct_client)',\ u'swift.common.direct_client.direct_get_account',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="direct_get_account" ids="swift.common.direct_client.direct_get_account" module="swift.common.direct_client" names="swift.common.direct_client.direct_get_account"><desc_addname xml:space="preserve">swift.common.direct_client.</desc_addname><desc_name xml:space="preserve">direct_get_account</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">part</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">marker=None</desc_parameter><desc_parameter xml:space="preserve">limit=None</desc_parameter><desc_parameter xml:space="preserve">prefix=None</desc_parameter><desc_parameter xml:space="preserve">delimiter=None</desc_parameter><desc_parameter xml:space="preserve">conn_timeout=5</desc_parameter><desc_parameter xml:space="preserve">response_timeout=15</desc_parameter><desc_parameter xml:space="preserve">end_marker=None</desc_parameter><desc_parameter xml:space="preserve">reverse=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Get listings directly from the account server.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">node</literal_strong> – node dictionary from the ring</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">part</literal_strong> – partition the account is on</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">account</literal_strong> – account name</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">marker</literal_strong> – marker query</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">limit</literal_strong> – query limit</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">prefix</literal_strong> – prefix query</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">delimiter</literal_strong> – delimiter for the query</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">conn_timeout</literal_strong> – timeout in seconds for establishing the connection</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">response_timeout</literal_strong> – timeout in seconds for getting the response</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">end_marker</literal_strong> – end_marker query</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">reverse</literal_strong> – reverse the returned listing</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a tuple of (response headers, a list of containers) The response
                                    headers will HeaderKeyDict.</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'direct_get_container()\ (in\ module\ swift.common.direct_client)',\ u'swift.common.direct_client.direct_get_container',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="direct_get_container" ids="swift.common.direct_client.direct_get_container" module="swift.common.direct_client" names="swift.common.direct_client.direct_get_container"><desc_addname xml:space="preserve">swift.common.direct_client.</desc_addname><desc_name xml:space="preserve">direct_get_container</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">part</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">marker=None</desc_parameter><desc_parameter xml:space="preserve">limit=None</desc_parameter><desc_parameter xml:space="preserve">prefix=None</desc_parameter><desc_parameter xml:space="preserve">delimiter=None</desc_parameter><desc_parameter xml:space="preserve">conn_timeout=5</desc_parameter><desc_parameter xml:space="preserve">response_timeout=15</desc_parameter><desc_parameter xml:space="preserve">end_marker=None</desc_parameter><desc_parameter xml:space="preserve">reverse=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Get container listings directly from the container server.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">node</literal_strong> – node dictionary from the ring</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">part</literal_strong> – partition the container is on</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">account</literal_strong> – account name</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">container</literal_strong> – container name</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">marker</literal_strong> – marker query</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">limit</literal_strong> – query limit</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">prefix</literal_strong> – prefix query</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">delimiter</literal_strong> – delimiter for the query</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">conn_timeout</literal_strong> – timeout in seconds for establishing the connection</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">response_timeout</literal_strong> – timeout in seconds for getting the response</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">end_marker</literal_strong> – end_marker query</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">reverse</literal_strong> – reverse the returned listing</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a tuple of (response headers, a list of objects) The response
                                    headers will be a HeaderKeyDict.</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'direct_get_object()\ (in\ module\ swift.common.direct_client)',\ u'swift.common.direct_client.direct_get_object',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="direct_get_object" ids="swift.common.direct_client.direct_get_object" module="swift.common.direct_client" names="swift.common.direct_client.direct_get_object"><desc_addname xml:space="preserve">swift.common.direct_client.</desc_addname><desc_name xml:space="preserve">direct_get_object</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">part</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">obj</desc_parameter><desc_parameter xml:space="preserve">conn_timeout=5</desc_parameter><desc_parameter xml:space="preserve">response_timeout=15</desc_parameter><desc_parameter xml:space="preserve">resp_chunk_size=None</desc_parameter><desc_parameter xml:space="preserve">headers=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Get object directly from the object server.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">node</literal_strong> – node dictionary from the ring</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">part</literal_strong> – partition the container is on</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">account</literal_strong> – account name</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">container</literal_strong> – container name</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">obj</literal_strong> – object name</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">conn_timeout</literal_strong> – timeout in seconds for establishing the connection</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">response_timeout</literal_strong> – timeout in seconds for getting the response</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">resp_chunk_size</literal_strong> – if defined, chunk size of data to read.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">headers</literal_strong> – dict to be passed into HTTPConnection headers</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a tuple of (response headers, the object’s contents) The response
                                    headers will be a HeaderKeyDict.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><reference internal="True" refid="swift.common.exceptions.ClientException" reftitle="swift.common.exceptions.ClientException"><literal_strong>ClientException</literal_strong></reference> – HTTP GET request failed</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'direct_get_suffix_hashes()\ (in\ module\ swift.common.direct_client)',\ u'swift.common.direct_client.direct_get_suffix_hashes',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="direct_get_suffix_hashes" ids="swift.common.direct_client.direct_get_suffix_hashes" module="swift.common.direct_client" names="swift.common.direct_client.direct_get_suffix_hashes"><desc_addname xml:space="preserve">swift.common.direct_client.</desc_addname><desc_name xml:space="preserve">direct_get_suffix_hashes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">part</desc_parameter><desc_parameter xml:space="preserve">suffixes</desc_parameter><desc_parameter xml:space="preserve">conn_timeout=5</desc_parameter><desc_parameter xml:space="preserve">response_timeout=15</desc_parameter><desc_parameter xml:space="preserve">headers=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Get suffix hashes directly from the object server.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">node</literal_strong> – node dictionary from the ring</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">part</literal_strong> – partition the container is on</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">conn_timeout</literal_strong> – timeout in seconds for establishing the connection</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">response_timeout</literal_strong> – timeout in seconds for getting the response</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">headers</literal_strong> – dict to be passed into HTTPConnection headers</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>dict of suffix hashes</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><reference internal="True" refid="swift.common.exceptions.ClientException" reftitle="swift.common.exceptions.ClientException"><literal_strong>ClientException</literal_strong></reference> – HTTP REPLICATE request failed</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'direct_head_container()\ (in\ module\ swift.common.direct_client)',\ u'swift.common.direct_client.direct_head_container',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="direct_head_container" ids="swift.common.direct_client.direct_head_container" module="swift.common.direct_client" names="swift.common.direct_client.direct_head_container"><desc_addname xml:space="preserve">swift.common.direct_client.</desc_addname><desc_name xml:space="preserve">direct_head_container</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">part</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">conn_timeout=5</desc_parameter><desc_parameter xml:space="preserve">response_timeout=15</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Request container information directly from the container server.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">node</literal_strong> – node dictionary from the ring</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">part</literal_strong> – partition the container is on</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">account</literal_strong> – account name</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">container</literal_strong> – container name</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">conn_timeout</literal_strong> – timeout in seconds for establishing the connection</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">response_timeout</literal_strong> – timeout in seconds for getting the response</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a dict containing the response’s headers in a HeaderKeyDict</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><reference internal="True" refid="swift.common.exceptions.ClientException" reftitle="swift.common.exceptions.ClientException"><literal_strong>ClientException</literal_strong></reference> – HTTP HEAD request failed</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'direct_head_object()\ (in\ module\ swift.common.direct_client)',\ u'swift.common.direct_client.direct_head_object',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="direct_head_object" ids="swift.common.direct_client.direct_head_object" module="swift.common.direct_client" names="swift.common.direct_client.direct_head_object"><desc_addname xml:space="preserve">swift.common.direct_client.</desc_addname><desc_name xml:space="preserve">direct_head_object</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">part</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">obj</desc_parameter><desc_parameter xml:space="preserve">conn_timeout=5</desc_parameter><desc_parameter xml:space="preserve">response_timeout=15</desc_parameter><desc_parameter xml:space="preserve">headers=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Request object information directly from the object server.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">node</literal_strong> – node dictionary from the ring</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">part</literal_strong> – partition the container is on</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">account</literal_strong> – account name</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">container</literal_strong> – container name</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">obj</literal_strong> – object name</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">conn_timeout</literal_strong> – timeout in seconds for establishing the connection</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">response_timeout</literal_strong> – timeout in seconds for getting the response</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">headers</literal_strong> – dict to be passed into HTTPConnection headers</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a dict containing the response’s headers in a HeaderKeyDict</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><reference internal="True" refid="swift.common.exceptions.ClientException" reftitle="swift.common.exceptions.ClientException"><literal_strong>ClientException</literal_strong></reference> – HTTP HEAD request failed</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'direct_post_object()\ (in\ module\ swift.common.direct_client)',\ u'swift.common.direct_client.direct_post_object',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="direct_post_object" ids="swift.common.direct_client.direct_post_object" module="swift.common.direct_client" names="swift.common.direct_client.direct_post_object"><desc_addname xml:space="preserve">swift.common.direct_client.</desc_addname><desc_name xml:space="preserve">direct_post_object</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">part</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">headers</desc_parameter><desc_parameter xml:space="preserve">conn_timeout=5</desc_parameter><desc_parameter xml:space="preserve">response_timeout=15</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Direct update to object metadata on object server.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">node</literal_strong> – node dictionary from the ring</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">part</literal_strong> – partition the container is on</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">account</literal_strong> – account name</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">container</literal_strong> – container name</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> – object name</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">headers</literal_strong> – headers to store as metadata</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">conn_timeout</literal_strong> – timeout in seconds for establishing the connection</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">response_timeout</literal_strong> – timeout in seconds for getting the response</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><reference internal="True" refid="swift.common.exceptions.ClientException" reftitle="swift.common.exceptions.ClientException"><literal_strong>ClientException</literal_strong></reference> – HTTP POST request failed</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'direct_put_container_object()\ (in\ module\ swift.common.direct_client)',\ u'swift.common.direct_client.direct_put_container_object',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="direct_put_container_object" ids="swift.common.direct_client.direct_put_container_object" module="swift.common.direct_client" names="swift.common.direct_client.direct_put_container_object"><desc_addname xml:space="preserve">swift.common.direct_client.</desc_addname><desc_name xml:space="preserve">direct_put_container_object</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">part</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">obj</desc_parameter><desc_parameter xml:space="preserve">conn_timeout=5</desc_parameter><desc_parameter xml:space="preserve">response_timeout=15</desc_parameter><desc_parameter xml:space="preserve">headers=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                </desc_content>
            </desc>
            <index entries="['single',\ u'direct_put_object()\ (in\ module\ swift.common.direct_client)',\ u'swift.common.direct_client.direct_put_object',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="direct_put_object" ids="swift.common.direct_client.direct_put_object" module="swift.common.direct_client" names="swift.common.direct_client.direct_put_object"><desc_addname xml:space="preserve">swift.common.direct_client.</desc_addname><desc_name xml:space="preserve">direct_put_object</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node</desc_parameter><desc_parameter xml:space="preserve">part</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">contents</desc_parameter><desc_parameter xml:space="preserve">content_length=None</desc_parameter><desc_parameter xml:space="preserve">etag=None</desc_parameter><desc_parameter xml:space="preserve">content_type=None</desc_parameter><desc_parameter xml:space="preserve">headers=None</desc_parameter><desc_parameter xml:space="preserve">conn_timeout=5</desc_parameter><desc_parameter xml:space="preserve">response_timeout=15</desc_parameter><desc_parameter xml:space="preserve">chunk_size=65535</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Put object directly from the object server.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">node</literal_strong> – node dictionary from the ring</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">part</literal_strong> – partition the container is on</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">account</literal_strong> – account name</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">container</literal_strong> – container name</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> – object name</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">contents</literal_strong> – an iterable or string to read object data from</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">content_length</literal_strong> – value to send as content-length header</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">etag</literal_strong> – etag of contents</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">content_type</literal_strong> – value to send as content-type header</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">headers</literal_strong> – additional headers to include in the request</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">conn_timeout</literal_strong> – timeout in seconds for establishing the connection</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">response_timeout</literal_strong> – timeout in seconds for getting the response</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">chunk_size</literal_strong> – if defined, chunk size of data to send.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>etag from the server response</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><reference internal="True" refid="swift.common.exceptions.ClientException" reftitle="swift.common.exceptions.ClientException"><literal_strong>ClientException</literal_strong></reference> – HTTP PUT request failed</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'gen_headers()\ (in\ module\ swift.common.direct_client)',\ u'swift.common.direct_client.gen_headers',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="gen_headers" ids="swift.common.direct_client.gen_headers" module="swift.common.direct_client" names="swift.common.direct_client.gen_headers"><desc_addname xml:space="preserve">swift.common.direct_client.</desc_addname><desc_name xml:space="preserve">gen_headers</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">hdrs_in=None</desc_parameter><desc_parameter xml:space="preserve">add_ts=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                </desc_content>
            </desc>
            <index entries="['single',\ u'retry()\ (in\ module\ swift.common.direct_client)',\ u'swift.common.direct_client.retry',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="retry" ids="swift.common.direct_client.retry" module="swift.common.direct_client" names="swift.common.direct_client.retry"><desc_addname xml:space="preserve">swift.common.direct_client.</desc_addname><desc_name xml:space="preserve">retry</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">func</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Helper function to retry a given function a number of times.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">func</literal_strong> – callable to be called</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">retries</literal_strong> – number of retries</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">error_log</literal_strong> – logger for errors</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">args</literal_strong> – arguments to send to func</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">kwargs</literal_strong> – keyward arguments to send to func (if retries or
                                            error_log are sent, they will be deleted from kwargs
                                            before sending on to func)</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>result of func</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><reference internal="True" refid="swift.common.exceptions.ClientException" reftitle="swift.common.exceptions.ClientException"><literal_strong>ClientException</literal_strong></reference> – all retries failed</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <target refid="exceptions"></target>
        </section>
        <section dupnames="exceptions" ids="exceptions id6" names="exceptions">
            <title>Exceptions</title>
            <target ids="module-swift.common.exceptions" ismod="True"></target>
            <index entries="['single',\ u'swift.common.exceptions\ (module)',\ u'module-swift.common.exceptions',\ '',\ None]"></index>
            <index entries="['single',\ u'APIVersionError',\ u'swift.common.exceptions.APIVersionError',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="APIVersionError" ids="swift.common.exceptions.APIVersionError" module="swift.common.exceptions" names="swift.common.exceptions.APIVersionError"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">APIVersionError</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.SwiftException" reftitle="swift.common.exceptions.SwiftException"><literal classes="xref py py-class">swift.common.exceptions.SwiftException</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ChunkReadError',\ u'swift.common.exceptions.ChunkReadError',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="ChunkReadError" ids="swift.common.exceptions.ChunkReadError" module="swift.common.exceptions" names="swift.common.exceptions.ChunkReadError"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">ChunkReadError</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.SwiftException" reftitle="swift.common.exceptions.SwiftException"><literal classes="xref py py-class">swift.common.exceptions.SwiftException</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ChunkReadTimeout',\ u'swift.common.exceptions.ChunkReadTimeout',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="ChunkReadTimeout" ids="swift.common.exceptions.ChunkReadTimeout" module="swift.common.exceptions" names="swift.common.exceptions.ChunkReadTimeout"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">ChunkReadTimeout</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">seconds=None</desc_parameter><desc_parameter xml:space="preserve">exception=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">eventlet.timeout.Timeout</literal></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ChunkWriteTimeout',\ u'swift.common.exceptions.ChunkWriteTimeout',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="ChunkWriteTimeout" ids="swift.common.exceptions.ChunkWriteTimeout" module="swift.common.exceptions" names="swift.common.exceptions.ChunkWriteTimeout"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">ChunkWriteTimeout</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">seconds=None</desc_parameter><desc_parameter xml:space="preserve">exception=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">eventlet.timeout.Timeout</literal></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ClientException',\ u'swift.common.exceptions.ClientException',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="ClientException" ids="swift.common.exceptions.ClientException" module="swift.common.exceptions" names="swift.common.exceptions.ClientException"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">ClientException</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">msg</desc_parameter><desc_parameter xml:space="preserve">http_scheme=''</desc_parameter><desc_parameter xml:space="preserve">http_host=''</desc_parameter><desc_parameter xml:space="preserve">http_port=''</desc_parameter><desc_parameter xml:space="preserve">http_path=''</desc_parameter><desc_parameter xml:space="preserve">http_query=''</desc_parameter><desc_parameter xml:space="preserve">http_status=None</desc_parameter><desc_parameter xml:space="preserve">http_reason=''</desc_parameter><desc_parameter xml:space="preserve">http_device=''</desc_parameter><desc_parameter xml:space="preserve">http_response_content=''</desc_parameter><desc_parameter xml:space="preserve">http_headers=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">exceptions.Exception</literal></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ConnectionTimeout',\ u'swift.common.exceptions.ConnectionTimeout',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="ConnectionTimeout" ids="swift.common.exceptions.ConnectionTimeout" module="swift.common.exceptions" names="swift.common.exceptions.ConnectionTimeout"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">ConnectionTimeout</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">seconds=None</desc_parameter><desc_parameter xml:space="preserve">exception=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">eventlet.timeout.Timeout</literal></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'DeviceUnavailable',\ u'swift.common.exceptions.DeviceUnavailable',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="DeviceUnavailable" ids="swift.common.exceptions.DeviceUnavailable" module="swift.common.exceptions" names="swift.common.exceptions.DeviceUnavailable"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">DeviceUnavailable</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.SwiftException" reftitle="swift.common.exceptions.SwiftException"><literal classes="xref py py-class">swift.common.exceptions.SwiftException</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'DiskFileCollision',\ u'swift.common.exceptions.DiskFileCollision',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="DiskFileCollision" ids="swift.common.exceptions.DiskFileCollision" module="swift.common.exceptions" names="swift.common.exceptions.DiskFileCollision"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">DiskFileCollision</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.DiskFileError" reftitle="swift.common.exceptions.DiskFileError"><literal classes="xref py py-class">swift.common.exceptions.DiskFileError</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'DiskFileDeleted',\ u'swift.common.exceptions.DiskFileDeleted',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="DiskFileDeleted" ids="swift.common.exceptions.DiskFileDeleted" module="swift.common.exceptions" names="swift.common.exceptions.DiskFileDeleted"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">DiskFileDeleted</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">metadata=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.DiskFileNotExist" reftitle="swift.common.exceptions.DiskFileNotExist"><literal classes="xref py py-class">swift.common.exceptions.DiskFileNotExist</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'DiskFileDeviceUnavailable',\ u'swift.common.exceptions.DiskFileDeviceUnavailable',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="DiskFileDeviceUnavailable" ids="swift.common.exceptions.DiskFileDeviceUnavailable" module="swift.common.exceptions" names="swift.common.exceptions.DiskFileDeviceUnavailable"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">DiskFileDeviceUnavailable</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.DiskFileError" reftitle="swift.common.exceptions.DiskFileError"><literal classes="xref py py-class">swift.common.exceptions.DiskFileError</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'DiskFileError',\ u'swift.common.exceptions.DiskFileError',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="DiskFileError" ids="swift.common.exceptions.DiskFileError" module="swift.common.exceptions" names="swift.common.exceptions.DiskFileError"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">DiskFileError</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.SwiftException" reftitle="swift.common.exceptions.SwiftException"><literal classes="xref py py-class">swift.common.exceptions.SwiftException</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'DiskFileExpired',\ u'swift.common.exceptions.DiskFileExpired',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="DiskFileExpired" ids="swift.common.exceptions.DiskFileExpired" module="swift.common.exceptions" names="swift.common.exceptions.DiskFileExpired"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">DiskFileExpired</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">metadata=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.DiskFileDeleted" reftitle="swift.common.exceptions.DiskFileDeleted"><literal classes="xref py py-class">swift.common.exceptions.DiskFileDeleted</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'DiskFileNoSpace',\ u'swift.common.exceptions.DiskFileNoSpace',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="DiskFileNoSpace" ids="swift.common.exceptions.DiskFileNoSpace" module="swift.common.exceptions" names="swift.common.exceptions.DiskFileNoSpace"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">DiskFileNoSpace</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.DiskFileError" reftitle="swift.common.exceptions.DiskFileError"><literal classes="xref py py-class">swift.common.exceptions.DiskFileError</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'DiskFileNotExist',\ u'swift.common.exceptions.DiskFileNotExist',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="DiskFileNotExist" ids="swift.common.exceptions.DiskFileNotExist" module="swift.common.exceptions" names="swift.common.exceptions.DiskFileNotExist"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">DiskFileNotExist</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.DiskFileError" reftitle="swift.common.exceptions.DiskFileError"><literal classes="xref py py-class">swift.common.exceptions.DiskFileError</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'DiskFileNotOpen',\ u'swift.common.exceptions.DiskFileNotOpen',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="DiskFileNotOpen" ids="swift.common.exceptions.DiskFileNotOpen" module="swift.common.exceptions" names="swift.common.exceptions.DiskFileNotOpen"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">DiskFileNotOpen</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.DiskFileError" reftitle="swift.common.exceptions.DiskFileError"><literal classes="xref py py-class">swift.common.exceptions.DiskFileError</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'DiskFileQuarantined',\ u'swift.common.exceptions.DiskFileQuarantined',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="DiskFileQuarantined" ids="swift.common.exceptions.DiskFileQuarantined" module="swift.common.exceptions" names="swift.common.exceptions.DiskFileQuarantined"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">DiskFileQuarantined</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.DiskFileError" reftitle="swift.common.exceptions.DiskFileError"><literal classes="xref py py-class">swift.common.exceptions.DiskFileError</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'DiskFileXattrNotSupported',\ u'swift.common.exceptions.DiskFileXattrNotSupported',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="DiskFileXattrNotSupported" ids="swift.common.exceptions.DiskFileXattrNotSupported" module="swift.common.exceptions" names="swift.common.exceptions.DiskFileXattrNotSupported"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">DiskFileXattrNotSupported</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.DiskFileError" reftitle="swift.common.exceptions.DiskFileError"><literal classes="xref py py-class">swift.common.exceptions.DiskFileError</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'DriveNotMounted',\ u'swift.common.exceptions.DriveNotMounted',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="DriveNotMounted" ids="swift.common.exceptions.DriveNotMounted" module="swift.common.exceptions" names="swift.common.exceptions.DriveNotMounted"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">DriveNotMounted</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.SwiftException" reftitle="swift.common.exceptions.SwiftException"><literal classes="xref py py-class">swift.common.exceptions.SwiftException</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'DuplicateDeviceError',\ u'swift.common.exceptions.DuplicateDeviceError',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="DuplicateDeviceError" ids="swift.common.exceptions.DuplicateDeviceError" module="swift.common.exceptions" names="swift.common.exceptions.DuplicateDeviceError"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">DuplicateDeviceError</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.RingBuilderError" reftitle="swift.common.exceptions.RingBuilderError"><literal classes="xref py py-class">swift.common.exceptions.RingBuilderError</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'EmptyRingError',\ u'swift.common.exceptions.EmptyRingError',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="EmptyRingError" ids="swift.common.exceptions.EmptyRingError" module="swift.common.exceptions" names="swift.common.exceptions.EmptyRingError"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">EmptyRingError</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.RingBuilderError" reftitle="swift.common.exceptions.RingBuilderError"><literal classes="xref py py-class">swift.common.exceptions.RingBuilderError</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'EncryptionException',\ u'swift.common.exceptions.EncryptionException',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="EncryptionException" ids="swift.common.exceptions.EncryptionException" module="swift.common.exceptions" names="swift.common.exceptions.EncryptionException"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">EncryptionException</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.SwiftException" reftitle="swift.common.exceptions.SwiftException"><literal classes="xref py py-class">swift.common.exceptions.SwiftException</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'FileNotFoundError',\ u'swift.common.exceptions.FileNotFoundError',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="FileNotFoundError" ids="swift.common.exceptions.FileNotFoundError" module="swift.common.exceptions" names="swift.common.exceptions.FileNotFoundError"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">FileNotFoundError</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.SwiftException" reftitle="swift.common.exceptions.SwiftException"><literal classes="xref py py-class">swift.common.exceptions.SwiftException</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'FooterNotSupported',\ u'swift.common.exceptions.FooterNotSupported',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="FooterNotSupported" ids="swift.common.exceptions.FooterNotSupported" module="swift.common.exceptions" names="swift.common.exceptions.FooterNotSupported"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">FooterNotSupported</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.SwiftException" reftitle="swift.common.exceptions.SwiftException"><literal classes="xref py py-class">swift.common.exceptions.SwiftException</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'InsufficientStorage',\ u'swift.common.exceptions.InsufficientStorage',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="InsufficientStorage" ids="swift.common.exceptions.InsufficientStorage" module="swift.common.exceptions" names="swift.common.exceptions.InsufficientStorage"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">InsufficientStorage</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.SwiftException" reftitle="swift.common.exceptions.SwiftException"><literal classes="xref py py-class">swift.common.exceptions.SwiftException</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'InvalidAccountInfo',\ u'swift.common.exceptions.InvalidAccountInfo',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="InvalidAccountInfo" ids="swift.common.exceptions.InvalidAccountInfo" module="swift.common.exceptions" names="swift.common.exceptions.InvalidAccountInfo"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">InvalidAccountInfo</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.SwiftException" reftitle="swift.common.exceptions.SwiftException"><literal classes="xref py py-class">swift.common.exceptions.SwiftException</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'InvalidPidFileException',\ u'swift.common.exceptions.InvalidPidFileException',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="InvalidPidFileException" ids="swift.common.exceptions.InvalidPidFileException" module="swift.common.exceptions" names="swift.common.exceptions.InvalidPidFileException"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">InvalidPidFileException</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">exceptions.Exception</literal></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'InvalidTimestamp',\ u'swift.common.exceptions.InvalidTimestamp',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="InvalidTimestamp" ids="swift.common.exceptions.InvalidTimestamp" module="swift.common.exceptions" names="swift.common.exceptions.InvalidTimestamp"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">InvalidTimestamp</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.SwiftException" reftitle="swift.common.exceptions.SwiftException"><literal classes="xref py py-class">swift.common.exceptions.SwiftException</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ListingIterError',\ u'swift.common.exceptions.ListingIterError',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="ListingIterError" ids="swift.common.exceptions.ListingIterError" module="swift.common.exceptions" names="swift.common.exceptions.ListingIterError"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">ListingIterError</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.SwiftException" reftitle="swift.common.exceptions.SwiftException"><literal classes="xref py py-class">swift.common.exceptions.SwiftException</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ListingIterNotAuthorized',\ u'swift.common.exceptions.ListingIterNotAuthorized',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="ListingIterNotAuthorized" ids="swift.common.exceptions.ListingIterNotAuthorized" module="swift.common.exceptions" names="swift.common.exceptions.ListingIterNotAuthorized"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">ListingIterNotAuthorized</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">aresp</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.ListingIterError" reftitle="swift.common.exceptions.ListingIterError"><literal classes="xref py py-class">swift.common.exceptions.ListingIterError</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ListingIterNotFound',\ u'swift.common.exceptions.ListingIterNotFound',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="ListingIterNotFound" ids="swift.common.exceptions.ListingIterNotFound" module="swift.common.exceptions" names="swift.common.exceptions.ListingIterNotFound"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">ListingIterNotFound</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.ListingIterError" reftitle="swift.common.exceptions.ListingIterError"><literal classes="xref py py-class">swift.common.exceptions.ListingIterError</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'LockTimeout',\ u'swift.common.exceptions.LockTimeout',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="LockTimeout" ids="swift.common.exceptions.LockTimeout" module="swift.common.exceptions" names="swift.common.exceptions.LockTimeout"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">LockTimeout</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">seconds=None</desc_parameter><desc_parameter xml:space="preserve">msg=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.MessageTimeout" reftitle="swift.common.exceptions.MessageTimeout"><literal classes="xref py py-class">swift.common.exceptions.MessageTimeout</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'MessageTimeout',\ u'swift.common.exceptions.MessageTimeout',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="MessageTimeout" ids="swift.common.exceptions.MessageTimeout" module="swift.common.exceptions" names="swift.common.exceptions.MessageTimeout"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">MessageTimeout</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">seconds=None</desc_parameter><desc_parameter xml:space="preserve">msg=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">eventlet.timeout.Timeout</literal></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'MimeInvalid',\ u'swift.common.exceptions.MimeInvalid',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="MimeInvalid" ids="swift.common.exceptions.MimeInvalid" module="swift.common.exceptions" names="swift.common.exceptions.MimeInvalid"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">MimeInvalid</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.SwiftException" reftitle="swift.common.exceptions.SwiftException"><literal classes="xref py py-class">swift.common.exceptions.SwiftException</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'MultiphasePUTNotSupported',\ u'swift.common.exceptions.MultiphasePUTNotSupported',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="MultiphasePUTNotSupported" ids="swift.common.exceptions.MultiphasePUTNotSupported" module="swift.common.exceptions" names="swift.common.exceptions.MultiphasePUTNotSupported"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">MultiphasePUTNotSupported</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.SwiftException" reftitle="swift.common.exceptions.SwiftException"><literal classes="xref py py-class">swift.common.exceptions.SwiftException</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'PathNotDir',\ u'swift.common.exceptions.PathNotDir',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="PathNotDir" ids="swift.common.exceptions.PathNotDir" module="swift.common.exceptions" names="swift.common.exceptions.PathNotDir"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">PathNotDir</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">exceptions.OSError</literal></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'PermissionError',\ u'swift.common.exceptions.PermissionError',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="PermissionError" ids="swift.common.exceptions.PermissionError" module="swift.common.exceptions" names="swift.common.exceptions.PermissionError"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">PermissionError</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.SwiftException" reftitle="swift.common.exceptions.SwiftException"><literal classes="xref py py-class">swift.common.exceptions.SwiftException</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'PutterConnectError',\ u'swift.common.exceptions.PutterConnectError',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="PutterConnectError" ids="swift.common.exceptions.PutterConnectError" module="swift.common.exceptions" names="swift.common.exceptions.PutterConnectError"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">PutterConnectError</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">status=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">exceptions.Exception</literal></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'RangeAlreadyComplete',\ u'swift.common.exceptions.RangeAlreadyComplete',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="RangeAlreadyComplete" ids="swift.common.exceptions.RangeAlreadyComplete" module="swift.common.exceptions" names="swift.common.exceptions.RangeAlreadyComplete"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">RangeAlreadyComplete</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.SwiftException" reftitle="swift.common.exceptions.SwiftException"><literal classes="xref py py-class">swift.common.exceptions.SwiftException</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ReplicationException',\ u'swift.common.exceptions.ReplicationException',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="ReplicationException" ids="swift.common.exceptions.ReplicationException" module="swift.common.exceptions" names="swift.common.exceptions.ReplicationException"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">ReplicationException</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">exceptions.Exception</literal></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ReplicationLockTimeout',\ u'swift.common.exceptions.ReplicationLockTimeout',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="ReplicationLockTimeout" ids="swift.common.exceptions.ReplicationLockTimeout" module="swift.common.exceptions" names="swift.common.exceptions.ReplicationLockTimeout"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">ReplicationLockTimeout</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">seconds=None</desc_parameter><desc_parameter xml:space="preserve">msg=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.LockTimeout" reftitle="swift.common.exceptions.LockTimeout"><literal classes="xref py py-class">swift.common.exceptions.LockTimeout</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ResponseTimeout',\ u'swift.common.exceptions.ResponseTimeout',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="ResponseTimeout" ids="swift.common.exceptions.ResponseTimeout" module="swift.common.exceptions" names="swift.common.exceptions.ResponseTimeout"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">ResponseTimeout</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">seconds=None</desc_parameter><desc_parameter xml:space="preserve">exception=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">eventlet.timeout.Timeout</literal></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'RingBuilderError',\ u'swift.common.exceptions.RingBuilderError',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="RingBuilderError" ids="swift.common.exceptions.RingBuilderError" module="swift.common.exceptions" names="swift.common.exceptions.RingBuilderError"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">RingBuilderError</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.SwiftException" reftitle="swift.common.exceptions.SwiftException"><literal classes="xref py py-class">swift.common.exceptions.SwiftException</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'RingLoadError',\ u'swift.common.exceptions.RingLoadError',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="RingLoadError" ids="swift.common.exceptions.RingLoadError" module="swift.common.exceptions" names="swift.common.exceptions.RingLoadError"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">RingLoadError</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.SwiftException" reftitle="swift.common.exceptions.SwiftException"><literal classes="xref py py-class">swift.common.exceptions.SwiftException</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'RingValidationError',\ u'swift.common.exceptions.RingValidationError',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="RingValidationError" ids="swift.common.exceptions.RingValidationError" module="swift.common.exceptions" names="swift.common.exceptions.RingValidationError"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">RingValidationError</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.RingBuilderError" reftitle="swift.common.exceptions.RingBuilderError"><literal classes="xref py py-class">swift.common.exceptions.RingBuilderError</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'SegmentError',\ u'swift.common.exceptions.SegmentError',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="SegmentError" ids="swift.common.exceptions.SegmentError" module="swift.common.exceptions" names="swift.common.exceptions.SegmentError"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">SegmentError</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.SwiftException" reftitle="swift.common.exceptions.SwiftException"><literal classes="xref py py-class">swift.common.exceptions.SwiftException</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'SuffixSyncError',\ u'swift.common.exceptions.SuffixSyncError',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="SuffixSyncError" ids="swift.common.exceptions.SuffixSyncError" module="swift.common.exceptions" names="swift.common.exceptions.SuffixSyncError"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">SuffixSyncError</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.SwiftException" reftitle="swift.common.exceptions.SwiftException"><literal classes="xref py py-class">swift.common.exceptions.SwiftException</literal></reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'SwiftException',\ u'swift.common.exceptions.SwiftException',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="SwiftException" ids="swift.common.exceptions.SwiftException" module="swift.common.exceptions" names="swift.common.exceptions.SwiftException"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">SwiftException</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">exceptions.Exception</literal></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'UnPicklingError',\ u'swift.common.exceptions.UnPicklingError',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="UnPicklingError" ids="swift.common.exceptions.UnPicklingError" module="swift.common.exceptions" names="swift.common.exceptions.UnPicklingError"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.exceptions.</desc_addname><desc_name xml:space="preserve">UnPicklingError</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.exceptions.SwiftException" reftitle="swift.common.exceptions.SwiftException"><literal classes="xref py py-class">swift.common.exceptions.SwiftException</literal></reference></paragraph>
                </desc_content>
            </desc>
            <target refid="internal-client"></target>
        </section>
        <section ids="module-swift.common.internal_client id7 internal-client" names="internal\ client internal_client">
            <title>Internal Client</title>
            <index entries="['single',\ u'swift.common.internal_client\ (module)',\ u'module-swift.common.internal_client',\ '',\ None]"></index>
            <index entries="['single',\ u'CompressingFileReader\ (class\ in\ swift.common.internal_client)',\ u'swift.common.internal_client.CompressingFileReader',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="CompressingFileReader" ids="swift.common.internal_client.CompressingFileReader" module="swift.common.internal_client" names="swift.common.internal_client.CompressingFileReader"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.internal_client.</desc_addname><desc_name xml:space="preserve">CompressingFileReader</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">file_obj</desc_parameter><desc_parameter xml:space="preserve">compresslevel=9</desc_parameter><desc_parameter xml:space="preserve">chunk_size=4096</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Wrapper for file object to compress object while reading.</paragraph>
                    <paragraph>Can be used to wrap file objects passed to InternalClient.upload_object().</paragraph>
                    <paragraph>Used in testing of InternalClient.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">file_obj</literal_strong> – File object to wrap.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">compresslevel</literal_strong> – Compression level, defaults to 9.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">chunk_size</literal_strong> – Size of chunks read when iterating using object,
                                            defaults to 4096.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                    <index entries="['single',\ u'next()\ (swift.common.internal_client.CompressingFileReader\ method)',\ u'swift.common.internal_client.CompressingFileReader.next',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="CompressingFileReader" first="False" fullname="CompressingFileReader.next" ids="swift.common.internal_client.CompressingFileReader.next" module="swift.common.internal_client" names="swift.common.internal_client.CompressingFileReader.next"><desc_name xml:space="preserve">next</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'read()\ (swift.common.internal_client.CompressingFileReader\ method)',\ u'swift.common.internal_client.CompressingFileReader.read',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="CompressingFileReader" first="False" fullname="CompressingFileReader.read" ids="swift.common.internal_client.CompressingFileReader.read" module="swift.common.internal_client" names="swift.common.internal_client.CompressingFileReader.read"><desc_name xml:space="preserve">read</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Reads a chunk from the file object.</paragraph>
                            <paragraph>Params are passed directly to the underlying file object’s read().</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>Compressed chunk from file object.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'seek()\ (swift.common.internal_client.CompressingFileReader\ method)',\ u'swift.common.internal_client.CompressingFileReader.seek',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="CompressingFileReader" first="False" fullname="CompressingFileReader.seek" ids="swift.common.internal_client.CompressingFileReader.seek" module="swift.common.internal_client" names="swift.common.internal_client.CompressingFileReader.seek"><desc_name xml:space="preserve">seek</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">offset</desc_parameter><desc_parameter xml:space="preserve">whence=0</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_initial_state()\ (swift.common.internal_client.CompressingFileReader\ method)',\ u'swift.common.internal_client.CompressingFileReader.set_initial_state',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="CompressingFileReader" first="False" fullname="CompressingFileReader.set_initial_state" ids="swift.common.internal_client.CompressingFileReader.set_initial_state" module="swift.common.internal_client" names="swift.common.internal_client.CompressingFileReader.set_initial_state"><desc_name xml:space="preserve">set_initial_state</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Sets the object to the state needed for the first read.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'InternalClient\ (class\ in\ swift.common.internal_client)',\ u'swift.common.internal_client.InternalClient',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="InternalClient" ids="swift.common.internal_client.InternalClient" module="swift.common.internal_client" names="swift.common.internal_client.InternalClient"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.internal_client.</desc_addname><desc_name xml:space="preserve">InternalClient</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf_path</desc_parameter><desc_parameter xml:space="preserve">user_agent</desc_parameter><desc_parameter xml:space="preserve">request_tries</desc_parameter><desc_parameter xml:space="preserve">allow_modify_pipeline=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>An internal client that uses a swift proxy app to make requests to Swift.</paragraph>
                    <paragraph>This client will exponentially slow down for retries.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">conf_path</literal_strong> – Full path to proxy config.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">user_agent</literal_strong> – User agent to be sent to requests to Swift.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">request_tries</literal_strong> – Number of tries before InternalClient.make_request()
                                            gives up.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                    <index entries="['single',\ u'account_ring\ (swift.common.internal_client.InternalClient\ attribute)',\ u'swift.common.internal_client.InternalClient.account_ring',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="InternalClient" first="False" fullname="InternalClient.account_ring" ids="swift.common.internal_client.InternalClient.account_ring" module="swift.common.internal_client" names="swift.common.internal_client.InternalClient.account_ring"><desc_name xml:space="preserve">account_ring</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'auto_create_account_prefix\ (swift.common.internal_client.InternalClient\ attribute)',\ u'swift.common.internal_client.InternalClient.auto_create_account_prefix',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="InternalClient" first="False" fullname="InternalClient.auto_create_account_prefix" ids="swift.common.internal_client.InternalClient.auto_create_account_prefix" module="swift.common.internal_client" names="swift.common.internal_client.InternalClient.auto_create_account_prefix"><desc_name xml:space="preserve">auto_create_account_prefix</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'container_exists()\ (swift.common.internal_client.InternalClient\ method)',\ u'swift.common.internal_client.InternalClient.container_exists',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="InternalClient" first="False" fullname="InternalClient.container_exists" ids="swift.common.internal_client.InternalClient.container_exists" module="swift.common.internal_client" names="swift.common.internal_client.InternalClient.container_exists"><desc_name xml:space="preserve">container_exists</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Checks to see if a container exists.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – The container’s account.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> – Container to check.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><reference internal="True" refid="swift.common.internal_client.UnexpectedResponse" reftitle="swift.common.internal_client.UnexpectedResponse"><literal_strong>UnexpectedResponse</literal_strong></reference> – Exception raised when requests fail
                                                    to get a response with an acceptable status</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong>Exception</literal_strong> – Exception is raised when code fails in an
                                                    unexpected way.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>True if container exists, false otherwise.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'container_ring\ (swift.common.internal_client.InternalClient\ attribute)',\ u'swift.common.internal_client.InternalClient.container_ring',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="InternalClient" first="False" fullname="InternalClient.container_ring" ids="swift.common.internal_client.InternalClient.container_ring" module="swift.common.internal_client" names="swift.common.internal_client.InternalClient.container_ring"><desc_name xml:space="preserve">container_ring</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'create_container()\ (swift.common.internal_client.InternalClient\ method)',\ u'swift.common.internal_client.InternalClient.create_container',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="InternalClient" first="False" fullname="InternalClient.create_container" ids="swift.common.internal_client.InternalClient.create_container" module="swift.common.internal_client" names="swift.common.internal_client.InternalClient.create_container"><desc_name xml:space="preserve">create_container</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">headers=None</desc_parameter><desc_parameter xml:space="preserve">acceptable_statuses=(2</desc_parameter><desc_parameter xml:space="preserve">)</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Creates container.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – The container’s account.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> – Container to create.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">headers</literal_strong> – Defaults to empty dict.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">acceptable_statuses</literal_strong> – List of status for valid responses,
                                                    defaults to (2,).</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><reference internal="True" refid="swift.common.internal_client.UnexpectedResponse" reftitle="swift.common.internal_client.UnexpectedResponse"><literal_strong>UnexpectedResponse</literal_strong></reference> – Exception raised when requests fail
                                                    to get a response with an acceptable status</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong>Exception</literal_strong> – Exception is raised when code fails in an
                                                    unexpected way.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'delete_container()\ (swift.common.internal_client.InternalClient\ method)',\ u'swift.common.internal_client.InternalClient.delete_container',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="InternalClient" first="False" fullname="InternalClient.delete_container" ids="swift.common.internal_client.InternalClient.delete_container" module="swift.common.internal_client" names="swift.common.internal_client.InternalClient.delete_container"><desc_name xml:space="preserve">delete_container</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">acceptable_statuses=(2</desc_parameter><desc_parameter xml:space="preserve">404)</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Deletes a container.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – The container’s account.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> – Container to delete.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">acceptable_statuses</literal_strong> – List of status for valid responses,
                                                    defaults to (2, HTTP_NOT_FOUND).</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><reference internal="True" refid="swift.common.internal_client.UnexpectedResponse" reftitle="swift.common.internal_client.UnexpectedResponse"><literal_strong>UnexpectedResponse</literal_strong></reference> – Exception raised when requests fail
                                                    to get a response with an acceptable status</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong>Exception</literal_strong> – Exception is raised when code fails in an
                                                    unexpected way.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'delete_object()\ (swift.common.internal_client.InternalClient\ method)',\ u'swift.common.internal_client.InternalClient.delete_object',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="InternalClient" first="False" fullname="InternalClient.delete_object" ids="swift.common.internal_client.InternalClient.delete_object" module="swift.common.internal_client" names="swift.common.internal_client.InternalClient.delete_object"><desc_name xml:space="preserve">delete_object</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">obj</desc_parameter><desc_parameter xml:space="preserve">acceptable_statuses=(2</desc_parameter><desc_parameter xml:space="preserve">404)</desc_parameter><desc_parameter xml:space="preserve">headers=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Deletes an object.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – The object’s account.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> – The object’s container.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">obj</literal_strong> – The object.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">acceptable_statuses</literal_strong> – List of status for valid responses,
                                                    defaults to (2, HTTP_NOT_FOUND).</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">headers</literal_strong> – extra headers to send with request</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><reference internal="True" refid="swift.common.internal_client.UnexpectedResponse" reftitle="swift.common.internal_client.UnexpectedResponse"><literal_strong>UnexpectedResponse</literal_strong></reference> – Exception raised when requests fail
                                                    to get a response with an acceptable status</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong>Exception</literal_strong> – Exception is raised when code fails in an
                                                    unexpected way.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_account_info()\ (swift.common.internal_client.InternalClient\ method)',\ u'swift.common.internal_client.InternalClient.get_account_info',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="InternalClient" first="False" fullname="InternalClient.get_account_info" ids="swift.common.internal_client.InternalClient.get_account_info" module="swift.common.internal_client" names="swift.common.internal_client.InternalClient.get_account_info"><desc_name xml:space="preserve">get_account_info</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">acceptable_statuses=(2</desc_parameter><desc_parameter xml:space="preserve">404)</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns (container_count, object_count) for an account.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – Account on which to get the information.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">acceptable_statuses</literal_strong> – List of status for valid responses,
                                                    defaults to (2, HTTP_NOT_FOUND).</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><reference internal="True" refid="swift.common.internal_client.UnexpectedResponse" reftitle="swift.common.internal_client.UnexpectedResponse"><literal_strong>UnexpectedResponse</literal_strong></reference> – Exception raised when requests fail
                                                    to get a response with an acceptable status</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong>Exception</literal_strong> – Exception is raised when code fails in an
                                                    unexpected way.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_account_metadata()\ (swift.common.internal_client.InternalClient\ method)',\ u'swift.common.internal_client.InternalClient.get_account_metadata',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="InternalClient" first="False" fullname="InternalClient.get_account_metadata" ids="swift.common.internal_client.InternalClient.get_account_metadata" module="swift.common.internal_client" names="swift.common.internal_client.InternalClient.get_account_metadata"><desc_name xml:space="preserve">get_account_metadata</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">metadata_prefix=''</desc_parameter><desc_parameter xml:space="preserve">acceptable_statuses=(2</desc_parameter><desc_parameter xml:space="preserve">)</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Gets account metadata.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – Account on which to get the metadata.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">metadata_prefix</literal_strong> – Used to filter values from the headers
                                                    returned.  Will strip that prefix from the
                                                    keys in the dict returned.  Defaults to ‘’.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">acceptable_statuses</literal_strong> – List of status for valid responses,
                                                    defaults to (2,).</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>Returns dict of account metadata.  Keys will be lowercase.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><reference internal="True" refid="swift.common.internal_client.UnexpectedResponse" reftitle="swift.common.internal_client.UnexpectedResponse"><literal_strong>UnexpectedResponse</literal_strong></reference> – Exception raised when requests fail
                                                    to get a response with an acceptable status</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong>Exception</literal_strong> – Exception is raised when code fails in an
                                                    unexpected way.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_container_metadata()\ (swift.common.internal_client.InternalClient\ method)',\ u'swift.common.internal_client.InternalClient.get_container_metadata',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="InternalClient" first="False" fullname="InternalClient.get_container_metadata" ids="swift.common.internal_client.InternalClient.get_container_metadata" module="swift.common.internal_client" names="swift.common.internal_client.InternalClient.get_container_metadata"><desc_name xml:space="preserve">get_container_metadata</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">metadata_prefix=''</desc_parameter><desc_parameter xml:space="preserve">acceptable_statuses=(2</desc_parameter><desc_parameter xml:space="preserve">)</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Gets container metadata.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – The container’s account.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> – Container to get metadata on.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">metadata_prefix</literal_strong> – Used to filter values from the headers
                                                    returned.  Will strip that prefix from the
                                                    keys in the dict returned.  Defaults to ‘’.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">acceptable_statuses</literal_strong> – List of status for valid responses,
                                                    defaults to (2,).</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>Returns dict of container metadata.  Keys will be lowercase.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><reference internal="True" refid="swift.common.internal_client.UnexpectedResponse" reftitle="swift.common.internal_client.UnexpectedResponse"><literal_strong>UnexpectedResponse</literal_strong></reference> – Exception raised when requests fail
                                                    to get a response with an acceptable status</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong>Exception</literal_strong> – Exception is raised when code fails in an
                                                    unexpected way.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_object()\ (swift.common.internal_client.InternalClient\ method)',\ u'swift.common.internal_client.InternalClient.get_object',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="InternalClient" first="False" fullname="InternalClient.get_object" ids="swift.common.internal_client.InternalClient.get_object" module="swift.common.internal_client" names="swift.common.internal_client.InternalClient.get_object"><desc_name xml:space="preserve">get_object</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">obj</desc_parameter><desc_parameter xml:space="preserve">headers</desc_parameter><desc_parameter xml:space="preserve">acceptable_statuses=(2</desc_parameter><desc_parameter xml:space="preserve">)</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns a 3-tuple (status, headers, iterator of object body)</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_object_metadata()\ (swift.common.internal_client.InternalClient\ method)',\ u'swift.common.internal_client.InternalClient.get_object_metadata',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="InternalClient" first="False" fullname="InternalClient.get_object_metadata" ids="swift.common.internal_client.InternalClient.get_object_metadata" module="swift.common.internal_client" names="swift.common.internal_client.InternalClient.get_object_metadata"><desc_name xml:space="preserve">get_object_metadata</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">obj</desc_parameter><desc_parameter xml:space="preserve">metadata_prefix=''</desc_parameter><desc_parameter xml:space="preserve">acceptable_statuses=(2</desc_parameter><desc_parameter xml:space="preserve">)</desc_parameter><desc_parameter xml:space="preserve">headers=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Gets object metadata.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – The object’s account.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> – The object’s container.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">obj</literal_strong> – The object.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">metadata_prefix</literal_strong> – Used to filter values from the headers
                                                    returned.  Will strip that prefix from the
                                                    keys in the dict returned.  Defaults to ‘’.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">acceptable_statuses</literal_strong> – List of status for valid responses,
                                                    defaults to (2,).</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">headers</literal_strong> – extra headers to send with request</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>Dict of object metadata.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><reference internal="True" refid="swift.common.internal_client.UnexpectedResponse" reftitle="swift.common.internal_client.UnexpectedResponse"><literal_strong>UnexpectedResponse</literal_strong></reference> – Exception raised when requests fail
                                                    to get a response with an acceptable status</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong>Exception</literal_strong> – Exception is raised when code fails in an
                                                    unexpected way.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_object_ring\ (swift.common.internal_client.InternalClient\ attribute)',\ u'swift.common.internal_client.InternalClient.get_object_ring',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="InternalClient" first="False" fullname="InternalClient.get_object_ring" ids="swift.common.internal_client.InternalClient.get_object_ring" module="swift.common.internal_client" names="swift.common.internal_client.InternalClient.get_object_ring"><desc_name xml:space="preserve">get_object_ring</desc_name></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'iter_containers()\ (swift.common.internal_client.InternalClient\ method)',\ u'swift.common.internal_client.InternalClient.iter_containers',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="InternalClient" first="False" fullname="InternalClient.iter_containers" ids="swift.common.internal_client.InternalClient.iter_containers" module="swift.common.internal_client" names="swift.common.internal_client.InternalClient.iter_containers"><desc_name xml:space="preserve">iter_containers</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">marker=''</desc_parameter><desc_parameter xml:space="preserve">end_marker=''</desc_parameter><desc_parameter xml:space="preserve">acceptable_statuses=(2</desc_parameter><desc_parameter xml:space="preserve">404)</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns an iterator of containers dicts from an account.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – Account on which to do the container listing.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">marker</literal_strong> – Prefix of first desired item, defaults to ‘’.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">end_marker</literal_strong> – Last item returned will be ‘less’ than this,
                                                    defaults to ‘’.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">acceptable_statuses</literal_strong> – List of status for valid responses,
                                                    defaults to (2, HTTP_NOT_FOUND).</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><reference internal="True" refid="swift.common.internal_client.UnexpectedResponse" reftitle="swift.common.internal_client.UnexpectedResponse"><literal_strong>UnexpectedResponse</literal_strong></reference> – Exception raised when requests fail
                                                    to get a response with an acceptable status</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong>Exception</literal_strong> – Exception is raised when code fails in an
                                                    unexpected way.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'iter_object_lines()\ (swift.common.internal_client.InternalClient\ method)',\ u'swift.common.internal_client.InternalClient.iter_object_lines',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="InternalClient" first="False" fullname="InternalClient.iter_object_lines" ids="swift.common.internal_client.InternalClient.iter_object_lines" module="swift.common.internal_client" names="swift.common.internal_client.InternalClient.iter_object_lines"><desc_name xml:space="preserve">iter_object_lines</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">obj</desc_parameter><desc_parameter xml:space="preserve">headers=None</desc_parameter><desc_parameter xml:space="preserve">acceptable_statuses=(2</desc_parameter><desc_parameter xml:space="preserve">)</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns an iterator of object lines from an uncompressed or compressed
                                text object.</paragraph>
                            <paragraph>Uncompress object as it is read if the object’s name ends with ‘.gz’.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – The object’s account.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> – The object’s container.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">obj</literal_strong> – The object.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">acceptable_statuses</literal_strong> – List of status for valid responses,
                                                    defaults to (2,).</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><reference internal="True" refid="swift.common.internal_client.UnexpectedResponse" reftitle="swift.common.internal_client.UnexpectedResponse"><literal_strong>UnexpectedResponse</literal_strong></reference> – Exception raised when requests fail
                                                    to get a response with an acceptable status</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong>Exception</literal_strong> – Exception is raised when code fails in an
                                                    unexpected way.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'iter_objects()\ (swift.common.internal_client.InternalClient\ method)',\ u'swift.common.internal_client.InternalClient.iter_objects',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="InternalClient" first="False" fullname="InternalClient.iter_objects" ids="swift.common.internal_client.InternalClient.iter_objects" module="swift.common.internal_client" names="swift.common.internal_client.InternalClient.iter_objects"><desc_name xml:space="preserve">iter_objects</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">marker=''</desc_parameter><desc_parameter xml:space="preserve">end_marker=''</desc_parameter><desc_parameter xml:space="preserve">acceptable_statuses=(2</desc_parameter><desc_parameter xml:space="preserve">404)</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns an iterator of object dicts from a container.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – The container’s account.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> – Container to iterate objects on.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">marker</literal_strong> – Prefix of first desired item, defaults to ‘’.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">end_marker</literal_strong> – Last item returned will be ‘less’ than this,
                                                    defaults to ‘’.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">acceptable_statuses</literal_strong> – List of status for valid responses,
                                                    defaults to (2, HTTP_NOT_FOUND).</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><reference internal="True" refid="swift.common.internal_client.UnexpectedResponse" reftitle="swift.common.internal_client.UnexpectedResponse"><literal_strong>UnexpectedResponse</literal_strong></reference> – Exception raised when requests fail
                                                    to get a response with an acceptable status</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong>Exception</literal_strong> – Exception is raised when code fails in an
                                                    unexpected way.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'make_path()\ (swift.common.internal_client.InternalClient\ method)',\ u'swift.common.internal_client.InternalClient.make_path',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="InternalClient" first="False" fullname="InternalClient.make_path" ids="swift.common.internal_client.InternalClient.make_path" module="swift.common.internal_client" names="swift.common.internal_client.InternalClient.make_path"><desc_name xml:space="preserve">make_path</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container=None</desc_parameter><desc_parameter xml:space="preserve">obj=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns a swift path for a request quoting and utf-8 encoding the path
                                parts as need be.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – swift account</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> – container, defaults to None</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">obj</literal_strong> – object, defaults to None</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><literal_strong>ValueError</literal_strong> – Is raised if obj is specified and container is
                                            not.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'make_request()\ (swift.common.internal_client.InternalClient\ method)',\ u'swift.common.internal_client.InternalClient.make_request',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="InternalClient" first="False" fullname="InternalClient.make_request" ids="swift.common.internal_client.InternalClient.make_request" module="swift.common.internal_client" names="swift.common.internal_client.InternalClient.make_request"><desc_name xml:space="preserve">make_request</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">method</desc_parameter><desc_parameter xml:space="preserve">path</desc_parameter><desc_parameter xml:space="preserve">headers</desc_parameter><desc_parameter xml:space="preserve">acceptable_statuses</desc_parameter><desc_parameter xml:space="preserve">body_file=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Makes a request to Swift with retries.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">method</literal_strong> – HTTP method of request.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">path</literal_strong> – Path of request.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">headers</literal_strong> – Headers to be sent with request.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">acceptable_statuses</literal_strong> – List of acceptable statuses for request.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">body_file</literal_strong> – Body file to be passed along with request,
                                                    defaults to None.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>Response object on success.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><reference internal="True" refid="swift.common.internal_client.UnexpectedResponse" reftitle="swift.common.internal_client.UnexpectedResponse"><literal_strong>UnexpectedResponse</literal_strong></reference> – Exception raised when make_request() fails
                                                    to get a response with an acceptable status</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong>Exception</literal_strong> – Exception is raised when code fails in an
                                                    unexpected way.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_account_metadata()\ (swift.common.internal_client.InternalClient\ method)',\ u'swift.common.internal_client.InternalClient.set_account_metadata',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="InternalClient" first="False" fullname="InternalClient.set_account_metadata" ids="swift.common.internal_client.InternalClient.set_account_metadata" module="swift.common.internal_client" names="swift.common.internal_client.InternalClient.set_account_metadata"><desc_name xml:space="preserve">set_account_metadata</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">metadata</desc_parameter><desc_parameter xml:space="preserve">metadata_prefix=''</desc_parameter><desc_parameter xml:space="preserve">acceptable_statuses=(2</desc_parameter><desc_parameter xml:space="preserve">)</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Sets account metadata.  A call to this will add to the account
                                metadata and not overwrite all of it with values in the metadata dict.
                                To clear an account metadata value, pass an empty string as
                                the value for the key in the metadata dict.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – Account on which to get the metadata.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">metadata</literal_strong> – Dict of metadata to set.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">metadata_prefix</literal_strong> – Prefix used to set metadata values in headers
                                                    of requests, used to prefix keys in metadata
                                                    when setting metadata, defaults to ‘’.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">acceptable_statuses</literal_strong> – List of status for valid responses,
                                                    defaults to (2,).</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><reference internal="True" refid="swift.common.internal_client.UnexpectedResponse" reftitle="swift.common.internal_client.UnexpectedResponse"><literal_strong>UnexpectedResponse</literal_strong></reference> – Exception raised when requests fail
                                                    to get a response with an acceptable status</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong>Exception</literal_strong> – Exception is raised when code fails in an
                                                    unexpected way.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_container_metadata()\ (swift.common.internal_client.InternalClient\ method)',\ u'swift.common.internal_client.InternalClient.set_container_metadata',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="InternalClient" first="False" fullname="InternalClient.set_container_metadata" ids="swift.common.internal_client.InternalClient.set_container_metadata" module="swift.common.internal_client" names="swift.common.internal_client.InternalClient.set_container_metadata"><desc_name xml:space="preserve">set_container_metadata</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">metadata</desc_parameter><desc_parameter xml:space="preserve">metadata_prefix=''</desc_parameter><desc_parameter xml:space="preserve">acceptable_statuses=(2</desc_parameter><desc_parameter xml:space="preserve">)</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Sets container metadata.  A call to this will add to the container
                                metadata and not overwrite all of it with values in the metadata dict.
                                To clear a container metadata value, pass an empty string as the value
                                for the key in the metadata dict.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – The container’s account.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> – Container to set metadata on.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">metadata</literal_strong> – Dict of metadata to set.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">metadata_prefix</literal_strong> – Prefix used to set metadata values in headers
                                                    of requests, used to prefix keys in metadata
                                                    when setting metadata, defaults to ‘’.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">acceptable_statuses</literal_strong> – List of status for valid responses,
                                                    defaults to (2,).</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><reference internal="True" refid="swift.common.internal_client.UnexpectedResponse" reftitle="swift.common.internal_client.UnexpectedResponse"><literal_strong>UnexpectedResponse</literal_strong></reference> – Exception raised when requests fail
                                                    to get a response with an acceptable status</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong>Exception</literal_strong> – Exception is raised when code fails in an
                                                    unexpected way.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_object_metadata()\ (swift.common.internal_client.InternalClient\ method)',\ u'swift.common.internal_client.InternalClient.set_object_metadata',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="InternalClient" first="False" fullname="InternalClient.set_object_metadata" ids="swift.common.internal_client.InternalClient.set_object_metadata" module="swift.common.internal_client" names="swift.common.internal_client.InternalClient.set_object_metadata"><desc_name xml:space="preserve">set_object_metadata</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">obj</desc_parameter><desc_parameter xml:space="preserve">metadata</desc_parameter><desc_parameter xml:space="preserve">metadata_prefix=''</desc_parameter><desc_parameter xml:space="preserve">acceptable_statuses=(2</desc_parameter><desc_parameter xml:space="preserve">)</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Sets an object’s metadata.  The object’s metadata will be overwritten
                                by the values in the metadata dict.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – The object’s account.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> – The object’s container.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">obj</literal_strong> – The object.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">metadata</literal_strong> – Dict of metadata to set.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">metadata_prefix</literal_strong> – Prefix used to set metadata values in headers
                                                    of requests, used to prefix keys in metadata
                                                    when setting metadata, defaults to ‘’.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">acceptable_statuses</literal_strong> – List of status for valid responses,
                                                    defaults to (2,).</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><reference internal="True" refid="swift.common.internal_client.UnexpectedResponse" reftitle="swift.common.internal_client.UnexpectedResponse"><literal_strong>UnexpectedResponse</literal_strong></reference> – Exception raised when requests fail
                                                    to get a response with an acceptable status</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong>Exception</literal_strong> – Exception is raised when code fails in an
                                                    unexpected way.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'upload_object()\ (swift.common.internal_client.InternalClient\ method)',\ u'swift.common.internal_client.InternalClient.upload_object',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="InternalClient" first="False" fullname="InternalClient.upload_object" ids="swift.common.internal_client.InternalClient.upload_object" module="swift.common.internal_client" names="swift.common.internal_client.InternalClient.upload_object"><desc_name xml:space="preserve">upload_object</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">fobj</desc_parameter><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">obj</desc_parameter><desc_parameter xml:space="preserve">headers=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">fobj</literal_strong> – File object to read object’s content from.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">account</literal_strong> – The object’s account.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">container</literal_strong> – The object’s container.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">obj</literal_strong> – The object.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">headers</literal_strong> – Headers to send with request, defaults ot empty dict.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><reference internal="True" refid="swift.common.internal_client.UnexpectedResponse" reftitle="swift.common.internal_client.UnexpectedResponse"><literal_strong>UnexpectedResponse</literal_strong></reference> – Exception raised when requests fail
                                                    to get a response with an acceptable status</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong>Exception</literal_strong> – Exception is raised when code fails in an
                                                    unexpected way.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'SimpleClient\ (class\ in\ swift.common.internal_client)',\ u'swift.common.internal_client.SimpleClient',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="SimpleClient" ids="swift.common.internal_client.SimpleClient" module="swift.common.internal_client" names="swift.common.internal_client.SimpleClient"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.internal_client.</desc_addname><desc_name xml:space="preserve">SimpleClient</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">url=None</desc_parameter><desc_parameter xml:space="preserve">token=None</desc_parameter><desc_parameter xml:space="preserve">starting_backoff=1</desc_parameter><desc_parameter xml:space="preserve">max_backoff=5</desc_parameter><desc_parameter xml:space="preserve">retries=5</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Simple client that is used in bin/swift-dispersion-* and container sync</paragraph>
                    <index entries="['single',\ u'base_request()\ (swift.common.internal_client.SimpleClient\ method)',\ u'swift.common.internal_client.SimpleClient.base_request',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="SimpleClient" first="False" fullname="SimpleClient.base_request" ids="swift.common.internal_client.SimpleClient.base_request" module="swift.common.internal_client" names="swift.common.internal_client.SimpleClient.base_request"><desc_name xml:space="preserve">base_request</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">method</desc_parameter><desc_parameter xml:space="preserve">container=None</desc_parameter><desc_parameter xml:space="preserve">name=None</desc_parameter><desc_parameter xml:space="preserve">prefix=None</desc_parameter><desc_parameter xml:space="preserve">headers=None</desc_parameter><desc_parameter xml:space="preserve">proxy=None</desc_parameter><desc_parameter xml:space="preserve">contents=None</desc_parameter><desc_parameter xml:space="preserve">full_listing=None</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter><desc_parameter xml:space="preserve">additional_info=None</desc_parameter><desc_parameter xml:space="preserve">timeout=None</desc_parameter><desc_parameter xml:space="preserve">marker=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_account()\ (swift.common.internal_client.SimpleClient\ method)',\ u'swift.common.internal_client.SimpleClient.get_account',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="SimpleClient" first="False" fullname="SimpleClient.get_account" ids="swift.common.internal_client.SimpleClient.get_account" module="swift.common.internal_client" names="swift.common.internal_client.SimpleClient.get_account"><desc_name xml:space="preserve">get_account</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_container()\ (swift.common.internal_client.SimpleClient\ method)',\ u'swift.common.internal_client.SimpleClient.get_container',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="SimpleClient" first="False" fullname="SimpleClient.get_container" ids="swift.common.internal_client.SimpleClient.get_container" module="swift.common.internal_client" names="swift.common.internal_client.SimpleClient.get_container"><desc_name xml:space="preserve">get_container</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'put_container()\ (swift.common.internal_client.SimpleClient\ method)',\ u'swift.common.internal_client.SimpleClient.put_container',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="SimpleClient" first="False" fullname="SimpleClient.put_container" ids="swift.common.internal_client.SimpleClient.put_container" module="swift.common.internal_client" names="swift.common.internal_client.SimpleClient.put_container"><desc_name xml:space="preserve">put_container</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'put_object()\ (swift.common.internal_client.SimpleClient\ method)',\ u'swift.common.internal_client.SimpleClient.put_object',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="SimpleClient" first="False" fullname="SimpleClient.put_object" ids="swift.common.internal_client.SimpleClient.put_object" module="swift.common.internal_client" names="swift.common.internal_client.SimpleClient.put_object"><desc_name xml:space="preserve">put_object</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">container</desc_parameter><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">contents</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'retry_request()\ (swift.common.internal_client.SimpleClient\ method)',\ u'swift.common.internal_client.SimpleClient.retry_request',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="SimpleClient" first="False" fullname="SimpleClient.retry_request" ids="swift.common.internal_client.SimpleClient.retry_request" module="swift.common.internal_client" names="swift.common.internal_client.SimpleClient.retry_request"><desc_name xml:space="preserve">retry_request</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">method</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'UnexpectedResponse',\ u'swift.common.internal_client.UnexpectedResponse',\ '',\ None]"></index>
            <desc desctype="exception" domain="py" noindex="False" objtype="exception">
                <desc_signature class="" first="False" fullname="UnexpectedResponse" ids="swift.common.internal_client.UnexpectedResponse" module="swift.common.internal_client" names="swift.common.internal_client.UnexpectedResponse"><desc_annotation xml:space="preserve">exception </desc_annotation><desc_addname xml:space="preserve">swift.common.internal_client.</desc_addname><desc_name xml:space="preserve">UnexpectedResponse</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">message</desc_parameter><desc_parameter xml:space="preserve">resp</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">exceptions.Exception</literal></paragraph>
                    <paragraph>Exception raised on invalid responses to InternalClient.make_request().</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">message</literal_strong> – Exception message.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">resp</literal_strong> – The unexpected response.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'delete_object()\ (in\ module\ swift.common.internal_client)',\ u'swift.common.internal_client.delete_object',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="delete_object" ids="swift.common.internal_client.delete_object" module="swift.common.internal_client" names="swift.common.internal_client.delete_object"><desc_addname xml:space="preserve">swift.common.internal_client.</desc_addname><desc_name xml:space="preserve">delete_object</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">url</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>For usage with container sync</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'get_auth()\ (in\ module\ swift.common.internal_client)',\ u'swift.common.internal_client.get_auth',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="get_auth" ids="swift.common.internal_client.get_auth" module="swift.common.internal_client" names="swift.common.internal_client.get_auth"><desc_addname xml:space="preserve">swift.common.internal_client.</desc_addname><desc_name xml:space="preserve">get_auth</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">url</desc_parameter><desc_parameter xml:space="preserve">user</desc_parameter><desc_parameter xml:space="preserve">key</desc_parameter><desc_parameter xml:space="preserve">auth_version='1.0'</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                </desc_content>
            </desc>
            <index entries="['single',\ u'head_object()\ (in\ module\ swift.common.internal_client)',\ u'swift.common.internal_client.head_object',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="head_object" ids="swift.common.internal_client.head_object" module="swift.common.internal_client" names="swift.common.internal_client.head_object"><desc_addname xml:space="preserve">swift.common.internal_client.</desc_addname><desc_name xml:space="preserve">head_object</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">url</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>For usage with container sync</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'put_object()\ (in\ module\ swift.common.internal_client)',\ u'swift.common.internal_client.put_object',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="put_object" ids="swift.common.internal_client.put_object" module="swift.common.internal_client" names="swift.common.internal_client.put_object"><desc_addname xml:space="preserve">swift.common.internal_client.</desc_addname><desc_name xml:space="preserve">put_object</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">url</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>For usage with container sync</paragraph>
                </desc_content>
            </desc>
        </section>
        <section ids="module-swift.common.manager manager" names="manager">
            <title>Manager</title>
            <index entries="['single',\ u'swift.common.manager\ (module)',\ u'module-swift.common.manager',\ '',\ None]"></index>
            <index entries="['single',\ u'Manager\ (class\ in\ swift.common.manager)',\ u'swift.common.manager.Manager',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="Manager" ids="swift.common.manager.Manager" module="swift.common.manager" names="swift.common.manager.Manager"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.manager.</desc_addname><desc_name xml:space="preserve">Manager</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">servers</desc_parameter><desc_parameter xml:space="preserve">run_dir='/var/run/swift'</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Main class for performing commands on groups of servers.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">servers</literal_strong> – list of server names as strings</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                    <index entries="['single',\ u'force_reload()\ (swift.common.manager.Manager\ method)',\ u'swift.common.manager.Manager.force_reload',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Manager" first="False" fullname="Manager.force_reload" ids="swift.common.manager.Manager.force_reload" module="swift.common.manager" names="swift.common.manager.Manager.force_reload"><desc_name xml:space="preserve">force_reload</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>alias for reload</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_command()\ (swift.common.manager.Manager\ method)',\ u'swift.common.manager.Manager.get_command',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Manager" first="False" fullname="Manager.get_command" ids="swift.common.manager.Manager.get_command" module="swift.common.manager" names="swift.common.manager.Manager.get_command"><desc_name xml:space="preserve">get_command</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">cmd</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Find and return the decorated method named like cmd</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">cmd</literal_strong> – the command to get, a string, if not found raises
                                            UnknownCommandError</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'kill()\ (swift.common.manager.Manager\ method)',\ u'swift.common.manager.Manager.kill',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Manager" first="False" fullname="Manager.kill" ids="swift.common.manager.Manager.kill" module="swift.common.manager" names="swift.common.manager.Manager.kill"><desc_name xml:space="preserve">kill</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>stop a server (no error if not running)</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'list_commands()\ (swift.common.manager.Manager\ class\ method)',\ u'swift.common.manager.Manager.list_commands',\ '',\ None]"></index>
                    <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                        <desc_signature class="Manager" first="False" fullname="Manager.list_commands" ids="swift.common.manager.Manager.list_commands" module="swift.common.manager" names="swift.common.manager.Manager.list_commands"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">list_commands</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get all publicly accessible commands</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a list of string tuples (cmd, help), the method names who are
                                            decorated as commands</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'no_daemon()\ (swift.common.manager.Manager\ method)',\ u'swift.common.manager.Manager.no_daemon',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Manager" first="False" fullname="Manager.no_daemon" ids="swift.common.manager.Manager.no_daemon" module="swift.common.manager" names="swift.common.manager.Manager.no_daemon"><desc_name xml:space="preserve">no_daemon</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>start a server interactively</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'no_wait()\ (swift.common.manager.Manager\ method)',\ u'swift.common.manager.Manager.no_wait',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Manager" first="False" fullname="Manager.no_wait" ids="swift.common.manager.Manager.no_wait" module="swift.common.manager" names="swift.common.manager.Manager.no_wait"><desc_name xml:space="preserve">no_wait</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>spawn server and return immediately</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'once()\ (swift.common.manager.Manager\ method)',\ u'swift.common.manager.Manager.once',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Manager" first="False" fullname="Manager.once" ids="swift.common.manager.Manager.once" module="swift.common.manager" names="swift.common.manager.Manager.once"><desc_name xml:space="preserve">once</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>start server and run one pass on supporting daemons</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'reload()\ (swift.common.manager.Manager\ method)',\ u'swift.common.manager.Manager.reload',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Manager" first="False" fullname="Manager.reload" ids="swift.common.manager.Manager.reload" module="swift.common.manager" names="swift.common.manager.Manager.reload"><desc_name xml:space="preserve">reload</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>graceful shutdown then restart on supporting servers</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'restart()\ (swift.common.manager.Manager\ method)',\ u'swift.common.manager.Manager.restart',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Manager" first="False" fullname="Manager.restart" ids="swift.common.manager.Manager.restart" module="swift.common.manager" names="swift.common.manager.Manager.restart"><desc_name xml:space="preserve">restart</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>stops then restarts server</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'run_command()\ (swift.common.manager.Manager\ method)',\ u'swift.common.manager.Manager.run_command',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Manager" first="False" fullname="Manager.run_command" ids="swift.common.manager.Manager.run_command" module="swift.common.manager" names="swift.common.manager.Manager.run_command"><desc_name xml:space="preserve">run_command</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">cmd</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Find the named command and run it</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">cmd</literal_strong> – the command name to run</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'shutdown()\ (swift.common.manager.Manager\ method)',\ u'swift.common.manager.Manager.shutdown',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Manager" first="False" fullname="Manager.shutdown" ids="swift.common.manager.Manager.shutdown" module="swift.common.manager" names="swift.common.manager.Manager.shutdown"><desc_name xml:space="preserve">shutdown</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>allow current requests to finish on supporting servers</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'start()\ (swift.common.manager.Manager\ method)',\ u'swift.common.manager.Manager.start',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Manager" first="False" fullname="Manager.start" ids="swift.common.manager.Manager.start" module="swift.common.manager" names="swift.common.manager.Manager.start"><desc_name xml:space="preserve">start</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>starts a server</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'status()\ (swift.common.manager.Manager\ method)',\ u'swift.common.manager.Manager.status',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Manager" first="False" fullname="Manager.status" ids="swift.common.manager.Manager.status" module="swift.common.manager" names="swift.common.manager.Manager.status"><desc_name xml:space="preserve">status</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>display status of tracked pids for server</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'stop()\ (swift.common.manager.Manager\ method)',\ u'swift.common.manager.Manager.stop',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Manager" first="False" fullname="Manager.stop" ids="swift.common.manager.Manager.stop" module="swift.common.manager" names="swift.common.manager.Manager.stop"><desc_name xml:space="preserve">stop</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>stops a server</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'Server\ (class\ in\ swift.common.manager)',\ u'swift.common.manager.Server',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="Server" ids="swift.common.manager.Server" module="swift.common.manager" names="swift.common.manager.Server"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.manager.</desc_addname><desc_name xml:space="preserve">Server</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">server</desc_parameter><desc_parameter xml:space="preserve">run_dir='/var/run/swift'</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Manage operations on a server or group of servers of similar type</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">server</literal_strong> – name of server</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                    <index entries="['single',\ u'conf_files()\ (swift.common.manager.Server\ method)',\ u'swift.common.manager.Server.conf_files',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Server" first="False" fullname="Server.conf_files" ids="swift.common.manager.Server.conf_files" module="swift.common.manager" names="swift.common.manager.Server.conf_files"><desc_name xml:space="preserve">conf_files</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get conf files for this server</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Param</field_name>
                                    <field_body>
                                        <paragraph>number, if supplied will only lookup the nth server</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>list of conf files</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_conf_file_name()\ (swift.common.manager.Server\ method)',\ u'swift.common.manager.Server.get_conf_file_name',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Server" first="False" fullname="Server.get_conf_file_name" ids="swift.common.manager.Server.get_conf_file_name" module="swift.common.manager" names="swift.common.manager.Server.get_conf_file_name"><desc_name xml:space="preserve">get_conf_file_name</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">pid_file</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Translate pid_file to a corresponding conf_file</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">pid_file</literal_strong> – a pid_file for this server, a string</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>the conf_file for this pid_file</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_pid_file_name()\ (swift.common.manager.Server\ method)',\ u'swift.common.manager.Server.get_pid_file_name',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Server" first="False" fullname="Server.get_pid_file_name" ids="swift.common.manager.Server.get_pid_file_name" module="swift.common.manager" names="swift.common.manager.Server.get_pid_file_name"><desc_name xml:space="preserve">get_pid_file_name</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf_file</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Translate conf_file to a corresponding pid_file</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">conf_file</literal_strong> – an conf_file for this server, a string</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>the pid_file for this conf_file</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_running_pids()\ (swift.common.manager.Server\ method)',\ u'swift.common.manager.Server.get_running_pids',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Server" first="False" fullname="Server.get_running_pids" ids="swift.common.manager.Server.get_running_pids" module="swift.common.manager" names="swift.common.manager.Server.get_running_pids"><desc_name xml:space="preserve">get_running_pids</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get running pids</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a dict mapping pids (ints) to pid_files (paths)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'interact()\ (swift.common.manager.Server\ method)',\ u'swift.common.manager.Server.interact',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Server" first="False" fullname="Server.interact" ids="swift.common.manager.Server.interact" module="swift.common.manager" names="swift.common.manager.Server.interact"><desc_name xml:space="preserve">interact</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>wait on spawned procs to terminate</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'iter_pid_files()\ (swift.common.manager.Server\ method)',\ u'swift.common.manager.Server.iter_pid_files',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Server" first="False" fullname="Server.iter_pid_files" ids="swift.common.manager.Server.iter_pid_files" module="swift.common.manager" names="swift.common.manager.Server.iter_pid_files"><desc_name xml:space="preserve">iter_pid_files</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Generator, yields (pid_file, pids)</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'kill_running_pids()\ (swift.common.manager.Server\ method)',\ u'swift.common.manager.Server.kill_running_pids',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Server" first="False" fullname="Server.kill_running_pids" ids="swift.common.manager.Server.kill_running_pids" module="swift.common.manager" names="swift.common.manager.Server.kill_running_pids"><desc_name xml:space="preserve">kill_running_pids</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Kill running pids</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">graceful</literal_strong> – if True, attempt SIGHUP on supporting servers</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a dict mapping pids (ints) to pid_files (paths)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'launch()\ (swift.common.manager.Server\ method)',\ u'swift.common.manager.Server.launch',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Server" first="False" fullname="Server.launch" ids="swift.common.manager.Server.launch" module="swift.common.manager" names="swift.common.manager.Server.launch"><desc_name xml:space="preserve">launch</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Collect conf files and attempt to spawn the processes for this server</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'pid_files()\ (swift.common.manager.Server\ method)',\ u'swift.common.manager.Server.pid_files',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Server" first="False" fullname="Server.pid_files" ids="swift.common.manager.Server.pid_files" module="swift.common.manager" names="swift.common.manager.Server.pid_files"><desc_name xml:space="preserve">pid_files</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get pid files for this server</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Param</field_name>
                                    <field_body>
                                        <paragraph>number, if supplied will only lookup the nth server</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>list of pid files</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'signal_pids()\ (swift.common.manager.Server\ method)',\ u'swift.common.manager.Server.signal_pids',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Server" first="False" fullname="Server.signal_pids" ids="swift.common.manager.Server.signal_pids" module="swift.common.manager" names="swift.common.manager.Server.signal_pids"><desc_name xml:space="preserve">signal_pids</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">sig</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Send a signal to pids for this server</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">sig</literal_strong> – signal to send</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a dict mapping pids (ints) to pid_files (paths)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'spawn()\ (swift.common.manager.Server\ method)',\ u'swift.common.manager.Server.spawn',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Server" first="False" fullname="Server.spawn" ids="swift.common.manager.Server.spawn" module="swift.common.manager" names="swift.common.manager.Server.spawn"><desc_name xml:space="preserve">spawn</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf_file</desc_parameter><desc_parameter xml:space="preserve">once=False</desc_parameter><desc_parameter xml:space="preserve">wait=True</desc_parameter><desc_parameter xml:space="preserve">daemon=True</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Launch a subprocess for this server.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">conf_file</literal_strong> – path to conf_file to use as first arg</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">once</literal_strong> – boolean, add once argument to command</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">wait</literal_strong> – boolean, if true capture stdout with a pipe</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">daemon</literal_strong> – boolean, if false ask server to log to console</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>the pid of the spawned process</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'status()\ (swift.common.manager.Server\ method)',\ u'swift.common.manager.Server.status',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Server" first="False" fullname="Server.status" ids="swift.common.manager.Server.status" module="swift.common.manager" names="swift.common.manager.Server.status"><desc_name xml:space="preserve">status</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">pids=None</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Display status of server</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Param</field_name>
                                    <field_body>
                                        <paragraph>pids, if not supplied pids will be populated automatically</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Param</field_name>
                                    <field_body>
                                        <paragraph>number, if supplied will only lookup the nth server</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>1 if server is not running, 0 otherwise</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'stop()\ (swift.common.manager.Server\ method)',\ u'swift.common.manager.Server.stop',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Server" first="False" fullname="Server.stop" ids="swift.common.manager.Server.stop" module="swift.common.manager" names="swift.common.manager.Server.stop"><desc_name xml:space="preserve">stop</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Send stop signals to pids for this server</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a dict mapping pids (ints) to pid_files (paths)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'wait()\ (swift.common.manager.Server\ method)',\ u'swift.common.manager.Server.wait',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Server" first="False" fullname="Server.wait" ids="swift.common.manager.Server.wait" module="swift.common.manager" names="swift.common.manager.Server.wait"><desc_name xml:space="preserve">wait</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>wait on spawned procs to start</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'command()\ (in\ module\ swift.common.manager)',\ u'swift.common.manager.command',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="command" ids="swift.common.manager.command" module="swift.common.manager" names="swift.common.manager.command"><desc_addname xml:space="preserve">swift.common.manager.</desc_addname><desc_name xml:space="preserve">command</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">func</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Decorator to declare which methods are accessible as commands, commands
                        always return 1 or 0, where 0 should indicate success.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">func</literal_strong> – function to make public</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'kill_group()\ (in\ module\ swift.common.manager)',\ u'swift.common.manager.kill_group',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="kill_group" ids="swift.common.manager.kill_group" module="swift.common.manager" names="swift.common.manager.kill_group"><desc_addname xml:space="preserve">swift.common.manager.</desc_addname><desc_name xml:space="preserve">kill_group</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">pid</desc_parameter><desc_parameter xml:space="preserve">sig</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Send signal to process group</paragraph>
                    <paragraph>: param pid: process id
                        : param sig: signal to send</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'safe_kill()\ (in\ module\ swift.common.manager)',\ u'swift.common.manager.safe_kill',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="safe_kill" ids="swift.common.manager.safe_kill" module="swift.common.manager" names="swift.common.manager.safe_kill"><desc_addname xml:space="preserve">swift.common.manager.</desc_addname><desc_name xml:space="preserve">safe_kill</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">pid</desc_parameter><desc_parameter xml:space="preserve">sig</desc_parameter><desc_parameter xml:space="preserve">name</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Send signal to process and check process name</paragraph>
                    <paragraph>: param pid: process id
                        : param sig: signal to send
                        : param name: name to ensure target process</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'setup_env()\ (in\ module\ swift.common.manager)',\ u'swift.common.manager.setup_env',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="setup_env" ids="swift.common.manager.setup_env" module="swift.common.manager" names="swift.common.manager.setup_env"><desc_addname xml:space="preserve">swift.common.manager.</desc_addname><desc_name xml:space="preserve">setup_env</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Try to increase resource limits of the OS. Move PYTHON_EGG_CACHE to /tmp</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'watch_server_pids()\ (in\ module\ swift.common.manager)',\ u'swift.common.manager.watch_server_pids',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="watch_server_pids" ids="swift.common.manager.watch_server_pids" module="swift.common.manager" names="swift.common.manager.watch_server_pids"><desc_addname xml:space="preserve">swift.common.manager.</desc_addname><desc_name xml:space="preserve">watch_server_pids</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">server_pids</desc_parameter><desc_parameter xml:space="preserve">interval=1</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Monitor a collection of server pids yielding back those pids that
                        aren’t responding to signals.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">server_pids</literal_strong> – a dict, lists of pids [int,…] keyed on
                                    Server objects</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
        </section>
        <section ids="module-swift.common.memcached memcached" names="memcached">
            <title>MemCacheD</title>
            <index entries="['single',\ u'swift.common.memcached\ (module)',\ u'module-swift.common.memcached',\ '',\ None]"></index>
            <paragraph>Why our own memcache client?
                By Michael Barton</paragraph>
            <paragraph>python-memcached doesn’t use consistent hashing, so adding or
                removing a memcache server from the pool invalidates a huge
                percentage of cached items.</paragraph>
            <paragraph>If you keep a pool of python-memcached client objects, each client
                object has its own connection to every memcached server, only one of
                which is ever in use.  So you wind up with n * m open sockets and
                almost all of them idle. This client effectively has a pool for each
                server, so the number of backend connections is hopefully greatly
                reduced.</paragraph>
            <paragraph>python-memcache uses pickle to store things, and there was already a
                huge stink about Swift using pickles in memcache
                (<reference refuri="http://osvdb.org/show/osvdb/86581">http://osvdb.org/show/osvdb/86581</reference>).  That seemed sort of unfair,
                since nova and keystone and everyone else use pickles for memcache
                too, but it’s hidden behind a “standard” library. But changing would
                be a security regression at this point.</paragraph>
            <paragraph>Also, pylibmc wouldn’t work for us because it needs to use python
                sockets in order to play nice with eventlet.</paragraph>
            <paragraph>Lucid comes with memcached: v1.4.2.  Protocol documentation for that
                version is at:</paragraph>
            <paragraph><reference refuri="http://github.com/memcached/memcached/blob/1.4.2/doc/protocol.txt">http://github.com/memcached/memcached/blob/1.4.2/doc/protocol.txt</reference></paragraph>
            <index entries="['single',\ u'MemcacheConnPool\ (class\ in\ swift.common.memcached)',\ u'swift.common.memcached.MemcacheConnPool',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="MemcacheConnPool" ids="swift.common.memcached.MemcacheConnPool" module="swift.common.memcached" names="swift.common.memcached.MemcacheConnPool"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.memcached.</desc_addname><desc_name xml:space="preserve">MemcacheConnPool</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">server</desc_parameter><desc_parameter xml:space="preserve">size</desc_parameter><desc_parameter xml:space="preserve">connect_timeout</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">eventlet.pools.Pool</literal></paragraph>
                    <paragraph>Connection pool for Memcache Connections</paragraph>
                    <paragraph>The <emphasis>server</emphasis> parameter can be a hostname, an IPv4 address, or an IPv6
                        address with an optional port. See
                        <reference internal="True" refid="swift.common.utils.parse_socket_string" reftitle="swift.common.utils.parse_socket_string"><literal classes="xref py py-func">swift.common.utils.parse_socket_string()</literal></reference> for details.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'MemcacheRing\ (class\ in\ swift.common.memcached)',\ u'swift.common.memcached.MemcacheRing',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="MemcacheRing" ids="swift.common.memcached.MemcacheRing" module="swift.common.memcached" names="swift.common.memcached.MemcacheRing"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.memcached.</desc_addname><desc_name xml:space="preserve">MemcacheRing</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">servers</desc_parameter><desc_parameter xml:space="preserve">connect_timeout=0.3</desc_parameter><desc_parameter xml:space="preserve">io_timeout=2.0</desc_parameter><desc_parameter xml:space="preserve">pool_timeout=1.0</desc_parameter><desc_parameter xml:space="preserve">tries=3</desc_parameter><desc_parameter xml:space="preserve">allow_pickle=False</desc_parameter><desc_parameter xml:space="preserve">allow_unpickle=False</desc_parameter><desc_parameter xml:space="preserve">max_conns=2</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Simple, consistent-hashed memcache client.</paragraph>
                    <index entries="['single',\ u'decr()\ (swift.common.memcached.MemcacheRing\ method)',\ u'swift.common.memcached.MemcacheRing.decr',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="MemcacheRing" first="False" fullname="MemcacheRing.decr" ids="swift.common.memcached.MemcacheRing.decr" module="swift.common.memcached" names="swift.common.memcached.MemcacheRing.decr"><desc_name xml:space="preserve">decr</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">key</desc_parameter><desc_parameter xml:space="preserve">delta=1</desc_parameter><desc_parameter xml:space="preserve">time=0</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Decrements a key which has a numeric value by delta. Calls incr with
                                -delta.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">key</literal_strong> – key</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">delta</literal_strong> – amount to subtract to the value of key (or set the
                                                    value to 0 if the key is not found) will be cast to
                                                    an int</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">time</literal_strong> – the time to live</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>result of decrementing</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><literal_strong>MemcacheConnectionError</literal_strong> – </paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'delete()\ (swift.common.memcached.MemcacheRing\ method)',\ u'swift.common.memcached.MemcacheRing.delete',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="MemcacheRing" first="False" fullname="MemcacheRing.delete" ids="swift.common.memcached.MemcacheRing.delete" module="swift.common.memcached" names="swift.common.memcached.MemcacheRing.delete"><desc_name xml:space="preserve">delete</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">key</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Deletes a key/value pair from memcache.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">key</literal_strong> – key to be deleted</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get()\ (swift.common.memcached.MemcacheRing\ method)',\ u'swift.common.memcached.MemcacheRing.get',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="MemcacheRing" first="False" fullname="MemcacheRing.get" ids="swift.common.memcached.MemcacheRing.get" module="swift.common.memcached" names="swift.common.memcached.MemcacheRing.get"><desc_name xml:space="preserve">get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">key</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Gets the object specified by key.  It will also unserialize the object
                                before returning if it is serialized in memcache with JSON, or if it
                                is pickled and unpickling is allowed.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">key</literal_strong> – key</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>value of the key in memcache</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_multi()\ (swift.common.memcached.MemcacheRing\ method)',\ u'swift.common.memcached.MemcacheRing.get_multi',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="MemcacheRing" first="False" fullname="MemcacheRing.get_multi" ids="swift.common.memcached.MemcacheRing.get_multi" module="swift.common.memcached" names="swift.common.memcached.MemcacheRing.get_multi"><desc_name xml:space="preserve">get_multi</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">keys</desc_parameter><desc_parameter xml:space="preserve">server_key</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Gets multiple values from memcache for the given keys.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">keys</literal_strong> – keys for values to be retrieved from memcache</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">server_key</literal_strong> – key to use in determining which server in the ring
                                                    is used</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>list of values</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'incr()\ (swift.common.memcached.MemcacheRing\ method)',\ u'swift.common.memcached.MemcacheRing.incr',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="MemcacheRing" first="False" fullname="MemcacheRing.incr" ids="swift.common.memcached.MemcacheRing.incr" module="swift.common.memcached" names="swift.common.memcached.MemcacheRing.incr"><desc_name xml:space="preserve">incr</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">key</desc_parameter><desc_parameter xml:space="preserve">delta=1</desc_parameter><desc_parameter xml:space="preserve">time=0</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Increments a key which has a numeric value by delta.
                                If the key can’t be found, it’s added as delta or 0 if delta &lt; 0.
                                If passed a negative number, will use memcached’s decr. Returns
                                the int stored in memcached
                                Note: The data memcached stores as the result of incr/decr is
                                an unsigned int.  decr’s that result in a number below 0 are
                                stored as 0.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">key</literal_strong> – key</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">delta</literal_strong> – amount to add to the value of key (or set as the value
                                                    if the key is not found) will be cast to an int</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">time</literal_strong> – the time to live</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>result of incrementing</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><literal_strong>MemcacheConnectionError</literal_strong> – </paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set()\ (swift.common.memcached.MemcacheRing\ method)',\ u'swift.common.memcached.MemcacheRing.set',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="MemcacheRing" first="False" fullname="MemcacheRing.set" ids="swift.common.memcached.MemcacheRing.set" module="swift.common.memcached" names="swift.common.memcached.MemcacheRing.set"><desc_name xml:space="preserve">set</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">key</desc_parameter><desc_parameter xml:space="preserve">value</desc_parameter><desc_parameter xml:space="preserve">serialize=True</desc_parameter><desc_parameter xml:space="preserve">time=0</desc_parameter><desc_parameter xml:space="preserve">min_compress_len=0</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Set a key/value pair in memcache</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">key</literal_strong> – key</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">value</literal_strong> – value</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">serialize</literal_strong> – if True, value is serialized with JSON before sending
                                                    to memcache, or with pickle if configured to use
                                                    pickle instead of JSON (to avoid cache poisoning)</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">time</literal_strong> – the time to live</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">min_compress_len</literal_strong> – minimum compress length, this parameter was
                                                    added to keep the signature compatible with
                                                    python-memcached interface. This
                                                    implementation ignores it.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_multi()\ (swift.common.memcached.MemcacheRing\ method)',\ u'swift.common.memcached.MemcacheRing.set_multi',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="MemcacheRing" first="False" fullname="MemcacheRing.set_multi" ids="swift.common.memcached.MemcacheRing.set_multi" module="swift.common.memcached" names="swift.common.memcached.MemcacheRing.set_multi"><desc_name xml:space="preserve">set_multi</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">mapping</desc_parameter><desc_parameter xml:space="preserve">server_key</desc_parameter><desc_parameter xml:space="preserve">serialize=True</desc_parameter><desc_parameter xml:space="preserve">time=0</desc_parameter><desc_parameter xml:space="preserve">min_compress_len=0</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Sets multiple key/value pairs in memcache.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">mapping</literal_strong> – dictionary of keys and values to be set in memcache</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">server_key</literal_strong> – key to use in determining which server in the ring
                                                    is used</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">serialize</literal_strong> – if True, value is serialized with JSON before sending
                                                    to memcache, or with pickle if configured to use
                                                    pickle instead of JSON (to avoid cache poisoning)</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">time</literal_strong> – the time to live</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Min_compress_len</field_name>
                                    <field_body>
                                        <paragraph>minimum compress length, this parameter was added
                                            to keep the signature compatible with
                                            python-memcached interface. This implementation
                                            ignores it</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'sanitize_timeout()\ (in\ module\ swift.common.memcached)',\ u'swift.common.memcached.sanitize_timeout',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="sanitize_timeout" ids="swift.common.memcached.sanitize_timeout" module="swift.common.memcached" names="swift.common.memcached.sanitize_timeout"><desc_addname xml:space="preserve">swift.common.memcached.</desc_addname><desc_name xml:space="preserve">sanitize_timeout</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">timeout</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Sanitize a timeout value to use an absolute expiration time if the delta
                        is greater than 30 days (in seconds). Note that the memcached server
                        translates negative values to mean a delta of 30 days in seconds (and 1
                        additional second), client beware.</paragraph>
                </desc_content>
            </desc>
            <target refid="request-helpers"></target>
        </section>
        <section ids="module-swift.common.request_helpers id8 request-helpers" names="request\ helpers request_helpers">
            <title>Request Helpers</title>
            <index entries="['single',\ u'swift.common.request_helpers\ (module)',\ u'module-swift.common.request_helpers',\ '',\ None]"></index>
            <paragraph>Miscellaneous utility functions for use in generating responses.</paragraph>
            <paragraph>Why not swift.common.utils, you ask? Because this way we can import things
                from swob in here without creating circular imports.</paragraph>
            <index entries="['single',\ u'SegmentedIterable\ (class\ in\ swift.common.request_helpers)',\ u'swift.common.request_helpers.SegmentedIterable',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="SegmentedIterable" ids="swift.common.request_helpers.SegmentedIterable" module="swift.common.request_helpers" names="swift.common.request_helpers.SegmentedIterable"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.request_helpers.</desc_addname><desc_name xml:space="preserve">SegmentedIterable</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter><desc_parameter xml:space="preserve">app</desc_parameter><desc_parameter xml:space="preserve">listing_iter</desc_parameter><desc_parameter xml:space="preserve">max_get_time</desc_parameter><desc_parameter xml:space="preserve">logger</desc_parameter><desc_parameter xml:space="preserve">ua_suffix</desc_parameter><desc_parameter xml:space="preserve">swift_source</desc_parameter><desc_parameter xml:space="preserve">name='&lt;not specified&gt;'</desc_parameter><desc_parameter xml:space="preserve">response_body_length=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Iterable that returns the object contents for a large object.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">req</literal_strong> – original request object</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">app</literal_strong> – WSGI application from which segments will come</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">listing_iter</literal_strong> – <paragraph>iterable yielding the object segments to fetch,
                                                along with the byte subranges to fetch, in the form of a 5-tuple
                                                (object-path, object-etag, object-size, first-byte, last-byte).</paragraph><paragraph>If object-etag is None, no MD5 verification will be done.</paragraph><paragraph>If object-size is None, no length verification will be done.</paragraph><paragraph>If first-byte and last-byte are None, then the entire object will be
                                                fetched.</paragraph></paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">max_get_time</literal_strong> – maximum permitted duration of a GET request (seconds)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">logger</literal_strong> – logger object</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">swift_source</literal_strong> – value of swift.source in subrequest environ
                                            (just for logging)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">ua_suffix</literal_strong> – string to append to user-agent.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> – name of manifest (used in logging only)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">response_body_length</literal_strong> – optional response body length for
                                            the response being sent to the client.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                    <index entries="['single',\ u'app_iter_range()\ (swift.common.request_helpers.SegmentedIterable\ method)',\ u'swift.common.request_helpers.SegmentedIterable.app_iter_range',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="SegmentedIterable" first="False" fullname="SegmentedIterable.app_iter_range" ids="swift.common.request_helpers.SegmentedIterable.app_iter_range" module="swift.common.request_helpers" names="swift.common.request_helpers.SegmentedIterable.app_iter_range"><desc_name xml:space="preserve">app_iter_range</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*a</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>swob.Response will only respond with a 206 status in certain cases; one
                                of those is if the body iterator responds to .app_iter_range().</paragraph>
                            <paragraph>However, this object (or really, its listing iter) is smart enough to
                                handle the range stuff internally, so we just no-op this out for swob.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'app_iter_ranges()\ (swift.common.request_helpers.SegmentedIterable\ method)',\ u'swift.common.request_helpers.SegmentedIterable.app_iter_ranges',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="SegmentedIterable" first="False" fullname="SegmentedIterable.app_iter_ranges" ids="swift.common.request_helpers.SegmentedIterable.app_iter_ranges" module="swift.common.request_helpers" names="swift.common.request_helpers.SegmentedIterable.app_iter_ranges"><desc_name xml:space="preserve">app_iter_ranges</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ranges</desc_parameter><desc_parameter xml:space="preserve">content_type</desc_parameter><desc_parameter xml:space="preserve">boundary</desc_parameter><desc_parameter xml:space="preserve">content_size</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>This method assumes that iter(self) yields all the data bytes that
                                go into the response, but none of the MIME stuff. For example, if
                                the response will contain three MIME docs with data “abcd”, “efgh”,
                                and “ijkl”, then iter(self) will give out the bytes “abcdefghijkl”.</paragraph>
                            <paragraph>This method inserts the MIME stuff around the data bytes.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'close()\ (swift.common.request_helpers.SegmentedIterable\ method)',\ u'swift.common.request_helpers.SegmentedIterable.close',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="SegmentedIterable" first="False" fullname="SegmentedIterable.close" ids="swift.common.request_helpers.SegmentedIterable.close" module="swift.common.request_helpers" names="swift.common.request_helpers.SegmentedIterable.close"><desc_name xml:space="preserve">close</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Called when the client disconnect. Ensure that the connection to the
                                backend server is closed.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'validate_first_segment()\ (swift.common.request_helpers.SegmentedIterable\ method)',\ u'swift.common.request_helpers.SegmentedIterable.validate_first_segment',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="SegmentedIterable" first="False" fullname="SegmentedIterable.validate_first_segment" ids="swift.common.request_helpers.SegmentedIterable.validate_first_segment" module="swift.common.request_helpers" names="swift.common.request_helpers.SegmentedIterable.validate_first_segment"><desc_name xml:space="preserve">validate_first_segment</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Start fetching object data to ensure that the first segment (if any) is
                                valid. This is to catch cases like “first segment is missing” or
                                “first segment’s etag doesn’t match manifest”.</paragraph>
                            <paragraph>Note: this does not validate that you have any segments. A
                                zero-segment large object is not erroneous; it is just empty.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'copy_header_subset()\ (in\ module\ swift.common.request_helpers)',\ u'swift.common.request_helpers.copy_header_subset',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="copy_header_subset" ids="swift.common.request_helpers.copy_header_subset" module="swift.common.request_helpers" names="swift.common.request_helpers.copy_header_subset"><desc_addname xml:space="preserve">swift.common.request_helpers.</desc_addname><desc_name xml:space="preserve">copy_header_subset</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">from_r</desc_parameter><desc_parameter xml:space="preserve">to_r</desc_parameter><desc_parameter xml:space="preserve">condition</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Will copy desired subset of headers from from_r to to_r.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">from_r</literal_strong> – a swob Request or Response</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">to_r</literal_strong> – a swob Request or Response</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">condition</literal_strong> – a function that will be passed the header key as a
                                            single argument and should return True if the header
                                            is to be copied.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'get_listing_content_type()\ (in\ module\ swift.common.request_helpers)',\ u'swift.common.request_helpers.get_listing_content_type',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="get_listing_content_type" ids="swift.common.request_helpers.get_listing_content_type" module="swift.common.request_helpers" names="swift.common.request_helpers.get_listing_content_type"><desc_addname xml:space="preserve">swift.common.request_helpers.</desc_addname><desc_name xml:space="preserve">get_listing_content_type</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Determine the content type to use for an account or container listing
                        response.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">req</literal_strong> – request object</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>content type as a string (e.g. text/plain, application/json)</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong>HTTPNotAcceptable</literal_strong> – if the requested content type is not acceptable</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong>HTTPBadRequest</literal_strong> – if the ‘format’ query param is provided and
                                            not valid UTF-8</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'get_name_and_placement()\ (in\ module\ swift.common.request_helpers)',\ u'swift.common.request_helpers.get_name_and_placement',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="get_name_and_placement" ids="swift.common.request_helpers.get_name_and_placement" module="swift.common.request_helpers" names="swift.common.request_helpers.get_name_and_placement"><desc_addname xml:space="preserve">swift.common.request_helpers.</desc_addname><desc_name xml:space="preserve">get_name_and_placement</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">request</desc_parameter><desc_parameter xml:space="preserve">minsegs=1</desc_parameter><desc_parameter xml:space="preserve">maxsegs=None</desc_parameter><desc_parameter xml:space="preserve">rest_with_last=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Utility function to split and validate the request path and storage
                        policy.  The storage policy index is extracted from the headers of
                        the request and converted to a StoragePolicy instance.  The
                        remaining args are passed through to
                        <reference internal="True" refid="swift.common.request_helpers.split_and_validate_path" reftitle="swift.common.request_helpers.split_and_validate_path"><literal classes="xref py py-meth">split_and_validate_path()</literal></reference>.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a list, result of <reference internal="True" refid="swift.common.request_helpers.split_and_validate_path" reftitle="swift.common.request_helpers.split_and_validate_path"><literal classes="xref py py-meth">split_and_validate_path()</literal></reference> with
                                    the BaseStoragePolicy instance appended on the end</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>HTTPServiceUnavailable</literal_strong> – if the path is invalid or no policy exists
                                    with the extracted policy_index.</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'get_object_transient_sysmeta()\ (in\ module\ swift.common.request_helpers)',\ u'swift.common.request_helpers.get_object_transient_sysmeta',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="get_object_transient_sysmeta" ids="swift.common.request_helpers.get_object_transient_sysmeta" module="swift.common.request_helpers" names="swift.common.request_helpers.get_object_transient_sysmeta"><desc_addname xml:space="preserve">swift.common.request_helpers.</desc_addname><desc_name xml:space="preserve">get_object_transient_sysmeta</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">key</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns the Object Transient System Metadata header for key.
                        The Object Transient System Metadata namespace will be persisted by
                        backend object servers. These headers are treated in the same way as
                        object user metadata i.e. all headers in this namespace will be
                        replaced on every POST request.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">key</literal_strong> – metadata key</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>the entire object transient system metadata header for key</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'get_param()\ (in\ module\ swift.common.request_helpers)',\ u'swift.common.request_helpers.get_param',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="get_param" ids="swift.common.request_helpers.get_param" module="swift.common.request_helpers" names="swift.common.request_helpers.get_param"><desc_addname xml:space="preserve">swift.common.request_helpers.</desc_addname><desc_name xml:space="preserve">get_param</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">default=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Get parameters from an HTTP request ensuring proper handling UTF-8
                        encoding.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">req</literal_strong> – request object</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> – parameter name</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">default</literal_strong> – result to return if the parameter is not found</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>HTTP request parameter value
                                    (as UTF-8 encoded str, not unicode object)</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>HTTPBadRequest</literal_strong> – if param not valid UTF-8 byte sequence</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'get_sys_meta_prefix()\ (in\ module\ swift.common.request_helpers)',\ u'swift.common.request_helpers.get_sys_meta_prefix',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="get_sys_meta_prefix" ids="swift.common.request_helpers.get_sys_meta_prefix" module="swift.common.request_helpers" names="swift.common.request_helpers.get_sys_meta_prefix"><desc_addname xml:space="preserve">swift.common.request_helpers.</desc_addname><desc_name xml:space="preserve">get_sys_meta_prefix</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">server_type</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns the prefix for system metadata headers for given server type.</paragraph>
                    <paragraph>This prefix defines the namespace for headers that will be persisted
                        by backend servers.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">server_type</literal_strong> – type of backend server i.e. [account|container|object]</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>prefix string for server type’s system metadata headers</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'get_user_meta_prefix()\ (in\ module\ swift.common.request_helpers)',\ u'swift.common.request_helpers.get_user_meta_prefix',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="get_user_meta_prefix" ids="swift.common.request_helpers.get_user_meta_prefix" module="swift.common.request_helpers" names="swift.common.request_helpers.get_user_meta_prefix"><desc_addname xml:space="preserve">swift.common.request_helpers.</desc_addname><desc_name xml:space="preserve">get_user_meta_prefix</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">server_type</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns the prefix for user metadata headers for given server type.</paragraph>
                    <paragraph>This prefix defines the namespace for headers that will be persisted
                        by backend servers.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">server_type</literal_strong> – type of backend server i.e. [account|container|object]</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>prefix string for server type’s user metadata headers</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'http_response_to_document_iters()\ (in\ module\ swift.common.request_helpers)',\ u'swift.common.request_helpers.http_response_to_document_iters',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="http_response_to_document_iters" ids="swift.common.request_helpers.http_response_to_document_iters" module="swift.common.request_helpers" names="swift.common.request_helpers.http_response_to_document_iters"><desc_addname xml:space="preserve">swift.common.request_helpers.</desc_addname><desc_name xml:space="preserve">http_response_to_document_iters</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">response</desc_parameter><desc_parameter xml:space="preserve">read_chunk_size=4096</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Takes a successful object-GET HTTP response and turns it into an
                        iterator of (first-byte, last-byte, length, headers, body-file)
                        5-tuples.</paragraph>
                    <paragraph>The response must either be a 200 or a 206; if you feed in a 204 or
                        something similar, this probably won’t work.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">response</literal_strong> – HTTP response, like from bufferedhttp.http_connect(),
                                    not a swob.Response.</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'is_object_transient_sysmeta()\ (in\ module\ swift.common.request_helpers)',\ u'swift.common.request_helpers.is_object_transient_sysmeta',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="is_object_transient_sysmeta" ids="swift.common.request_helpers.is_object_transient_sysmeta" module="swift.common.request_helpers" names="swift.common.request_helpers.is_object_transient_sysmeta"><desc_addname xml:space="preserve">swift.common.request_helpers.</desc_addname><desc_name xml:space="preserve">is_object_transient_sysmeta</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">key</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Tests if a header key starts with and is longer than the prefix for object
                        transient system metadata.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">key</literal_strong> – header key</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>True if the key satisfies the test, False otherwise</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'is_sys_meta()\ (in\ module\ swift.common.request_helpers)',\ u'swift.common.request_helpers.is_sys_meta',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="is_sys_meta" ids="swift.common.request_helpers.is_sys_meta" module="swift.common.request_helpers" names="swift.common.request_helpers.is_sys_meta"><desc_addname xml:space="preserve">swift.common.request_helpers.</desc_addname><desc_name xml:space="preserve">is_sys_meta</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">server_type</desc_parameter><desc_parameter xml:space="preserve">key</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Tests if a header key starts with and is longer than the system
                        metadata prefix for given server type.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">server_type</literal_strong> – type of backend server i.e. [account|container|object]</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">key</literal_strong> – header key</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>True if the key satisfies the test, False otherwise</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'is_sys_or_user_meta()\ (in\ module\ swift.common.request_helpers)',\ u'swift.common.request_helpers.is_sys_or_user_meta',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="is_sys_or_user_meta" ids="swift.common.request_helpers.is_sys_or_user_meta" module="swift.common.request_helpers" names="swift.common.request_helpers.is_sys_or_user_meta"><desc_addname xml:space="preserve">swift.common.request_helpers.</desc_addname><desc_name xml:space="preserve">is_sys_or_user_meta</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">server_type</desc_parameter><desc_parameter xml:space="preserve">key</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Tests if a header key starts with and is longer than the user or system
                        metadata prefix for given server type.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">server_type</literal_strong> – type of backend server i.e. [account|container|object]</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">key</literal_strong> – header key</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>True if the key satisfies the test, False otherwise</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'is_user_meta()\ (in\ module\ swift.common.request_helpers)',\ u'swift.common.request_helpers.is_user_meta',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="is_user_meta" ids="swift.common.request_helpers.is_user_meta" module="swift.common.request_helpers" names="swift.common.request_helpers.is_user_meta"><desc_addname xml:space="preserve">swift.common.request_helpers.</desc_addname><desc_name xml:space="preserve">is_user_meta</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">server_type</desc_parameter><desc_parameter xml:space="preserve">key</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Tests if a header key starts with and is longer than the user
                        metadata prefix for given server type.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">server_type</literal_strong> – type of backend server i.e. [account|container|object]</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">key</literal_strong> – header key</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>True if the key satisfies the test, False otherwise</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'remove_items()\ (in\ module\ swift.common.request_helpers)',\ u'swift.common.request_helpers.remove_items',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="remove_items" ids="swift.common.request_helpers.remove_items" module="swift.common.request_helpers" names="swift.common.request_helpers.remove_items"><desc_addname xml:space="preserve">swift.common.request_helpers.</desc_addname><desc_name xml:space="preserve">remove_items</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">headers</desc_parameter><desc_parameter xml:space="preserve">condition</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Removes items from a dict whose keys satisfy
                        the given condition.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">headers</literal_strong> – a dict of headers</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">condition</literal_strong> – a function that will be passed the header key as a
                                            single argument and should return True if the header
                                            is to be removed.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a dict, possibly empty, of headers that have been removed</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'resolve_etag_is_at_header()\ (in\ module\ swift.common.request_helpers)',\ u'swift.common.request_helpers.resolve_etag_is_at_header',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="resolve_etag_is_at_header" ids="swift.common.request_helpers.resolve_etag_is_at_header" module="swift.common.request_helpers" names="swift.common.request_helpers.resolve_etag_is_at_header"><desc_addname xml:space="preserve">swift.common.request_helpers.</desc_addname><desc_name xml:space="preserve">resolve_etag_is_at_header</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter><desc_parameter xml:space="preserve">metadata</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Helper function to resolve an alternative etag value that may be stored in
                        metadata under an alternate name.</paragraph>
                    <paragraph>The value of the request’s X-Backend-Etag-Is-At header (if it exists) is a
                        comma separated list of alternate names in the metadata at which an
                        alternate etag value may be found. This list is processed in order until an
                        alternate etag is found.</paragraph>
                    <paragraph>The left most value in X-Backend-Etag-Is-At will have been set by the left
                        most middleware, or if no middleware, by ECObjectController, if an EC
                        policy is in use. The left most middleware is assumed to be the authority
                        on what the etag value of the object content is.</paragraph>
                    <paragraph>The resolver will work from left to right in the list until it finds a
                        value that is a name in the given metadata. So the left most wins, IF it
                        exists in the metadata.</paragraph>
                    <paragraph>By way of example, assume the encrypter middleware is installed. If an
                        object is <emphasis>not</emphasis> encrypted then the resolver will not find the encrypter
                        middleware’s alternate etag sysmeta (X-Object-Sysmeta-Crypto-Etag) but will
                        then find the EC alternate etag (if EC policy). But if the object <emphasis>is</emphasis>
                        encrypted then X-Object-Sysmeta-Crypto-Etag is found and used, which is
                        correct because it should be preferred over X-Object-Sysmeta-Crypto-Etag.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">req</literal_strong> – a swob Request</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">metadata</literal_strong> – a dict containing object metadata</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>an alternate etag value if any is found, otherwise None</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'split_and_validate_path()\ (in\ module\ swift.common.request_helpers)',\ u'swift.common.request_helpers.split_and_validate_path',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="split_and_validate_path" ids="swift.common.request_helpers.split_and_validate_path" module="swift.common.request_helpers" names="swift.common.request_helpers.split_and_validate_path"><desc_addname xml:space="preserve">swift.common.request_helpers.</desc_addname><desc_name xml:space="preserve">split_and_validate_path</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">request</desc_parameter><desc_parameter xml:space="preserve">minsegs=1</desc_parameter><desc_parameter xml:space="preserve">maxsegs=None</desc_parameter><desc_parameter xml:space="preserve">rest_with_last=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Utility function to split and validate the request path.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>result of <reference internal="True" refid="swift.common.utils.split_path" reftitle="swift.common.utils.split_path"><literal classes="xref py py-meth">split_path()</literal></reference> if
                                    everything’s okay</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>HTTPBadRequest</literal_strong> – if something’s not okay</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'strip_object_transient_sysmeta_prefix()\ (in\ module\ swift.common.request_helpers)',\ u'swift.common.request_helpers.strip_object_transient_sysmeta_prefix',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="strip_object_transient_sysmeta_prefix" ids="swift.common.request_helpers.strip_object_transient_sysmeta_prefix" module="swift.common.request_helpers" names="swift.common.request_helpers.strip_object_transient_sysmeta_prefix"><desc_addname xml:space="preserve">swift.common.request_helpers.</desc_addname><desc_name xml:space="preserve">strip_object_transient_sysmeta_prefix</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">key</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Removes the object transient system metadata prefix from the start of a
                        header key.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">key</literal_strong> – header key</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>stripped header key</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'strip_sys_meta_prefix()\ (in\ module\ swift.common.request_helpers)',\ u'swift.common.request_helpers.strip_sys_meta_prefix',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="strip_sys_meta_prefix" ids="swift.common.request_helpers.strip_sys_meta_prefix" module="swift.common.request_helpers" names="swift.common.request_helpers.strip_sys_meta_prefix"><desc_addname xml:space="preserve">swift.common.request_helpers.</desc_addname><desc_name xml:space="preserve">strip_sys_meta_prefix</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">server_type</desc_parameter><desc_parameter xml:space="preserve">key</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Removes the system metadata prefix for a given server type from the start
                        of a header key.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">server_type</literal_strong> – type of backend server i.e. [account|container|object]</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">key</literal_strong> – header key</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>stripped header key</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'strip_user_meta_prefix()\ (in\ module\ swift.common.request_helpers)',\ u'swift.common.request_helpers.strip_user_meta_prefix',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="strip_user_meta_prefix" ids="swift.common.request_helpers.strip_user_meta_prefix" module="swift.common.request_helpers" names="swift.common.request_helpers.strip_user_meta_prefix"><desc_addname xml:space="preserve">swift.common.request_helpers.</desc_addname><desc_name xml:space="preserve">strip_user_meta_prefix</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">server_type</desc_parameter><desc_parameter xml:space="preserve">key</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Removes the user metadata prefix for a given server type from the start
                        of a header key.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">server_type</literal_strong> – type of backend server i.e. [account|container|object]</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">key</literal_strong> – header key</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>stripped header key</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'update_etag_is_at_header()\ (in\ module\ swift.common.request_helpers)',\ u'swift.common.request_helpers.update_etag_is_at_header',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="update_etag_is_at_header" ids="swift.common.request_helpers.update_etag_is_at_header" module="swift.common.request_helpers" names="swift.common.request_helpers.update_etag_is_at_header"><desc_addname xml:space="preserve">swift.common.request_helpers.</desc_addname><desc_name xml:space="preserve">update_etag_is_at_header</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter><desc_parameter xml:space="preserve">name</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Helper function to update an X-Backend-Etag-Is-At header whose value is a
                        list of alternative header names at which the actual object etag may be
                        found. This informs the object server where to look for the actual object
                        etag when processing conditional requests.</paragraph>
                    <paragraph>Since the proxy server and/or middleware may set alternative etag header
                        names, the value of X-Backend-Etag-Is-At is a comma separated list which
                        the object server inspects in order until it finds an etag value.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">req</literal_strong> – a swob Request</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> – name of a sysmeta where alternative etag may be found</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <target refid="swob"></target>
        </section>
        <section dupnames="swob" ids="swob id9" names="swob">
            <title>Swob</title>
            <target ids="module-swift.common.swob" ismod="True"></target>
            <index entries="['single',\ u'swift.common.swob\ (module)',\ u'module-swift.common.swob',\ '',\ None]"></index>
            <paragraph>Implementation of WSGI Request and Response objects.</paragraph>
            <paragraph>This library has a very similar API to Webob.  It wraps WSGI request
                environments and response values into objects that are more friendly to
                interact with.</paragraph>
            <paragraph>Why Swob and not just use WebOb?
                By Michael Barton</paragraph>
            <paragraph>We used webob for years. The main problem was that the interface
                wasn’t stable. For a while, each of our several test suites required
                a slightly different version of webob to run, and none of them worked
                with the then-current version. It was a huge headache, so we just
                scrapped it.</paragraph>
            <paragraph>This is kind of a ton of code, but it’s also been a huge relief to
                not have to scramble to add a bunch of code branches all over the
                place to keep Swift working every time webob decides some interface
                needs to change.</paragraph>
            <index entries="['single',\ u'Accept\ (class\ in\ swift.common.swob)',\ u'swift.common.swob.Accept',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="Accept" ids="swift.common.swob.Accept" module="swift.common.swob" names="swift.common.swob.Accept"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.swob.</desc_addname><desc_name xml:space="preserve">Accept</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">headerval</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Wraps a Request’s Accept header as a friendly object.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">headerval</literal_strong> – value of the header as a str</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                    <index entries="['single',\ u'best_match()\ (swift.common.swob.Accept\ method)',\ u'swift.common.swob.Accept.best_match',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Accept" first="False" fullname="Accept.best_match" ids="swift.common.swob.Accept.best_match" module="swift.common.swob" names="swift.common.swob.Accept.best_match"><desc_name xml:space="preserve">best_match</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">options</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns the item from “options” that best matches the accept header.
                                Returns None if no available options are acceptable to the client.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">options</literal_strong> – a list of content-types the server can respond with</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'HeaderEnvironProxy\ (class\ in\ swift.common.swob)',\ u'swift.common.swob.HeaderEnvironProxy',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="HeaderEnvironProxy" ids="swift.common.swob.HeaderEnvironProxy" module="swift.common.swob" names="swift.common.swob.HeaderEnvironProxy"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.swob.</desc_addname><desc_name xml:space="preserve">HeaderEnvironProxy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">environ</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">_abcoll.MutableMapping</literal></paragraph>
                    <paragraph>A dict-like object that proxies requests to a wsgi environ,
                        rewriting header keys to environ keys.</paragraph>
                    <paragraph>For example, headers[‘Content-Range’] sets and gets the value of
                        headers.environ[‘HTTP_CONTENT_RANGE’]</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'Match\ (class\ in\ swift.common.swob)',\ u'swift.common.swob.Match',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="Match" ids="swift.common.swob.Match" module="swift.common.swob" names="swift.common.swob.Match"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.swob.</desc_addname><desc_name xml:space="preserve">Match</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">headerval</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Wraps a Request’s If-[None-]Match header as a friendly object.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">headerval</literal_strong> – value of the header as a str</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'Range\ (class\ in\ swift.common.swob)',\ u'swift.common.swob.Range',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="Range" ids="swift.common.swob.Range" module="swift.common.swob" names="swift.common.swob.Range"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.swob.</desc_addname><desc_name xml:space="preserve">Range</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">headerval</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Wraps a Request’s Range header as a friendly object.
                        After initialization, “range.ranges” is populated with a list
                        of (start, end) tuples denoting the requested ranges.</paragraph>
                    <paragraph>If there were any syntactically-invalid byte-range-spec values, the
                        constructor will raise a ValueError, per the relevant RFC:</paragraph>
                    <paragraph>“The recipient of a byte-range-set that includes one or more syntactically
                        invalid byte-range-spec values MUST ignore the header field that includes
                        that byte-range-set.”</paragraph>
                    <paragraph>According to the RFC 2616 specification, the following cases will be all
                        considered as syntactically invalid, thus, a ValueError is thrown so that
                        the range header will be ignored. If the range value contains at least
                        one of the following cases, the entire range is considered invalid,
                        ValueError will be thrown so that the header will be ignored.</paragraph>
                    <enumerated_list enumtype="arabic" prefix="" suffix=".">
                        <list_item>
                            <paragraph>value not starts with bytes=</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>range value start is greater than the end, eg. bytes=5-3</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>range does not have start or end, eg. bytes=-</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>range does not have hyphen, eg. bytes=45</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>range value is non numeric</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>any combination of the above</paragraph>
                        </list_item>
                    </enumerated_list>
                    <paragraph>Every syntactically valid range will be added into the ranges list
                        even when some of the ranges may not be satisfied by underlying content.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">headerval</literal_strong> – value of the header as a str</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                    <index entries="['single',\ u'ranges_for_length()\ (swift.common.swob.Range\ method)',\ u'swift.common.swob.Range.ranges_for_length',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Range" first="False" fullname="Range.ranges_for_length" ids="swift.common.swob.Range.ranges_for_length" module="swift.common.swob" names="swift.common.swob.Range.ranges_for_length"><desc_name xml:space="preserve">ranges_for_length</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">length</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>This method is used to return multiple ranges for a given length
                                which should represent the length of the underlying content.
                                The constructor method __init__ made sure that any range in ranges
                                list is syntactically valid. So if length is None or size of the
                                ranges is zero, then the Range header should be ignored which will
                                eventually make the response to be 200.</paragraph>
                            <paragraph>If an empty list is returned by this method, it indicates that there
                                are unsatisfiable ranges found in the Range header, 416 will be
                                returned.</paragraph>
                            <paragraph>if a returned list has at least one element, the list indicates that
                                there is at least one range valid and the server should serve the
                                request with a 206 status code.</paragraph>
                            <paragraph>The start value of each range represents the starting position in
                                the content, the end value represents the ending position. This
                                method purposely adds 1 to the end number because the spec defines
                                the Range to be inclusive.</paragraph>
                            <paragraph>The Range spec can be found at the following link:
                                <reference refuri="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1</reference></paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">length</literal_strong> – length of the underlying content</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'Request\ (class\ in\ swift.common.swob)',\ u'swift.common.swob.Request',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="Request" ids="swift.common.swob.Request" module="swift.common.swob" names="swift.common.swob.Request"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.swob.</desc_addname><desc_name xml:space="preserve">Request</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">environ</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>WSGI Request object.</paragraph>
                    <index entries="['single',\ u'accept\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.accept',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.accept" ids="swift.common.swob.Request.accept" module="swift.common.swob" names="swift.common.swob.Request.accept"><desc_name xml:space="preserve">accept</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Retrieve and set the accept property in the WSGI environ, as a Accept object</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'acl\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.acl',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.acl" ids="swift.common.swob.Request.acl" module="swift.common.swob" names="swift.common.swob.Request.acl"><desc_name xml:space="preserve">acl</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Get and set the swob.ACL property in the WSGI environment</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'blank()\ (swift.common.swob.Request\ class\ method)',\ u'swift.common.swob.Request.blank',\ '',\ None]"></index>
                    <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                        <desc_signature class="Request" first="False" fullname="Request.blank" ids="swift.common.swob.Request.blank" module="swift.common.swob" names="swift.common.swob.Request.blank"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">blank</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">path</desc_parameter><desc_parameter xml:space="preserve">environ=None</desc_parameter><desc_parameter xml:space="preserve">headers=None</desc_parameter><desc_parameter xml:space="preserve">body=None</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create a new request object with the given parameters, and an
                                environment otherwise filled in with non-surprising default values.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">path</literal_strong> – encoded, parsed, and unquoted into PATH_INFO</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">environ</literal_strong> – WSGI environ dictionary</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">headers</literal_strong> – HTTP headers</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">body</literal_strong> – stuffed in a WsgiBytesIO and hung on wsgi.input</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">kwargs</literal_strong> – any environ key with an property setter</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'body\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.body',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.body" ids="swift.common.swob.Request.body" module="swift.common.swob" names="swift.common.swob.Request.body"><desc_name xml:space="preserve">body</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Get and set the request body str</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'body_file\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.body_file',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.body_file" ids="swift.common.swob.Request.body_file" module="swift.common.swob" names="swift.common.swob.Request.body_file"><desc_name xml:space="preserve">body_file</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Get and set the wsgi.input property in the WSGI environment</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'call_application()\ (swift.common.swob.Request\ method)',\ u'swift.common.swob.Request.call_application',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Request" first="False" fullname="Request.call_application" ids="swift.common.swob.Request.call_application" module="swift.common.swob" names="swift.common.swob.Request.call_application"><desc_name xml:space="preserve">call_application</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">application</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Calls the application with this request’s environment.  Returns the
                                status, headers, and app_iter for the response as a tuple.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">application</literal_strong> – the WSGI application to call</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'content_length\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.content_length',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.content_length" ids="swift.common.swob.Request.content_length" module="swift.common.swob" names="swift.common.swob.Request.content_length"><desc_name xml:space="preserve">content_length</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Retrieve and set the content-length header as an int</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'copy_get()\ (swift.common.swob.Request\ method)',\ u'swift.common.swob.Request.copy_get',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Request" first="False" fullname="Request.copy_get" ids="swift.common.swob.Request.copy_get" module="swift.common.swob" names="swift.common.swob.Request.copy_get"><desc_name xml:space="preserve">copy_get</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Makes a copy of the request, converting it to a GET.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_response()\ (swift.common.swob.Request\ method)',\ u'swift.common.swob.Request.get_response',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Request" first="False" fullname="Request.get_response" ids="swift.common.swob.Request.get_response" module="swift.common.swob" names="swift.common.swob.Request.get_response"><desc_name xml:space="preserve">get_response</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">application</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Calls the application with this request’s environment.  Returns a
                                Response object that wraps up the application’s result.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">application</literal_strong> – the WSGI application to call</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'host\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.host',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.host" ids="swift.common.swob.Request.host" module="swift.common.swob" names="swift.common.swob.Request.host"><desc_name xml:space="preserve">host</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Get and set the HTTP_HOST property in the WSGI environment</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'host_url\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.host_url',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.host_url" ids="swift.common.swob.Request.host_url" module="swift.common.swob" names="swift.common.swob.Request.host_url"><desc_name xml:space="preserve">host_url</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Get url for request/response up to path</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'if_match\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.if_match',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.if_match" ids="swift.common.swob.Request.if_match" module="swift.common.swob" names="swift.common.swob.Request.if_match"><desc_name xml:space="preserve">if_match</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Retrieve and set the if-match property in the WSGI environ, as a Match object</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'if_modified_since\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.if_modified_since',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.if_modified_since" ids="swift.common.swob.Request.if_modified_since" module="swift.common.swob" names="swift.common.swob.Request.if_modified_since"><desc_name xml:space="preserve">if_modified_since</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Retrieve and set the if-modified-since header as a datetime, set it with a datetime, int, or str</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'if_none_match\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.if_none_match',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.if_none_match" ids="swift.common.swob.Request.if_none_match" module="swift.common.swob" names="swift.common.swob.Request.if_none_match"><desc_name xml:space="preserve">if_none_match</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Retrieve and set the if-none-match property in the WSGI environ, as a Match object</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'if_unmodified_since\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.if_unmodified_since',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.if_unmodified_since" ids="swift.common.swob.Request.if_unmodified_since" module="swift.common.swob" names="swift.common.swob.Request.if_unmodified_since"><desc_name xml:space="preserve">if_unmodified_since</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Retrieve and set the if-unmodified-since header as a datetime, set it with a datetime, int, or str</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'message_length()\ (swift.common.swob.Request\ method)',\ u'swift.common.swob.Request.message_length',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Request" first="False" fullname="Request.message_length" ids="swift.common.swob.Request.message_length" module="swift.common.swob" names="swift.common.swob.Request.message_length"><desc_name xml:space="preserve">message_length</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Properly determine the message length for this request. It will return
                                an integer if the headers explicitly contain the message length, or
                                None if the headers don’t contain a length. The ValueError exception
                                will be raised if the headers are invalid.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong>ValueError</literal_strong> – if either transfer-encoding or content-length
                                                    headers have bad values</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong>AttributeError</literal_strong> – if the last value of the transfer-encoding
                                                    header is not “chunked”</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'method\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.method',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.method" ids="swift.common.swob.Request.method" module="swift.common.swob" names="swift.common.swob.Request.method"><desc_name xml:space="preserve">method</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Get and set the REQUEST_METHOD property in the WSGI environment</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'params\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.params',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.params" ids="swift.common.swob.Request.params" module="swift.common.swob" names="swift.common.swob.Request.params"><desc_name xml:space="preserve">params</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Provides QUERY_STRING parameters as a dictionary</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'path\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.path',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.path" ids="swift.common.swob.Request.path" module="swift.common.swob" names="swift.common.swob.Request.path"><desc_name xml:space="preserve">path</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Provides the full path of the request, excluding the QUERY_STRING</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'path_info\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.path_info',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.path_info" ids="swift.common.swob.Request.path_info" module="swift.common.swob" names="swift.common.swob.Request.path_info"><desc_name xml:space="preserve">path_info</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Get and set the PATH_INFO property in the WSGI environment</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'path_info_pop()\ (swift.common.swob.Request\ method)',\ u'swift.common.swob.Request.path_info_pop',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Request" first="False" fullname="Request.path_info_pop" ids="swift.common.swob.Request.path_info_pop" module="swift.common.swob" names="swift.common.swob.Request.path_info_pop"><desc_name xml:space="preserve">path_info_pop</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Takes one path portion (delineated by slashes) from the
                                path_info, and appends it to the script_name.  Returns
                                the path segment.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'path_qs\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.path_qs',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.path_qs" ids="swift.common.swob.Request.path_qs" module="swift.common.swob" names="swift.common.swob.Request.path_qs"><desc_name xml:space="preserve">path_qs</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>The path of the request, without host but with query string.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'query_string\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.query_string',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.query_string" ids="swift.common.swob.Request.query_string" module="swift.common.swob" names="swift.common.swob.Request.query_string"><desc_name xml:space="preserve">query_string</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Get and set the QUERY_STRING property in the WSGI environment</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'range\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.range',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.range" ids="swift.common.swob.Request.range" module="swift.common.swob" names="swift.common.swob.Request.range"><desc_name xml:space="preserve">range</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Retrieve and set the range property in the WSGI environ, as a Range object</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'referer\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.referer',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.referer" ids="swift.common.swob.Request.referer" module="swift.common.swob" names="swift.common.swob.Request.referer"><desc_name xml:space="preserve">referer</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Get and set the HTTP_REFERER property in the WSGI environment</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'referrer\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.referrer',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.referrer" ids="swift.common.swob.Request.referrer" module="swift.common.swob" names="swift.common.swob.Request.referrer"><desc_name xml:space="preserve">referrer</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Get and set the HTTP_REFERER property in the WSGI environment</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'remote_addr\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.remote_addr',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.remote_addr" ids="swift.common.swob.Request.remote_addr" module="swift.common.swob" names="swift.common.swob.Request.remote_addr"><desc_name xml:space="preserve">remote_addr</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Get and set the REMOTE_ADDR property in the WSGI environment</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'remote_user\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.remote_user',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.remote_user" ids="swift.common.swob.Request.remote_user" module="swift.common.swob" names="swift.common.swob.Request.remote_user"><desc_name xml:space="preserve">remote_user</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Get and set the REMOTE_USER property in the WSGI environment</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'script_name\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.script_name',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.script_name" ids="swift.common.swob.Request.script_name" module="swift.common.swob" names="swift.common.swob.Request.script_name"><desc_name xml:space="preserve">script_name</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Get and set the SCRIPT_NAME property in the WSGI environment</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'split_path()\ (swift.common.swob.Request\ method)',\ u'swift.common.swob.Request.split_path',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Request" first="False" fullname="Request.split_path" ids="swift.common.swob.Request.split_path" module="swift.common.swob" names="swift.common.swob.Request.split_path"><desc_name xml:space="preserve">split_path</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">minsegs=1</desc_parameter><desc_parameter xml:space="preserve">maxsegs=None</desc_parameter><desc_parameter xml:space="preserve">rest_with_last=False</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Validate and split the Request’s path.</paragraph>
                            <paragraph><strong>Examples</strong>:</paragraph>
                            <literal_block xml:space="preserve">['a'] = split_path('/a')
['a', None] = split_path('/a', 1, 2)
['a', 'c'] = split_path('/a/c', 1, 2)
['a', 'c', 'o/r'] = split_path('/a/c/o/r', 1, 3, True)</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">minsegs</literal_strong> – Minimum number of segments to be extracted</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">maxsegs</literal_strong> – Maximum number of segments to be extracted</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">rest_with_last</literal_strong> – If True, trailing data will be returned as part
                                                    of last segment.  If False, and there is
                                                    trailing data, raises ValueError.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>list of segments with a length of maxsegs (non-existent
                                            segments will return as None)</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Raises</field_name>
                                    <field_body>
                                        <paragraph><literal_strong>ValueError</literal_strong> – if given an invalid path</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'str_params\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.str_params',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.str_params" ids="swift.common.swob.Request.str_params" module="swift.common.swob" names="swift.common.swob.Request.str_params"><desc_name xml:space="preserve">str_params</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Provides QUERY_STRING parameters as a dictionary</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'swift_entity_path\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.swift_entity_path',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.swift_entity_path" ids="swift.common.swob.Request.swift_entity_path" module="swift.common.swob" names="swift.common.swob.Request.swift_entity_path"><desc_name xml:space="preserve">swift_entity_path</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Provides the account/container/object path, sans API version.</paragraph>
                            <paragraph>This can be useful when constructing a path to send to a backend
                                server, as that path will need everything after the “/v1”.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'timestamp\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.timestamp',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.timestamp" ids="swift.common.swob.Request.timestamp" module="swift.common.swob" names="swift.common.swob.Request.timestamp"><desc_name xml:space="preserve">timestamp</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Provides HTTP_X_TIMESTAMP as a <reference internal="True" refid="swift.common.utils.Timestamp" reftitle="swift.common.utils.Timestamp"><literal classes="xref py py-class">Timestamp</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'url\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.url',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.url" ids="swift.common.swob.Request.url" module="swift.common.swob" names="swift.common.swob.Request.url"><desc_name xml:space="preserve">url</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Provides the full url of the request</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'user_agent\ (swift.common.swob.Request\ attribute)',\ u'swift.common.swob.Request.user_agent',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Request" first="False" fullname="Request.user_agent" ids="swift.common.swob.Request.user_agent" module="swift.common.swob" names="swift.common.swob.Request.user_agent"><desc_name xml:space="preserve">user_agent</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Get and set the HTTP_USER_AGENT property in the WSGI environment</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'Response\ (class\ in\ swift.common.swob)',\ u'swift.common.swob.Response',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="Response" ids="swift.common.swob.Response" module="swift.common.swob" names="swift.common.swob.Response"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.swob.</desc_addname><desc_name xml:space="preserve">Response</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">body=None</desc_parameter><desc_parameter xml:space="preserve">status=200</desc_parameter><desc_parameter xml:space="preserve">headers=None</desc_parameter><desc_parameter xml:space="preserve">app_iter=None</desc_parameter><desc_parameter xml:space="preserve">request=None</desc_parameter><desc_parameter xml:space="preserve">conditional_response=False</desc_parameter><desc_parameter xml:space="preserve">conditional_etag=None</desc_parameter><desc_parameter xml:space="preserve">**kw</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>WSGI Response object.</paragraph>
                    <index entries="['single',\ u'__call__()\ (swift.common.swob.Response\ method)',\ u'swift.common.swob.Response.__call__',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Response" first="False" fullname="Response.__call__" ids="swift.common.swob.Response.__call__" module="swift.common.swob" names="swift.common.swob.Response.__call__"><desc_name xml:space="preserve">__call__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">env</desc_parameter><desc_parameter xml:space="preserve">start_response</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Respond to the WSGI request.</paragraph>
                            <warning>
                                <paragraph>This will translate any relative Location header value to an
                                    absolute URL using the WSGI environment’s HOST_URL as a
                                    prefix, as RFC 2616 specifies.</paragraph>
                                <paragraph>However, it is quite common to use relative redirects,
                                    especially when it is difficult to know the exact HOST_URL
                                    the browser would have used when behind several CNAMEs, CDN
                                    services, etc. All modern browsers support relative
                                    redirects.</paragraph>
                                <paragraph>To skip over RFC enforcement of the Location header value,
                                    you may set <literal>env['swift.leave_relative_location'] = True</literal>
                                    in the WSGI environment.</paragraph>
                            </warning>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'absolute_location()\ (swift.common.swob.Response\ method)',\ u'swift.common.swob.Response.absolute_location',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Response" first="False" fullname="Response.absolute_location" ids="swift.common.swob.Response.absolute_location" module="swift.common.swob" names="swift.common.swob.Response.absolute_location"><desc_name xml:space="preserve">absolute_location</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Attempt to construct an absolute location.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'accept_ranges\ (swift.common.swob.Response\ attribute)',\ u'swift.common.swob.Response.accept_ranges',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Response" first="False" fullname="Response.accept_ranges" ids="swift.common.swob.Response.accept_ranges" module="swift.common.swob" names="swift.common.swob.Response.accept_ranges"><desc_name xml:space="preserve">accept_ranges</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Retrieve and set the accept-ranges header</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'app_iter\ (swift.common.swob.Response\ attribute)',\ u'swift.common.swob.Response.app_iter',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Response" first="False" fullname="Response.app_iter" ids="swift.common.swob.Response.app_iter" module="swift.common.swob" names="swift.common.swob.Response.app_iter"><desc_name xml:space="preserve">app_iter</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Retrieve and set the response app_iter</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'body\ (swift.common.swob.Response\ attribute)',\ u'swift.common.swob.Response.body',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Response" first="False" fullname="Response.body" ids="swift.common.swob.Response.body" module="swift.common.swob" names="swift.common.swob.Response.body"><desc_name xml:space="preserve">body</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Retrieve and set the Response body str</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'charset\ (swift.common.swob.Response\ attribute)',\ u'swift.common.swob.Response.charset',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Response" first="False" fullname="Response.charset" ids="swift.common.swob.Response.charset" module="swift.common.swob" names="swift.common.swob.Response.charset"><desc_name xml:space="preserve">charset</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Retrieve and set the response charset</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'conditional_etag\ (swift.common.swob.Response\ attribute)',\ u'swift.common.swob.Response.conditional_etag',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Response" first="False" fullname="Response.conditional_etag" ids="swift.common.swob.Response.conditional_etag" module="swift.common.swob" names="swift.common.swob.Response.conditional_etag"><desc_name xml:space="preserve">conditional_etag</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>The conditional_etag keyword argument for Response will allow the
                                conditional match value of a If-Match request to be compared to a
                                non-standard value.</paragraph>
                            <paragraph>This is available for Storage Policies that do not store the client
                                object data verbatim on the storage nodes, but still need support
                                conditional requests.</paragraph>
                            <paragraph>It’s most effectively used with X-Backend-Etag-Is-At which would
                                define the additional Metadata key(s) where the original ETag of the
                                clear-form client request data may be found.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'content_length\ (swift.common.swob.Response\ attribute)',\ u'swift.common.swob.Response.content_length',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Response" first="False" fullname="Response.content_length" ids="swift.common.swob.Response.content_length" module="swift.common.swob" names="swift.common.swob.Response.content_length"><desc_name xml:space="preserve">content_length</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Retrieve and set the content-length header as an int</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'content_range\ (swift.common.swob.Response\ attribute)',\ u'swift.common.swob.Response.content_range',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Response" first="False" fullname="Response.content_range" ids="swift.common.swob.Response.content_range" module="swift.common.swob" names="swift.common.swob.Response.content_range"><desc_name xml:space="preserve">content_range</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Retrieve and set the content-range header</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'content_type\ (swift.common.swob.Response\ attribute)',\ u'swift.common.swob.Response.content_type',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Response" first="False" fullname="Response.content_type" ids="swift.common.swob.Response.content_type" module="swift.common.swob" names="swift.common.swob.Response.content_type"><desc_name xml:space="preserve">content_type</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Retrieve and set the response Content-Type header</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'etag\ (swift.common.swob.Response\ attribute)',\ u'swift.common.swob.Response.etag',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Response" first="False" fullname="Response.etag" ids="swift.common.swob.Response.etag" module="swift.common.swob" names="swift.common.swob.Response.etag"><desc_name xml:space="preserve">etag</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Retrieve and set the response Etag header</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'fix_conditional_response()\ (swift.common.swob.Response\ method)',\ u'swift.common.swob.Response.fix_conditional_response',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Response" first="False" fullname="Response.fix_conditional_response" ids="swift.common.swob.Response.fix_conditional_response" module="swift.common.swob" names="swift.common.swob.Response.fix_conditional_response"><desc_name xml:space="preserve">fix_conditional_response</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>You may call this once you have set the content_length to the whole
                                object length and body or app_iter to reset the content_length
                                properties on the request.</paragraph>
                            <paragraph>It is ok to not call this method, the conditional response will be
                                maintained for you when you __call__ the response.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'host_url\ (swift.common.swob.Response\ attribute)',\ u'swift.common.swob.Response.host_url',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Response" first="False" fullname="Response.host_url" ids="swift.common.swob.Response.host_url" module="swift.common.swob" names="swift.common.swob.Response.host_url"><desc_name xml:space="preserve">host_url</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Get url for request/response up to path</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'last_modified\ (swift.common.swob.Response\ attribute)',\ u'swift.common.swob.Response.last_modified',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Response" first="False" fullname="Response.last_modified" ids="swift.common.swob.Response.last_modified" module="swift.common.swob" names="swift.common.swob.Response.last_modified"><desc_name xml:space="preserve">last_modified</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Retrieve and set the last-modified header as a datetime, set it with a datetime, int, or str</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'location\ (swift.common.swob.Response\ attribute)',\ u'swift.common.swob.Response.location',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Response" first="False" fullname="Response.location" ids="swift.common.swob.Response.location" module="swift.common.swob" names="swift.common.swob.Response.location"><desc_name xml:space="preserve">location</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Retrieve and set the location header</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'status\ (swift.common.swob.Response\ attribute)',\ u'swift.common.swob.Response.status',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Response" first="False" fullname="Response.status" ids="swift.common.swob.Response.status" module="swift.common.swob" names="swift.common.swob.Response.status"><desc_name xml:space="preserve">status</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Retrieve and set the Response status, e.g. ‘200 OK’</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'www_authenticate()\ (swift.common.swob.Response\ method)',\ u'swift.common.swob.Response.www_authenticate',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Response" first="False" fullname="Response.www_authenticate" ids="swift.common.swob.Response.www_authenticate" module="swift.common.swob" names="swift.common.swob.Response.www_authenticate"><desc_name xml:space="preserve">www_authenticate</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Construct a suitable value for WWW-Authenticate response header</paragraph>
                            <paragraph>If we have a request and a valid-looking path, the realm
                                is the account; otherwise we set it to ‘unknown’.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'StatusMap\ (class\ in\ swift.common.swob)',\ u'swift.common.swob.StatusMap',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="StatusMap" ids="swift.common.swob.StatusMap" module="swift.common.swob" names="swift.common.swob.StatusMap"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.swob.</desc_addname><desc_name xml:space="preserve">StatusMap</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>A dict-like object that returns HTTPException subclasses/factory functions
                        where the given key is the status code.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'WsgiBytesIO\ (class\ in\ swift.common.swob)',\ u'swift.common.swob.WsgiBytesIO',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="WsgiBytesIO" ids="swift.common.swob.WsgiBytesIO" module="swift.common.swob" names="swift.common.swob.WsgiBytesIO"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.swob.</desc_addname><desc_name xml:space="preserve">WsgiBytesIO</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">buf=''</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">StringIO.StringIO</literal></paragraph>
                    <paragraph>This class adds support for the additional wsgi.input methods defined on
                        eventlet.wsgi.Input to the BytesIO class which would otherwise be a fine
                        stand-in for the file-like object in the WSGI environment.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'wsgify()\ (in\ module\ swift.common.swob)',\ u'swift.common.swob.wsgify',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="wsgify" ids="swift.common.swob.wsgify" module="swift.common.swob" names="swift.common.swob.wsgify"><desc_addname xml:space="preserve">swift.common.swob.</desc_addname><desc_name xml:space="preserve">wsgify</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">func</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>A decorator for translating functions which take a swob Request object and
                        return a Response object into WSGI callables.  Also catches any raised
                        HTTPExceptions and treats them as a returned Response.</paragraph>
                </desc_content>
            </desc>
            <target refid="utils"></target>
        </section>
        <section dupnames="utils" ids="utils id10" names="utils">
            <title>Utils</title>
            <target ids="module-swift.common.utils" ismod="True"></target>
            <index entries="['single',\ u'swift.common.utils\ (module)',\ u'module-swift.common.utils',\ '',\ None]"></index>
            <paragraph>Miscellaneous utility functions for use with Swift.</paragraph>
            <index entries="['single',\ u'CloseableChain\ (class\ in\ swift.common.utils)',\ u'swift.common.utils.CloseableChain',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="CloseableChain" ids="swift.common.utils.CloseableChain" module="swift.common.utils" names="swift.common.utils.CloseableChain"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">CloseableChain</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*iterables</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Like itertools.chain, but with a close method that will attempt to invoke
                        its sub-iterators’ close methods, if any.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ContextPool\ (class\ in\ swift.common.utils)',\ u'swift.common.utils.ContextPool',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ContextPool" ids="swift.common.utils.ContextPool" module="swift.common.utils" names="swift.common.utils.ContextPool"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">ContextPool</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">size=1000</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">eventlet.greenpool.GreenPool</literal></paragraph>
                    <paragraph>GreenPool subclassed to kill its coros when it gets gc’ed</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'GreenAsyncPile\ (class\ in\ swift.common.utils)',\ u'swift.common.utils.GreenAsyncPile',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="GreenAsyncPile" ids="swift.common.utils.GreenAsyncPile" module="swift.common.utils" names="swift.common.utils.GreenAsyncPile"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">GreenAsyncPile</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">size_or_pool</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Runs jobs in a pool of green threads, and the results can be retrieved by
                        using this object as an iterator.</paragraph>
                    <paragraph>This is very similar in principle to eventlet.GreenPile, except it returns
                        results as they become available rather than in the order they were
                        launched.</paragraph>
                    <paragraph>Correlating results with jobs (if necessary) is left to the caller.</paragraph>
                    <index entries="['single',\ u'spawn()\ (swift.common.utils.GreenAsyncPile\ method)',\ u'swift.common.utils.GreenAsyncPile.spawn',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="GreenAsyncPile" first="False" fullname="GreenAsyncPile.spawn" ids="swift.common.utils.GreenAsyncPile.spawn" module="swift.common.utils" names="swift.common.utils.GreenAsyncPile.spawn"><desc_name xml:space="preserve">spawn</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">func</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Spawn a job in a green thread on the pile.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'waitall()\ (swift.common.utils.GreenAsyncPile\ method)',\ u'swift.common.utils.GreenAsyncPile.waitall',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="GreenAsyncPile" first="False" fullname="GreenAsyncPile.waitall" ids="swift.common.utils.GreenAsyncPile.waitall" module="swift.common.utils" names="swift.common.utils.GreenAsyncPile.waitall"><desc_name xml:space="preserve">waitall</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">timeout</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Wait timeout seconds for any results to come in.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">timeout</literal_strong> – seconds to wait for results</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>list of results accrued in that time</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'waitfirst()\ (swift.common.utils.GreenAsyncPile\ method)',\ u'swift.common.utils.GreenAsyncPile.waitfirst',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="GreenAsyncPile" first="False" fullname="GreenAsyncPile.waitfirst" ids="swift.common.utils.GreenAsyncPile.waitfirst" module="swift.common.utils" names="swift.common.utils.GreenAsyncPile.waitfirst"><desc_name xml:space="preserve">waitfirst</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">timeout</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Wait up to timeout seconds for first result to come in.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">timeout</literal_strong> – seconds to wait for results</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>first item to come back, or None</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'GreenthreadSafeIterator\ (class\ in\ swift.common.utils)',\ u'swift.common.utils.GreenthreadSafeIterator',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="GreenthreadSafeIterator" ids="swift.common.utils.GreenthreadSafeIterator" module="swift.common.utils" names="swift.common.utils.GreenthreadSafeIterator"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">GreenthreadSafeIterator</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">unsafe_iterable</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Wrap an iterator to ensure that only one greenthread is inside its next()
                        method at a time.</paragraph>
                    <paragraph>This is useful if an iterator’s next() method may perform network IO, as
                        that may trigger a greenthread context switch (aka trampoline), which can
                        give another greenthread a chance to call next(). At that point, you get
                        an error like “ValueError: generator already executing”. By wrapping calls
                        to next() with a mutex, we avoid that error.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'InputProxy\ (class\ in\ swift.common.utils)',\ u'swift.common.utils.InputProxy',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="InputProxy" ids="swift.common.utils.InputProxy" module="swift.common.utils" names="swift.common.utils.InputProxy"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">InputProxy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">wsgi_input</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>File-like object that counts bytes read.
                        To be swapped in for wsgi.input for accounting purposes.</paragraph>
                    <index entries="['single',\ u'read()\ (swift.common.utils.InputProxy\ method)',\ u'swift.common.utils.InputProxy.read',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="InputProxy" first="False" fullname="InputProxy.read" ids="swift.common.utils.InputProxy.read" module="swift.common.utils" names="swift.common.utils.InputProxy.read"><desc_name xml:space="preserve">read</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Pass read request to the underlying file-like object and
                                add bytes read to total.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'readline()\ (swift.common.utils.InputProxy\ method)',\ u'swift.common.utils.InputProxy.readline',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="InputProxy" first="False" fullname="InputProxy.readline" ids="swift.common.utils.InputProxy.readline" module="swift.common.utils" names="swift.common.utils.InputProxy.readline"><desc_name xml:space="preserve">readline</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Pass readline request to the underlying file-like object and
                                add bytes read to total.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'LRUCache\ (class\ in\ swift.common.utils)',\ u'swift.common.utils.LRUCache',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="LRUCache" ids="swift.common.utils.LRUCache" module="swift.common.utils" names="swift.common.utils.LRUCache"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">LRUCache</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">maxsize=1000</desc_parameter><desc_parameter xml:space="preserve">maxtime=3600</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Decorator for size/time bound memoization that evicts the least
                        recently used members.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'LogAdapter\ (class\ in\ swift.common.utils)',\ u'swift.common.utils.LogAdapter',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="LogAdapter" ids="swift.common.utils.LogAdapter" module="swift.common.utils" names="swift.common.utils.LogAdapter"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">LogAdapter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">logger</desc_parameter><desc_parameter xml:space="preserve">server</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">logging.LoggerAdapter</literal>, <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>A Logger like object which performs some reformatting on calls to
                        <literal classes="xref py py-meth">exception()</literal>.  Can be used to store a threadlocal transaction id and
                        client ip.</paragraph>
                    <index entries="['single',\ u'notice()\ (swift.common.utils.LogAdapter\ method)',\ u'swift.common.utils.LogAdapter.notice',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="LogAdapter" first="False" fullname="LogAdapter.notice" ids="swift.common.utils.LogAdapter.notice" module="swift.common.utils" names="swift.common.utils.LogAdapter.notice"><desc_name xml:space="preserve">notice</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">msg</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Convenience function for syslog priority LOG_NOTICE. The python
                                logging lvl is set to 25, just above info.  SysLogHandler is
                                monkey patched to map this log lvl to the LOG_NOTICE syslog
                                priority.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'process()\ (swift.common.utils.LogAdapter\ method)',\ u'swift.common.utils.LogAdapter.process',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="LogAdapter" first="False" fullname="LogAdapter.process" ids="swift.common.utils.LogAdapter.process" module="swift.common.utils" names="swift.common.utils.LogAdapter.process"><desc_name xml:space="preserve">process</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">msg</desc_parameter><desc_parameter xml:space="preserve">kwargs</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Add extra info to message</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_statsd_prefix()\ (swift.common.utils.LogAdapter\ method)',\ u'swift.common.utils.LogAdapter.set_statsd_prefix',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="LogAdapter" first="False" fullname="LogAdapter.set_statsd_prefix" ids="swift.common.utils.LogAdapter.set_statsd_prefix" module="swift.common.utils" names="swift.common.utils.LogAdapter.set_statsd_prefix"><desc_name xml:space="preserve">set_statsd_prefix</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">prefix</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>The StatsD client prefix defaults to the “name” of the logger.  This
                                method may override that default with a specific value.  Currently used
                                in the proxy-server to differentiate the Account, Container, and Object
                                controllers.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'statsd_delegate()\ (swift.common.utils.LogAdapter\ method)',\ u'swift.common.utils.LogAdapter.statsd_delegate',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="LogAdapter" first="False" fullname="LogAdapter.statsd_delegate" ids="swift.common.utils.LogAdapter.statsd_delegate" module="swift.common.utils" names="swift.common.utils.LogAdapter.statsd_delegate"><desc_name xml:space="preserve">statsd_delegate</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">statsd_func_name</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Factory to create methods which delegate to methods on
                                self.logger.statsd_client (an instance of StatsdClient).  The
                                created methods conditionally delegate to a method whose name is given
                                in ‘statsd_func_name’.  The created delegate methods are a no-op when
                                StatsD logging is not configured.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">statsd_func_name</literal_strong> – the name of a method on StatsdClient.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ModifiedParseResult\ (class\ in\ swift.common.utils)',\ u'swift.common.utils.ModifiedParseResult',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ModifiedParseResult" ids="swift.common.utils.ModifiedParseResult" module="swift.common.utils" names="swift.common.utils.ModifiedParseResult"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">ModifiedParseResult</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">urlparse.ParseResult</literal></paragraph>
                    <paragraph>Parse results class for urlparse.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'NR_ioprio_set()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.NR_ioprio_set',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="NR_ioprio_set" ids="swift.common.utils.NR_ioprio_set" module="swift.common.utils" names="swift.common.utils.NR_ioprio_set"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">NR_ioprio_set</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Give __NR_ioprio_set value for your system.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'NullLogger\ (class\ in\ swift.common.utils)',\ u'swift.common.utils.NullLogger',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="NullLogger" ids="swift.common.utils.NullLogger" module="swift.common.utils" names="swift.common.utils.NullLogger"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">NullLogger</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>A no-op logger for eventlet wsgi.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'PipeMutex\ (class\ in\ swift.common.utils)',\ u'swift.common.utils.PipeMutex',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="PipeMutex" ids="swift.common.utils.PipeMutex" module="swift.common.utils" names="swift.common.utils.PipeMutex"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">PipeMutex</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Mutex using a pipe. Works across both greenlets and real threads, even
                        at the same time.</paragraph>
                    <index entries="['single',\ u'acquire()\ (swift.common.utils.PipeMutex\ method)',\ u'swift.common.utils.PipeMutex.acquire',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="PipeMutex" first="False" fullname="PipeMutex.acquire" ids="swift.common.utils.PipeMutex.acquire" module="swift.common.utils" names="swift.common.utils.PipeMutex.acquire"><desc_name xml:space="preserve">acquire</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">blocking=True</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Acquire the mutex.</paragraph>
                            <paragraph>If called with blocking=False, returns True if the mutex was
                                acquired and False if it wasn’t. Otherwise, blocks until the mutex
                                is acquired and returns True.</paragraph>
                            <paragraph>This lock is recursive; the same greenthread may acquire it as many
                                times as it wants to, though it must then release it that many times
                                too.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'close()\ (swift.common.utils.PipeMutex\ method)',\ u'swift.common.utils.PipeMutex.close',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="PipeMutex" first="False" fullname="PipeMutex.close" ids="swift.common.utils.PipeMutex.close" module="swift.common.utils" names="swift.common.utils.PipeMutex.close"><desc_name xml:space="preserve">close</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Close the mutex. This releases its file descriptors.</paragraph>
                            <paragraph>You can’t use a mutex after it’s been closed.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'release()\ (swift.common.utils.PipeMutex\ method)',\ u'swift.common.utils.PipeMutex.release',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="PipeMutex" first="False" fullname="PipeMutex.release" ids="swift.common.utils.PipeMutex.release" module="swift.common.utils" names="swift.common.utils.PipeMutex.release"><desc_name xml:space="preserve">release</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Release the mutex.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'RateLimitedIterator\ (class\ in\ swift.common.utils)',\ u'swift.common.utils.RateLimitedIterator',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="RateLimitedIterator" ids="swift.common.utils.RateLimitedIterator" module="swift.common.utils" names="swift.common.utils.RateLimitedIterator"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">RateLimitedIterator</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">iterable</desc_parameter><desc_parameter xml:space="preserve">elements_per_second</desc_parameter><desc_parameter xml:space="preserve">limit_after=0</desc_parameter><desc_parameter xml:space="preserve">ratelimit_if=&lt;function &lt;lambda&gt;&gt;</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Wrap an iterator to only yield elements at a rate of N per second.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">iterable</literal_strong> – iterable to wrap</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">elements_per_second</literal_strong> – the rate at which to yield elements</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">limit_after</literal_strong> – rate limiting kicks in only after yielding
                                            this many elements; default is 0 (rate limit
                                            immediately)</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'Spliterator\ (class\ in\ swift.common.utils)',\ u'swift.common.utils.Spliterator',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="Spliterator" ids="swift.common.utils.Spliterator" module="swift.common.utils" names="swift.common.utils.Spliterator"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">Spliterator</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">source_iterable</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Takes an iterator yielding sliceable things (e.g. strings or lists) and
                        yields subiterators, each yielding up to the requested number of items
                        from the source.</paragraph>
                    <doctest_block xml:space="preserve">&gt;&gt;&gt; si = Spliterator(["abcde", "fg", "hijkl"])
&gt;&gt;&gt; ''.join(si.take(4))
"abcd"
&gt;&gt;&gt; ''.join(si.take(3))
"efg"
&gt;&gt;&gt; ''.join(si.take(1))
"h"
&gt;&gt;&gt; ''.join(si.take(3))
"ijk"
&gt;&gt;&gt; ''.join(si.take(3))
"l"  # shorter than requested; this can happen with the last iterator</doctest_block>
                </desc_content>
            </desc>
            <index entries="['single',\ u'StreamingPile\ (class\ in\ swift.common.utils)',\ u'swift.common.utils.StreamingPile',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="StreamingPile" ids="swift.common.utils.StreamingPile" module="swift.common.utils" names="swift.common.utils.StreamingPile"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">StreamingPile</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">size</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.utils.GreenAsyncPile" reftitle="swift.common.utils.GreenAsyncPile"><literal classes="xref py py-class">swift.common.utils.GreenAsyncPile</literal></reference></paragraph>
                    <paragraph>Runs jobs in a pool of green threads, spawning more jobs as results are
                        retrieved and worker threads become available.</paragraph>
                    <paragraph>When used as a context manager, has the same worker-killing properties as
                        <reference internal="True" refid="swift.common.utils.ContextPool" reftitle="swift.common.utils.ContextPool"><literal classes="xref py py-class">ContextPool</literal></reference>.</paragraph>
                    <index entries="['single',\ u'asyncstarmap()\ (swift.common.utils.StreamingPile\ method)',\ u'swift.common.utils.StreamingPile.asyncstarmap',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="StreamingPile" first="False" fullname="StreamingPile.asyncstarmap" ids="swift.common.utils.StreamingPile.asyncstarmap" module="swift.common.utils" names="swift.common.utils.StreamingPile.asyncstarmap"><desc_name xml:space="preserve">asyncstarmap</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">func</desc_parameter><desc_parameter xml:space="preserve">args_iter</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>This is the same as <literal classes="xref py py-func">itertools.starmap()</literal>, except that <emphasis>func</emphasis> is
                                executed in a separate green thread for each item, and results won’t
                                necessarily have the same order as inputs.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'SwiftLogFormatter\ (class\ in\ swift.common.utils)',\ u'swift.common.utils.SwiftLogFormatter',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="SwiftLogFormatter" ids="swift.common.utils.SwiftLogFormatter" module="swift.common.utils" names="swift.common.utils.SwiftLogFormatter"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">SwiftLogFormatter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">fmt=None</desc_parameter><desc_parameter xml:space="preserve">datefmt=None</desc_parameter><desc_parameter xml:space="preserve">max_line_length=0</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">logging.Formatter</literal></paragraph>
                    <paragraph>Custom logging.Formatter will append txn_id to a log message if the
                        record has one and the message does not. Optionally it can shorten
                        overly long log lines.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'Timestamp\ (class\ in\ swift.common.utils)',\ u'swift.common.utils.Timestamp',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="Timestamp" ids="swift.common.utils.Timestamp" module="swift.common.utils" names="swift.common.utils.Timestamp"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">Timestamp</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">timestamp</desc_parameter><desc_parameter xml:space="preserve">offset=0</desc_parameter><desc_parameter xml:space="preserve">delta=0</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Internal Representation of Swift Time.</paragraph>
                    <paragraph>The normalized form of the X-Timestamp header looks like a float
                        with a fixed width to ensure stable string sorting - normalized
                        timestamps look like “1402464677.04188”</paragraph>
                    <paragraph>To support overwrites of existing data without modifying the original
                        timestamp but still maintain consistency a second internal offset vector
                        is append to the normalized timestamp form which compares and sorts
                        greater than the fixed width float format but less than a newer timestamp.
                        The internalized format of timestamps looks like
                        “1402464677.04188_0000000000000000” - the portion after the underscore is
                        the offset and is a formatted hexadecimal integer.</paragraph>
                    <paragraph>The internalized form is not exposed to clients in responses from
                        Swift.  Normal client operations will not create a timestamp with an
                        offset.</paragraph>
                    <paragraph>The Timestamp class in common.utils supports internalized and
                        normalized formatting of timestamps and also comparison of timestamp
                        values.  When the offset value of a Timestamp is 0 - it’s considered
                        insignificant and need not be represented in the string format; to
                        support backwards compatibility during a Swift upgrade the
                        internalized and normalized form of a Timestamp with an
                        insignificant offset are identical.  When a timestamp includes an
                        offset it will always be represented in the internalized form, but
                        is still excluded from the normalized form.  Timestamps with an
                        equivalent timestamp portion (the float part) will compare and order
                        by their offset.  Timestamps with a greater timestamp portion will
                        always compare and order greater than a Timestamp with a lesser
                        timestamp regardless of it’s offset.  String comparison and ordering
                        is guaranteed for the internalized string format, and is backwards
                        compatible for normalized timestamps which do not include an offset.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'affinity_key_function()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.affinity_key_function',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="affinity_key_function" ids="swift.common.utils.affinity_key_function" module="swift.common.utils" names="swift.common.utils.affinity_key_function"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">affinity_key_function</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">affinity_str</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Turns an affinity config value into a function suitable for passing to
                        sort(). After doing so, the array will be sorted with respect to the given
                        ordering.</paragraph>
                    <paragraph>For example, if affinity_str is “r1=1, r2z7=2, r2z8=2”, then the array
                        will be sorted with all nodes from region 1 (r1=1) first, then all the
                        nodes from region 2 zones 7 and 8 (r2z7=2 and r2z8=2), then everything
                        else.</paragraph>
                    <paragraph>Note that the order of the pieces of affinity_str is irrelevant; the
                        priority values are what comes after the equals sign.</paragraph>
                    <paragraph>If affinity_str is empty or all whitespace, then the resulting function
                        will not alter the ordering of the nodes.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">affinity_str</literal_strong> – affinity config value, e.g. “r1z2=3”
                                    or “r1=1, r2z1=2, r2z2=2”</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>single-argument function</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>ValueError</literal_strong> – if argument invalid</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'affinity_locality_predicate()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.affinity_locality_predicate',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="affinity_locality_predicate" ids="swift.common.utils.affinity_locality_predicate" module="swift.common.utils" names="swift.common.utils.affinity_locality_predicate"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">affinity_locality_predicate</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">write_affinity_str</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Turns a write-affinity config value into a predicate function for nodes.
                        The returned value will be a 1-arg function that takes a node dictionary
                        and returns a true value if it is “local” and a false value otherwise. The
                        definition of “local” comes from the affinity_str argument passed in here.</paragraph>
                    <paragraph>For example, if affinity_str is “r1, r2z2”, then only nodes where region=1
                        or where (region=2 and zone=2) are considered local.</paragraph>
                    <paragraph>If affinity_str is empty or all whitespace, then the resulting function
                        will consider everything local</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">write_affinity_str</literal_strong> – affinity config value, e.g. “r1z2”
                                    or “r1, r2z1, r2z2”</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>single-argument function, or None if affinity_str is empty</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>ValueError</literal_strong> – if argument invalid</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'audit_location_generator()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.audit_location_generator',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="audit_location_generator" ids="swift.common.utils.audit_location_generator" module="swift.common.utils" names="swift.common.utils.audit_location_generator"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">audit_location_generator</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">devices</desc_parameter><desc_parameter xml:space="preserve">datadir</desc_parameter><desc_parameter xml:space="preserve">suffix=''</desc_parameter><desc_parameter xml:space="preserve">mount_check=True</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Given a devices path and a data directory, yield (path, device,
                        partition) for all files in that directory</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">devices</literal_strong> – parent directory of the devices to be audited</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">datadir</literal_strong> – a directory located under self.devices. This should be
                                            one of the DATADIR constants defined in the account,
                                            container, and object servers.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">suffix</literal_strong> – path name suffix required for all names returned</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">mount_check</literal_strong> – Flag to check if a mount check should be performed
                                            on devices</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">logger</literal_strong> – a logger object</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'backward()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.backward',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="backward" ids="swift.common.utils.backward" module="swift.common.utils" names="swift.common.utils.backward"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">backward</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">f</desc_parameter><desc_parameter xml:space="preserve">blocksize=4096</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>A generator returning lines from a file starting with the last line,
                        then the second last line, etc. i.e., it reads lines backwards.
                        Stops when the first line (if any) is read.
                        This is useful when searching for recent activity in very
                        large files.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">f</literal_strong> – file object to read</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">blocksize</literal_strong> – no of characters to go backwards at each block</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'cache_from_env()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.cache_from_env',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="cache_from_env" ids="swift.common.utils.cache_from_env" module="swift.common.utils" names="swift.common.utils.cache_from_env"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">cache_from_env</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">env</desc_parameter><desc_parameter xml:space="preserve">allow_none=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Get memcache connection pool from the environment (which had been
                        previously set by the memcache middleware</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">env</literal_strong> – wsgi environment dict</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>swift.common.memcached.MemcacheRing from environment</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'capture_stdio()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.capture_stdio',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="capture_stdio" ids="swift.common.utils.capture_stdio" module="swift.common.utils" names="swift.common.utils.capture_stdio"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">capture_stdio</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">logger</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Log unhandled exceptions, close stdio, capture stdout and stderr.</paragraph>
                    <paragraph>param logger: Logger object to use</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'closing_if_possible()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.closing_if_possible',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="closing_if_possible" ids="swift.common.utils.closing_if_possible" module="swift.common.utils" names="swift.common.utils.closing_if_possible"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">closing_if_possible</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwds</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Like contextlib.closing(), but doesn’t crash if the object lacks a close()
                        method.</paragraph>
                    <paragraph>PEP 333 (WSGI) says: “If the iterable returned by the application has a
                        close() method, the server or gateway must call that method upon
                        completion of the current request[.]” This function makes that easier.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'compute_eta()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.compute_eta',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="compute_eta" ids="swift.common.utils.compute_eta" module="swift.common.utils" names="swift.common.utils.compute_eta"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">compute_eta</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">start_time</desc_parameter><desc_parameter xml:space="preserve">current_value</desc_parameter><desc_parameter xml:space="preserve">final_value</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Compute an ETA.  Now only if we could also have a progress bar…</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">start_time</literal_strong> – Unix timestamp when the operation began</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">current_value</literal_strong> – Current value</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">final_value</literal_strong> – Final value</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>ETA as a tuple of (length of time, unit of time) where unit of
                                    time is one of (‘h’, ‘m’, ‘s’)</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'config_auto_int_value()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.config_auto_int_value',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="config_auto_int_value" ids="swift.common.utils.config_auto_int_value" module="swift.common.utils" names="swift.common.utils.config_auto_int_value"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">config_auto_int_value</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">value</desc_parameter><desc_parameter xml:space="preserve">default</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns default if value is None or ‘auto’.
                        Returns value as an int or raises ValueError otherwise.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'config_fallocate_value()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.config_fallocate_value',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="config_fallocate_value" ids="swift.common.utils.config_fallocate_value" module="swift.common.utils" names="swift.common.utils.config_fallocate_value"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">config_fallocate_value</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">reserve_value</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns fallocate reserve_value as an int or float.
                        Returns is_percent as a boolean.
                        Returns a ValueError on invalid fallocate value.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'config_positive_int_value()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.config_positive_int_value',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="config_positive_int_value" ids="swift.common.utils.config_positive_int_value" module="swift.common.utils" names="swift.common.utils.config_positive_int_value"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">config_positive_int_value</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">value</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns positive int value if it can be cast by int() and it’s an
                        integer &gt; 0. (not including zero) Raises ValueError otherwise.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'config_read_prefixed_options()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.config_read_prefixed_options',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="config_read_prefixed_options" ids="swift.common.utils.config_read_prefixed_options" module="swift.common.utils" names="swift.common.utils.config_read_prefixed_options"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">config_read_prefixed_options</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter><desc_parameter xml:space="preserve">prefix_name</desc_parameter><desc_parameter xml:space="preserve">defaults</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Read prefixed options from configuration</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">conf</literal_strong> – the configuration</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">prefix_name</literal_strong> – the prefix (including, if needed, an underscore)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">defaults</literal_strong> – a dict of default values. The dict supplies the
                                            option name and type (string or comma separated string)</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a dict containing the options</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'config_read_reseller_options()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.config_read_reseller_options',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="config_read_reseller_options" ids="swift.common.utils.config_read_reseller_options" module="swift.common.utils" names="swift.common.utils.config_read_reseller_options"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">config_read_reseller_options</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter><desc_parameter xml:space="preserve">defaults</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Read reseller_prefix option and associated options from configuration</paragraph>
                    <paragraph>Reads the reseller_prefix option, then reads options that may be
                        associated with a specific reseller prefix. Reads options such that an
                        option without a prefix applies to all reseller prefixes unless an option
                        has an explicit prefix.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">conf</literal_strong> – the configuration</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">defaults</literal_strong> – a dict of default values. The key is the option
                                            name. The value is either an array of strings or a string</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>tuple of an array of reseller prefixes and a dict of option values</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'config_true_value()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.config_true_value',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="config_true_value" ids="swift.common.utils.config_true_value" module="swift.common.utils" names="swift.common.utils.config_true_value"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">config_true_value</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">value</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns True if the value is either True or a string in TRUE_VALUES.
                        Returns False otherwise.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'csv_append()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.csv_append',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="csv_append" ids="swift.common.utils.csv_append" module="swift.common.utils" names="swift.common.utils.csv_append"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">csv_append</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">csv_string</desc_parameter><desc_parameter xml:space="preserve">item</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Appends an item to a comma-separated string.</paragraph>
                    <paragraph>If the comma-separated string is empty/None, just returns item.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'decode_timestamps()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.decode_timestamps',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="decode_timestamps" ids="swift.common.utils.decode_timestamps" module="swift.common.utils" names="swift.common.utils.decode_timestamps"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">decode_timestamps</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">encoded</desc_parameter><desc_parameter xml:space="preserve">explicit=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Parses a string of the form generated by encode_timestamps and returns
                        a tuple of the three component timestamps. If explicit is False, component
                        timestamps that are not explicitly encoded will be assumed to have zero
                        delta from the previous component and therefore take the value of the
                        previous component. If explicit is True, component timestamps that are
                        not explicitly encoded will be returned with value None.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'document_iters_to_http_response_body()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.document_iters_to_http_response_body',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="document_iters_to_http_response_body" ids="swift.common.utils.document_iters_to_http_response_body" module="swift.common.utils" names="swift.common.utils.document_iters_to_http_response_body"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">document_iters_to_http_response_body</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ranges_iter</desc_parameter><desc_parameter xml:space="preserve">boundary</desc_parameter><desc_parameter xml:space="preserve">multipart</desc_parameter><desc_parameter xml:space="preserve">logger</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Takes an iterator of range iters and turns it into an appropriate
                        HTTP response body, whether that’s multipart/byteranges or not.</paragraph>
                    <paragraph>This is almost, but not quite, the inverse of
                        request_helpers.http_response_to_document_iters(). This function only
                        yields chunks of the body, not any headers.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">ranges_iter</literal_strong> – <paragraph>an iterator of dictionaries, one per range.
                                                Each dictionary must contain at least the following key:
                                                “part_iter”: iterator yielding the bytes in the range</paragraph><paragraph>Additionally, if multipart is True, then the following other keys
                                                are required:</paragraph><paragraph>”start_byte”: index of the first byte in the range
                                                “end_byte”: index of the last byte in the range
                                                “content_type”: value for the range’s Content-Type header</paragraph><definition_list><definition_list_item><term>Finally, there is one optional key that is used in the</term><definition><paragraph>multipart/byteranges case:</paragraph></definition></definition_list_item><definition_list_item><term>”entity_length”: length of the requested entity (not necessarily</term><definition><paragraph>equal to the response length). If omitted, “*” will be used.</paragraph></definition></definition_list_item></definition_list><paragraph>Each part_iter will be exhausted prior to calling next(ranges_iter).</paragraph></paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">boundary</literal_strong> – MIME boundary to use, sans dashes (e.g. “boundary”, not
                                            “–boundary”).</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">multipart</literal_strong> – True if the response should be multipart/byteranges,
                                            False otherwise. This should be True if and only if you have 2 or
                                            more ranges.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">logger</literal_strong> – a logger</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'document_iters_to_multipart_byteranges()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.document_iters_to_multipart_byteranges',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="document_iters_to_multipart_byteranges" ids="swift.common.utils.document_iters_to_multipart_byteranges" module="swift.common.utils" names="swift.common.utils.document_iters_to_multipart_byteranges"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">document_iters_to_multipart_byteranges</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ranges_iter</desc_parameter><desc_parameter xml:space="preserve">boundary</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Takes an iterator of range iters and yields a multipart/byteranges MIME
                        document suitable for sending as the body of a multi-range 206 response.</paragraph>
                    <paragraph>See document_iters_to_http_response_body for parameter descriptions.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'drop_buffer_cache()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.drop_buffer_cache',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="drop_buffer_cache" ids="swift.common.utils.drop_buffer_cache" module="swift.common.utils" names="swift.common.utils.drop_buffer_cache"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">drop_buffer_cache</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">fd</desc_parameter><desc_parameter xml:space="preserve">offset</desc_parameter><desc_parameter xml:space="preserve">length</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Drop ‘buffer’ cache for the given range of the given file.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">fd</literal_strong> – file descriptor</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">offset</literal_strong> – start offset</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">length</literal_strong> – length</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'drop_privileges()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.drop_privileges',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="drop_privileges" ids="swift.common.utils.drop_privileges" module="swift.common.utils" names="swift.common.utils.drop_privileges"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">drop_privileges</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">user</desc_parameter><desc_parameter xml:space="preserve">call_setsid=True</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Sets the userid/groupid of the current process, get session leader, etc.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">user</literal_strong> – User name to change privileges to</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'dump_recon_cache()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.dump_recon_cache',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="dump_recon_cache" ids="swift.common.utils.dump_recon_cache" module="swift.common.utils" names="swift.common.utils.dump_recon_cache"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">dump_recon_cache</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">cache_dict</desc_parameter><desc_parameter xml:space="preserve">cache_file</desc_parameter><desc_parameter xml:space="preserve">logger</desc_parameter><desc_parameter xml:space="preserve">lock_timeout=2</desc_parameter><desc_parameter xml:space="preserve">set_owner=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Update recon cache values</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">cache_dict</literal_strong> – Dictionary of cache key/value pairs to write out</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">cache_file</literal_strong> – cache file to update</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">logger</literal_strong> – the logger to use to log an encountered error</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">lock_timeout</literal_strong> – timeout (in seconds)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">set_owner</literal_strong> – Set owner of recon cache file</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'encode_timestamps()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.encode_timestamps',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="encode_timestamps" ids="swift.common.utils.encode_timestamps" module="swift.common.utils" names="swift.common.utils.encode_timestamps"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">encode_timestamps</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">t1</desc_parameter><desc_parameter xml:space="preserve">t2=None</desc_parameter><desc_parameter xml:space="preserve">t3=None</desc_parameter><desc_parameter xml:space="preserve">explicit=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Encode up to three timestamps into a string. Unlike a Timestamp object, the
                        encoded string does NOT used fixed width fields and consequently no
                        relative chronology of the timestamps can be inferred from lexicographic
                        sorting of encoded timestamp strings.</paragraph>
                    <definition_list>
                        <definition_list_item>
                            <term>The format of the encoded string is:</term>
                            <definition>
                                <paragraph>&lt;t1&gt;[&lt;+/-&gt;&lt;t2 - t1&gt;[&lt;+/-&gt;&lt;t3 - t2&gt;]]</paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                    <paragraph>i.e. if t1 = t2 = t3 then just the string representation of t1 is returned,
                        otherwise the time offsets for t2 and t3 are appended. If explicit is True
                        then the offsets for t2 and t3 are always appended even if zero.</paragraph>
                    <paragraph>Note: any offset value in t1 will be preserved, but offsets on t2 and t3
                        are not preserved. In the anticipated use cases for this method (and the
                        inverse decode_timestamps method) the timestamps passed as t2 and t3 are
                        not expected to have offsets as they will be timestamps associated with a
                        POST request. In the case where the encoding is used in a container objects
                        table row, t1 could be the PUT or DELETE time but t2 and t3 represent the
                        content type and metadata times (if different from the data file) i.e.
                        correspond to POST timestamps. In the case where the encoded form is used
                        in a .meta file name, t1 and t2 both correspond to POST timestamps.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'expand_ipv6()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.expand_ipv6',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="expand_ipv6" ids="swift.common.utils.expand_ipv6" module="swift.common.utils" names="swift.common.utils.expand_ipv6"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">expand_ipv6</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">address</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Expand ipv6 address.
                        :param address: a string indicating valid ipv6 address
                        :returns: a string indicating fully expanded ipv6 address</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'extract_swift_bytes()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.extract_swift_bytes',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="extract_swift_bytes" ids="swift.common.utils.extract_swift_bytes" module="swift.common.utils" names="swift.common.utils.extract_swift_bytes"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">extract_swift_bytes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">content_type</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <definition_list>
                        <definition_list_item>
                            <term>Parse a content-type and return a tuple containing:</term>
                            <definition>
                                <bullet_list bullet="-">
                                    <list_item>
                                        <paragraph>the content_type string minus any swift_bytes param,</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>the swift_bytes value or None if the param was not found</paragraph>
                                    </list_item>
                                </bullet_list>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">content_type</literal_strong> – a content-type string</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a tuple of (content-type, swift_bytes or None)</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'fallocate()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.fallocate',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="fallocate" ids="swift.common.utils.fallocate" module="swift.common.utils" names="swift.common.utils.fallocate"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">fallocate</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">fd</desc_parameter><desc_parameter xml:space="preserve">size</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Pre-allocate disk space for a file.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">fd</literal_strong> – file descriptor</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">size</literal_strong> – size to allocate (in bytes)</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'fdatasync()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.fdatasync',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="fdatasync" ids="swift.common.utils.fdatasync" module="swift.common.utils" names="swift.common.utils.fdatasync"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">fdatasync</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">fd</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Sync modified file data to disk.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">fd</literal_strong> – file descriptor</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'fsync()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.fsync',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="fsync" ids="swift.common.utils.fsync" module="swift.common.utils" names="swift.common.utils.fsync"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">fsync</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">fd</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Sync modified file data and metadata to disk.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">fd</literal_strong> – file descriptor</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'fsync_dir()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.fsync_dir',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="fsync_dir" ids="swift.common.utils.fsync_dir" module="swift.common.utils" names="swift.common.utils.fsync_dir"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">fsync_dir</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">dirpath</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Sync directory entries to disk.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">dirpath</literal_strong> – Path to the directory to be synced.</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'get_expirer_container()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.get_expirer_container',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="get_expirer_container" ids="swift.common.utils.get_expirer_container" module="swift.common.utils" names="swift.common.utils.get_expirer_container"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">get_expirer_container</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">x_delete_at</desc_parameter><desc_parameter xml:space="preserve">expirer_divisor</desc_parameter><desc_parameter xml:space="preserve">acc</desc_parameter><desc_parameter xml:space="preserve">cont</desc_parameter><desc_parameter xml:space="preserve">obj</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns a expiring object container name for given X-Delete-At and
                        a/c/o.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'get_hmac()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.get_hmac',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="get_hmac" ids="swift.common.utils.get_hmac" module="swift.common.utils" names="swift.common.utils.get_hmac"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">get_hmac</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">request_method</desc_parameter><desc_parameter xml:space="preserve">path</desc_parameter><desc_parameter xml:space="preserve">expires</desc_parameter><desc_parameter xml:space="preserve">key</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns the hexdigest string of the HMAC-SHA1 (RFC 2104) for
                        the request.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">request_method</literal_strong> – Request method to allow.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">path</literal_strong> – The path to the resource to allow access to.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">expires</literal_strong> – Unix timestamp as an int for when the URL
                                            expires.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">key</literal_strong> – HMAC shared secret.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>hexdigest str of the HMAC-SHA1 for the request.</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'get_hub()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.get_hub',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="get_hub" ids="swift.common.utils.get_hub" module="swift.common.utils" names="swift.common.utils.get_hub"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">get_hub</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Checks whether poll is available and falls back
                        on select if it isn’t.</paragraph>
                    <paragraph>Note about epoll:</paragraph>
                    <paragraph>Review: <reference refuri="https://review.openstack.org/#/c/18806/">https://review.openstack.org/#/c/18806/</reference></paragraph>
                    <paragraph>There was a problem where once out of every 30 quadrillion
                        connections, a coroutine wouldn’t wake up when the client
                        closed its end. Epoll was not reporting the event or it was
                        getting swallowed somewhere. Then when that file descriptor
                        was re-used, eventlet would freak right out because it still
                        thought it was waiting for activity from it in some other coro.</paragraph>
                    <paragraph>Another note about epoll: it’s hard to use when forking. epoll works
                        like so:</paragraph>
                    <block_quote>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph>create an epoll instance: efd = epoll_create(…)</paragraph>
                            </list_item>
                            <list_item>
                                <definition_list>
                                    <definition_list_item>
                                        <term>register file descriptors of interest with epoll_ctl(efd,</term>
                                        <definition>
                                            <paragraph>EPOLL_CTL_ADD, fd, …)</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </list_item>
                            <list_item>
                                <paragraph>wait for events with epoll_wait(efd, …)</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                    <paragraph>If you fork, you and all your child processes end up using the same
                        epoll instance, and everyone becomes confused. It is possible to use
                        epoll and fork and still have a correct program as long as you do the
                        right things, but eventlet doesn’t do those things. Really, it can’t
                        even try to do those things since it doesn’t get notified of forks.</paragraph>
                    <paragraph>In contrast, both poll() and select() specify the set of interesting
                        file descriptors with each call, so there’s no problem with forking.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'get_log_line()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.get_log_line',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="get_log_line" ids="swift.common.utils.get_log_line" module="swift.common.utils" names="swift.common.utils.get_log_line"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">get_log_line</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req</desc_parameter><desc_parameter xml:space="preserve">res</desc_parameter><desc_parameter xml:space="preserve">trans_time</desc_parameter><desc_parameter xml:space="preserve">additional_info</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Make a line for logging that matches the documented log line format
                        for backend servers.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">req</literal_strong> – the request.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">res</literal_strong> – the response.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">trans_time</literal_strong> – the time the request took to complete, a float.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">additional_info</literal_strong> – a string to log at the end of the line</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a properly formatted line for logging.</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'get_logger()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.get_logger',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="get_logger" ids="swift.common.utils.get_logger" module="swift.common.utils" names="swift.common.utils.get_logger"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">get_logger</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter><desc_parameter xml:space="preserve">name=None</desc_parameter><desc_parameter xml:space="preserve">log_to_console=False</desc_parameter><desc_parameter xml:space="preserve">log_route=None</desc_parameter><desc_parameter xml:space="preserve">fmt='%(server)s: %(message)s'</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Get the current system logger using config settings.</paragraph>
                    <paragraph><strong>Log config and defaults</strong>:</paragraph>
                    <literal_block xml:space="preserve">log_facility = LOG_LOCAL0
log_level = INFO
log_name = swift
log_max_line_length = 0
log_udp_host = (disabled)
log_udp_port = logging.handlers.SYSLOG_UDP_PORT
log_address = /dev/log
log_statsd_host = (disabled)
log_statsd_port = 8125
log_statsd_default_sample_rate = 1.0
log_statsd_sample_rate_factor = 1.0
log_statsd_metric_prefix = (empty-string)</literal_block>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">conf</literal_strong> – Configuration dict to read settings from</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> – Name of the logger</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">log_to_console</literal_strong> – Add handler which writes to console on stderr</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">log_route</literal_strong> – Route for the logging, not emitted to the log, just used
                                            to separate logging configurations</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">fmt</literal_strong> – Override log format</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'get_md5_socket()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.get_md5_socket',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="get_md5_socket" ids="swift.common.utils.get_md5_socket" module="swift.common.utils" names="swift.common.utils.get_md5_socket"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">get_md5_socket</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Get an MD5 socket file descriptor. One can MD5 data with it by writing it
                        to the socket with os.write, then os.read the 16 bytes of the checksum out
                        later.</paragraph>
                    <paragraph>NOTE: It is the caller’s responsibility to ensure that os.close() is
                        called on the returned file descriptor. This is a bare file descriptor,
                        not a Python object. It doesn’t close itself.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'get_policy_index()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.get_policy_index',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="get_policy_index" ids="swift.common.utils.get_policy_index" module="swift.common.utils" names="swift.common.utils.get_policy_index"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">get_policy_index</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">req_headers</desc_parameter><desc_parameter xml:space="preserve">res_headers</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns the appropriate index of the storage policy for the request from
                        a proxy server</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">req_headers</literal_strong> – dict of the request headers.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">res_headers</literal_strong> – dict of the response headers.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>string index of storage policy, or None</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'get_swift_info()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.get_swift_info',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="get_swift_info" ids="swift.common.utils.get_swift_info" module="swift.common.utils" names="swift.common.utils.get_swift_info"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">get_swift_info</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">admin=False</desc_parameter><desc_parameter xml:space="preserve">disallowed_sections=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns information about the swift cluster that has been previously
                        registered with the register_swift_info call.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">admin</literal_strong> – boolean value, if True will additionally return an ‘admin’
                                            section with information previously registered as admin
                                            info.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">disallowed_sections</literal_strong> – list of section names to be withheld from the
                                            information returned.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>dictionary of information about the swift cluster.</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'get_time_units()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.get_time_units',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="get_time_units" ids="swift.common.utils.get_time_units" module="swift.common.utils" names="swift.common.utils.get_time_units"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">get_time_units</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">time_amount</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Get a nomralized length of time in the largest unit of time (hours,
                        minutes, or seconds.)</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">time_amount</literal_strong> – length of time in seconds</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>A touple of (length of time, unit of time) where unit of time is
                                    one of (‘h’, ‘m’, ‘s’)</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'get_valid_utf8_str()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.get_valid_utf8_str',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="get_valid_utf8_str" ids="swift.common.utils.get_valid_utf8_str" module="swift.common.utils" names="swift.common.utils.get_valid_utf8_str"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">get_valid_utf8_str</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">str_or_unicode</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Get valid parts of utf-8 str from str, unicode and even invalid utf-8 str</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">str_or_unicode</literal_strong> – a string or an unicode which can be invalid utf-8</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'hash_path()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.hash_path',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="hash_path" ids="swift.common.utils.hash_path" module="swift.common.utils" names="swift.common.utils.hash_path"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">hash_path</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">account</desc_parameter><desc_parameter xml:space="preserve">container=None</desc_parameter><desc_parameter xml:space="preserve">object=None</desc_parameter><desc_parameter xml:space="preserve">raw_digest=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Get the canonical hash for an account/container/object</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">account</literal_strong> – Account</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">container</literal_strong> – Container</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">object</literal_strong> – Object</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">raw_digest</literal_strong> – If True, return the raw version rather than a hex digest</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>hash string</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'human_readable()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.human_readable',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="human_readable" ids="swift.common.utils.human_readable" module="swift.common.utils" names="swift.common.utils.human_readable"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">human_readable</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">value</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns the number in a human readable format; for example 1048576 = “1Mi”.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'is_valid_ip()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.is_valid_ip',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="is_valid_ip" ids="swift.common.utils.is_valid_ip" module="swift.common.utils" names="swift.common.utils.is_valid_ip"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">is_valid_ip</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ip</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Return True if the provided ip is a valid IP-address</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'is_valid_ipv4()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.is_valid_ipv4',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="is_valid_ipv4" ids="swift.common.utils.is_valid_ipv4" module="swift.common.utils" names="swift.common.utils.is_valid_ipv4"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">is_valid_ipv4</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ip</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Return True if the provided ip is a valid IPv4-address</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'is_valid_ipv6()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.is_valid_ipv6',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="is_valid_ipv6" ids="swift.common.utils.is_valid_ipv6" module="swift.common.utils" names="swift.common.utils.is_valid_ipv6"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">is_valid_ipv6</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ip</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns True if the provided ip is a valid IPv6-address</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ismount()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.ismount',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="ismount" ids="swift.common.utils.ismount" module="swift.common.utils" names="swift.common.utils.ismount"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">ismount</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">path</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Test whether a path is a mount point. This will catch any
                        exceptions and translate them into a False return value
                        Use ismount_raw to have the exceptions raised instead.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ismount_raw()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.ismount_raw',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="ismount_raw" ids="swift.common.utils.ismount_raw" module="swift.common.utils" names="swift.common.utils.ismount_raw"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">ismount_raw</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">path</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Test whether a path is a mount point. Whereas ismount will catch
                        any exceptions and just return False, this raw version will not
                        catch exceptions.</paragraph>
                    <paragraph>This is code hijacked from C Python 2.6.8, adapted to remove the extra
                        lstat() system call.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'item_from_env()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.item_from_env',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="item_from_env" ids="swift.common.utils.item_from_env" module="swift.common.utils" names="swift.common.utils.item_from_env"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">item_from_env</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">env</desc_parameter><desc_parameter xml:space="preserve">item_name</desc_parameter><desc_parameter xml:space="preserve">allow_none=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Get a value from the wsgi environment</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">env</literal_strong> – wsgi environment dict</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">item_name</literal_strong> – name of item to get</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>the value from the environment</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'iter_multipart_mime_documents()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.iter_multipart_mime_documents',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="iter_multipart_mime_documents" ids="swift.common.utils.iter_multipart_mime_documents" module="swift.common.utils" names="swift.common.utils.iter_multipart_mime_documents"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">iter_multipart_mime_documents</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">wsgi_input</desc_parameter><desc_parameter xml:space="preserve">boundary</desc_parameter><desc_parameter xml:space="preserve">read_chunk_size=4096</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Given a multi-part-mime-encoded input file object and boundary,
                        yield file-like objects for each part. Note that this does not
                        split each part into headers and body; the caller is responsible
                        for doing that if necessary.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">wsgi_input</literal_strong> – The file-like object to read from.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">boundary</literal_strong> – The mime boundary to separate new file-like
                                            objects on.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>A generator of file-like objects for each part.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><reference internal="True" refid="swift.common.exceptions.MimeInvalid" reftitle="swift.common.exceptions.MimeInvalid"><literal_strong>MimeInvalid</literal_strong></reference> – if the document is malformed</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'last_modified_date_to_timestamp()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.last_modified_date_to_timestamp',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="last_modified_date_to_timestamp" ids="swift.common.utils.last_modified_date_to_timestamp" module="swift.common.utils" names="swift.common.utils.last_modified_date_to_timestamp"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">last_modified_date_to_timestamp</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">last_modified_date_str</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Convert a last modified date (like you’d get from a container listing,
                        e.g. 2014-02-28T23:22:36.698390) to a float.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'link_fd_to_path()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.link_fd_to_path',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="link_fd_to_path" ids="swift.common.utils.link_fd_to_path" module="swift.common.utils" names="swift.common.utils.link_fd_to_path"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">link_fd_to_path</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">fd</desc_parameter><desc_parameter xml:space="preserve">target_path</desc_parameter><desc_parameter xml:space="preserve">dirs_created=0</desc_parameter><desc_parameter xml:space="preserve">retries=2</desc_parameter><desc_parameter xml:space="preserve">fsync=True</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Creates a link to file descriptor at target_path specified. This method
                        does not close the fd for you. Unlike rename, as linkat() cannot
                        overwrite target_path if it exists, we unlink and try again.</paragraph>
                    <paragraph>Attempts to fix / hide race conditions like empty object directories
                        being removed by backend processes during uploads, by retrying.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">fd</literal_strong> – File descriptor to be linked</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">target_path</literal_strong> – Path in filesystem where fd is to be linked</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">dirs_created</literal_strong> – Number of newly created directories that needs to
                                            be fsync’d.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">retries</literal_strong> – number of retries to make</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">fsync</literal_strong> – fsync on containing directory of target_path and also all
                                            the newly created directories.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'list_from_csv()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.list_from_csv',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="list_from_csv" ids="swift.common.utils.list_from_csv" module="swift.common.utils" names="swift.common.utils.list_from_csv"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">list_from_csv</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">comma_separated_str</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Splits the str given and returns a properly stripped list of the comma
                        separated values.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'load_libc_function()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.load_libc_function',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="load_libc_function" ids="swift.common.utils.load_libc_function" module="swift.common.utils" names="swift.common.utils.load_libc_function"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">load_libc_function</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">func_name</desc_parameter><desc_parameter xml:space="preserve">log_error=True</desc_parameter><desc_parameter xml:space="preserve">fail_if_missing=False</desc_parameter><desc_parameter xml:space="preserve">errcheck=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Attempt to find the function in libc, otherwise return a no-op func.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">func_name</literal_strong> – name of the function to pull from libc.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">log_error</literal_strong> – log an error when a function can’t be found</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">fail_if_missing</literal_strong> – raise an exception when a function can’t be found.
                                            Default behavior is to return a no-op function.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">errcheck</literal_strong> – boolean, if true install a wrapper on the function
                                            to check for a return values of -1 and call
                                            ctype.get_errno and raise an OSError</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'lock_file()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.lock_file',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="lock_file" ids="swift.common.utils.lock_file" module="swift.common.utils" names="swift.common.utils.lock_file"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">lock_file</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwds</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Context manager that acquires a lock on a file.  This will block until
                        the lock can be acquired, or the timeout time has expired (whichever occurs
                        first).</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">filename</literal_strong> – file to be locked</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">timeout</literal_strong> – timeout (in seconds)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">append</literal_strong> – True if file should be opened in append mode</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">unlink</literal_strong> – True if the file should be unlinked at the end</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'lock_parent_directory()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.lock_parent_directory',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="lock_parent_directory" ids="swift.common.utils.lock_parent_directory" module="swift.common.utils" names="swift.common.utils.lock_parent_directory"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">lock_parent_directory</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">filename</desc_parameter><desc_parameter xml:space="preserve">timeout=10</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Context manager that acquires a lock on the parent directory of the given
                        file path.  This will block until the lock can be acquired, or the timeout
                        time has expired (whichever occurs first).</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">filename</literal_strong> – file path of the parent directory to be locked</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">timeout</literal_strong> – timeout (in seconds)</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'lock_path()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.lock_path',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="lock_path" ids="swift.common.utils.lock_path" module="swift.common.utils" names="swift.common.utils.lock_path"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">lock_path</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwds</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Context manager that acquires a lock on a directory.  This will block until
                        the lock can be acquired, or the timeout time has expired (whichever occurs
                        first).</paragraph>
                    <paragraph>For locking exclusively, file or directory has to be opened in Write mode.
                        Python doesn’t allow directories to be opened in Write Mode. So we
                        workaround by locking a hidden file in the directory.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">directory</literal_strong> – directory to be locked</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">timeout</literal_strong> – timeout (in seconds)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">timeout_class</literal_strong> – The class of the exception to raise if the
                                            lock cannot be granted within the timeout. Will be
                                            constructed as timeout_class(timeout, lockpath). Default:
                                            LockTimeout</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'makedirs_count()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.makedirs_count',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="makedirs_count" ids="swift.common.utils.makedirs_count" module="swift.common.utils" names="swift.common.utils.makedirs_count"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">makedirs_count</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">path</desc_parameter><desc_parameter xml:space="preserve">count=0</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Same as os.makedirs() except that this method returns the number of
                        new directories that had to be created.</paragraph>
                    <paragraph>Also, this does not raise an error if target directory already exists.
                        This behaviour is similar to Python 3.x’s os.makedirs() called with
                        exist_ok=True. Also similar to swift.common.utils.mkdirs()</paragraph>
                    <paragraph><reference refuri="https://hg.python.org/cpython/file/v3.4.2/Lib/os.py#l212">https://hg.python.org/cpython/file/v3.4.2/Lib/os.py#l212</reference></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'maybe_multipart_byteranges_to_document_iters()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.maybe_multipart_byteranges_to_document_iters',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="maybe_multipart_byteranges_to_document_iters" ids="swift.common.utils.maybe_multipart_byteranges_to_document_iters" module="swift.common.utils" names="swift.common.utils.maybe_multipart_byteranges_to_document_iters"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">maybe_multipart_byteranges_to_document_iters</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">app_iter</desc_parameter><desc_parameter xml:space="preserve">content_type</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Takes an iterator that may or may not contain a multipart MIME document
                        as well as content type and returns an iterator of body iterators.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">app_iter</literal_strong> – iterator that may contain a multipart MIME document</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">content_type</literal_strong> – content type of the app_iter, used to determine
                                            whether it conains a multipart document and, if
                                            so, what the boundary is between documents</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'md5_hash_for_file()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.md5_hash_for_file',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="md5_hash_for_file" ids="swift.common.utils.md5_hash_for_file" module="swift.common.utils" names="swift.common.utils.md5_hash_for_file"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">md5_hash_for_file</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">fname</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Get the MD5 checksum of a file.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">fname</literal_strong> – path to file</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>MD5 checksum, hex encoded</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'mime_to_document_iters()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.mime_to_document_iters',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="mime_to_document_iters" ids="swift.common.utils.mime_to_document_iters" module="swift.common.utils" names="swift.common.utils.mime_to_document_iters"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">mime_to_document_iters</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">input_file</desc_parameter><desc_parameter xml:space="preserve">boundary</desc_parameter><desc_parameter xml:space="preserve">read_chunk_size=4096</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Takes a file-like object containing a multipart MIME document and
                        returns an iterator of (headers, body-file) tuples.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">input_file</literal_strong> – file-like object with the MIME doc in it</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">boundary</literal_strong> – MIME boundary, sans dashes
                                            (e.g. “divider”, not “–divider”)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">read_chunk_size</literal_strong> – size of strings read via input_file.read()</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'mkdirs()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.mkdirs',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="mkdirs" ids="swift.common.utils.mkdirs" module="swift.common.utils" names="swift.common.utils.mkdirs"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">mkdirs</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">path</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Ensures the path is a directory or makes it if not. Errors if the path
                        exists but is a file or on permissions failure.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">path</literal_strong> – path to create</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'modify_priority()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.modify_priority',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="modify_priority" ids="swift.common.utils.modify_priority" module="swift.common.utils" names="swift.common.utils.modify_priority"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">modify_priority</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter><desc_parameter xml:space="preserve">logger</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Modify priority by nice and ionice.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'multipart_byteranges_to_document_iters()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.multipart_byteranges_to_document_iters',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="multipart_byteranges_to_document_iters" ids="swift.common.utils.multipart_byteranges_to_document_iters" module="swift.common.utils" names="swift.common.utils.multipart_byteranges_to_document_iters"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">multipart_byteranges_to_document_iters</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">input_file</desc_parameter><desc_parameter xml:space="preserve">boundary</desc_parameter><desc_parameter xml:space="preserve">read_chunk_size=4096</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Takes a file-like object containing a multipart/byteranges MIME document
                        (see RFC 7233, Appendix A) and returns an iterator of (first-byte,
                        last-byte, length, document-headers, body-file) 5-tuples.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">input_file</literal_strong> – file-like object with the MIME doc in it</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">boundary</literal_strong> – MIME boundary, sans dashes
                                            (e.g. “divider”, not “–divider”)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">read_chunk_size</literal_strong> – size of strings read via input_file.read()</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'normalize_delete_at_timestamp()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.normalize_delete_at_timestamp',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="normalize_delete_at_timestamp" ids="swift.common.utils.normalize_delete_at_timestamp" module="swift.common.utils" names="swift.common.utils.normalize_delete_at_timestamp"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">normalize_delete_at_timestamp</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">timestamp</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Format a timestamp (string or numeric) into a standardized
                        xxxxxxxxxx (10) format.</paragraph>
                    <paragraph>Note that timestamps less than 0000000000 are raised to
                        0000000000 and values greater than November 20th, 2286 at
                        17:46:39 UTC will be capped at that date and time, resulting in
                        no return value exceeding 9999999999.</paragraph>
                    <paragraph>This cap is because the expirer is already working through a
                        sorted list of strings that were all a length of 10. Adding
                        another digit would mess up the sort and cause the expirer to
                        break from processing early. By 2286, this problem will need to
                        be fixed, probably by creating an additional .expiring_objects
                        account to work from with 11 (or more) digit container names.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">timestamp</literal_strong> – unix timestamp</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>normalized timestamp as a string</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'normalize_timestamp()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.normalize_timestamp',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="normalize_timestamp" ids="swift.common.utils.normalize_timestamp" module="swift.common.utils" names="swift.common.utils.normalize_timestamp"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">normalize_timestamp</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">timestamp</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Format a timestamp (string or numeric) into a standardized
                        xxxxxxxxxx.xxxxx (10.5) format.</paragraph>
                    <paragraph>Note that timestamps using values greater than or equal to November 20th,
                        2286 at 17:46 UTC will use 11 digits to represent the number of
                        seconds.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">timestamp</literal_strong> – unix timestamp</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>normalized timestamp as a string</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'o_tmpfile_supported()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.o_tmpfile_supported',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="o_tmpfile_supported" ids="swift.common.utils.o_tmpfile_supported" module="swift.common.utils" names="swift.common.utils.o_tmpfile_supported"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">o_tmpfile_supported</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns True if O_TMPFILE flag is supported.</paragraph>
                    <paragraph>O_TMPFILE was introduced in Linux 3.11 but it also requires support from
                        underlying filesystem being used. Some common filesystems and linux
                        versions in which those filesystems added support for O_TMPFILE:
                        xfs (3.15)
                        ext4 (3.11)
                        btrfs (3.16)</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'override_bytes_from_content_type()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.override_bytes_from_content_type',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="override_bytes_from_content_type" ids="swift.common.utils.override_bytes_from_content_type" module="swift.common.utils" names="swift.common.utils.override_bytes_from_content_type"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">override_bytes_from_content_type</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">listing_dict</desc_parameter><desc_parameter xml:space="preserve">logger=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Takes a dict from a container listing and overrides the content_type,
                        bytes fields if swift_bytes is set.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'pairs()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.pairs',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="pairs" ids="swift.common.utils.pairs" module="swift.common.utils" names="swift.common.utils.pairs"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">pairs</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">item_list</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns an iterator of all pairs of elements from item_list.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">item_list</literal_strong> – items (no duplicates allowed)</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'parse_content_disposition()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.parse_content_disposition',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="parse_content_disposition" ids="swift.common.utils.parse_content_disposition" module="swift.common.utils" names="swift.common.utils.parse_content_disposition"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">parse_content_disposition</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">header</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Given the value of a header like:
                        Content-Disposition: form-data; name=”somefile”; filename=”test.html”</paragraph>
                    <paragraph>Return data like
                        (“form-data”, {“name”: “somefile”, “filename”: “test.html”})</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">header</literal_strong> – Value of a header (the part after the ‘: ‘).</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>(value name, dict) of the attribute data parsed (see above).</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'parse_content_range()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.parse_content_range',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="parse_content_range" ids="swift.common.utils.parse_content_range" module="swift.common.utils" names="swift.common.utils.parse_content_range"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">parse_content_range</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">content_range</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Parse a content-range header into (first_byte, last_byte, total_size).</paragraph>
                    <paragraph>See RFC 7233 section 4.2 for details on the header format, but it’s
                        basically “Content-Range: bytes ${start}-${end}/${total}”.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">content_range</literal_strong> – Content-Range header value to parse,
                                    e.g. “bytes 100-1249/49004”</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>3-tuple (start, end, total)</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>ValueError</literal_strong> – if malformed</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'parse_content_type()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.parse_content_type',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="parse_content_type" ids="swift.common.utils.parse_content_type" module="swift.common.utils" names="swift.common.utils.parse_content_type"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">parse_content_type</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">content_type</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Parse a content-type and its parameters into values.
                        RFC 2616 sec 14.17 and 3.7 are pertinent.</paragraph>
                    <paragraph><strong>Examples</strong>:</paragraph>
                    <literal_block xml:space="preserve">'text/plain; charset=UTF-8' -&gt; ('text/plain', [('charset, 'UTF-8')])
'text/plain; charset=UTF-8; level=1' -&gt;
    ('text/plain', [('charset, 'UTF-8'), ('level', '1')])</literal_block>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">content_type</literal_strong> – content_type to parse</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a tuple containing (content type, list of k, v parameter tuples)</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'parse_mime_headers()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.parse_mime_headers',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="parse_mime_headers" ids="swift.common.utils.parse_mime_headers" module="swift.common.utils" names="swift.common.utils.parse_mime_headers"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">parse_mime_headers</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">doc_file</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Takes a file-like object containing a MIME document and returns a
                        HeaderKeyDict containing the headers. The body of the message is not
                        consumed: the position in doc_file is left at the beginning of the body.</paragraph>
                    <paragraph>This function was inspired by the Python standard library’s
                        http.client.parse_headers.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">doc_file</literal_strong> – binary file-like object containing a MIME document</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a swift.common.swob.HeaderKeyDict containing the headers</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'parse_options()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.parse_options',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="parse_options" ids="swift.common.utils.parse_options" module="swift.common.utils" names="swift.common.utils.parse_options"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">parse_options</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">parser=None</desc_parameter><desc_parameter xml:space="preserve">once=False</desc_parameter><desc_parameter xml:space="preserve">test_args=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Parse standard swift server/daemon options with optparse.OptionParser.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">parser</literal_strong> – OptionParser to use. If not sent one will be created.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">once</literal_strong> – Boolean indicating the “once” option is available</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">test_args</literal_strong> – Override sys.argv; used in testing</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>Tuple of (config, options); config is an absolute path to the
                                    config file, options is the parser options as a dictionary.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>SystemExit</literal_strong> – First arg (CONFIG) is required, file must exist</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'parse_socket_string()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.parse_socket_string',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="parse_socket_string" ids="swift.common.utils.parse_socket_string" module="swift.common.utils" names="swift.common.utils.parse_socket_string"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">parse_socket_string</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">socket_string</desc_parameter><desc_parameter xml:space="preserve">default_port</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Given a string representing a socket, returns a tuple of (host, port).
                        Valid strings are DNS names, IPv4 addresses, or IPv6 addresses, with an
                        optional port. If an IPv6 address is specified it <strong>must</strong> be enclosed in
                        [], like <emphasis>[::1]</emphasis> or <emphasis>[::1]:11211</emphasis>. This follows the accepted prescription
                        for <reference name="IPv6 host literals" refuri="https://tools.ietf.org/html/rfc3986#section-3.2.2">IPv6 host literals</reference>.</paragraph>
                    <paragraph>Examples:</paragraph>
                    <literal_block xml:space="preserve">server.org
server.org:1337
127.0.0.1:1337
[::1]:1337
[::1]</literal_block>
                    <target ids="ipv6-host-literals" names="ipv6\ host\ literals" refuri="https://tools.ietf.org/html/rfc3986#section-3.2.2"></target>
                </desc_content>
            </desc>
            <index entries="['single',\ u'public()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.public',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="public" ids="swift.common.utils.public" module="swift.common.utils" names="swift.common.utils.public"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">public</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">func</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Decorator to declare which methods are publicly accessible as HTTP
                        requests</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">func</literal_strong> – function to make public</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'put_recon_cache_entry()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.put_recon_cache_entry',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="put_recon_cache_entry" ids="swift.common.utils.put_recon_cache_entry" module="swift.common.utils" names="swift.common.utils.put_recon_cache_entry"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">put_recon_cache_entry</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">cache_entry</desc_parameter><desc_parameter xml:space="preserve">key</desc_parameter><desc_parameter xml:space="preserve">item</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Update a recon cache entry item.</paragraph>
                    <paragraph>If <literal>item</literal> is an empty dict then any existing <literal>key</literal> in <literal>cache_entry</literal>
                        will be deleted. Similarly if <literal>item</literal> is a dict and any of its values are
                        empty dicts then the corrsponsing key will be deleted from the nested dict
                        in <literal>cache_entry</literal>.</paragraph>
                    <paragraph>We use nested recon cache entries when the object auditor
                        runs in parallel or else in ‘once’ mode with a specified subset of devices.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">cache_entry</literal_strong> – a dict of existing cache entries</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">key</literal_strong> – key for item to update</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">item</literal_strong> – value for item to update</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'quorum_size()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.quorum_size',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="quorum_size" ids="swift.common.utils.quorum_size" module="swift.common.utils" names="swift.common.utils.quorum_size"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">quorum_size</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">n</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>quorum size as it applies to services that use ‘replication’ for data
                        integrity  (Account/Container services).  Object quorum_size is defined
                        on a storage policy basis.</paragraph>
                    <paragraph>Number of successful backend requests needed for the proxy to consider
                        the client request successful.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'quote()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.quote',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="quote" ids="swift.common.utils.quote" module="swift.common.utils" names="swift.common.utils.quote"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">quote</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">value</desc_parameter><desc_parameter xml:space="preserve">safe='/'</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Patched version of urllib.quote that encodes utf-8 strings before quoting</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'random()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.random',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="random" ids="swift.common.utils.random" module="swift.common.utils" names="swift.common.utils.random"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">random</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist><desc_returns xml:space="preserve">x in the interval [0, 1).</desc_returns></desc_signature>
                <desc_content>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ratelimit_sleep()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.ratelimit_sleep',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="ratelimit_sleep" ids="swift.common.utils.ratelimit_sleep" module="swift.common.utils" names="swift.common.utils.ratelimit_sleep"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">ratelimit_sleep</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">running_time</desc_parameter><desc_parameter xml:space="preserve">max_rate</desc_parameter><desc_parameter xml:space="preserve">incr_by=1</desc_parameter><desc_parameter xml:space="preserve">rate_buffer=5</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Will eventlet.sleep() for the appropriate time so that the max_rate
                        is never exceeded.  If max_rate is 0, will not ratelimit.  The
                        maximum recommended rate should not exceed (1000 * incr_by) a second
                        as eventlet.sleep() does involve some overhead.  Returns running_time
                        that should be used for subsequent calls.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">running_time</literal_strong> – the running time in milliseconds of the next
                                            allowable request. Best to start at zero.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">max_rate</literal_strong> – The maximum rate per second allowed for the process.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">incr_by</literal_strong> – How much to increment the counter.  Useful if you want
                                            to ratelimit 1024 bytes/sec and have differing sizes
                                            of requests. Must be &gt; 0 to engage rate-limiting
                                            behavior.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">rate_buffer</literal_strong> – Number of seconds the rate counter can drop and be
                                            allowed to catch up (at a faster than listed rate).
                                            A larger number will result in larger spikes in rate
                                            but better average accuracy. Must be &gt; 0 to engage
                                            rate-limiting behavior.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'readconf()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.readconf',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="readconf" ids="swift.common.utils.readconf" module="swift.common.utils" names="swift.common.utils.readconf"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">readconf</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf_path</desc_parameter><desc_parameter xml:space="preserve">section_name=None</desc_parameter><desc_parameter xml:space="preserve">log_name=None</desc_parameter><desc_parameter xml:space="preserve">defaults=None</desc_parameter><desc_parameter xml:space="preserve">raw=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Read config file(s) and return config items as a dict</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">conf_path</literal_strong> – path to config file/directory, or a file-like object
                                            (hasattr readline)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">section_name</literal_strong> – config section to read (will return all sections if
                                            not defined)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">log_name</literal_strong> – name to be used with logging (will use section_name if
                                            not defined)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">defaults</literal_strong> – dict of default values to pre-populate the config with</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>dict of config items</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong>ValueError</literal_strong> – if section_name does not exist</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong>IOError</literal_strong> – if reading the file failed</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'register_swift_info()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.register_swift_info',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="register_swift_info" ids="swift.common.utils.register_swift_info" module="swift.common.utils" names="swift.common.utils.register_swift_info"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">register_swift_info</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name='swift'</desc_parameter><desc_parameter xml:space="preserve">admin=False</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Registers information about the swift cluster to be retrieved with calls
                        to get_swift_info.</paragraph>
                    <definition_list>
                        <definition_list_item>
                            <term>NOTE: Do not use “.” in the param: name or any keys in kwargs. “.” is used</term>
                            <definition>
                                <paragraph>in the disallowed_sections to remove unwanted keys from /info.</paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> – string, the section name to place the information under.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">admin</literal_strong> – boolean, if True, information will be registered to an
                                            admin section which can optionally be withheld when
                                            requesting the information.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">kwargs</literal_strong> – key value arguments representing the information to be
                                            added.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>ValueError</literal_strong> – if name or any of the keys in kwargs has “.” in it</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'reiterate()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.reiterate',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="reiterate" ids="swift.common.utils.reiterate" module="swift.common.utils" names="swift.common.utils.reiterate"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">reiterate</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">iterable</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Consume the first item from an iterator, then re-chain it to the rest of
                        the iterator.  This is useful when you want to make sure the prologue to
                        downstream generators have been executed before continuing.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">iterable</literal_strong> – an iterable object</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'remove_file()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.remove_file',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="remove_file" ids="swift.common.utils.remove_file" module="swift.common.utils" names="swift.common.utils.remove_file"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">remove_file</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">path</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Quiet wrapper for os.unlink, OSErrors are suppressed</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">path</literal_strong> – first and only argument passed to os.unlink</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'renamer()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.renamer',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="renamer" ids="swift.common.utils.renamer" module="swift.common.utils" names="swift.common.utils.renamer"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">renamer</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">old</desc_parameter><desc_parameter xml:space="preserve">new</desc_parameter><desc_parameter xml:space="preserve">fsync=True</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Attempt to fix / hide race conditions like empty object directories
                        being removed by backend processes during uploads, by retrying.</paragraph>
                    <paragraph>The containing directory of ‘new’ and of all newly created directories are
                        fsync’d by default. This _will_ come at a performance penalty. In cases
                        where these additional fsyncs are not necessary, it is expected that the
                        caller of renamer() turn it off explicitly.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">old</literal_strong> – old path to be renamed</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">new</literal_strong> – new path to be renamed to</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">fsync</literal_strong> – fsync on containing directory of new and also all
                                            the newly created directories.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'replace_partition_in_path()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.replace_partition_in_path',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="replace_partition_in_path" ids="swift.common.utils.replace_partition_in_path" module="swift.common.utils" names="swift.common.utils.replace_partition_in_path"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">replace_partition_in_path</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">path</desc_parameter><desc_parameter xml:space="preserve">part_power</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Takes a full path to a file and a partition power and returns
                        the same path, but with the correct partition number. Most useful when
                        increasing the partition power.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">path</literal_strong> – full path to a file, for example object .data file</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">part_power</literal_strong> – partition power to compute correct partition number</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>Path with re-computed partition power</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'replication()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.replication',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="replication" ids="swift.common.utils.replication" module="swift.common.utils" names="swift.common.utils.replication"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">replication</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">func</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Decorator to declare which methods are accessible for different
                        type of servers:</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>If option replication_server is None then this decorator
                                doesn’t matter.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>If option replication_server is True then ONLY decorated with
                                this decorator methods will be started.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>If option replication_server is False then decorated with this
                                decorator methods will NOT be started.</paragraph>
                        </list_item>
                    </bullet_list>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">func</literal_strong> – function to mark accessible for replication</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'rsync_ip()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.rsync_ip',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="rsync_ip" ids="swift.common.utils.rsync_ip" module="swift.common.utils" names="swift.common.utils.rsync_ip"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">rsync_ip</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ip</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Transform ip string to an rsync-compatible form</paragraph>
                    <paragraph>Will return ipv4 addresses unchanged, but will nest ipv6 addresses
                        inside square brackets.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">ip</literal_strong> – an ip string (ipv4 or ipv6)</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a string ip address</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'rsync_module_interpolation()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.rsync_module_interpolation',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="rsync_module_interpolation" ids="swift.common.utils.rsync_module_interpolation" module="swift.common.utils" names="swift.common.utils.rsync_module_interpolation"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">rsync_module_interpolation</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">template</desc_parameter><desc_parameter xml:space="preserve">device</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Interpolate devices variables inside a rsync module template</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">template</literal_strong> – rsync module template as a string</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">device</literal_strong> – a device from a ring</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a string with all variables replaced by device attributes</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'search_tree()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.search_tree',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="search_tree" ids="swift.common.utils.search_tree" module="swift.common.utils" names="swift.common.utils.search_tree"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">search_tree</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">root</desc_parameter><desc_parameter xml:space="preserve">glob_match</desc_parameter><desc_parameter xml:space="preserve">ext=''</desc_parameter><desc_parameter xml:space="preserve">exts=None</desc_parameter><desc_parameter xml:space="preserve">dir_ext=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Look in root, for any files/dirs matching glob, recursively traversing
                        any found directories looking for files ending with ext</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">root</literal_strong> – start of search path</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">glob_match</literal_strong> – glob to match in root, matching dirs are traversed with
                                            os.walk</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">ext</literal_strong> – only files that end in ext will be returned</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">exts</literal_strong> – a list of file extensions; only files that end in one of these
                                            extensions will be returned; if set this list overrides any
                                            extension specified using the ‘ext’ param.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">dir_ext</literal_strong> – if present directories that end with dir_ext will not be
                                            traversed and instead will be returned as a matched path</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>list of full paths to matching files, sorted</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'server_handled_successfully()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.server_handled_successfully',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="server_handled_successfully" ids="swift.common.utils.server_handled_successfully" module="swift.common.utils" names="swift.common.utils.server_handled_successfully"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">server_handled_successfully</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">status_int</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>True for successful responses <emphasis>or</emphasis> error codes that are not Swift’s fault,
                        False otherwise. For example, 500 is definitely the server’s fault, but
                        412 is an error code (4xx are all errors) that is due to a header the
                        client sent.</paragraph>
                    <paragraph>If one is tracking error rates to monitor server health, one would be
                        advised to use a function like this one, lest a client cause a flurry of
                        404s or 416s and make a spurious spike in your errors graph.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'set_swift_dir()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.set_swift_dir',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="set_swift_dir" ids="swift.common.utils.set_swift_dir" module="swift.common.utils" names="swift.common.utils.set_swift_dir"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">set_swift_dir</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">swift_dir</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Sets the directory from which swift config files will be read. If the given
                        directory differs from that already set then the swift.conf file in the new
                        directory will be validated and storage policies will be reloaded from the
                        new swift.conf file.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">swift_dir</literal_strong> – non-default directory to read swift.conf from</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'split_path()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.split_path',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="split_path" ids="swift.common.utils.split_path" module="swift.common.utils" names="swift.common.utils.split_path"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">split_path</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">path</desc_parameter><desc_parameter xml:space="preserve">minsegs=1</desc_parameter><desc_parameter xml:space="preserve">maxsegs=None</desc_parameter><desc_parameter xml:space="preserve">rest_with_last=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Validate and split the given HTTP request path.</paragraph>
                    <paragraph><strong>Examples</strong>:</paragraph>
                    <literal_block xml:space="preserve">['a'] = split_path('/a')
['a', None] = split_path('/a', 1, 2)
['a', 'c'] = split_path('/a/c', 1, 2)
['a', 'c', 'o/r'] = split_path('/a/c/o/r', 1, 3, True)</literal_block>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">path</literal_strong> – HTTP Request path to be split</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">minsegs</literal_strong> – Minimum number of segments to be extracted</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">maxsegs</literal_strong> – Maximum number of segments to be extracted</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">rest_with_last</literal_strong> – If True, trailing data will be returned as part
                                            of last segment.  If False, and there is
                                            trailing data, raises ValueError.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>list of segments with a length of maxsegs (non-existent
                                    segments will return as None)</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>ValueError</literal_strong> – if given an invalid path</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'storage_directory()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.storage_directory',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="storage_directory" ids="swift.common.utils.storage_directory" module="swift.common.utils" names="swift.common.utils.storage_directory"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">storage_directory</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">datadir</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter><desc_parameter xml:space="preserve">name_hash</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Get the storage directory</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">datadir</literal_strong> – Base data directory</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">partition</literal_strong> – Partition</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">name_hash</literal_strong> – Account, container or object name hash</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>Storage directory</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'streq_const_time()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.streq_const_time',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="streq_const_time" ids="swift.common.utils.streq_const_time" module="swift.common.utils" names="swift.common.utils.streq_const_time"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">streq_const_time</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">s1</desc_parameter><desc_parameter xml:space="preserve">s2</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Constant-time string comparison.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Params s1</field_name>
                            <field_body>
                                <paragraph>the first string</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Params s2</field_name>
                            <field_body>
                                <paragraph>the second string</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>True if the strings are equal.</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                    <paragraph>This function takes two strings and compares them.  It is intended to be
                        used when doing a comparison for authentication purposes to help guard
                        against timing attacks.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'timing_stats()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.timing_stats',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="timing_stats" ids="swift.common.utils.timing_stats" module="swift.common.utils" names="swift.common.utils.timing_stats"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">timing_stats</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">**dec_kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns a decorator that logs timing events or errors for public methods in
                        swift’s wsgi server controllers, based on response code.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'tpool_reraise()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.tpool_reraise',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="tpool_reraise" ids="swift.common.utils.tpool_reraise" module="swift.common.utils" names="swift.common.utils.tpool_reraise"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">tpool_reraise</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">func</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Hack to work around Eventlet’s tpool not catching and reraising Timeouts.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'unlink_older_than()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.unlink_older_than',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="unlink_older_than" ids="swift.common.utils.unlink_older_than" module="swift.common.utils" names="swift.common.utils.unlink_older_than"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">unlink_older_than</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">path</desc_parameter><desc_parameter xml:space="preserve">mtime</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Remove any file in a given path that was last modified before mtime.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">path</literal_strong> – path to remove file from</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">mtime</literal_strong> – timestamp of oldest file to keep</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'unlink_paths_older_than()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.unlink_paths_older_than',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="unlink_paths_older_than" ids="swift.common.utils.unlink_paths_older_than" module="swift.common.utils" names="swift.common.utils.unlink_paths_older_than"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">unlink_paths_older_than</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">filepaths</desc_parameter><desc_parameter xml:space="preserve">mtime</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Remove any files from the given list that were
                        last modified before mtime.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">filepaths</literal_strong> – a list of strings, the full paths of files to check</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">mtime</literal_strong> – timestamp of oldest file to keep</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'urlparse()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.urlparse',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="urlparse" ids="swift.common.utils.urlparse" module="swift.common.utils" names="swift.common.utils.urlparse"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">urlparse</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">url</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>urlparse augmentation.
                        This is necessary because urlparse can’t handle RFC 2732 URLs.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">url</literal_strong> – URL to parse.</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'validate_device_partition()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.validate_device_partition',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="validate_device_partition" ids="swift.common.utils.validate_device_partition" module="swift.common.utils" names="swift.common.utils.validate_device_partition"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">validate_device_partition</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">device</desc_parameter><desc_parameter xml:space="preserve">partition</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Validate that a device and a partition are valid and won’t lead to
                        directory traversal when used.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">device</literal_strong> – device to validate</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">partition</literal_strong> – partition to validate</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>ValueError</literal_strong> – if given an invalid device or partition</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'validate_sync_to()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.validate_sync_to',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="validate_sync_to" ids="swift.common.utils.validate_sync_to" module="swift.common.utils" names="swift.common.utils.validate_sync_to"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">validate_sync_to</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">value</desc_parameter><desc_parameter xml:space="preserve">allowed_sync_hosts</desc_parameter><desc_parameter xml:space="preserve">realms_conf</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Validates an X-Container-Sync-To header value, returning the
                        validated endpoint, realm, and realm_key, or an error string.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">value</literal_strong> – The X-Container-Sync-To header value to validate.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">allowed_sync_hosts</literal_strong> – A list of allowed hosts in endpoints,
                                            if realms_conf does not apply.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">realms_conf</literal_strong> – A instance of
                                            swift.common.container_sync_realms.ContainerSyncRealms to
                                            validate against.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>A tuple of (error_string, validated_endpoint, realm,
                                    realm_key). The error_string will None if the rest of the
                                    values have been validated. The validated_endpoint will be
                                    the validated endpoint to sync to. The realm and realm_key
                                    will be set if validation was done through realms_conf.</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'whataremyips()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.whataremyips',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="whataremyips" ids="swift.common.utils.whataremyips" module="swift.common.utils" names="swift.common.utils.whataremyips"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">whataremyips</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bind_ip=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Get “our” IP addresses (“us” being the set of services configured by
                        one <title_reference>*.conf</title_reference> file). If our REST listens on a specific address, return it.
                        Otherwise, if listen on ‘0.0.0.0’ or ‘::’ return all addresses, including
                        the loopback.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">bind_ip</literal_strong> (<literal_emphasis>str</literal_emphasis>) – Optional bind_ip from a config file; may be IP address
                                    or hostname.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>list of Strings of ip addresses</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'write_file()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.write_file',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="write_file" ids="swift.common.utils.write_file" module="swift.common.utils" names="swift.common.utils.write_file"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">write_file</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">path</desc_parameter><desc_parameter xml:space="preserve">contents</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Write contents to file at path</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">path</literal_strong> – any path, subdirs will be created as needed</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">contents</literal_strong> – data to write to file, will be converted to string</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'write_pickle()\ (in\ module\ swift.common.utils)',\ u'swift.common.utils.write_pickle',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="write_pickle" ids="swift.common.utils.write_pickle" module="swift.common.utils" names="swift.common.utils.write_pickle"><desc_addname xml:space="preserve">swift.common.utils.</desc_addname><desc_name xml:space="preserve">write_pickle</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">obj</desc_parameter><desc_parameter xml:space="preserve">dest</desc_parameter><desc_parameter xml:space="preserve">tmp=None</desc_parameter><desc_parameter xml:space="preserve">pickle_protocol=0</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Ensure that a pickle file gets written to disk.  The file
                        is first written to a tmp location, ensure it is synced to disk, then
                        perform a move to its final location</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">obj</literal_strong> – python object to be pickled</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">dest</literal_strong> – path of final destination file</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">tmp</literal_strong> – path to tmp to use, defaults to None</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">pickle_protocol</literal_strong> – protocol to pickle the obj with, defaults to 0</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <target refid="wsgi"></target>
        </section>
        <section dupnames="wsgi" ids="wsgi id11" names="wsgi">
            <title>WSGI</title>
            <target ids="module-swift.common.wsgi" ismod="True"></target>
            <index entries="['single',\ u'swift.common.wsgi\ (module)',\ u'module-swift.common.wsgi',\ '',\ None]"></index>
            <paragraph>WSGI tools for use with swift.</paragraph>
            <index entries="['single',\ u'ConfigDirLoader\ (class\ in\ swift.common.wsgi)',\ u'swift.common.wsgi.ConfigDirLoader',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ConfigDirLoader" ids="swift.common.wsgi.ConfigDirLoader" module="swift.common.wsgi" names="swift.common.wsgi.ConfigDirLoader"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.wsgi.</desc_addname><desc_name xml:space="preserve">ConfigDirLoader</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf_dir</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.wsgi.NamedConfigLoader" reftitle="swift.common.wsgi.NamedConfigLoader"><literal classes="xref py py-class">swift.common.wsgi.NamedConfigLoader</literal></reference></paragraph>
                    <paragraph>Read configuration from multiple files under the given path.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ConfigString\ (class\ in\ swift.common.wsgi)',\ u'swift.common.wsgi.ConfigString',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ConfigString" ids="swift.common.wsgi.ConfigString" module="swift.common.wsgi" names="swift.common.wsgi.ConfigString"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.wsgi.</desc_addname><desc_name xml:space="preserve">ConfigString</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">config_string</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.wsgi.NamedConfigLoader" reftitle="swift.common.wsgi.NamedConfigLoader"><literal classes="xref py py-class">swift.common.wsgi.NamedConfigLoader</literal></reference></paragraph>
                    <paragraph>Wrap a raw config string up for paste.deploy.</paragraph>
                    <paragraph>If you give one of these to our loadcontext (e.g. give it to our
                        appconfig) we’ll intercept it and get it routed to the right loader.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'NamedConfigLoader\ (class\ in\ swift.common.wsgi)',\ u'swift.common.wsgi.NamedConfigLoader',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="NamedConfigLoader" ids="swift.common.wsgi.NamedConfigLoader" module="swift.common.wsgi" names="swift.common.wsgi.NamedConfigLoader"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.wsgi.</desc_addname><desc_name xml:space="preserve">NamedConfigLoader</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">filename</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">paste.deploy.loadwsgi.ConfigLoader</literal></paragraph>
                    <paragraph>Patch paste.deploy’s ConfigLoader so each context object will know what
                        config section it came from.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'PipelineWrapper\ (class\ in\ swift.common.wsgi)',\ u'swift.common.wsgi.PipelineWrapper',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="PipelineWrapper" ids="swift.common.wsgi.PipelineWrapper" module="swift.common.wsgi" names="swift.common.wsgi.PipelineWrapper"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.wsgi.</desc_addname><desc_name xml:space="preserve">PipelineWrapper</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>This class provides a number of utility methods for
                        modifying the composition of a wsgi pipeline.</paragraph>
                    <index entries="['single',\ u'create_filter()\ (swift.common.wsgi.PipelineWrapper\ method)',\ u'swift.common.wsgi.PipelineWrapper.create_filter',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="PipelineWrapper" first="False" fullname="PipelineWrapper.create_filter" ids="swift.common.wsgi.PipelineWrapper.create_filter" module="swift.common.wsgi" names="swift.common.wsgi.PipelineWrapper.create_filter"><desc_name xml:space="preserve">create_filter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">entry_point_name</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Creates a context for a filter that can subsequently be added
                                to a pipeline context.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">entry_point_name</literal_strong> – entry point of the middleware (Swift only)</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a filter context</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'index()\ (swift.common.wsgi.PipelineWrapper\ method)',\ u'swift.common.wsgi.PipelineWrapper.index',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="PipelineWrapper" first="False" fullname="PipelineWrapper.index" ids="swift.common.wsgi.PipelineWrapper.index" module="swift.common.wsgi" names="swift.common.wsgi.PipelineWrapper.index"><desc_name xml:space="preserve">index</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">entry_point_name</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns the first index of the given entry point name in the pipeline.</paragraph>
                            <paragraph>Raises ValueError if the given module is not in the pipeline.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'insert_filter()\ (swift.common.wsgi.PipelineWrapper\ method)',\ u'swift.common.wsgi.PipelineWrapper.insert_filter',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="PipelineWrapper" first="False" fullname="PipelineWrapper.insert_filter" ids="swift.common.wsgi.PipelineWrapper.insert_filter" module="swift.common.wsgi" names="swift.common.wsgi.PipelineWrapper.insert_filter"><desc_name xml:space="preserve">insert_filter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ctx</desc_parameter><desc_parameter xml:space="preserve">index=0</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Inserts a filter module into the pipeline context.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">ctx</literal_strong> – the context to be inserted</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">index</literal_strong> – (optional) index at which filter should be
                                                    inserted in the list of pipeline filters. Default
                                                    is 0, which means the start of the pipeline.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'startswith()\ (swift.common.wsgi.PipelineWrapper\ method)',\ u'swift.common.wsgi.PipelineWrapper.startswith',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="PipelineWrapper" first="False" fullname="PipelineWrapper.startswith" ids="swift.common.wsgi.PipelineWrapper.startswith" module="swift.common.wsgi" names="swift.common.wsgi.PipelineWrapper.startswith"><desc_name xml:space="preserve">startswith</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">entry_point_name</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Tests if the pipeline starts with the given entry point name.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">entry_point_name</literal_strong> – entry point of middleware or app (Swift only)</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>True if entry_point_name is first in pipeline, False
                                            otherwise</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'PortPidState\ (class\ in\ swift.common.wsgi)',\ u'swift.common.wsgi.PortPidState',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="PortPidState" ids="swift.common.wsgi.PortPidState" module="swift.common.wsgi" names="swift.common.wsgi.PortPidState"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.wsgi.</desc_addname><desc_name xml:space="preserve">PortPidState</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">servers_per_port</desc_parameter><desc_parameter xml:space="preserve">logger</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>A helper class for <reference internal="True" refid="swift.common.wsgi.ServersPerPortStrategy" reftitle="swift.common.wsgi.ServersPerPortStrategy"><literal classes="xref py py-class">ServersPerPortStrategy</literal></reference> to track listen
                        sockets and PIDs for each port.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">servers_per_port</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The configured number of servers per port.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">logger</literal_strong> – The server’s <literal classes="xref py py-class">LogAdaptor</literal></paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                    <index entries="['single',\ u'all_socks()\ (swift.common.wsgi.PortPidState\ method)',\ u'swift.common.wsgi.PortPidState.all_socks',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="PortPidState" first="False" fullname="PortPidState.all_socks" ids="swift.common.wsgi.PortPidState.all_socks" module="swift.common.wsgi" names="swift.common.wsgi.PortPidState.all_socks"><desc_name xml:space="preserve">all_socks</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Yield all current listen sockets.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'forget_pid()\ (swift.common.wsgi.PortPidState\ method)',\ u'swift.common.wsgi.PortPidState.forget_pid',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="PortPidState" first="False" fullname="PortPidState.forget_pid" ids="swift.common.wsgi.PortPidState.forget_pid" module="swift.common.wsgi" names="swift.common.wsgi.PortPidState.forget_pid"><desc_name xml:space="preserve">forget_pid</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">pid</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Idempotently forget a PID.  It’s okay if the PID is no longer in our
                                data structure (it could have been removed by the “orphan port” removal
                                in <literal classes="xref py py-meth">new_worker_socks()</literal>).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">pid</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The PID which exited.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'forget_port()\ (swift.common.wsgi.PortPidState\ method)',\ u'swift.common.wsgi.PortPidState.forget_port',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="PortPidState" first="False" fullname="PortPidState.forget_port" ids="swift.common.wsgi.PortPidState.forget_port" module="swift.common.wsgi" names="swift.common.wsgi.PortPidState.forget_port"><desc_name xml:space="preserve">forget_port</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">port</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Idempotently forget a port, closing the listen socket at most once.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'not_tracking()\ (swift.common.wsgi.PortPidState\ method)',\ u'swift.common.wsgi.PortPidState.not_tracking',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="PortPidState" first="False" fullname="PortPidState.not_tracking" ids="swift.common.wsgi.PortPidState.not_tracking" module="swift.common.wsgi" names="swift.common.wsgi.PortPidState.not_tracking"><desc_name xml:space="preserve">not_tracking</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">port</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return True if the specified port is not being tracked.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">port</literal_strong> (<literal_emphasis>int</literal_emphasis>) – A port to check.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'port_for_sock()\ (swift.common.wsgi.PortPidState\ method)',\ u'swift.common.wsgi.PortPidState.port_for_sock',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="PortPidState" first="False" fullname="PortPidState.port_for_sock" ids="swift.common.wsgi.PortPidState.port_for_sock" module="swift.common.wsgi" names="swift.common.wsgi.PortPidState.port_for_sock"><desc_name xml:space="preserve">port_for_sock</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">sock</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">sock</literal_strong> (<literal_emphasis>socket</literal_emphasis>) – A tracked bound listen socket</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The port the socket is bound to.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'port_index_pairs()\ (swift.common.wsgi.PortPidState\ method)',\ u'swift.common.wsgi.PortPidState.port_index_pairs',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="PortPidState" first="False" fullname="PortPidState.port_index_pairs" ids="swift.common.wsgi.PortPidState.port_index_pairs" module="swift.common.wsgi" names="swift.common.wsgi.PortPidState.port_index_pairs"><desc_name xml:space="preserve">port_index_pairs</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns current (port, server index) pairs.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>A set of (port, server_idx) tuples for currently-tracked
                                            ports, sockets, and PIDs.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'sock_for_port()\ (swift.common.wsgi.PortPidState\ method)',\ u'swift.common.wsgi.PortPidState.sock_for_port',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="PortPidState" first="False" fullname="PortPidState.sock_for_port" ids="swift.common.wsgi.PortPidState.sock_for_port" module="swift.common.wsgi" names="swift.common.wsgi.PortPidState.sock_for_port"><desc_name xml:space="preserve">sock_for_port</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">port</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">port</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The port whose socket is desired.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The bound listen socket for the given port.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'track_port()\ (swift.common.wsgi.PortPidState\ method)',\ u'swift.common.wsgi.PortPidState.track_port',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="PortPidState" first="False" fullname="PortPidState.track_port" ids="swift.common.wsgi.PortPidState.track_port" module="swift.common.wsgi" names="swift.common.wsgi.PortPidState.track_port"><desc_name xml:space="preserve">track_port</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">port</desc_parameter><desc_parameter xml:space="preserve">sock</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Start tracking servers for the given port and listen socket.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">port</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The port to start tracking</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">sock</literal_strong> (<literal_emphasis>socket</literal_emphasis>) – The bound listen socket for the port.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'RestrictedGreenPool\ (class\ in\ swift.common.wsgi)',\ u'swift.common.wsgi.RestrictedGreenPool',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="RestrictedGreenPool" ids="swift.common.wsgi.RestrictedGreenPool" module="swift.common.wsgi" names="swift.common.wsgi.RestrictedGreenPool"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.wsgi.</desc_addname><desc_name xml:space="preserve">RestrictedGreenPool</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">size=1024</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">eventlet.greenpool.GreenPool</literal></paragraph>
                    <paragraph>Works the same as GreenPool, but if the size is specified as one, then the
                        spawn_n() method will invoke waitall() before returning to prevent the
                        caller from doing any other work (like calling accept()).</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ServersPerPortStrategy\ (class\ in\ swift.common.wsgi)',\ u'swift.common.wsgi.ServersPerPortStrategy',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ServersPerPortStrategy" ids="swift.common.wsgi.ServersPerPortStrategy" module="swift.common.wsgi" names="swift.common.wsgi.ServersPerPortStrategy"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.wsgi.</desc_addname><desc_name xml:space="preserve">ServersPerPortStrategy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter><desc_parameter xml:space="preserve">logger</desc_parameter><desc_parameter xml:space="preserve">servers_per_port</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>WSGI server management strategy object for an object-server with one listen
                        port per unique local port in the storage policy rings.  The
                        <title_reference>servers_per_port</title_reference> integer config setting determines how many workers are
                        run per port.</paragraph>
                    <paragraph>Used in <reference internal="True" refid="swift.common.wsgi.run_wsgi" reftitle="swift.common.wsgi.run_wsgi"><literal classes="xref py py-func">run_wsgi()</literal></reference>.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">conf</literal_strong> (<literal_emphasis>dict</literal_emphasis>) – Server configuration dictionary.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">logger</literal_strong> – The server’s <literal classes="xref py py-class">LogAdaptor</literal>
                                            object.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">servers_per_port</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The number of workers to run per port.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                    <index entries="['single',\ u'do_bind_ports()\ (swift.common.wsgi.ServersPerPortStrategy\ method)',\ u'swift.common.wsgi.ServersPerPortStrategy.do_bind_ports',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ServersPerPortStrategy" first="False" fullname="ServersPerPortStrategy.do_bind_ports" ids="swift.common.wsgi.ServersPerPortStrategy.do_bind_ports" module="swift.common.wsgi" names="swift.common.wsgi.ServersPerPortStrategy.do_bind_ports"><desc_name xml:space="preserve">do_bind_ports</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Bind one listen socket per unique local storage policy ring port.  Then
                                do all the work of drop_privileges except the actual dropping of
                                privileges (each forked-off worker will do that post-fork in
                                <reference internal="True" refid="swift.common.wsgi.ServersPerPortStrategy.post_fork_hook" reftitle="swift.common.wsgi.ServersPerPortStrategy.post_fork_hook"><literal classes="xref py py-meth">post_fork_hook()</literal></reference>).</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'log_sock_exit()\ (swift.common.wsgi.ServersPerPortStrategy\ method)',\ u'swift.common.wsgi.ServersPerPortStrategy.log_sock_exit',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ServersPerPortStrategy" first="False" fullname="ServersPerPortStrategy.log_sock_exit" ids="swift.common.wsgi.ServersPerPortStrategy.log_sock_exit" module="swift.common.wsgi" names="swift.common.wsgi.ServersPerPortStrategy.log_sock_exit"><desc_name xml:space="preserve">log_sock_exit</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">sock</desc_parameter><desc_parameter xml:space="preserve">server_idx</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Log a server’s exit.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'loop_timeout()\ (swift.common.wsgi.ServersPerPortStrategy\ method)',\ u'swift.common.wsgi.ServersPerPortStrategy.loop_timeout',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ServersPerPortStrategy" first="False" fullname="ServersPerPortStrategy.loop_timeout" ids="swift.common.wsgi.ServersPerPortStrategy.loop_timeout" module="swift.common.wsgi" names="swift.common.wsgi.ServersPerPortStrategy.loop_timeout"><desc_name xml:space="preserve">loop_timeout</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return timeout before checking for reloaded rings.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The time to wait for a child to exit before checking for
                                            reloaded rings (new ports).</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'new_worker_socks()\ (swift.common.wsgi.ServersPerPortStrategy\ method)',\ u'swift.common.wsgi.ServersPerPortStrategy.new_worker_socks',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ServersPerPortStrategy" first="False" fullname="ServersPerPortStrategy.new_worker_socks" ids="swift.common.wsgi.ServersPerPortStrategy.new_worker_socks" module="swift.common.wsgi" names="swift.common.wsgi.ServersPerPortStrategy.new_worker_socks"><desc_name xml:space="preserve">new_worker_socks</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Yield a sequence of (socket, server_idx) tuples for each server which
                                should be forked-off and started.</paragraph>
                            <paragraph>Any sockets for “orphaned” ports no longer in any ring will be closed
                                (causing their associated workers to gracefully exit) after all new
                                sockets have been yielded.</paragraph>
                            <paragraph>The server_idx item for each socket will passed into the
                                <reference internal="True" refid="swift.common.wsgi.ServersPerPortStrategy.log_sock_exit" reftitle="swift.common.wsgi.ServersPerPortStrategy.log_sock_exit"><literal classes="xref py py-meth">log_sock_exit()</literal></reference> and <reference internal="True" refid="swift.common.wsgi.ServersPerPortStrategy.register_worker_start" reftitle="swift.common.wsgi.ServersPerPortStrategy.register_worker_start"><literal classes="xref py py-meth">register_worker_start()</literal></reference> methods.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'no_fork_sock()\ (swift.common.wsgi.ServersPerPortStrategy\ method)',\ u'swift.common.wsgi.ServersPerPortStrategy.no_fork_sock',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ServersPerPortStrategy" first="False" fullname="ServersPerPortStrategy.no_fork_sock" ids="swift.common.wsgi.ServersPerPortStrategy.no_fork_sock" module="swift.common.wsgi" names="swift.common.wsgi.ServersPerPortStrategy.no_fork_sock"><desc_name xml:space="preserve">no_fork_sock</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>This strategy does not support running in the foreground.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'post_fork_hook()\ (swift.common.wsgi.ServersPerPortStrategy\ method)',\ u'swift.common.wsgi.ServersPerPortStrategy.post_fork_hook',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ServersPerPortStrategy" first="False" fullname="ServersPerPortStrategy.post_fork_hook" ids="swift.common.wsgi.ServersPerPortStrategy.post_fork_hook" module="swift.common.wsgi" names="swift.common.wsgi.ServersPerPortStrategy.post_fork_hook"><desc_name xml:space="preserve">post_fork_hook</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Called in each child process, prior to starting the actual wsgi server,
                                to drop privileges.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'register_worker_exit()\ (swift.common.wsgi.ServersPerPortStrategy\ method)',\ u'swift.common.wsgi.ServersPerPortStrategy.register_worker_exit',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ServersPerPortStrategy" first="False" fullname="ServersPerPortStrategy.register_worker_exit" ids="swift.common.wsgi.ServersPerPortStrategy.register_worker_exit" module="swift.common.wsgi" names="swift.common.wsgi.ServersPerPortStrategy.register_worker_exit"><desc_name xml:space="preserve">register_worker_exit</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">pid</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Called when a worker has exited.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">pid</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The PID of the worker that exited.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'register_worker_start()\ (swift.common.wsgi.ServersPerPortStrategy\ method)',\ u'swift.common.wsgi.ServersPerPortStrategy.register_worker_start',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ServersPerPortStrategy" first="False" fullname="ServersPerPortStrategy.register_worker_start" ids="swift.common.wsgi.ServersPerPortStrategy.register_worker_start" module="swift.common.wsgi" names="swift.common.wsgi.ServersPerPortStrategy.register_worker_start"><desc_name xml:space="preserve">register_worker_start</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">sock</desc_parameter><desc_parameter xml:space="preserve">server_idx</desc_parameter><desc_parameter xml:space="preserve">pid</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Called when a new worker is started.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">sock</literal_strong> (<literal_emphasis>socket</literal_emphasis>) – The listen socket for the worker just started.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">server_idx</literal_strong> – The socket’s server_idx as yielded by
                                                    <reference internal="True" refid="swift.common.wsgi.ServersPerPortStrategy.new_worker_socks" reftitle="swift.common.wsgi.ServersPerPortStrategy.new_worker_socks"><literal classes="xref py py-meth">new_worker_socks()</literal></reference>.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">pid</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The new worker process’ PID</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'shutdown_sockets()\ (swift.common.wsgi.ServersPerPortStrategy\ method)',\ u'swift.common.wsgi.ServersPerPortStrategy.shutdown_sockets',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ServersPerPortStrategy" first="False" fullname="ServersPerPortStrategy.shutdown_sockets" ids="swift.common.wsgi.ServersPerPortStrategy.shutdown_sockets" module="swift.common.wsgi" names="swift.common.wsgi.ServersPerPortStrategy.shutdown_sockets"><desc_name xml:space="preserve">shutdown_sockets</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Shutdown any listen sockets.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'WSGIContext\ (class\ in\ swift.common.wsgi)',\ u'swift.common.wsgi.WSGIContext',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="WSGIContext" ids="swift.common.wsgi.WSGIContext" module="swift.common.wsgi" names="swift.common.wsgi.WSGIContext"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.wsgi.</desc_addname><desc_name xml:space="preserve">WSGIContext</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">wsgi_app</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>This class provides a means to provide context (scope) for a middleware
                        filter to have access to the wsgi start_response results like the request
                        status and headers.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'WorkersStrategy\ (class\ in\ swift.common.wsgi)',\ u'swift.common.wsgi.WorkersStrategy',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="WorkersStrategy" ids="swift.common.wsgi.WorkersStrategy" module="swift.common.wsgi" names="swift.common.wsgi.WorkersStrategy"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.wsgi.</desc_addname><desc_name xml:space="preserve">WorkersStrategy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter><desc_parameter xml:space="preserve">logger</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>WSGI server management strategy object for a single bind port and listen
                        socket shared by a configured number of forked-off workers.</paragraph>
                    <paragraph>Used in <reference internal="True" refid="swift.common.wsgi.run_wsgi" reftitle="swift.common.wsgi.run_wsgi"><literal classes="xref py py-func">run_wsgi()</literal></reference>.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">conf</literal_strong> (<literal_emphasis>dict</literal_emphasis>) – Server configuration dictionary.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">logger</literal_strong> – The server’s <literal classes="xref py py-class">LogAdaptor</literal>
                                            object.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                    <index entries="['single',\ u'do_bind_ports()\ (swift.common.wsgi.WorkersStrategy\ method)',\ u'swift.common.wsgi.WorkersStrategy.do_bind_ports',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="WorkersStrategy" first="False" fullname="WorkersStrategy.do_bind_ports" ids="swift.common.wsgi.WorkersStrategy.do_bind_ports" module="swift.common.wsgi" names="swift.common.wsgi.WorkersStrategy.do_bind_ports"><desc_name xml:space="preserve">do_bind_ports</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Bind the one listen socket for this strategy and drop privileges
                                (since the parent process will never need to bind again).</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'log_sock_exit()\ (swift.common.wsgi.WorkersStrategy\ method)',\ u'swift.common.wsgi.WorkersStrategy.log_sock_exit',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="WorkersStrategy" first="False" fullname="WorkersStrategy.log_sock_exit" ids="swift.common.wsgi.WorkersStrategy.log_sock_exit" module="swift.common.wsgi" names="swift.common.wsgi.WorkersStrategy.log_sock_exit"><desc_name xml:space="preserve">log_sock_exit</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">sock</desc_parameter><desc_parameter xml:space="preserve">_unused</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Log a server’s exit.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">sock</literal_strong> (<literal_emphasis>socket</literal_emphasis>) – The listen socket for the worker just started.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">_unused</literal_strong> – The socket’s opaque_data yielded by
                                                    <reference internal="True" refid="swift.common.wsgi.WorkersStrategy.new_worker_socks" reftitle="swift.common.wsgi.WorkersStrategy.new_worker_socks"><literal classes="xref py py-meth">new_worker_socks()</literal></reference>.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'loop_timeout()\ (swift.common.wsgi.WorkersStrategy\ method)',\ u'swift.common.wsgi.WorkersStrategy.loop_timeout',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="WorkersStrategy" first="False" fullname="WorkersStrategy.loop_timeout" ids="swift.common.wsgi.WorkersStrategy.loop_timeout" module="swift.common.wsgi" names="swift.common.wsgi.WorkersStrategy.loop_timeout"><desc_name xml:space="preserve">loop_timeout</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>We want to keep from busy-waiting, but we also need a non-None value so
                                the main loop gets a chance to tell whether it should keep running or
                                not (e.g. SIGHUP received).</paragraph>
                            <paragraph>So we return 0.5.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'new_worker_socks()\ (swift.common.wsgi.WorkersStrategy\ method)',\ u'swift.common.wsgi.WorkersStrategy.new_worker_socks',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="WorkersStrategy" first="False" fullname="WorkersStrategy.new_worker_socks" ids="swift.common.wsgi.WorkersStrategy.new_worker_socks" module="swift.common.wsgi" names="swift.common.wsgi.WorkersStrategy.new_worker_socks"><desc_name xml:space="preserve">new_worker_socks</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Yield a sequence of (socket, opqaue_data) tuples for each server which
                                should be forked-off and started.</paragraph>
                            <paragraph>The opaque_data item for each socket will passed into the
                                <reference internal="True" refid="swift.common.wsgi.WorkersStrategy.log_sock_exit" reftitle="swift.common.wsgi.WorkersStrategy.log_sock_exit"><literal classes="xref py py-meth">log_sock_exit()</literal></reference> and <reference internal="True" refid="swift.common.wsgi.WorkersStrategy.register_worker_start" reftitle="swift.common.wsgi.WorkersStrategy.register_worker_start"><literal classes="xref py py-meth">register_worker_start()</literal></reference> methods
                                where it will be ignored.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'no_fork_sock()\ (swift.common.wsgi.WorkersStrategy\ method)',\ u'swift.common.wsgi.WorkersStrategy.no_fork_sock',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="WorkersStrategy" first="False" fullname="WorkersStrategy.no_fork_sock" ids="swift.common.wsgi.WorkersStrategy.no_fork_sock" module="swift.common.wsgi" names="swift.common.wsgi.WorkersStrategy.no_fork_sock"><desc_name xml:space="preserve">no_fork_sock</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return a server listen socket if the server should run in the
                                foreground (no fork).</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'post_fork_hook()\ (swift.common.wsgi.WorkersStrategy\ method)',\ u'swift.common.wsgi.WorkersStrategy.post_fork_hook',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="WorkersStrategy" first="False" fullname="WorkersStrategy.post_fork_hook" ids="swift.common.wsgi.WorkersStrategy.post_fork_hook" module="swift.common.wsgi" names="swift.common.wsgi.WorkersStrategy.post_fork_hook"><desc_name xml:space="preserve">post_fork_hook</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Perform any initialization in a forked-off child process prior to
                                starting the wsgi server.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'register_worker_exit()\ (swift.common.wsgi.WorkersStrategy\ method)',\ u'swift.common.wsgi.WorkersStrategy.register_worker_exit',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="WorkersStrategy" first="False" fullname="WorkersStrategy.register_worker_exit" ids="swift.common.wsgi.WorkersStrategy.register_worker_exit" module="swift.common.wsgi" names="swift.common.wsgi.WorkersStrategy.register_worker_exit"><desc_name xml:space="preserve">register_worker_exit</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">pid</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Called when a worker has exited.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">pid</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The PID of the worker that exited.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'register_worker_start()\ (swift.common.wsgi.WorkersStrategy\ method)',\ u'swift.common.wsgi.WorkersStrategy.register_worker_start',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="WorkersStrategy" first="False" fullname="WorkersStrategy.register_worker_start" ids="swift.common.wsgi.WorkersStrategy.register_worker_start" module="swift.common.wsgi" names="swift.common.wsgi.WorkersStrategy.register_worker_start"><desc_name xml:space="preserve">register_worker_start</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">sock</desc_parameter><desc_parameter xml:space="preserve">_unused</desc_parameter><desc_parameter xml:space="preserve">pid</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Called when a new worker is started.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">sock</literal_strong> (<literal_emphasis>socket</literal_emphasis>) – The listen socket for the worker just started.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">_unused</literal_strong> – The socket’s opaque_data yielded by new_worker_socks().</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">pid</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The new worker process’ PID</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'shutdown_sockets()\ (swift.common.wsgi.WorkersStrategy\ method)',\ u'swift.common.wsgi.WorkersStrategy.shutdown_sockets',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="WorkersStrategy" first="False" fullname="WorkersStrategy.shutdown_sockets" ids="swift.common.wsgi.WorkersStrategy.shutdown_sockets" module="swift.common.wsgi" names="swift.common.wsgi.WorkersStrategy.shutdown_sockets"><desc_name xml:space="preserve">shutdown_sockets</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Shutdown any listen sockets.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'get_socket()\ (in\ module\ swift.common.wsgi)',\ u'swift.common.wsgi.get_socket',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="get_socket" ids="swift.common.wsgi.get_socket" module="swift.common.wsgi" names="swift.common.wsgi.get_socket"><desc_addname xml:space="preserve">swift.common.wsgi.</desc_addname><desc_name xml:space="preserve">get_socket</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bind socket to bind ip:port in conf</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">conf</literal_strong> – Configuration dict to read settings from</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a socket object as returned from socket.listen or
                                    ssl.wrap_socket if conf specifies cert_file</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'init_request_processor()\ (in\ module\ swift.common.wsgi)',\ u'swift.common.wsgi.init_request_processor',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="init_request_processor" ids="swift.common.wsgi.init_request_processor" module="swift.common.wsgi" names="swift.common.wsgi.init_request_processor"><desc_addname xml:space="preserve">swift.common.wsgi.</desc_addname><desc_name xml:space="preserve">init_request_processor</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf_path</desc_parameter><desc_parameter xml:space="preserve">app_section</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Loads common settings from conf
                        Sets the logger
                        Loads the request processor</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">conf_path</literal_strong> – Path to paste.deploy style configuration file/directory</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">app_section</literal_strong> – App name from conf file to load config from</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>the loaded application entry point</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>ConfigFileError</literal_strong> – Exception is raised for config file error</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'loadapp()\ (in\ module\ swift.common.wsgi)',\ u'swift.common.wsgi.loadapp',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="loadapp" ids="swift.common.wsgi.loadapp" module="swift.common.wsgi" names="swift.common.wsgi.loadapp"><desc_addname xml:space="preserve">swift.common.wsgi.</desc_addname><desc_name xml:space="preserve">loadapp</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf_file</desc_parameter><desc_parameter xml:space="preserve">global_conf=None</desc_parameter><desc_parameter xml:space="preserve">allow_modify_pipeline=True</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Loads a context from a config file, and if the context is a pipeline
                        then presents the app with the opportunity to modify the pipeline.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'make_env()\ (in\ module\ swift.common.wsgi)',\ u'swift.common.wsgi.make_env',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="make_env" ids="swift.common.wsgi.make_env" module="swift.common.wsgi" names="swift.common.wsgi.make_env"><desc_addname xml:space="preserve">swift.common.wsgi.</desc_addname><desc_name xml:space="preserve">make_env</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">env</desc_parameter><desc_parameter xml:space="preserve">method=None</desc_parameter><desc_parameter xml:space="preserve">path=None</desc_parameter><desc_parameter xml:space="preserve">agent='Swift'</desc_parameter><desc_parameter xml:space="preserve">query_string=None</desc_parameter><desc_parameter xml:space="preserve">swift_source=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns a new fresh WSGI environment.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">env</literal_strong> – The WSGI environment to base the new environment on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">method</literal_strong> – The new REQUEST_METHOD or None to use the
                                            original.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">path</literal_strong> – The new path_info or none to use the original. path
                                            should NOT be quoted. When building a url, a Webob
                                            Request (in accordance with wsgi spec) will quote
                                            env[‘PATH_INFO’].  url += quote(environ[‘PATH_INFO’])</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">query_string</literal_strong> – The new query_string or none to use the original.
                                            When building a url, a Webob Request will append
                                            the query string directly to the url.
                                            url += ‘?’ + env[‘QUERY_STRING’]</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">agent</literal_strong> – The HTTP user agent to use; default ‘Swift’. You
                                            can put %(orig)s in the agent to have it replaced
                                            with the original env’s HTTP_USER_AGENT, such as
                                            ‘%(orig)s StaticWeb’. You also set agent to None to
                                            use the original env’s HTTP_USER_AGENT or ‘’ to
                                            have no HTTP_USER_AGENT.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">swift_source</literal_strong> – Used to mark the request as originating out of
                                            middleware. Will be logged in proxy logs.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>Fresh WSGI environment.</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'make_pre_authed_env()\ (in\ module\ swift.common.wsgi)',\ u'swift.common.wsgi.make_pre_authed_env',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="make_pre_authed_env" ids="swift.common.wsgi.make_pre_authed_env" module="swift.common.wsgi" names="swift.common.wsgi.make_pre_authed_env"><desc_addname xml:space="preserve">swift.common.wsgi.</desc_addname><desc_name xml:space="preserve">make_pre_authed_env</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">env</desc_parameter><desc_parameter xml:space="preserve">method=None</desc_parameter><desc_parameter xml:space="preserve">path=None</desc_parameter><desc_parameter xml:space="preserve">agent='Swift'</desc_parameter><desc_parameter xml:space="preserve">query_string=None</desc_parameter><desc_parameter xml:space="preserve">swift_source=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Same as <reference internal="True" refid="swift.common.wsgi.make_env" reftitle="swift.common.wsgi.make_env"><literal classes="xref py py-func">make_env()</literal></reference> but with preauthorization.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'make_pre_authed_request()\ (in\ module\ swift.common.wsgi)',\ u'swift.common.wsgi.make_pre_authed_request',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="make_pre_authed_request" ids="swift.common.wsgi.make_pre_authed_request" module="swift.common.wsgi" names="swift.common.wsgi.make_pre_authed_request"><desc_addname xml:space="preserve">swift.common.wsgi.</desc_addname><desc_name xml:space="preserve">make_pre_authed_request</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">env</desc_parameter><desc_parameter xml:space="preserve">method=None</desc_parameter><desc_parameter xml:space="preserve">path=None</desc_parameter><desc_parameter xml:space="preserve">body=None</desc_parameter><desc_parameter xml:space="preserve">headers=None</desc_parameter><desc_parameter xml:space="preserve">agent='Swift'</desc_parameter><desc_parameter xml:space="preserve">swift_source=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Same as <reference internal="True" refid="swift.common.wsgi.make_subrequest" reftitle="swift.common.wsgi.make_subrequest"><literal classes="xref py py-func">make_subrequest()</literal></reference> but with preauthorization.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'make_subrequest()\ (in\ module\ swift.common.wsgi)',\ u'swift.common.wsgi.make_subrequest',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="make_subrequest" ids="swift.common.wsgi.make_subrequest" module="swift.common.wsgi" names="swift.common.wsgi.make_subrequest"><desc_addname xml:space="preserve">swift.common.wsgi.</desc_addname><desc_name xml:space="preserve">make_subrequest</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">env</desc_parameter><desc_parameter xml:space="preserve">method=None</desc_parameter><desc_parameter xml:space="preserve">path=None</desc_parameter><desc_parameter xml:space="preserve">body=None</desc_parameter><desc_parameter xml:space="preserve">headers=None</desc_parameter><desc_parameter xml:space="preserve">agent='Swift'</desc_parameter><desc_parameter xml:space="preserve">swift_source=None</desc_parameter><desc_parameter xml:space="preserve">make_env=&lt;function make_env&gt;</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Makes a new swob.Request based on the current env but with the
                        parameters specified.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">env</literal_strong> – The WSGI environment to base the new request on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">method</literal_strong> – HTTP method of new request; default is from
                                            the original env.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">path</literal_strong> – HTTP path of new request; default is from the
                                            original env. path should be compatible with what you
                                            would send to Request.blank. path should be quoted and it
                                            can include a query string. for example:
                                            ‘/a%20space?unicode_str%E8%AA%9E=y%20es’</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">body</literal_strong> – HTTP body of new request; empty by default.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">headers</literal_strong> – Extra HTTP headers of new request; None by
                                            default.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">agent</literal_strong> – The HTTP user agent to use; default ‘Swift’. You
                                            can put %(orig)s in the agent to have it replaced
                                            with the original env’s HTTP_USER_AGENT, such as
                                            ‘%(orig)s StaticWeb’. You also set agent to None to
                                            use the original env’s HTTP_USER_AGENT or ‘’ to
                                            have no HTTP_USER_AGENT.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">swift_source</literal_strong> – Used to mark the request as originating out of
                                            middleware. Will be logged in proxy logs.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">make_env</literal_strong> – make_subrequest calls this make_env to help build the
                                            swob.Request.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>Fresh swob.Request object.</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'monkey_patch_mimetools()\ (in\ module\ swift.common.wsgi)',\ u'swift.common.wsgi.monkey_patch_mimetools',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="monkey_patch_mimetools" ids="swift.common.wsgi.monkey_patch_mimetools" module="swift.common.wsgi" names="swift.common.wsgi.monkey_patch_mimetools"><desc_addname xml:space="preserve">swift.common.wsgi.</desc_addname><desc_name xml:space="preserve">monkey_patch_mimetools</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>mimetools.Message defaults content-type to “text/plain”
                        This changes it to default to None, so we can detect missing headers.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'pipeline_property()\ (in\ module\ swift.common.wsgi)',\ u'swift.common.wsgi.pipeline_property',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="pipeline_property" ids="swift.common.wsgi.pipeline_property" module="swift.common.wsgi" names="swift.common.wsgi.pipeline_property"><desc_addname xml:space="preserve">swift.common.wsgi.</desc_addname><desc_name xml:space="preserve">pipeline_property</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Create a property accessor for the given name.  The property will
                        dig through the bound instance on which it was accessed for an
                        attribute “app” and check that object for an attribute of the given
                        name.  If the “app” object does not have such an attribute, it will
                        look for an attribute “app” on THAT object and continue it’s search
                        from there.  If the named attribute cannot be found accessing the
                        property will raise AttributeError.</paragraph>
                    <paragraph>If a default kwarg is provided you get that instead of the
                        AttributeError.  When found the attribute will be cached on instance
                        with the property accessor using the same name as the attribute
                        prefixed with a leading underscore.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'run_wsgi()\ (in\ module\ swift.common.wsgi)',\ u'swift.common.wsgi.run_wsgi',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="run_wsgi" ids="swift.common.wsgi.run_wsgi" module="swift.common.wsgi" names="swift.common.wsgi.run_wsgi"><desc_addname xml:space="preserve">swift.common.wsgi.</desc_addname><desc_name xml:space="preserve">run_wsgi</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf_path</desc_parameter><desc_parameter xml:space="preserve">app_section</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Runs the server according to some strategy.  The default strategy runs a
                        specified number of workers in pre-fork model.  The object-server (only)
                        may use a servers-per-port strategy if its config has a servers_per_port
                        setting with a value greater than zero.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">conf_path</literal_strong> – Path to paste.deploy style configuration file/directory</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">app_section</literal_strong> – App name from conf file to load config from</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>0 if successful, nonzero otherwise</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'wrap_conf_type()\ (in\ module\ swift.common.wsgi)',\ u'swift.common.wsgi.wrap_conf_type',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="wrap_conf_type" ids="swift.common.wsgi.wrap_conf_type" module="swift.common.wsgi" names="swift.common.wsgi.wrap_conf_type"><desc_addname xml:space="preserve">swift.common.wsgi.</desc_addname><desc_name xml:space="preserve">wrap_conf_type</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">f</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Wrap a function whos first argument is a paste.deploy style config uri,
                        such that you can pass it an un-adorned raw filesystem path (or config
                        string) and the config directive (either config:, config_dir:, or
                        config_str:) will be added automatically based on the type of entity
                        (either a file or directory, or if no such entity on the file system -
                        just a string) before passing it through to the paste.deploy function.</paragraph>
                </desc_content>
            </desc>
            <target refid="storage-policy"></target>
        </section>
        <section ids="module-swift.common.storage_policy id12 storage-policy" names="storage\ policy storage_policy">
            <title>Storage Policy</title>
            <index entries="['single',\ u'swift.common.storage_policy\ (module)',\ u'module-swift.common.storage_policy',\ '',\ None]"></index>
            <index entries="['single',\ u'BaseStoragePolicy\ (class\ in\ swift.common.storage_policy)',\ u'swift.common.storage_policy.BaseStoragePolicy',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BaseStoragePolicy" ids="swift.common.storage_policy.BaseStoragePolicy" module="swift.common.storage_policy" names="swift.common.storage_policy.BaseStoragePolicy"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.storage_policy.</desc_addname><desc_name xml:space="preserve">BaseStoragePolicy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">idx</desc_parameter><desc_parameter xml:space="preserve">name=''</desc_parameter><desc_parameter xml:space="preserve">is_default=False</desc_parameter><desc_parameter xml:space="preserve">is_deprecated=False</desc_parameter><desc_parameter xml:space="preserve">object_ring=None</desc_parameter><desc_parameter xml:space="preserve">aliases=''</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>Represents a storage policy.  Not meant to be instantiated directly;
                        implement a derived subclasses (e.g. StoragePolicy, ECStoragePolicy, etc)
                        or use <reference internal="True" refid="swift.common.storage_policy.reload_storage_policies" reftitle="swift.common.storage_policy.reload_storage_policies"><literal classes="xref py py-func">reload_storage_policies()</literal></reference> to
                        load POLICIES from <literal>swift.conf</literal>.</paragraph>
                    <paragraph>The object_ring property is lazy loaded once the service’s <literal>swift_dir</literal>
                        is known via <reference internal="True" refid="swift.common.storage_policy.StoragePolicyCollection.get_object_ring" reftitle="swift.common.storage_policy.StoragePolicyCollection.get_object_ring"><literal classes="xref py py-meth">get_object_ring()</literal></reference>, but it may
                        be over-ridden via object_ring kwarg at create time for testing or
                        actively loaded with <literal classes="xref py py-meth">load_ring()</literal>.</paragraph>
                    <index entries="['single',\ u'add_name()\ (swift.common.storage_policy.BaseStoragePolicy\ method)',\ u'swift.common.storage_policy.BaseStoragePolicy.add_name',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseStoragePolicy" first="False" fullname="BaseStoragePolicy.add_name" ids="swift.common.storage_policy.BaseStoragePolicy.add_name" module="swift.common.storage_policy" names="swift.common.storage_policy.BaseStoragePolicy.add_name"><desc_name xml:space="preserve">add_name</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Adds an alias name to the storage policy. Shouldn’t be called
                                directly from the storage policy but instead through the
                                storage policy collection class, so lookups by name resolve
                                correctly.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> – a new alias for the storage policy</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'change_primary_name()\ (swift.common.storage_policy.BaseStoragePolicy\ method)',\ u'swift.common.storage_policy.BaseStoragePolicy.change_primary_name',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseStoragePolicy" first="False" fullname="BaseStoragePolicy.change_primary_name" ids="swift.common.storage_policy.BaseStoragePolicy.change_primary_name" module="swift.common.storage_policy" names="swift.common.storage_policy.BaseStoragePolicy.change_primary_name"><desc_name xml:space="preserve">change_primary_name</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Changes the primary/default name of the policy to a specified name.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> – a string name to replace the current primary name.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_info()\ (swift.common.storage_policy.BaseStoragePolicy\ method)',\ u'swift.common.storage_policy.BaseStoragePolicy.get_info',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseStoragePolicy" first="False" fullname="BaseStoragePolicy.get_info" ids="swift.common.storage_policy.BaseStoragePolicy.get_info" module="swift.common.storage_policy" names="swift.common.storage_policy.BaseStoragePolicy.get_info"><desc_name xml:space="preserve">get_info</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">config=False</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return the info dict and conf file options for this policy.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">config</literal_strong> – boolean, if True all config options are returned</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'load_ring()\ (swift.common.storage_policy.BaseStoragePolicy\ method)',\ u'swift.common.storage_policy.BaseStoragePolicy.load_ring',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseStoragePolicy" first="False" fullname="BaseStoragePolicy.load_ring" ids="swift.common.storage_policy.BaseStoragePolicy.load_ring" module="swift.common.storage_policy" names="swift.common.storage_policy.BaseStoragePolicy.load_ring"><desc_name xml:space="preserve">load_ring</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">swift_dir</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Load the ring for this policy immediately.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">swift_dir</literal_strong> – path to rings</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'quorum\ (swift.common.storage_policy.BaseStoragePolicy\ attribute)',\ u'swift.common.storage_policy.BaseStoragePolicy.quorum',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BaseStoragePolicy" first="False" fullname="BaseStoragePolicy.quorum" ids="swift.common.storage_policy.BaseStoragePolicy.quorum" module="swift.common.storage_policy" names="swift.common.storage_policy.BaseStoragePolicy.quorum"><desc_name xml:space="preserve">quorum</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Number of successful backend requests needed for the proxy to
                                consider the client request successful.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'register()\ (swift.common.storage_policy.BaseStoragePolicy\ class\ method)',\ u'swift.common.storage_policy.BaseStoragePolicy.register',\ '',\ None]"></index>
                    <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                        <desc_signature class="BaseStoragePolicy" first="False" fullname="BaseStoragePolicy.register" ids="swift.common.storage_policy.BaseStoragePolicy.register" module="swift.common.storage_policy" names="swift.common.storage_policy.BaseStoragePolicy.register"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">register</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">policy_type</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Decorator for Storage Policy implementations to register
                                their StoragePolicy class.  This will also set the policy_type
                                attribute on the registered implementation.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'remove_name()\ (swift.common.storage_policy.BaseStoragePolicy\ method)',\ u'swift.common.storage_policy.BaseStoragePolicy.remove_name',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BaseStoragePolicy" first="False" fullname="BaseStoragePolicy.remove_name" ids="swift.common.storage_policy.BaseStoragePolicy.remove_name" module="swift.common.storage_policy" names="swift.common.storage_policy.BaseStoragePolicy.remove_name"><desc_name xml:space="preserve">remove_name</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Removes an alias name from the storage policy. Shouldn’t be called
                                directly from the storage policy but instead through the storage
                                policy collection class, so lookups by name resolve correctly. If
                                the name removed is the primary name then the next available alias
                                will be adopted as the new primary name.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> – a name assigned to the storage policy</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'ECStoragePolicy\ (class\ in\ swift.common.storage_policy)',\ u'swift.common.storage_policy.ECStoragePolicy',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="ECStoragePolicy" ids="swift.common.storage_policy.ECStoragePolicy" module="swift.common.storage_policy" names="swift.common.storage_policy.ECStoragePolicy"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.storage_policy.</desc_addname><desc_name xml:space="preserve">ECStoragePolicy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">idx</desc_parameter><desc_parameter xml:space="preserve">name=''</desc_parameter><desc_parameter xml:space="preserve">aliases=''</desc_parameter><desc_parameter xml:space="preserve">is_default=False</desc_parameter><desc_parameter xml:space="preserve">is_deprecated=False</desc_parameter><desc_parameter xml:space="preserve">object_ring=None</desc_parameter><desc_parameter xml:space="preserve">ec_segment_size=1048576</desc_parameter><desc_parameter xml:space="preserve">ec_type=None</desc_parameter><desc_parameter xml:space="preserve">ec_ndata=None</desc_parameter><desc_parameter xml:space="preserve">ec_nparity=None</desc_parameter><desc_parameter xml:space="preserve">ec_duplication_factor=1</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.storage_policy.BaseStoragePolicy" reftitle="swift.common.storage_policy.BaseStoragePolicy"><literal classes="xref py py-class">swift.common.storage_policy.BaseStoragePolicy</literal></reference></paragraph>
                    <paragraph>Represents a storage policy of type ‘erasure_coding’.</paragraph>
                    <paragraph>Not meant to be instantiated directly; use
                        <reference internal="True" refid="swift.common.storage_policy.reload_storage_policies" reftitle="swift.common.storage_policy.reload_storage_policies"><literal classes="xref py py-func">reload_storage_policies()</literal></reference> to load
                        POLICIES from <literal>swift.conf</literal>.</paragraph>
                    <index entries="['single',\ u'ec_scheme_description\ (swift.common.storage_policy.ECStoragePolicy\ attribute)',\ u'swift.common.storage_policy.ECStoragePolicy.ec_scheme_description',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ECStoragePolicy" first="False" fullname="ECStoragePolicy.ec_scheme_description" ids="swift.common.storage_policy.ECStoragePolicy.ec_scheme_description" module="swift.common.storage_policy" names="swift.common.storage_policy.ECStoragePolicy.ec_scheme_description"><desc_name xml:space="preserve">ec_scheme_description</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>This short hand form of the important parts of the ec schema is stored
                                in Object System Metadata on the EC Fragment Archives for debugging.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'fragment_size\ (swift.common.storage_policy.ECStoragePolicy\ attribute)',\ u'swift.common.storage_policy.ECStoragePolicy.fragment_size',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ECStoragePolicy" first="False" fullname="ECStoragePolicy.fragment_size" ids="swift.common.storage_policy.ECStoragePolicy.fragment_size" module="swift.common.storage_policy" names="swift.common.storage_policy.ECStoragePolicy.fragment_size"><desc_name xml:space="preserve">fragment_size</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Maximum length of a fragment, including header.</paragraph>
                            <paragraph>NB: a fragment archive is a sequence of 0 or more max-length
                                fragments followed by one possibly-shorter fragment.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_backend_index()\ (swift.common.storage_policy.ECStoragePolicy\ method)',\ u'swift.common.storage_policy.ECStoragePolicy.get_backend_index',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ECStoragePolicy" first="False" fullname="ECStoragePolicy.get_backend_index" ids="swift.common.storage_policy.ECStoragePolicy.get_backend_index" module="swift.common.storage_policy" names="swift.common.storage_policy.ECStoragePolicy.get_backend_index"><desc_name xml:space="preserve">get_backend_index</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">node_index</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Backend index for PyECLib</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">node_index</literal_strong> – integer of node index</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>integer of actual fragment index. if param is not an integer,
                                            return None instead</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'load_ring()\ (swift.common.storage_policy.ECStoragePolicy\ method)',\ u'swift.common.storage_policy.ECStoragePolicy.load_ring',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="ECStoragePolicy" first="False" fullname="ECStoragePolicy.load_ring" ids="swift.common.storage_policy.ECStoragePolicy.load_ring" module="swift.common.storage_policy" names="swift.common.storage_policy.ECStoragePolicy.load_ring"><desc_name xml:space="preserve">load_ring</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">swift_dir</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Load the ring for this policy immediately.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">swift_dir</literal_strong> – path to rings</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'quorum\ (swift.common.storage_policy.ECStoragePolicy\ attribute)',\ u'swift.common.storage_policy.ECStoragePolicy.quorum',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="ECStoragePolicy" first="False" fullname="ECStoragePolicy.quorum" ids="swift.common.storage_policy.ECStoragePolicy.quorum" module="swift.common.storage_policy" names="swift.common.storage_policy.ECStoragePolicy.quorum"><desc_name xml:space="preserve">quorum</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Number of successful backend requests needed for the proxy to consider
                                the client PUT request successful.</paragraph>
                            <paragraph>The quorum size for EC policies defines the minimum number
                                of data + parity elements required to be able to guarantee
                                the desired fault tolerance, which is the number of data
                                elements supplemented by the minimum number of parity
                                elements required by the chosen erasure coding scheme.</paragraph>
                            <paragraph>For example, for Reed-Solomon, the minimum number parity
                                elements required is 1, and thus the quorum_size requirement
                                is ec_ndata + 1.</paragraph>
                            <paragraph>Given the number of parity elements required is not the same
                                for every erasure coding scheme, consult PyECLib for
                                min_parity_fragments_needed()</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'StoragePolicy\ (class\ in\ swift.common.storage_policy)',\ u'swift.common.storage_policy.StoragePolicy',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="StoragePolicy" ids="swift.common.storage_policy.StoragePolicy" module="swift.common.storage_policy" names="swift.common.storage_policy.StoragePolicy"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.storage_policy.</desc_addname><desc_name xml:space="preserve">StoragePolicy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">idx</desc_parameter><desc_parameter xml:space="preserve">name=''</desc_parameter><desc_parameter xml:space="preserve">is_default=False</desc_parameter><desc_parameter xml:space="preserve">is_deprecated=False</desc_parameter><desc_parameter xml:space="preserve">object_ring=None</desc_parameter><desc_parameter xml:space="preserve">aliases=''</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="True" refid="swift.common.storage_policy.BaseStoragePolicy" reftitle="swift.common.storage_policy.BaseStoragePolicy"><literal classes="xref py py-class">swift.common.storage_policy.BaseStoragePolicy</literal></reference></paragraph>
                    <paragraph>Represents a storage policy of type ‘replication’.  Default storage policy
                        class unless otherwise overridden from swift.conf.</paragraph>
                    <paragraph>Not meant to be instantiated directly; use
                        <reference internal="True" refid="swift.common.storage_policy.reload_storage_policies" reftitle="swift.common.storage_policy.reload_storage_policies"><literal classes="xref py py-func">reload_storage_policies()</literal></reference> to load
                        POLICIES from <literal>swift.conf</literal>.</paragraph>
                    <index entries="['single',\ u'quorum\ (swift.common.storage_policy.StoragePolicy\ attribute)',\ u'swift.common.storage_policy.StoragePolicy.quorum',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="StoragePolicy" first="False" fullname="StoragePolicy.quorum" ids="swift.common.storage_policy.StoragePolicy.quorum" module="swift.common.storage_policy" names="swift.common.storage_policy.StoragePolicy.quorum"><desc_name xml:space="preserve">quorum</desc_name></desc_signature>
                        <desc_content>
                            <definition_list>
                                <definition_list_item>
                                    <term>Quorum concept in the replication case:</term>
                                    <definition>
                                        <paragraph>floor(number of replica / 2) + 1</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'StoragePolicyCollection\ (class\ in\ swift.common.storage_policy)',\ u'swift.common.storage_policy.StoragePolicyCollection',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="StoragePolicyCollection" ids="swift.common.storage_policy.StoragePolicyCollection" module="swift.common.storage_policy" names="swift.common.storage_policy.StoragePolicyCollection"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.storage_policy.</desc_addname><desc_name xml:space="preserve">StoragePolicyCollection</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">pols</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>This class represents the collection of valid storage policies for the
                        cluster and is instantiated as <reference internal="True" refid="swift.common.storage_policy.StoragePolicy" reftitle="swift.common.storage_policy.StoragePolicy"><literal classes="xref py py-class">StoragePolicy</literal></reference> objects are added to
                        the collection when <literal>swift.conf</literal> is parsed by
                        <reference internal="True" refid="swift.common.storage_policy.parse_storage_policies" reftitle="swift.common.storage_policy.parse_storage_policies"><literal classes="xref py py-func">parse_storage_policies()</literal></reference>.</paragraph>
                    <paragraph>When a StoragePolicyCollection is created, the following validation
                        is enforced:</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>If a policy with index 0 is not declared and no other policies defined,
                                Swift will create one</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>The policy index must be a non-negative integer</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>If no policy is declared as the default and no other policies are
                                defined, the policy with index 0 is set as the default</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Policy indexes must be unique</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Policy names are required</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Policy names are case insensitive</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Policy names must contain only letters, digits or a dash</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Policy names must be unique</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>The policy name ‘Policy-0’ can only be used for the policy with index 0</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>If any policies are defined, exactly one policy must be declared default</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Deprecated policies can not be declared the default</paragraph>
                        </list_item>
                    </bullet_list>
                    <index entries="['single',\ u'add_policy_alias()\ (swift.common.storage_policy.StoragePolicyCollection\ method)',\ u'swift.common.storage_policy.StoragePolicyCollection.add_policy_alias',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="StoragePolicyCollection" first="False" fullname="StoragePolicyCollection.add_policy_alias" ids="swift.common.storage_policy.StoragePolicyCollection.add_policy_alias" module="swift.common.storage_policy" names="swift.common.storage_policy.StoragePolicyCollection.add_policy_alias"><desc_name xml:space="preserve">add_policy_alias</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">policy_index</desc_parameter><desc_parameter xml:space="preserve">*aliases</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Adds a new name or names to a policy</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">policy_index</literal_strong> – index of a policy in this policy collection.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">aliases</literal_strong> – arbitrary number of string policy names to add.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'change_policy_primary_name()\ (swift.common.storage_policy.StoragePolicyCollection\ method)',\ u'swift.common.storage_policy.StoragePolicyCollection.change_policy_primary_name',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="StoragePolicyCollection" first="False" fullname="StoragePolicyCollection.change_policy_primary_name" ids="swift.common.storage_policy.StoragePolicyCollection.change_policy_primary_name" module="swift.common.storage_policy" names="swift.common.storage_policy.StoragePolicyCollection.change_policy_primary_name"><desc_name xml:space="preserve">change_policy_primary_name</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">policy_index</desc_parameter><desc_parameter xml:space="preserve">new_name</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Changes the primary or default name of a policy. The new primary
                                name can be an alias that already belongs to the policy or a
                                completely new name.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">policy_index</literal_strong> – index of a policy in this policy collection.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">new_name</literal_strong> – a string name to set as the new default name.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_by_index()\ (swift.common.storage_policy.StoragePolicyCollection\ method)',\ u'swift.common.storage_policy.StoragePolicyCollection.get_by_index',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="StoragePolicyCollection" first="False" fullname="StoragePolicyCollection.get_by_index" ids="swift.common.storage_policy.StoragePolicyCollection.get_by_index" module="swift.common.storage_policy" names="swift.common.storage_policy.StoragePolicyCollection.get_by_index"><desc_name xml:space="preserve">get_by_index</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">index</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Find a storage policy by its index.</paragraph>
                            <paragraph>An index of None will be treated as 0.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">index</literal_strong> – numeric index of the storage policy</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>storage policy, or None if no such policy</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_by_name()\ (swift.common.storage_policy.StoragePolicyCollection\ method)',\ u'swift.common.storage_policy.StoragePolicyCollection.get_by_name',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="StoragePolicyCollection" first="False" fullname="StoragePolicyCollection.get_by_name" ids="swift.common.storage_policy.StoragePolicyCollection.get_by_name" module="swift.common.storage_policy" names="swift.common.storage_policy.StoragePolicyCollection.get_by_name"><desc_name xml:space="preserve">get_by_name</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Find a storage policy by its name.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> – name of the policy</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>storage policy, or None</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_object_ring()\ (swift.common.storage_policy.StoragePolicyCollection\ method)',\ u'swift.common.storage_policy.StoragePolicyCollection.get_object_ring',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="StoragePolicyCollection" first="False" fullname="StoragePolicyCollection.get_object_ring" ids="swift.common.storage_policy.StoragePolicyCollection.get_object_ring" module="swift.common.storage_policy" names="swift.common.storage_policy.StoragePolicyCollection.get_object_ring"><desc_name xml:space="preserve">get_object_ring</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">policy_idx</desc_parameter><desc_parameter xml:space="preserve">swift_dir</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Get the ring object to use to handle a request based on its policy.</paragraph>
                            <paragraph>An index of None will be treated as 0.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">policy_idx</literal_strong> – policy index as defined in swift.conf</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">swift_dir</literal_strong> – swift_dir used by the caller</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>appropriate ring object</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_policy_info()\ (swift.common.storage_policy.StoragePolicyCollection\ method)',\ u'swift.common.storage_policy.StoragePolicyCollection.get_policy_info',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="StoragePolicyCollection" first="False" fullname="StoragePolicyCollection.get_policy_info" ids="swift.common.storage_policy.StoragePolicyCollection.get_policy_info" module="swift.common.storage_policy" names="swift.common.storage_policy.StoragePolicyCollection.get_policy_info"><desc_name xml:space="preserve">get_policy_info</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Build info about policies for the /info endpoint</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>list of dicts containing relevant policy information</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'remove_policy_alias()\ (swift.common.storage_policy.StoragePolicyCollection\ method)',\ u'swift.common.storage_policy.StoragePolicyCollection.remove_policy_alias',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="StoragePolicyCollection" first="False" fullname="StoragePolicyCollection.remove_policy_alias" ids="swift.common.storage_policy.StoragePolicyCollection.remove_policy_alias" module="swift.common.storage_policy" names="swift.common.storage_policy.StoragePolicyCollection.remove_policy_alias"><desc_name xml:space="preserve">remove_policy_alias</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">*aliases</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Removes a name or names from a policy. If the name removed is the
                                primary name then the next available alias will be adopted
                                as the new primary name.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">aliases</literal_strong> – arbitrary number of existing policy names to remove.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'StoragePolicySingleton\ (class\ in\ swift.common.storage_policy)',\ u'swift.common.storage_policy.StoragePolicySingleton',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="StoragePolicySingleton" ids="swift.common.storage_policy.StoragePolicySingleton" module="swift.common.storage_policy" names="swift.common.storage_policy.StoragePolicySingleton"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">swift.common.storage_policy.</desc_addname><desc_name xml:space="preserve">StoragePolicySingleton</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">object</literal></paragraph>
                    <paragraph>An instance of this class is the primary interface to storage policies
                        exposed as a module level global named <literal>POLICIES</literal>.  This global
                        reference wraps <literal>_POLICIES</literal> which is normally instantiated by parsing
                        <literal>swift.conf</literal> and will result in an instance of
                        <reference internal="True" refid="swift.common.storage_policy.StoragePolicyCollection" reftitle="swift.common.storage_policy.StoragePolicyCollection"><literal classes="xref py py-class">StoragePolicyCollection</literal></reference>.</paragraph>
                    <paragraph>You should never patch this instance directly, instead patch the module
                        level <literal>_POLICIES</literal> instance so that swift code which imported
                        <literal>POLICIES</literal> directly will reference the patched
                        <reference internal="True" refid="swift.common.storage_policy.StoragePolicyCollection" reftitle="swift.common.storage_policy.StoragePolicyCollection"><literal classes="xref py py-class">StoragePolicyCollection</literal></reference>.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'get_policy_string()\ (in\ module\ swift.common.storage_policy)',\ u'swift.common.storage_policy.get_policy_string',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="get_policy_string" ids="swift.common.storage_policy.get_policy_string" module="swift.common.storage_policy" names="swift.common.storage_policy.get_policy_string"><desc_addname xml:space="preserve">swift.common.storage_policy.</desc_addname><desc_name xml:space="preserve">get_policy_string</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">base</desc_parameter><desc_parameter xml:space="preserve">policy_or_index</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Helper function to construct a string from a base and the policy.
                        Used to encode the policy index into either a file name or a
                        directory name by various modules.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">base</literal_strong> – the base string</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">policy_or_index</literal_strong> – StoragePolicy instance, or an index
                                            (string or int), if None the legacy
                                            storage Policy-0 is assumed.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>base name with policy index added</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>PolicyError</literal_strong> – if no policy exists with the given policy_index</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'parse_storage_policies()\ (in\ module\ swift.common.storage_policy)',\ u'swift.common.storage_policy.parse_storage_policies',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="parse_storage_policies" ids="swift.common.storage_policy.parse_storage_policies" module="swift.common.storage_policy" names="swift.common.storage_policy.parse_storage_policies"><desc_addname xml:space="preserve">swift.common.storage_policy.</desc_addname><desc_name xml:space="preserve">parse_storage_policies</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">conf</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Parse storage policies in <literal>swift.conf</literal> - note that validation
                        is done when the <reference internal="True" refid="swift.common.storage_policy.StoragePolicyCollection" reftitle="swift.common.storage_policy.StoragePolicyCollection"><literal classes="xref py py-class">StoragePolicyCollection</literal></reference> is instantiated.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">conf</literal_strong> – ConfigParser parser object for swift.conf</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'reload_storage_policies()\ (in\ module\ swift.common.storage_policy)',\ u'swift.common.storage_policy.reload_storage_policies',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="reload_storage_policies" ids="swift.common.storage_policy.reload_storage_policies" module="swift.common.storage_policy" names="swift.common.storage_policy.reload_storage_policies"><desc_addname xml:space="preserve">swift.common.storage_policy.</desc_addname><desc_name xml:space="preserve">reload_storage_policies</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Reload POLICIES from <literal>swift.conf</literal>.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ u'split_policy_string()\ (in\ module\ swift.common.storage_policy)',\ u'swift.common.storage_policy.split_policy_string',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="split_policy_string" ids="swift.common.storage_policy.split_policy_string" module="swift.common.storage_policy" names="swift.common.storage_policy.split_policy_string"><desc_addname xml:space="preserve">swift.common.storage_policy.</desc_addname><desc_name xml:space="preserve">split_policy_string</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">policy_string</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Helper function to convert a string representing a base and a
                        policy.  Used to decode the policy from either a file name or
                        a directory name by various modules.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">policy_string</literal_strong> – base name with policy index added</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Raises</field_name>
                            <field_body>
                                <paragraph><literal_strong>PolicyError</literal_strong> – if given index does not map to a valid policy</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>a tuple, in the form (base, policy) where base is the base
                                    string and policy is the StoragePolicy instance for the
                                    index encoded in the policy_string.</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
        </section>
    </section>
</document>
