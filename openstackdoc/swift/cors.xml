<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/swift/doc/source/cors.rst">
    <section dupnames="cors" ids="cors">
        <title>CORS</title>
        <paragraph><reference name="CORS" refuri="https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS">CORS</reference> is a mechanism to allow code running in a browser (Javascript for
            example) make requests to a domain other then the one from where it originated.</paragraph>
        <paragraph>Swift supports CORS requests to containers and objects.</paragraph>
        <paragraph>CORS metadata is held on the container only. The values given apply to the
            container itself and all objects within it.</paragraph>
        <paragraph>The supported headers are,</paragraph>
        <table>
            <tgroup cols="2">
                <colspec colwidth="48"></colspec>
                <colspec colwidth="30"></colspec>
                <thead>
                    <row>
                        <entry>
                            <paragraph>Metadata</paragraph>
                        </entry>
                        <entry>
                            <paragraph>Use</paragraph>
                        </entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>
                            <paragraph>X-Container-Meta-Access-Control-Allow-Origin</paragraph>
                        </entry>
                        <entry>
                            <paragraph>Origins to be allowed to
                                make Cross Origin Requests,
                                space separated.</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph>X-Container-Meta-Access-Control-Max-Age</paragraph>
                        </entry>
                        <entry>
                            <paragraph>Max age for the Origin to
                                hold the preflight results.</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph>X-Container-Meta-Access-Control-Expose-Headers</paragraph>
                        </entry>
                        <entry>
                            <paragraph>Headers exposed to the user
                                agent (e.g. browser) in the
                                actual request response.
                                Space separated.</paragraph>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <paragraph>Before a browser issues an actual request it may issue a <reference name="preflight request" refuri="https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS#Preflighted_requests">preflight request</reference>.
            The preflight request is an OPTIONS call to verify the Origin is allowed to
            make the request. The sequence of events are,</paragraph>
        <bullet_list bullet="*">
            <list_item>
                <paragraph>Browser makes OPTIONS request to Swift</paragraph>
            </list_item>
            <list_item>
                <paragraph>Swift returns 200/401 to browser based on allowed origins</paragraph>
            </list_item>
            <list_item>
                <paragraph>If 200, browser makes the “actual request” to Swift, i.e. PUT, POST, DELETE,
                    HEAD, GET</paragraph>
            </list_item>
        </bullet_list>
        <paragraph>When a browser receives a response to an actual request it only exposes those
            headers listed in the <literal>Access-Control-Expose-Headers</literal> header. By default Swift
            returns the following values for this header,</paragraph>
        <bullet_list bullet="*">
            <list_item>
                <paragraph>“simple response headers” as listed on
                    <reference refuri="http://www.w3.org/TR/cors/#simple-response-header">http://www.w3.org/TR/cors/#simple-response-header</reference></paragraph>
            </list_item>
            <list_item>
                <paragraph>the headers <literal>etag</literal>, <literal>x-timestamp</literal>, <literal>x-trans-id</literal>,
                    <literal>x-openstack-request-id</literal></paragraph>
            </list_item>
            <list_item>
                <paragraph>all metadata headers (<literal>X-Container-Meta-*</literal> for containers and
                    <literal>X-Object-Meta-*</literal> for objects)</paragraph>
            </list_item>
            <list_item>
                <paragraph>headers listed in <literal>X-Container-Meta-Access-Control-Expose-Headers</literal></paragraph>
            </list_item>
        </bullet_list>
        <section ids="sample-javascript" names="sample\ javascript">
            <title>Sample Javascript</title>
            <paragraph>To see some CORS Javascript in action download the <reference name="test CORS page" refid="test-cors-page">test CORS page</reference> (source
                below). Host it on a webserver and take note of the protocol and hostname
                (origin) you’ll be using to request the page, e.g. <reference refuri="http://localhost">http://localhost</reference>.</paragraph>
            <paragraph>Locate a container you’d like to query. Needless to say the Swift cluster
                hosting this container should have CORS support. Append the origin of the
                test page to the container’s <literal>X-Container-Meta-Access-Control-Allow-Origin</literal>
                header,:</paragraph>
            <literal_block xml:space="preserve">curl -X POST -H 'X-Auth-Token: xxx' \
  -H 'X-Container-Meta-Access-Control-Allow-Origin: http://localhost' \
  http://192.168.56.3:8080/v1/AUTH_test/cont1</literal_block>
            <paragraph>At this point the container is now accessible to CORS clients hosted on
                <reference refuri="http://localhost">http://localhost</reference>. Open the test CORS page in your browser.</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>Populate the Token field</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Populate the URL field with the URL of either a container or object</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Select the request method</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Hit Submit</paragraph>
                </list_item>
            </enumerated_list>
            <paragraph>Assuming the request succeeds you should see the response header and body. If
                something went wrong the response status will be 0.</paragraph>
            <target refid="test-cors-page"></target>
        </section>
        <section dupnames="test\ cors\ page" ids="test-cors-page id1" names="test\ cors\ page">
            <title>Test CORS Page</title>
            <paragraph>A sample cross-site test page is located in the project source tree
                <literal>doc/source/test-cors.html</literal>.</paragraph>
            <block_quote>
                <literal_block highlight_args="{'linenostart': 1}" linenos="False" source="/home/fbaumanis/openstack/soc8_test/openstack_repo/swift/doc/source/test-cors.html" xml:space="preserve">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;Test CORS&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;

    Token&lt;br&gt;&lt;input id="token" type="text" size="64"&gt;&lt;br&gt;&lt;br&gt;

    Method&lt;br&gt;
    &lt;select id="method"&gt;
        &lt;option value="GET"&gt;GET&lt;/option&gt;
        &lt;option value="HEAD"&gt;HEAD&lt;/option&gt;
        &lt;option value="POST"&gt;POST&lt;/option&gt;
        &lt;option value="DELETE"&gt;DELETE&lt;/option&gt;
        &lt;option value="PUT"&gt;PUT&lt;/option&gt;
    &lt;/select&gt;&lt;br&gt;&lt;br&gt;

    URL (Container or Object)&lt;br&gt;&lt;input id="url" size="64" type="text"&gt;&lt;br&gt;&lt;br&gt;

    &lt;input id="submit" type="button" value="Submit" onclick="submit(); return false;"&gt;

    &lt;pre id="response_headers"&gt;&lt;/pre&gt;
    &lt;p&gt;
    &lt;hr&gt;
    &lt;pre id="response_body"&gt;&lt;/pre&gt;

    &lt;script type="text/javascript"&gt;
      function submit() {
          var token = document.getElementById('token').value;
          var method = document.getElementById('method').value;
          var url = document.getElementById('url').value;

          document.getElementById('response_headers').textContent = null;
          document.getElementById('response_body').textContent = null;

          var request = new XMLHttpRequest();

          request.onreadystatechange = function (oEvent) {
              if (request.readyState == 4) {
                  responseHeaders = 'Status: ' + request.status;
                  responseHeaders = responseHeaders + '\nStatus Text: ' + request.statusText;
                  responseHeaders = responseHeaders + '\n\n' + request.getAllResponseHeaders();
                  document.getElementById('response_headers').textContent = responseHeaders;
                  document.getElementById('response_body').textContent = request.responseText;
              }
          }

          request.open(method, url);
          if (token != '') {
              // custom headers always trigger a pre-flight request
              request.setRequestHeader('X-Auth-Token', token);
          }
          request.send(null);
      }
    &lt;/script&gt;

  &lt;/body&gt;
&lt;/html&gt;
</literal_block>
            </block_quote>
            <target ids="id2" names="cors" refuri="https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS"></target>
            <target ids="preflight-request" names="preflight\ request" refuri="https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS#Preflighted_requests"></target>
        </section>
    </section>
</document>
