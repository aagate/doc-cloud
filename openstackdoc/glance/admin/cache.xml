<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/glance/doc/source/admin/cache.rst">
    <comment xml:space="preserve">Copyright 2011 OpenStack Foundation
All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.</comment>
    <target refid="image-cache"></target>
    <section ids="the-glance-image-cache image-cache" names="the\ glance\ image\ cache image-cache">
        <title>The Glance Image Cache</title>
        <paragraph>The Glance API server may be configured to have an optional local image cache.
            A local image cache stores a copy of image files, essentially enabling multiple
            API servers to serve the same image file, resulting in an increase in
            scalability due to an increased number of endpoints serving an image file.</paragraph>
        <paragraph>This local image cache is transparent to the end user – in other words, the
            end user doesn’t know that the Glance API is streaming an image file from
            its local cache or from the actual backend storage system.</paragraph>
        <section ids="managing-the-glance-image-cache" names="managing\ the\ glance\ image\ cache">
            <title>Managing the Glance Image Cache</title>
            <paragraph>While image files are automatically placed in the image cache on successful
                requests to <literal>GET /images/&lt;IMAGE_ID&gt;</literal>, the image cache is not automatically
                managed. Here, we describe the basics of how to manage the local image cache
                on Glance API servers and how to automate this cache management.</paragraph>
        </section>
        <section ids="configuration-options-for-the-image-cache" names="configuration\ options\ for\ the\ image\ cache">
            <title>Configuration options for the Image Cache</title>
            <paragraph>The Glance cache uses two files: one for configuring the server and
                another for the utilities. The <literal>glance-api.conf</literal> is for the server
                and the <literal>glance-cache.conf</literal> is for the utilities.</paragraph>
            <paragraph>The following options are in both configuration files. These need the
                same values otherwise the cache will potentially run into problems.</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>image_cache_dir</literal> This is the base directory where Glance stores
                        the cache data (Required to be set, as does not have a default).</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>image_cache_sqlite_db</literal> Path to the sqlite file database that will
                        be used for cache management. This is a relative path from the
                        <literal>image_cache_dir</literal> directory (Default:<literal>cache.db</literal>).</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>image_cache_driver</literal> The driver used for cache management.
                        (Default:<literal>sqlite</literal>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>image_cache_max_size</literal> The size when the glance-cache-pruner will
                        remove the oldest images, to reduce the bytes until under this value.
                        (Default:<literal>10 GB</literal>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>image_cache_stall_time</literal> The amount of time an incomplete image will
                        stay in the cache, after this the incomplete image will be deleted.
                        (Default:<literal>1 day</literal>)</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>The following values are the ones that are specific to the
                <literal>glance-cache.conf</literal> and are only required for the prefetcher to run
                correctly.</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>admin_user</literal> The username for an admin account, this is so it can
                        get the image data into the cache.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>admin_password</literal> The password to the admin account.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>admin_tenant_name</literal> The tenant of the admin account.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>auth_url</literal> The URL used to authenticate to keystone. This will
                        be taken from the environment variables if it exists.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>filesystem_store_datadir</literal> This is used if using the filesystem
                        store, points to where the data is kept.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>filesystem_store_datadirs</literal> This is used to point to multiple
                        filesystem stores.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>registry_host</literal> The URL to the Glance registry.</paragraph>
                </list_item>
            </bullet_list>
            <section ids="controlling-the-growth-of-the-image-cache" names="controlling\ the\ growth\ of\ the\ image\ cache">
                <title>Controlling the Growth of the Image Cache</title>
                <paragraph>The image cache has a configurable maximum size (the <literal>image_cache_max_size</literal>
                    configuration file option). The <literal>image_cache_max_size</literal> is an upper limit
                    beyond which pruner, if running, starts cleaning the images cache.
                    However, when images are successfully returned from a call to
                    <literal>GET /images/&lt;IMAGE_ID&gt;</literal>, the image cache automatically writes the image
                    file to its cache, regardless of whether the resulting write would make the
                    image cache’s size exceed the value of <literal>image_cache_max_size</literal>.
                    In order to keep the image cache at or below this maximum cache size,
                    you need to run the <literal>glance-cache-pruner</literal> executable.</paragraph>
                <paragraph>The recommended practice is to use <literal>cron</literal> to fire <literal>glance-cache-pruner</literal>
                    at a regular interval.</paragraph>
            </section>
            <section ids="cleaning-the-image-cache" names="cleaning\ the\ image\ cache">
                <title>Cleaning the Image Cache</title>
                <paragraph>Over time, the image cache can accumulate image files that are either in
                    a stalled or invalid state. Stalled image files are the result of an image
                    cache write failing to complete. Invalid image files are the result of an
                    image file not being written properly to disk.</paragraph>
                <paragraph>To remove these types of files, you run the <literal>glance-cache-cleaner</literal>
                    executable.</paragraph>
                <paragraph>The recommended practice is to use <literal>cron</literal> to fire <literal>glance-cache-cleaner</literal>
                    at a semi-regular interval.</paragraph>
            </section>
            <section ids="prefetching-images-into-the-image-cache" names="prefetching\ images\ into\ the\ image\ cache">
                <title>Prefetching Images into the Image Cache</title>
                <paragraph>Some installations have base (sometimes called “golden”) images that are
                    very commonly used to boot virtual machines. When spinning up a new API
                    server, administrators may wish to prefetch these image files into the
                    local image cache to ensure that reads of those popular image files come
                    from a local cache.</paragraph>
                <paragraph>To queue an image for prefetching, you can use one of the following methods:</paragraph>
                <block_quote>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>If the <literal>cache_manage</literal> middleware is enabled in the application pipeline,
                                you may call <literal>PUT /queued-images/&lt;IMAGE_ID&gt;</literal> to queue the image with
                                identifier <literal>&lt;IMAGE_ID&gt;</literal></paragraph>
                            <paragraph>Alternately, you can use the <literal>glance-cache-manage</literal> program to queue the
                                image. This program may be run from a different host than the host
                                containing the image cache. Example usage:</paragraph>
                            <literal_block xml:space="preserve">$&gt; glance-cache-manage --host=&lt;HOST&gt; queue-image &lt;IMAGE_ID&gt;</literal_block>
                            <paragraph>This will queue the image with identifier <literal>&lt;IMAGE_ID&gt;</literal> for prefetching</paragraph>
                        </list_item>
                    </bullet_list>
                </block_quote>
                <paragraph>Once you have queued the images you wish to prefetch, call the
                    <literal>glance-cache-prefetcher</literal> executable, which will prefetch all queued images
                    concurrently, logging the results of the fetch for each image.</paragraph>
            </section>
            <section ids="finding-which-images-are-in-the-image-cache" names="finding\ which\ images\ are\ in\ the\ image\ cache">
                <title>Finding Which Images are in the Image Cache</title>
                <paragraph>You can find out which images are in the image cache using one of the
                    following methods:</paragraph>
                <block_quote>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>If the <literal>cachemanage</literal> middleware is enabled in the application pipeline,
                                you may call <literal>GET /cached-images</literal> to see a JSON-serialized list of
                                mappings that show cached images, the number of cache hits on each image,
                                the size of the image, and the times they were last accessed.</paragraph>
                            <paragraph>Alternately, you can use the <literal>glance-cache-manage</literal> program. This program
                                may be run from a different host than the host containing the image cache.
                                Example usage:</paragraph>
                            <literal_block xml:space="preserve">$&gt; glance-cache-manage --host=&lt;HOST&gt; list-cached</literal_block>
                        </list_item>
                        <list_item>
                            <paragraph>You can issue the following call on *nix systems (on the host that contains
                                the image cache):</paragraph>
                            <literal_block xml:space="preserve">$&gt; ls -lhR $IMAGE_CACHE_DIR</literal_block>
                            <paragraph>where <literal>$IMAGE_CACHE_DIR</literal> is the value of the <literal>image_cache_dir</literal>
                                configuration variable.</paragraph>
                            <paragraph>Note that the image’s cache hit is not shown using this method.</paragraph>
                        </list_item>
                    </bullet_list>
                </block_quote>
            </section>
            <section ids="manually-removing-images-from-the-image-cache" names="manually\ removing\ images\ from\ the\ image\ cache">
                <title>Manually Removing Images from the Image Cache</title>
                <paragraph>If the <literal>cachemanage</literal> middleware is enabled, you may call
                    <literal>DELETE /cached-images/&lt;IMAGE_ID&gt;</literal> to remove the image file for image
                    with identifier <literal>&lt;IMAGE_ID&gt;</literal> from the cache.</paragraph>
                <paragraph>Alternately, you can use the <literal>glance-cache-manage</literal> program. Example usage:</paragraph>
                <literal_block xml:space="preserve">$&gt; glance-cache-manage --host=&lt;HOST&gt; delete-cached-image &lt;IMAGE_ID&gt;</literal_block>
            </section>
        </section>
    </section>
</document>
