<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/glance/doc/source/contributor/database_architecture.rst">
    <comment xml:space="preserve">Copyright 2015 OpenStack Foundation
All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.</comment>
    <section ids="glance-database-architecture" names="glance\ database\ architecture">
        <title>Glance database architecture</title>
        <section ids="glance-database-public-api" names="glance\ database\ public\ api">
            <title>Glance Database Public API</title>
            <paragraph>The Glance Database API contains several methods for moving image metadata to
                and from persistent storage. You can find a list of public methods grouped by
                category below.</paragraph>
            <section ids="common-parameters-for-image-methods" names="common\ parameters\ for\ image\ methods">
                <title>Common parameters for image methods</title>
                <definition_list>
                    <definition_list_item>
                        <term>The following parameters can be applied to all of the image methods below:</term>
                        <definition>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph><literal>context</literal> — corresponds to a glance.context.RequestContext
                                        object, which stores the information on how a user accesses
                                        the system, as well as additional request information.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>image_id</literal> — a string corresponding to the image identifier.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>memb_id</literal> — a string corresponding to the member identifier
                                        of the image.</paragraph>
                                </list_item>
                            </bullet_list>
                        </definition>
                    </definition_list_item>
                </definition_list>
            </section>
            <section ids="image-basic-methods" names="image\ basic\ methods">
                <title>Image basic methods</title>
                <paragraph><strong>Image processing methods:</strong></paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph><literal>image_create(context, values)</literal> — creates a new image record
                            with parameters listed in the <emphasis>values</emphasis> dictionary. Returns a
                            dictionary representation of a newly created
                            <emphasis>glance.db.sqlalchemy.models.Image</emphasis> object.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>image_update(context, image_id, values, purge_props=False,
from_state=None)</literal> — updates the existing image with the identifier
                            <emphasis>image_id</emphasis> with the values listed in the <emphasis>values</emphasis> dictionary. Returns a
                            dictionary representation of the updated <emphasis>Image</emphasis> object.</paragraph>
                    </list_item>
                </enumerated_list>
                <block_quote>
                    <definition_list>
                        <definition_list_item>
                            <term>Optional parameters are:</term>
                            <definition>
                                <bullet_list bullet="-">
                                    <list_item>
                                        <paragraph><literal>purge_props</literal> — a flag indicating that all the existing
                                            properties not listed in the <emphasis>values[‘properties’]</emphasis> should be
                                            deleted;</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal>from_state</literal> — a string filter indicating that the updated
                                            image must be in the specified state.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                </block_quote>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph><literal>image_destroy(context, image_id)</literal> — deletes all database
                            records of an image with the identifier <emphasis>image_id</emphasis> (like tags,
                            properties, and members) and sets a ‘deleted’ status on all the
                            image locations.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>image_get(context, image_id, force_show_deleted=False)</literal> —
                            gets an image with the identifier <emphasis>image_id</emphasis> and returns its
                            dictionary representation. The parameter <emphasis>force_show_deleted</emphasis> is
                            a flag that indicates to show image info even if it was
                            ‘deleted’, or its ‘pending_delete’ statuses.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>image_get_all(context, filters=None, marker=None, limit=None,
sort_key=None, sort_dir=None, member_status='accepted',
is_public=None, admin_as_user=False, return_tag=False)</literal> — gets
                            all the images that match zero or more filters.</paragraph>
                    </list_item>
                </enumerated_list>
                <block_quote>
                    <definition_list>
                        <definition_list_item>
                            <term>Optional parameters are:</term>
                            <definition>
                                <bullet_list bullet="-">
                                    <list_item>
                                        <paragraph><literal>filters</literal> — dictionary of filter keys and values. If a ‘properties’
                                            key is present, it is treated as a dictionary of key/value filters in
                                            the attribute of the image properties.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal>marker</literal> — image id after which a page should start.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal>limit</literal> — maximum number of images to return.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal>sort_key</literal> — list of image attributes by which results should
                                            be sorted.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal>sort_dir</literal> — direction in which results should be sorted
                                            (asc, desc).</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal>member_status</literal> — only returns shared images that have this
                                            membership status.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal>is_public</literal> — if true, returns only public images. If false,
                                            returns only private and shared images.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal>admin_as_user</literal> — for backwards compatibility. If true, an admin
                                            sees the same set of images that would be seen by a regular user.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal>return_tag</literal> — indicates whether an image entry in the result
                                            includes its relevant tag entries. This can improve upper-layer
                                            query performance and avoid using separate calls.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                </block_quote>
            </section>
            <section ids="image-location-methods" names="image\ location\ methods">
                <title>Image location methods</title>
                <paragraph><strong>Image location processing methods:</strong></paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph><literal>image_location_add(context, image_id, location)</literal> —
                            adds a new location to an image with the identifier <emphasis>image_id</emphasis>. This
                            location contains values listed in the dictionary <emphasis>location</emphasis>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>image_location_update(context, image_id, location)</literal> — updates
                            an existing location with the identifier <emphasis>location[‘id’]</emphasis>
                            for an image with the identifier <emphasis>image_id</emphasis> with values listed in
                            the dictionary <emphasis>location</emphasis>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>image_location_delete(context, image_id, location_id, status,
delete_time=None)</literal> — sets a ‘deleted’ or ‘pending_delete’
                            <emphasis>status</emphasis> to an existing location record with the identifier
                            <emphasis>location_id</emphasis> for an image with the identifier <emphasis>image_id</emphasis>.</paragraph>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="image-property-methods" names="image\ property\ methods">
                <title>Image property methods</title>
                <warning>
                    <paragraph>There is no public property update method.
                        So if you want to modify it, you have to delete it first
                        and then create a new one.</paragraph>
                </warning>
                <paragraph><strong>Image property processing methods:</strong></paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph><literal>image_property_create(context, values)</literal> — creates
                            a property record with parameters listed in the <emphasis>values</emphasis> dictionary
                            for an image with <emphasis>values[‘id’]</emphasis>. Returns a dictionary representation
                            of a newly created <emphasis>ImageProperty</emphasis> object.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>image_property_delete(context, prop_ref, image_ref)</literal> — deletes an
                            existing property record with a name <emphasis>prop_ref</emphasis> for an image with
                            the identifier <emphasis>image_ref</emphasis>.</paragraph>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="image-member-methods" names="image\ member\ methods">
                <title>Image member methods</title>
                <paragraph><strong>Methods to handle image memberships:</strong></paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph><literal>image_member_create(context, values)</literal> — creates a member record
                            with properties listed in the <emphasis>values</emphasis> dictionary for an image
                            with <emphasis>values[‘id’]</emphasis>. Returns a dictionary representation
                            of a newly created <emphasis>ImageMember</emphasis> object.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>image_member_update(context, memb_id, values)</literal> — updates an
                            existing member record with properties listed in the <emphasis>values</emphasis>
                            dictionary for an image with <emphasis>values[‘id’]</emphasis>. Returns a dictionary
                            representation of an updated member record.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>image_member_delete(context, memb_id)</literal> — deletes  an existing
                            member record with <emphasis>memb_id</emphasis>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>image_member_find(context, image_id=None, member=None, status=None)</literal>
                            — returns all members for a given context with optional image
                            identifier (<emphasis>image_id</emphasis>), member name (<emphasis>member</emphasis>), and member status
                            (<emphasis>status</emphasis>) parameters.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>image_member_count(context, image_id)</literal> — returns a number of image
                            members for an image with <emphasis>image_id</emphasis>.</paragraph>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="image-tag-methods" names="image\ tag\ methods">
                <title>Image tag methods</title>
                <paragraph><strong>Methods to process images tags:</strong></paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph><literal>image_tag_set_all(context, image_id, tags)</literal> — changes all the
                            existing tags for an image with <emphasis>image_id</emphasis> to the tags listed
                            in the <emphasis>tags</emphasis> param. To remove all tags, a user just should provide
                            an empty list.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>image_tag_create(context, image_id, value)</literal> — adds a <emphasis>value</emphasis>
                            to tags for an image with <emphasis>image_id</emphasis>. Returns the value of a
                            newly created tag.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>image_tag_delete(context, image_id, value)</literal> — removes a <emphasis>value</emphasis>
                            from tags for an image with <emphasis>image_id</emphasis>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>image_tag_get_all(context, image_id)</literal> — returns a list of tags
                            for a specific image.</paragraph>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="image-info-methods" names="image\ info\ methods">
                <title>Image info methods</title>
                <paragraph>The next two methods inform a user about his or her ability to modify
                    and view an image. The <emphasis>image</emphasis> parameter here is a dictionary representation
                    of an <emphasis>Image</emphasis> object.</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph><literal>is_image_mutable(context, image)</literal> — informs a user
                            about the possibility to modify an image with the given context.
                            Returns True if the image is mutable in this context.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>is_image_visible(context, image, status=None)</literal> — informs about
                            the possibility to see the image details with the given context
                            and optionally with a status. Returns True if the image is visible
                            in this context.</paragraph>
                    </list_item>
                </enumerated_list>
                <paragraph><strong>Glance database schema</strong></paragraph>
                <figure align="center" width="100%">
                    <image alt="The glance database schema is depicted by 5 tables.&#10;The table named Images has the following columns:&#10;id: varchar(36);&#10;name: varchar(255), nullable;&#10;size: bigint(20), nullable;&#10;status: varchar(30);&#10;is_public: tinyint(1);&#10;created_at: datetime;&#10;updated_at: datetime, nullable;&#10;deleted_at: datetime, nullable;&#10;deleted: tinyint(1);&#10;disk_format: varchar(20), nullable;&#10;container_format: varchar(20), nullable;&#10;checksum: varchar(32), nullable;&#10;owner: varchar(255), nullable&#10;min_disk: int(11);&#10;min_ram: int(11);&#10;protected: tinyint(1); and&#10;virtual_size: bigint(20), nullable;.&#10;The table named image_locations has the following columns:&#10;id: int(11), primary;&#10;image_id: varchar(36), refers to column named id in table Images;&#10;value: text;&#10;created_at: datetime;&#10;updated_at: datetime, nullable;&#10;deleted_at: datetime, nullable;&#10;deleted: tinyint(1);&#10;meta_data: text, nullable; and&#10;status: varchar(30);.&#10;The table named image_members has the following columns:&#10;id: int(11), primary;&#10;image_id: varchar(36), refers to column named id in table Images;&#10;member: varchar(255);&#10;can_share: tinyint(1);&#10;created_at: datetime;&#10;updated_at: datetime, nullable;&#10;deleted_at: datetime, nullable;&#10;deleted: tinyint(1); and&#10;status: varchar(20;.&#10;The table named image_tags has the following columns:&#10;id: int(11), primary;&#10;image_id: varchar(36), refers to column named id in table Images;&#10;value: varchar(255);&#10;created_at: datetime;&#10;updated_at: datetime, nullable;&#10;deleted_at: datetime, nullable; and&#10;deleted: tinyint(1);.&#10;The table named image_properties has the following columns:&#10;id: int(11), primary;&#10;image_id: varchar(36), refers to column named id in table Images;&#10;name: varchar(255);&#10;value: text, nullable;&#10;created_at: datetime;&#10;updated_at: datetime, nullable;&#10;deleted_at: datetime, nullable; and&#10;deleted: tinyint(1);." candidates="{'*': u'contributor/../images/glance_db.png'}" uri="contributor/../images/glance_db.png"></image>
                </figure>
                <centered>Image 1. Glance images DB schema</centered>
            </section>
        </section>
        <section ids="glance-database-backends" names="glance\ database\ backends">
            <title>Glance Database Backends</title>
            <section ids="migration-backends" names="migration\ backends">
                <title>Migration Backends</title>
                <section dupnames="sqlalchemy" ids="sqlalchemy">
                    <title>sqlalchemy</title>
                    <warning>
                        <paragraph>No documentation found in sqlalchemy = oslo_db.sqlalchemy.migration</paragraph>
                    </warning>
                </section>
            </section>
            <section ids="metadata-backends" names="metadata\ backends">
                <title>Metadata Backends</title>
                <section dupnames="sqlalchemy" ids="id1">
                    <title>sqlalchemy</title>
                    <warning>
                        <paragraph>No documentation found in sqlalchemy = glance.db.sqlalchemy.metadata</paragraph>
                    </warning>
                </section>
            </section>
        </section>
    </section>
</document>
