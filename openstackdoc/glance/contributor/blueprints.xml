<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/glance/doc/source/contributor/blueprints.rst">
    <section ids="blueprints-and-specs" names="blueprints\ and\ specs">
        <title>Blueprints and Specs</title>
        <paragraph>The Glance team uses the <reference name="glance-specs" refuri="http://git.openstack.org/cgit/openstack/glance-specs">glance-specs</reference><target ids="glance-specs" names="glance-specs" refuri="http://git.openstack.org/cgit/openstack/glance-specs"></target> repository for its
            specification reviews. Detailed information can be found <reference name="here" refuri="https://wiki.openstack.org/wiki/Blueprints#Glance">here</reference><target ids="here" names="here" refuri="https://wiki.openstack.org/wiki/Blueprints#Glance"></target>. Please also find
            additional information in the reviews.rst file.</paragraph>
        <paragraph>The Glance team enforces a deadline for specs proposals. It’s a soft
            freeze that happens after the first milestone is cut and before the
            second milestone is out. There’s a freeze exception week that follows
            the freeze week. A new proposal can still be submitted during this
            period, but be aware that it will most likely be postponed unless a
            particularly good argument is made in favor of having an exception for
            it.</paragraph>
        <paragraph>Please note that we use a <reference name="template" refuri="http://git.openstack.org/cgit/openstack/glance-specs/tree/specs/template.rst">template</reference><target ids="template" names="template" refuri="http://git.openstack.org/cgit/openstack/glance-specs/tree/specs/template.rst"></target>
            for spec submissions. It is not required to fill out all sections in the
            template. Review of the spec may require filling in information left out by
            the submitter.</paragraph>
        <section ids="spec-notes" names="spec\ notes">
            <title>Spec Notes</title>
            <paragraph>There are occasions when a spec will be approved and the code will not land in
                the cycle it was targeted at. For these cases, the work flow to get the spec
                into the next release is as follows:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Anyone can propose a patch to glance-specs which moves a spec from the
                        previous release into the new release directory.</paragraph>
                </list_item>
            </bullet_list>
            <comment xml:space="preserve">NOTE: mention the `approved`, `implemented` dirs</comment>
            <paragraph>The specs which are moved in this way can be fast-tracked into the
                next release. Please note that it is required to re-propose the spec
                for the new release however and that it’ll be evaluated based on the
                resources available and cycle priorities.</paragraph>
        </section>
        <section ids="glance-spec-lite" names="glance\ spec\ lite">
            <title>Glance Spec Lite</title>
            <paragraph>In Mitaka the team introduced the concept of lite specs. Lite specs
                are small features tracked as Launchpad bugs, with status <title_reference>wishlist</title_reference>
                and tagged with the new ‘spec-lite’ tag, and allow for the submission
                and review of these feature requests before code is submitted.</paragraph>
            <paragraph>This allows for small features that don’t warrant a detailed spec to
                be proposed, evaluated, and worked on. The team evaluates these
                requests as it evaluates specs. Once a bug has been approved as a
                Request for Enhancement (RFE), it’ll be targeted for a release.</paragraph>
            <paragraph>In Newton the team refined lite specs process away from wishlist bugs
                and lite specs are hosted in the glance-specs repository in git.</paragraph>
            <paragraph>Dedicated lite-specs.rst is provided for each deliverable under the
                release.</paragraph>
            <paragraph>For example Newton glance_store spec lite file can be found from:
                glance-specs/specs/newton/approved/glance_store/lite-specs.rst</paragraph>
            <paragraph>This file includes template section and new lite-specs should be
                included to the same file under the template. So do not copy the lite-
                specs.rst to a new file like you would do with full spec, but just
                propose change to that file itself filling the parts of the template
                you need.</paragraph>
            <paragraph>Existing WISHLIST ‘spec-lite’ tagged bug will be honored as lite spec,
                new ones will not be considered unless filed in glance-spec repo.</paragraph>
        </section>
        <section ids="lite-spec-submission-guidelines" names="lite\ spec\ submission\ guidelines">
            <title>Lite spec Submission Guidelines</title>
            <paragraph>Before we dive into the guidelines for writing a good lite spec, it is
                worth mentioning that depending on your level of engagement with the
                Glance project and your role (user, developer, deployer, operator,
                etc.), you are more than welcome to have a preliminary discussion of a
                potential lite spec by reaching out to other people involved in the
                project. This usually happens by posting mails on the relevant mailing
                lists (e.g. <reference name="openstack-dev" refuri="http://lists.openstack.org">openstack-dev</reference><target ids="openstack-dev" names="openstack-dev" refuri="http://lists.openstack.org"></target> - include
                [glance] in the subject) or on #openstack-glance IRC channel on
                Freenode. If current ongoing code reviews are related to your feature,
                posting comments/questions on gerrit may also be a way to engage. Some
                amount of interaction with Glance developers will give you an idea of
                the plausibility and form of your lite spec before you submit it. That
                said, this is not mandatory.</paragraph>
        </section>
    </section>
</document>
