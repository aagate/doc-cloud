<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/glance/doc/source/contributor/database_migrations.rst">
    <comment xml:space="preserve">Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.</comment>
    <section ids="writing-database-migrations-for-zero-downtime-upgrades" names="writing\ database\ migrations\ for\ zero-downtime\ upgrades">
        <title>Writing Database Migrations for Zero-Downtime Upgrades</title>
        <paragraph>Beginning in Ocata, OpenStack Glance uses Alembic, which replaced SQLAlchemy
            Migrate as the database migration engine. Moving to Alembic is particularly
            motivated by the zero-downtime upgrade work. Refer to <reference ids="id1" internal="True" refid="gspec1">[GSPEC1]</reference> and <reference ids="id2" internal="True" refid="gspec2">[GSPEC2]</reference>
            for more information on zero-downtime upgrades in Glance and why a move to
            Alembic was deemed necessary.</paragraph>
        <paragraph>Stop right now and go read <reference ids="id3" internal="True" refid="gspec1">[GSPEC1]</reference> and <reference ids="id4" internal="True" refid="gspec2">[GSPEC2]</reference> if you haven’t done so
            already. Those documents explain the strategy Glance has approved for database
            migrations, and we expect you to be familiar with them in what follows.  This
            document focuses on the “how”, but unless you understand the “what” and “why”,
            you’ll be wasting your time reading this document.</paragraph>
        <paragraph>Prior to Ocata, database migrations were conceived as monoliths.  Thus, they
            did not need to carefully distinguish and manage database schema expansions,
            data migrations, or database schema contractions. The modern database
            migrations are more sensitive to the characteristics of changes being
            attempted and thus we clearly identify three phases of a database migration:
            (1) expand, (2) migrate, and (3) contract.  A developer modifying the Glance
            database must supply a script for each of these phases.</paragraph>
        <paragraph>Here’s a quick reminder of what each phase entails.
            For more information, see <reference ids="id5" internal="True" refid="gspec1">[GSPEC1]</reference>.</paragraph>
        <definition_list>
            <definition_list_item>
                <term>Expand</term>
                <definition>
                    <paragraph>Expand migrations MUST be additive in nature. Expand migrations
                        should be seen as the minimal set of schema changes required by the new
                        services that can be applied while the old services are still running.
                        Expand migrations should optionally include temporary database triggers that
                        keep the old and new columns in sync. If a database change needs data to be
                        migrated between columns, then temporary database triggers are required to
                        keep the columns in sync while the data migrations are in-flight.</paragraph>
                    <note>
                        <paragraph>Sometimes there could be an exception to the additive-only change
                            strategy for expand phase. It is described more elaborately in <reference ids="id6" internal="True" refid="gspec1">[GSPEC1]</reference>.
                            Again, consider this as a last reminder to read <reference ids="id7" internal="True" refid="gspec1">[GSPEC1]</reference>, if you haven’t
                            already done so.</paragraph>
                    </note>
                </definition>
            </definition_list_item>
            <definition_list_item>
                <term>Migrate</term>
                <definition>
                    <paragraph>Data migrations MUST NOT attempt any schema changes and only move existing
                        data between old and new columns such that new services can start consuming
                        the new tables and/or columns introduced by the expand migrations.</paragraph>
                </definition>
            </definition_list_item>
            <definition_list_item>
                <term>Contract</term>
                <definition>
                    <paragraph>Contract migrations usually include the remaining schema changes required by
                        the new services that couldn’t be applied during expand phase due to their
                        incompatible nature with the old services. Any temporary database triggers
                        added during the expand migrations MUST be dropped with contract migrations.</paragraph>
                </definition>
            </definition_list_item>
        </definition_list>
        <section ids="alembic-migrations" names="alembic\ migrations">
            <title>Alembic Migrations</title>
            <paragraph>As mentioned earlier, starting in Ocata Glance database migrations must be
                written for Alembic. All existing Glance migrations have been ported to
                Alembic. They can be found here <reference ids="id8" internal="True" refid="gmigs1">[GMIGS1]</reference>.</paragraph>
            <section ids="schema-migrations-expand-contract" names="schema\ migrations\ (expand/contract)">
                <title>Schema Migrations (Expand/Contract)</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>All Glance schema migrations must reside in
                            <literal>glance.db.sqlalchemy.alembic_migrations.versions</literal> package</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Every Glance schema migration must be a python module with the following
                            structure</paragraph>
                        <literal_block classes="code" xml:space="preserve">"""&lt;docstring describing the migration&gt;

Revision ID: &lt;unique revision id&gt;
Revises: &lt;parent revision id&gt;
"""

&lt;your imports here&gt;

revision = &lt;unique revision id&gt;
down_revision = &lt;parent revision id&gt;
depends_on = &lt;id of dependent revision or None&gt;

def upgrade():
    &lt;your schema changes here&gt;</literal_block>
                        <paragraph>Identifiers <literal>revision</literal>, <literal>down_revision</literal> and <literal>depends_on</literal> are
                            elaborated below.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The <literal>revision</literal> identifier is a unique revision id for every migration.
                            It must conform to one of the following naming schemes.</paragraph>
                        <paragraph>All monolith migrations must conform to:</paragraph>
                        <literal_block classes="code" xml:space="preserve">&lt;release name&gt;&lt;two-digit sequence number per release&gt;</literal_block>
                        <paragraph>And, all expand/contract migrations must conform to:</paragraph>
                        <literal_block classes="code" xml:space="preserve">&lt;release name&gt;_[expand|contract]&lt;two-digit sequence number per release&gt;</literal_block>
                        <paragraph>Example:</paragraph>
                        <literal_block classes="code" xml:space="preserve">Monolith migration: ocata01
Expand migration: ocata_expand01
Contract migration: ocata_contract01</literal_block>
                        <paragraph>This name convention is devised with an intention to easily understand the
                            migration sequence. While the <literal>&lt;release name&gt;</literal> mentions the release a
                            migration belongs to, the <literal>&lt;two-digit sequence number per release&gt;</literal> helps
                            identify the order of migrations within each release. For modern migrations,
                            the <literal>[expand|contract]</literal> part of the revision id helps identify the
                            revision branch a migration belongs to.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The <literal>down_revision</literal> identifier MUST be specified for all Alembic migration
                            scripts. It points to the previous migration (or <literal>revision</literal> in Alembic
                            lingo) on which the current migration is based. This essentially
                            establishes a migration sequence very much a like a singly linked list would
                            (except that we use a <literal>previous</literal> link here instead of the more traditional
                            <literal>next</literal> link.)</paragraph>
                        <paragraph>The very first migration, <literal>liberty</literal> in our case, would have
                            <literal>down_revision</literal> set to <literal>None</literal>. All other migrations must point to the
                            last migration in the sequence at the time of writing the migration.</paragraph>
                        <paragraph>For example, Glance has two migrations in Mitaka, namely, <literal>mitaka01</literal>
                            and <literal>mitaka02</literal>. The migration sequence for Mitaka should look like:</paragraph>
                        <literal_block classes="code" xml:space="preserve">liberty
   ^
   |
   |
mitaka01
   ^
   |
   |
mitaka02</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>The <literal>depends_on</literal> identifier helps establish dependencies between two
                            migrations. If a migration <literal>X</literal> depends on running  migration <literal>Y</literal> first,
                            then <literal>X</literal> is said to depend on <literal>Y</literal>. This could be specified in the
                            migration as shown below:</paragraph>
                        <literal_block classes="code" xml:space="preserve">revision = 'X'
down_revision = 'W'
depends_on = 'Y'</literal_block>
                        <paragraph>Naturally, every migration depends on the migrations preceding it in the
                            migration sequence. Hence, in a typical branch-less migration sequence,
                            <literal>depends_on</literal> is of limited use. However, this could be useful for
                            migration sequences with branches. We’ll see more about this in the next
                            section.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>All schema migration scripts must adhere to the naming convention
                            mentioned below:</paragraph>
                        <literal_block classes="code" xml:space="preserve">&lt;unique revision id&gt;_&lt;very brief description&gt;.py</literal_block>
                        <paragraph>Example:</paragraph>
                        <literal_block classes="code" xml:space="preserve">Monolith migration: ocata01_add_visibility_remove_is_public.py
Expand migration: ocata_expand01_add_visibility.py
Contract migration: ocata_contract01_remove_is_public.py</literal_block>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="dependency-between-contract-and-expand-migrations" names="dependency\ between\ contract\ and\ expand\ migrations">
                <title>Dependency Between Contract and Expand Migrations</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>To achieve zero-downtime upgrades, the Glance migration sequence has been
                            branched into <literal>expand</literal> and <literal>contract</literal> branches. As the name suggests,
                            the <literal>expand</literal> branch contains only the expand migrations and the
                            <literal>contract</literal> branch contains only the contract migrations. As per the
                            zero-downtime migration strategy, the expand migrations are run first
                            followed by contract migrations. To establish this dependency, we make the
                            contract migrations explicitly depend on their corresponding expand
                            migrations. Thus, running contract migrations without running expansions is
                            not possible.</paragraph>
                        <paragraph>For example, the Community Images migration in Ocata includes the
                            experimental E-M-C migrations. The expand migration is <literal>ocata_expand01</literal>
                            and the contract migration is <literal>ocata_contract01</literal>. The dependency is
                            established as below.</paragraph>
                        <literal_block classes="code" xml:space="preserve">revision = 'ocata_contract01'
down_revision = 'mitaka02'
depends_on = 'ocata_expand01'</literal_block>
                        <paragraph>Every contract migration in Glance MUST depend on its corresponding expand
                            migration. Thus, the current Glance migration sequence looks as shown below:</paragraph>
                        <literal_block classes="code" xml:space="preserve">                 liberty
                    ^
                    |
                    |
                mitaka01
                    ^
                    |
                    |
                mitaka02
                    ^
                    |
       +------------+------------+
       |                         |
       |                         |
ocata_expand01 &lt;------  ocata_contract01
       ^                         ^
       |                         |
       |                         |
 pike_expand01 &lt;------   pike_contract01</literal_block>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="data-migrations" names="data\ migrations">
                <title>Data Migrations</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>All Glance data migrations must reside in
                            <literal>glance.db.sqlalchemy.alembic_migrations.data_migrations</literal> package.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The data migrations themselves are not Alembic migration scripts. And, hence
                            they don’t require a unique revision id. However, they must adhere to a
                            similar naming convention discussed above. That is:</paragraph>
                        <literal_block classes="code" xml:space="preserve">&lt;release name&gt;_migrate&lt;two-digit sequence number per release&gt;_&lt;very brief description&gt;.py</literal_block>
                        <paragraph>Example:</paragraph>
                        <literal_block classes="code" xml:space="preserve">Data Migration: ocata_migrate01_community_images.py</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>All data migrations modules must adhere to the following structure:</paragraph>
                        <literal_block classes="code" xml:space="preserve">def has_migrations(engine):
    &lt;your code to determine whether or not there are any pending rows to be
    migrated&gt;
    return &lt;boolean&gt;


def migrate(engine):
    &lt;your code to migrate rows in the database.&gt;
    return &lt;number of rows migrated&gt;</literal_block>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="notes" names="notes">
                <title>NOTES</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Starting in Ocata, Glance needs every database migration to include both
                            monolithic and Expand-Migrate-Contract (E-M-C) style migrations. At some
                            point in Pike, E-M-C migrations will be made default. At that point, it
                            would be no longer required to include monolithic migration script.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Alembic is a database migration engine written for SQLAlchemy. So, any
                            migration script written for SQLAlchemy Migrate should work with Alembic as
                            well provided the structural differences above (primarily adding
                            <literal>revision</literal>, <literal>down_revision</literal> and <literal>depends_on</literal>) are taken care of.
                            Moreover, it maybe easier to do certain operations with Alembic.
                            Refer to <reference ids="id9" internal="True" refid="almbc">[ALMBC]</reference> for information on Alembic operations.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>A given database change may not require actions in each of the expand,
                            migrate, contract phases, but nonetheless, we require a script for <emphasis>each</emphasis>
                            phase for <emphasis>every</emphasis> change.  In the case where an action is not required, a
                            <literal>no-op</literal> script, described below, MUST be used.</paragraph>
                        <paragraph>For instance, if a database migration is completely contractive in nature,
                            say removing a column, there won’t be a need for expand and migrate
                            operations. But, including a <literal>no-op</literal> expand and migrate scripts will make
                            it explicit and also preserve the one-to-one correspondence between expand,
                            migrate and contract scripts.</paragraph>
                        <paragraph>A no-op expand/contract Alembic migration:</paragraph>
                        <literal_block classes="code" xml:space="preserve">"""An example empty Alembic migration script

Revision ID: foo02
Revises: foo01
"""

revision = foo02
down_revision = foo01

def upgrade():
    pass</literal_block>
                    </list_item>
                </bullet_list>
                <block_quote>
                    <paragraph>A no-op migrate script:</paragraph>
                    <block_quote>
                        <literal_block classes="code" xml:space="preserve">"""An example empty data migration script"""

def has_migrations(engine):
    return False


def migrate(engine):
    return 0</literal_block>
                    </block_quote>
                </block_quote>
            </section>
        </section>
        <section ids="references" names="references">
            <title>References</title>
            <citation backrefs="id1 id3 id5 id6 id7" ids="gspec1" names="gspec1">
                <label>GSPEC1</label>
                <paragraph><reference name="Database Strategy for Rolling Upgrades" refuri="https://specs.openstack.org/openstack/glance-specs/specs/ocata/implemented/glance/database-strategy-for-rolling-upgrades.html">Database Strategy for Rolling Upgrades</reference><target ids="database-strategy-for-rolling-upgrades" names="database\ strategy\ for\ rolling\ upgrades" refuri="https://specs.openstack.org/openstack/glance-specs/specs/ocata/implemented/glance/database-strategy-for-rolling-upgrades.html"></target></paragraph>
            </citation>
            <citation backrefs="id2 id4" ids="gspec2" names="gspec2">
                <label>GSPEC2</label>
                <paragraph><reference name="Glance Alembic Migrations Spec" refuri="https://specs.openstack.org/openstack/glance-specs/specs/ocata/implemented/glance/alembic-migrations.html">Glance Alembic Migrations Spec</reference><target ids="glance-alembic-migrations-spec" names="glance\ alembic\ migrations\ spec" refuri="https://specs.openstack.org/openstack/glance-specs/specs/ocata/implemented/glance/alembic-migrations.html"></target></paragraph>
            </citation>
            <citation backrefs="id8" ids="gmigs1" names="gmigs1">
                <label>GMIGS1</label>
                <paragraph><reference name="Glance Alembic Migrations Implementation" refuri="http://git.openstack.org/cgit/openstack/glance/tree/glance/db/sqlalchemy/alembic_migrations/versions">Glance Alembic Migrations Implementation</reference><target ids="glance-alembic-migrations-implementation" names="glance\ alembic\ migrations\ implementation" refuri="http://git.openstack.org/cgit/openstack/glance/tree/glance/db/sqlalchemy/alembic_migrations/versions"></target></paragraph>
            </citation>
            <citation backrefs="id9" ids="almbc" names="almbc">
                <label>ALMBC</label>
                <paragraph><reference name="Alembic Operations" refuri="http://alembic.zzzcomputing.com/en/latest/ops.html">Alembic Operations</reference><target ids="alembic-operations" names="alembic\ operations" refuri="http://alembic.zzzcomputing.com/en/latest/ops.html"></target></paragraph>
            </citation>
        </section>
    </section>
</document>
