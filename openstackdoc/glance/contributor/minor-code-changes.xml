<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/glance/doc/source/contributor/minor-code-changes.rst">
    <section ids="disallowed-minor-code-changes" names="disallowed\ minor\ code\ changes">
        <title>Disallowed Minor Code Changes</title>
        <paragraph>There are a few types of code changes that have been proposed recently that
            have been rejected by the Glance team, so we want to point them out and explain
            our reasoning.</paragraph>
        <paragraph>If you feel an exception should be made for some particular change, please put
            it on the agenda for the Glance weekly meeting so it can be discussed.</paragraph>
        <section ids="database-migration-scripts" names="database\ migration\ scripts">
            <title>Database migration scripts</title>
            <paragraph>Once a database script has been included in a release, spelling or grammar
                corrections in comments are forbidden unless you are fixing them as a part of
                another stronger bug on the migration script itself.  Modifying migration
                scripts confuses operators and administrators – we only want them to notice
                serious problems.  Their preference must take precedence over fixing spell
                errors.</paragraph>
        </section>
        <section ids="typographical-errors-in-comments" names="typographical\ errors\ in\ comments">
            <title>Typographical errors in comments</title>
            <paragraph>Comments are not user-facing.  Correcting minor misspellings or grammatical
                errors only muddies the history of that part of the code, making <literal>git blame</literal>
                arguably less useful.  So such changes are likely to be rejected.  (This
                prohibition, of course, does not apply to corrections of misleading or unclear
                comments, or for example, an incorrect reference to a standards document.)</paragraph>
        </section>
        <section ids="misspellings-in-code" names="misspellings\ in\ code">
            <title>Misspellings in code</title>
            <paragraph>Misspellings in function names are unlikely to be corrected for the “historical
                clarity” reasons outlined above for comments.  Plus, if a function is named
                <literal>mispelled()</literal> and a later developer tries to call <literal>misspelled()</literal>, the
                latter will result in a NameError when it’s called, so the later developer will
                know to use the incorrectly spelled function name.</paragraph>
            <paragraph>Misspellings in variable names are more problematic, because if you have a
                variable named <literal>mispelled</literal> and a later developer puts up a patch where an
                updated value is assigned to <literal>misspelled</literal>, Python won’t complain.  The “real”
                variable won’t be updated, and the patch won’t have its intended effect.
                Whether such a change is allowed will depend upon the age of the code, how
                widely used the variable is, whether it’s spelled correctly in other functions,
                what the current test coverage is like, and so on.  We tend to be very
                conservative about making changes that could cause regressions.  So whether a
                patch that corrects the spelling of a variable name is accepted is a judgment
                (or is that “judgement”?) call by reviewers.  In proposing your patch, however,
                be aware that your reviewers will have these concerns in mind.</paragraph>
        </section>
        <section ids="tests" names="tests">
            <title>Tests</title>
            <paragraph>Occasionally someone proposes a patch that converts instances of
                <literal>assertEqual(True, whatever)</literal> to <literal>assertTrue(whatever)</literal>, or instances of
                <literal>assertEqual(False, w)</literal> to <literal>assertFalse(w)</literal> in tests.  Note that these are
                not type safe changes and they weaken the tests.  (See the Python <literal>unittest</literal>
                docs for details.)  We tend to be very conservative about our tests and don’t
                like weakening changes.</paragraph>
            <paragraph>We’re not saying that such changes can never be made, we’re just saying that
                each change must be accompanied by an explanation of why the weaker test is
                adequate for what’s being tested.</paragraph>
            <paragraph>Just to make this a bit clearer it can be shown using the following
                example, comment out the lines in the runTest method alternatively:</paragraph>
            <literal_block xml:space="preserve">import unittest

class MyTestCase(unittest.TestCase):
    def setUp(self):
        pass

class Tests(MyTestCase):
    def runTest(self):
        self.assertTrue('True')
        self.assertTrue(True)
        self.assertEqual(True, 'True')</literal_block>
            <paragraph>To run this use:</paragraph>
            <literal_block xml:space="preserve">python -m testtools.run test.py</literal_block>
            <paragraph>Also mentioned within the unittests <reference name="documentation" refuri="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertTrue">documentation</reference>.</paragraph>
            <target ids="documentation" names="documentation" refuri="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertTrue"></target>
        </section>
        <section ids="log-warn-to-log-warning" names="log.warn\ to\ log.warning">
            <title>LOG.warn to LOG.warning</title>
            <paragraph>Consistently there are proposed changes that will change all {LOG,logging}.
                warn to {LOG,logging}.warning across the codebase due to the deprecation in
                Python 3. While the deprecation is real, Glance uses oslo_log that provides
                alias warn and solves the issue in single place for all projects using it.
                These changes are not accepted due to the huge amount of refactoring they
                cause for no reason.</paragraph>
        </section>
    </section>
</document>
