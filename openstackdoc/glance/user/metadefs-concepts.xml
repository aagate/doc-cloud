<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/glance/doc/source/user/metadefs-concepts.rst">
    <comment xml:space="preserve">Copyright (c) 2014 Hewlett-Packard Development Company, L.P.
All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.</comment>
    <section ids="metadata-definition-concepts" names="metadata\ definition\ concepts">
        <title>Metadata Definition Concepts</title>
        <paragraph>The metadata definition service was added to Glance in the Juno release of
            OpenStack.</paragraph>
        <paragraph>It provides a common API for vendors, admins, services, and users to
            meaningfully <strong>define</strong> available key / value pair metadata that
            can be used on different types of resources (images, artifacts, volumes,
            flavors, aggregates, and other resources). A definition includes a property’s
            key, its description, its constraints, and the resource types to which it
            can be associated.</paragraph>
        <paragraph>This catalog does not store the values for specific instance properties.</paragraph>
        <paragraph>For example, a definition of a virtual CPU topology property for the number of
            cores will include the base key to use (for example, cpu_cores), a description,
            and value constraints like requiring it to be an integer. So, a user,
            potentially through Horizon, would be able to search this catalog to list the
            available properties they can add to a flavor or image. They will see the
            virtual CPU topology property in the list and know that it must be an integer.</paragraph>
        <paragraph>When the user adds the property its key and value will be stored in the
            service that owns that resource (for example, Nova for flavors and in Glance
            for images). The catalog also includes any additional prefix required when
            the property is applied to different types of resources, such as “hw_” for
            images and “hw:” for flavors.  So, on an image, the user would know to set the
            property as “hw_cpu_cores=1”.</paragraph>
        <section ids="terminology" names="terminology">
            <title>Terminology</title>
            <section ids="background" names="background">
                <title>Background</title>
                <paragraph>The term <emphasis>metadata</emphasis> can become very overloaded and confusing.  This
                    catalog is about the additional metadata that is passed as arbitrary
                    key / value pairs or tags across various artifacts and OpenStack services.</paragraph>
                <paragraph>Below are a few examples of the various terms used for metadata across
                    OpenStack services today:</paragraph>
                <table>
                    <tgroup cols="3">
                        <colspec colwidth="25"></colspec>
                        <colspec colwidth="27"></colspec>
                        <colspec colwidth="22"></colspec>
                        <thead>
                            <row>
                                <entry>
                                    <paragraph>Nova</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Cinder</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Glance</paragraph>
                                </entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>
                                    <definition_list>
                                        <definition_list_item>
                                            <term>Flavor</term>
                                            <definition>
                                                <bullet_list bullet="+">
                                                    <list_item>
                                                        <paragraph><emphasis>extra specs</emphasis></paragraph>
                                                    </list_item>
                                                </bullet_list>
                                            </definition>
                                        </definition_list_item>
                                        <definition_list_item>
                                            <term>Host Aggregate</term>
                                            <definition>
                                                <bullet_list bullet="+">
                                                    <list_item>
                                                        <paragraph><emphasis>metadata</emphasis></paragraph>
                                                    </list_item>
                                                </bullet_list>
                                            </definition>
                                        </definition_list_item>
                                        <definition_list_item>
                                            <term>Servers</term>
                                            <definition>
                                                <bullet_list bullet="+">
                                                    <list_item>
                                                        <paragraph><emphasis>metadata</emphasis></paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph><emphasis>scheduler_hints</emphasis></paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph><emphasis>tags</emphasis></paragraph>
                                                    </list_item>
                                                </bullet_list>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </entry>
                                <entry>
                                    <definition_list>
                                        <definition_list_item>
                                            <term>Volume &amp; Snapshot</term>
                                            <definition>
                                                <bullet_list bullet="+">
                                                    <list_item>
                                                        <paragraph><emphasis>image metadata</emphasis></paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph><emphasis>metadata</emphasis></paragraph>
                                                    </list_item>
                                                </bullet_list>
                                            </definition>
                                        </definition_list_item>
                                        <definition_list_item>
                                            <term>VolumeType</term>
                                            <definition>
                                                <bullet_list bullet="+">
                                                    <list_item>
                                                        <paragraph><emphasis>extra specs</emphasis></paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph><emphasis>qos specs</emphasis></paragraph>
                                                    </list_item>
                                                </bullet_list>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </entry>
                                <entry>
                                    <definition_list>
                                        <definition_list_item>
                                            <term>Image &amp; Snapshot</term>
                                            <definition>
                                                <bullet_list bullet="+">
                                                    <list_item>
                                                        <paragraph><emphasis>properties</emphasis></paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph><emphasis>tags</emphasis></paragraph>
                                                    </list_item>
                                                </bullet_list>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </section>
            <section ids="catalog-concepts" names="catalog\ concepts">
                <title>Catalog Concepts</title>
                <paragraph>The below figure illustrates the concept terminology used in the metadata
                    definitions catalog:</paragraph>
                <literal_block xml:space="preserve">A namespace is associated with 0 to many resource types, making it visible to
the API / UI for applying to that type of resource. RBAC Permissions are
managed at a namespace level.

+----------------------------------------------+
|         Namespace                            |
|                                              |
| +-----------------------------------------+  |
| |        Object Definition                |  |
| |                                         |  |        +--------------------+
| | +-------------------------------------+ |  |  +--&gt;  | Resource Type:     |
| | | Property Definition A (key=integer) | |  |  |     | e.g. Nova Flavor   |
| | +-------------------------------------+ |  |  |     +--------------------+
| |                                         |  |  |
| | +-------------------------------------+ |  |  |
| | | Property Definition B (key=string)  | |  |  |     +--------------------+
| | +-------------------------------------+ |  +--+--&gt;  | Resource Type:     |
| |                                         |  |  |     | e.g. Glance Image  |
| +-----------------------------------------+  |  |     +--------------------+
|                                              |  |
|  +-------------------------------------+     |  |
|  | Property Definition C (key=boolean) |     |  |     +--------------------+
|  +-------------------------------------+     |  +--&gt;  | Resource Type:     |
|                                              |        | e.g. Cinder Volume |
+----------------------------------------------+        +--------------------+

 Properties may be defined standalone or within the context of an object.</literal_block>
            </section>
            <section ids="catalog-terminology" names="catalog\ terminology">
                <title>Catalog Terminology</title>
                <paragraph>The following terminology is used within the metadata definition catalog.</paragraph>
                <paragraph><strong>Namespaces</strong></paragraph>
                <paragraph>Metadata definitions are contained in namespaces.</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Specify the access controls (CRUD) for everything defined in it. Allows for
                            admin only, different projects, or the entire cloud to define and use the
                            definitions in the namespace</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Associates the contained definitions to different types of resources</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><strong>Properties</strong></paragraph>
                <paragraph>A property describes a single property and its primitive constraints. Each
                    property can ONLY be a primitive type:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>string, integer, number, boolean, array</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Each primitive type is described using simple JSON schema notation. This
                    means NO nested objects and no definition referencing.</paragraph>
                <paragraph><strong>Objects</strong></paragraph>
                <paragraph>An object describes a group of one to many properties and their primitive
                    constraints. Each property in the group can ONLY be a primitive type:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>string, integer, number, boolean, array</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Each primitive type is described using simple JSON schema notation. This
                    means NO nested objects.</paragraph>
                <paragraph>The object may optionally define required properties under the semantic
                    understanding that a user who uses the object should provide all required
                    properties.</paragraph>
                <paragraph><strong>Resource Type Association</strong></paragraph>
                <paragraph>Resource type association specifies the relationship between resource
                    types and the namespaces that are applicable to them. This information can be
                    used to drive UI and CLI views. For example, the same namespace of
                    objects, properties, and tags may be used for images, snapshots, volumes, and
                    flavors. Or a namespace may only apply to images.</paragraph>
                <paragraph>Resource types should be aligned with Heat resource types whenever possible.
                    <reference refuri="http://docs.openstack.org/developer/heat/template_guide/openstack.html">http://docs.openstack.org/developer/heat/template_guide/openstack.html</reference></paragraph>
                <paragraph>It is important to note that the same base property key can require different
                    prefixes depending on the target resource type. The API provides a way to
                    retrieve the correct property based on the target resource type.</paragraph>
                <paragraph>Below are a few examples:</paragraph>
                <paragraph>The desired virtual CPU topology can be set on both images and flavors
                    via metadata. The keys have different prefixes on images than on flavors.
                    On flavors keys are prefixed with <literal>hw:</literal>, but on images the keys are prefixed
                    with <literal>hw_</literal>.</paragraph>
                <paragraph>For more: <reference refuri="https://github.com/openstack/nova-specs/blob/master/specs/juno/implemented/virt-driver-vcpu-topology.rst">https://github.com/openstack/nova-specs/blob/master/specs/juno/implemented/virt-driver-vcpu-topology.rst</reference></paragraph>
                <paragraph>Another example is the AggregateInstanceExtraSpecsFilter and scoped properties
                    (e.g. properties with something:something=value). For scoped / namespaced
                    properties, the AggregateInstanceExtraSpecsFilter requires a prefix of
                    “aggregate_instance_extra_specs:” to be used on flavors but not on the
                    aggregate itself. Otherwise, the filter will not evaluate the property during
                    scheduling.</paragraph>
                <paragraph>So, on a host aggregate, you may see:</paragraph>
                <paragraph>companyx:fastio=true</paragraph>
                <paragraph>But then when used on the flavor, the AggregateInstanceExtraSpecsFilter needs:</paragraph>
                <paragraph>aggregate_instance_extra_specs:companyx:fastio=true</paragraph>
                <paragraph>In some cases, there may be multiple different filters that may use
                    the same property with different prefixes. In this case, the correct prefix
                    needs to be set based on which filter is enabled.</paragraph>
            </section>
        </section>
    </section>
</document>
