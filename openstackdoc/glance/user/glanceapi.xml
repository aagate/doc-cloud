<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/glance/doc/source/user/glanceapi.rst">
    <comment xml:space="preserve">Copyright 2010 OpenStack Foundation
All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.</comment>
    <section ids="using-glance-s-image-public-apis" names="using\ glance's\ image\ public\ apis">
        <title>Using Glance’s Image Public APIs</title>
        <paragraph>Glance is the reference implementation of the OpenStack Images API.  As such,
            Glance fully implements versions 1 and 2 of the Images API.</paragraph>
        <note>
            <paragraph>The Images API v1 has been DEPRECATED in the Newton release.  The
                migration path is to use the <reference name="Images API v2" refuri="http://developer.openstack.org/api-ref/image/v2/">Images API v2</reference><target ids="images-api-v2" names="images\ api\ v2" refuri="http://developer.openstack.org/api-ref/image/v2/"></target> instead of version 1
                of the API.  The Images API v1 will ultimately be removed, following the
                <reference name="OpenStack standard deprecation policy" refuri="https://governance.openstack.org/reference/tags/assert_follows-standard-deprecation.html">OpenStack standard deprecation policy</reference><target ids="openstack-standard-deprecation-policy" names="openstack\ standard\ deprecation\ policy" refuri="https://governance.openstack.org/reference/tags/assert_follows-standard-deprecation.html"></target>.</paragraph>
        </note>
        <paragraph>There used to be a sentence here saying, “The Images API specification is
            developed alongside Glance, but is not considered part of the Glance project.”
            That’s only partially true (or completely false, depending upon how strict you
            are about these things).  Conceptually, the OpenStack Images API is an
            independent definition of a REST API.  In practice, however, the only way
            to participate in the evolution of the Images API is to work with the Glance
            community to define the new functionality and provide its reference
            implementation. Further, Glance falls under the “designated sections” provision
            of the OpenStack DefCore Guidelines, which basically means that in order to
            qualify as “OpenStack”, a cloud exposing an OpenStack Images API must include
            the Glance Images API implementation code.  Thus, although conceptually
            independent, the OpenStack Images APIs are intimately associated with Glance.</paragraph>
        <paragraph><strong>References</strong></paragraph>
        <bullet_list bullet="*">
            <list_item>
                <paragraph><reference name="Designated sections (definition)" refuri="http://git.openstack.org/cgit/openstack/defcore/tree/doc/source/process/Lexicon.rst#n54">Designated sections (definition)</reference><target ids="designated-sections-definition" names="designated\ sections\ (definition)" refuri="http://git.openstack.org/cgit/openstack/defcore/tree/doc/source/process/Lexicon.rst#n54"></target></paragraph>
            </list_item>
            <list_item>
                <paragraph><reference name="2014-04-02 DefCore Designated Sections Guidelines" refuri="https://governance.openstack.org/resolutions/20140402-defcore-designated-sections-guidelines.html">2014-04-02 DefCore Designated Sections Guidelines</reference><target ids="defcore-designated-sections-guidelines" names="2014-04-02\ defcore\ designated\ sections\ guidelines" refuri="https://governance.openstack.org/resolutions/20140402-defcore-designated-sections-guidelines.html"></target></paragraph>
            </list_item>
            <list_item>
                <paragraph><reference name="OpenStack Core Definition" refuri="https://github.com/openstack/defcore/blob/master/doc/source/process/CoreDefinition.rst">OpenStack Core Definition</reference><target ids="openstack-core-definition" names="openstack\ core\ definition" refuri="https://github.com/openstack/defcore/blob/master/doc/source/process/CoreDefinition.rst"></target></paragraph>
            </list_item>
            <list_item>
                <paragraph><reference name="DefCore Guidelines Repository" refuri="https://github.com/openstack/defcore">DefCore Guidelines Repository</reference><target ids="defcore-guidelines-repository" names="defcore\ guidelines\ repository" refuri="https://github.com/openstack/defcore"></target></paragraph>
            </list_item>
        </bullet_list>
        <section ids="glance-and-the-images-apis-past-present-and-future" names="glance\ and\ the\ images\ apis:\ past,\ present,\ and\ future">
            <title>Glance and the Images APIs: Past, Present, and Future</title>
            <paragraph>Here’s a quick summary of the Images APIs that have been implemented by Glance.
                If you’re interested in more details, you can consult the Release Notes for all
                the OpenStack releases (beginning with “Bexar”) to follow the evolution of
                features in Glance and the Images APIs.</paragraph>
            <section ids="images-v1-api" names="images\ v1\ api">
                <title>Images v1 API</title>
                <paragraph>The v1 API was originally designed as a service API for use by Nova and other
                    OpenStack services. In the Kilo release, the v1.1 API was downgraded from
                    CURRENT to SUPPORTED. In the Newton release, the version 1 API is officially
                    declared DEPRECATED.</paragraph>
                <paragraph>During the deprecation period, the Images v1 API is closed to further
                    development.  The Glance code implementing the v1 API accepts only serious
                    bugfixes.</paragraph>
                <paragraph>Since Folsom, it has been possible to deploy OpenStack without exposing the
                    Images v1 API to end users.  The Compute v2 API contains image-related API
                    calls allowing users to list images, list images details, show image details
                    for a specific image, delete images, and manipulate image metadata.  Nova acts
                    as a proxy to Glance for these image-related calls.  It’s important to note
                    that the image-related calls in the Compute v2 API are a proper subset of the
                    calls available in the Images APIs.</paragraph>
                <paragraph>In the Newton release, Nova (and other OpenStack services that consume images)
                    have been modified to use the Images v2 API by default.</paragraph>
                <paragraph><strong>Reference</strong></paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><reference name="OpenStack Standard Deprecation Requirements" refuri="https://governance.openstack.org/reference/tags/assert_follows-standard-deprecation.html#requirements">OpenStack Standard Deprecation Requirements</reference><target ids="openstack-standard-deprecation-requirements" names="openstack\ standard\ deprecation\ requirements" refuri="https://governance.openstack.org/reference/tags/assert_follows-standard-deprecation.html#requirements"></target></paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="images-v2-api" names="images\ v2\ api">
                <title>Images v2 API</title>
                <paragraph>The v2 API is the CURRENT OpenStack Images API.  It provides a more friendly
                    interface to consumers than did the v1 API, as it was specifically designed to
                    expose images-related functionality as a public-facing endpoint.  It’s the
                    version that’s currently open to development.</paragraph>
                <paragraph>A common strategy is to deploy multiple Glance nodes: internal-facing nodes
                    providing the Images APIs for internal consumers like Nova, and external-facing
                    nodes providing the Images v2 API for public use.</paragraph>
            </section>
            <section ids="the-future" names="the\ future">
                <title>The Future</title>
                <paragraph>During the long and tumultuous design phase of what has since become an
                    independent service named “Glare” (the Glance Artifacts Repository), the Glance
                    community loosely spoke about the Artifacts API being “Glance v3”.  This,
                    however, was only a shorthand way of speaking of the Artifacts effort.  The
                    Artifacts API can’t be the Images v3 API since Artifacts are not the same as
                    Images.  Conceptually, a virtual machine image could be an Artifact, and the
                    Glare code has been designed to be compatible with the Images v2 API.  But at
                    this time, there are no plans to implement an Images v3 API.</paragraph>
                <paragraph>During the Newton development cycle, Glare became an independent OpenStack
                    project.  While it’s evident that there’s a need for an Artifact Repository in
                    OpenStack, whether it will be as ubiquitous as the need for an Images
                    Repository isn’t clear.  On the other hand, industry trends could go in the
                    opposite direction where everyone needs Artifacts and deployers view images as
                    simply another type of digital artifact.  As Yogi Berra, an experienced
                    manager, once said, “It’s tough to make predictions, especially about the
                    future.”</paragraph>
            </section>
        </section>
        <section ids="authentication" names="authentication">
            <title>Authentication</title>
            <paragraph>Glance depends on Keystone and the OpenStack Identity API to handle
                authentication of clients. You must obtain an authentication token from
                Keystone using and send it along with all API requests to Glance through
                the <literal>X-Auth-Token</literal> header. Glance will communicate back to Keystone to
                verify the token validity and obtain your identity credentials.</paragraph>
            <paragraph>See <reference internal="True" refuri="../admin/authentication#authentication"><inline classes="std std-ref">Authentication With Keystone</inline></reference> for more information on integrating with Keystone.</paragraph>
        </section>
        <section ids="using-v1-x" names="using\ v1.x">
            <title>Using v1.X</title>
            <note>
                <paragraph>The Images API v1 has been DEPRECATED in the Newton release.  The
                    migration path is to use the <reference name="Images API v2" refuri="http://developer.openstack.org/api-ref/image/v2/">Images API v2</reference><target dupnames="images\ api\ v2" ids="id1" refuri="http://developer.openstack.org/api-ref/image/v2/"></target> instead of version 1
                    of the API.  The Images API v1 will ultimately be removed, following the
                    <reference name="OpenStack standard deprecation policy" refuri="https://governance.openstack.org/reference/tags/assert_follows-standard-deprecation.html">OpenStack standard deprecation policy</reference><target dupnames="openstack\ standard\ deprecation\ policy" ids="id2" refuri="https://governance.openstack.org/reference/tags/assert_follows-standard-deprecation.html"></target>.</paragraph>
            </note>
            <paragraph>For the purpose of examples, assume there is a Glance API server running
                at the URL <literal>http://glance.openstack.example.org</literal> on the default port 80.</paragraph>
            <section ids="list-available-images" names="list\ available\ images">
                <title>List Available Images</title>
                <paragraph>We want to see a list of available images that the authenticated user has
                    access to. This includes images owned by the user, images shared with the user
                    and public images.</paragraph>
                <paragraph>We issue a <literal>GET</literal> request to <literal>http://glance.openstack.example.org/v1/images</literal> to
                    retrieve this list of available images. The data is returned as a JSON-encoded
                    mapping in the following format:</paragraph>
                <literal_block xml:space="preserve">{'images': [
  {'uri': 'http://glance.openstack.example.org/v1/images/71c675ab-d94f-49cd-a114-e12490b328d9',
   'name': 'Ubuntu 10.04 Plain',
   'disk_format': 'vhd',
   'container_format': 'ovf',
   'size': '5368709120'}
  ...]}</literal_block>
            </section>
            <section ids="list-available-images-in-more-detail" names="list\ available\ images\ in\ more\ detail">
                <title>List Available Images in More Detail</title>
                <paragraph>We want to see a more detailed list of available images that the authenticated
                    user has access to. This includes images owned by the user, images shared with
                    the user and public images.</paragraph>
                <paragraph>We issue a <literal>GET</literal> request to <literal>http://glance.openstack.example.org/v1/images/detail</literal> to
                    retrieve this list of available images. The data is returned as a
                    JSON-encoded mapping in the following format:</paragraph>
                <literal_block xml:space="preserve">{'images': [
  {'uri': 'http://glance.openstack.example.org/v1/images/71c675ab-d94f-49cd-a114-e12490b328d9',
   'name': 'Ubuntu 10.04 Plain 5GB',
   'disk_format': 'vhd',
   'container_format': 'ovf',
   'size': '5368709120',
   'checksum': 'c2e5db72bd7fd153f53ede5da5a06de3',
   'created_at': '2010-02-03 09:34:01',
   'updated_at': '2010-02-03 09:34:01',
   'deleted_at': '',
   'status': 'active',
   'is_public': true,
   'min_ram': 256,
   'min_disk': 5,
   'owner': null,
   'properties': {'distro': 'Ubuntu 10.04 LTS'}},
  ...]}</literal_block>
                <note>
                    <paragraph>All timestamps returned are in UTC.</paragraph>
                    <paragraph>The <title_reference>updated_at</title_reference> timestamp is the timestamp when an image’s metadata
                        was last updated, not its image data, as all image data is immutable
                        once stored in Glance.</paragraph>
                    <paragraph>The <title_reference>properties</title_reference> field is a mapping of free-form key/value pairs that
                        have been saved with the image metadata.</paragraph>
                    <paragraph>The <title_reference>checksum</title_reference> field is an MD5 checksum of the image file data.</paragraph>
                    <paragraph>The <title_reference>is_public</title_reference> field is a boolean indicating whether the image is
                        publicly available.</paragraph>
                    <paragraph>The <title_reference>min_ram</title_reference> field is an integer specifying the minimum amount of
                        RAM needed to run this image on an instance, in megabytes.</paragraph>
                    <paragraph>The <title_reference>min_disk</title_reference> field is an integer specifying the minimum amount of
                        disk space needed to run this image on an instance, in gigabytes.</paragraph>
                    <paragraph>The <title_reference>owner</title_reference> field is a string which may either be null or which will
                        indicate the owner of the image.</paragraph>
                </note>
            </section>
            <section ids="filtering-images-lists" names="filtering\ images\ lists">
                <title>Filtering Images Lists</title>
                <paragraph>Both the <literal>GET /v1/images</literal> and <literal>GET /v1/images/detail</literal> requests take query
                    parameters that serve to filter the returned list of images. The following
                    list details these query parameters.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><literal>name=NAME</literal></paragraph>
                        <paragraph>Filters images having a <literal>name</literal> attribute matching <literal>NAME</literal>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>container_format=FORMAT</literal></paragraph>
                        <paragraph>Filters images having a <literal>container_format</literal> attribute matching <literal>FORMAT</literal></paragraph>
                        <paragraph>For more information, see <reference internal="True" refuri="formats#formats"><inline classes="std std-ref">Disk and Container Formats</inline></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>disk_format=FORMAT</literal></paragraph>
                        <paragraph>Filters images having a <literal>disk_format</literal> attribute matching <literal>FORMAT</literal></paragraph>
                        <paragraph>For more information, see <reference internal="True" refuri="formats#formats"><inline classes="std std-ref">Disk and Container Formats</inline></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>status=STATUS</literal></paragraph>
                        <paragraph>Filters images having a <literal>status</literal> attribute matching <literal>STATUS</literal></paragraph>
                        <paragraph>For more information, see <reference internal="True" refuri="statuses#image-statuses"><inline classes="std std-ref">Image Statuses</inline></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>size_min=BYTES</literal></paragraph>
                        <paragraph>Filters images having a <literal>size</literal> attribute greater than or equal to <literal>BYTES</literal></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>size_max=BYTES</literal></paragraph>
                        <paragraph>Filters images having a <literal>size</literal> attribute less than or equal to <literal>BYTES</literal></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>These two resources also accept additional query parameters:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><literal>sort_key=KEY</literal></paragraph>
                        <paragraph>Results will be ordered by the specified image attribute <literal>KEY</literal>. Accepted
                            values include <literal>id</literal>, <literal>name</literal>, <literal>status</literal>, <literal>disk_format</literal>,
                            <literal>container_format</literal>, <literal>size</literal>, <literal>created_at</literal> (default) and <literal>updated_at</literal>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>sort_dir=DIR</literal></paragraph>
                        <paragraph>Results will be sorted in the direction <literal>DIR</literal>. Accepted values are <literal>asc</literal>
                            for ascending or <literal>desc</literal> (default) for descending.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>marker=ID</literal></paragraph>
                        <paragraph>An image identifier marker may be specified. When present, only images which
                            occur after the identifier <literal>ID</literal> will be listed. (These are the images that
                            have a <title_reference>sort_key</title_reference> later than that of the marker <literal>ID</literal> in the <title_reference>sort_dir</title_reference>
                            direction.)</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>limit=LIMIT</literal></paragraph>
                        <paragraph>When present, the maximum number of results returned will not exceed <literal>LIMIT</literal>.</paragraph>
                    </list_item>
                </bullet_list>
                <note>
                    <paragraph>If the specified <literal>LIMIT</literal> exceeds the operator defined limit (api_limit_max)
                        then the number of results returned may be less than <literal>LIMIT</literal>.</paragraph>
                </note>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><literal>is_public=PUBLIC</literal></paragraph>
                        <paragraph>An admin user may use the <title_reference>is_public</title_reference> parameter to control which results are
                            returned.</paragraph>
                        <paragraph>When the <title_reference>is_public</title_reference> parameter is absent or set to <title_reference>True</title_reference> the following images
                            will be listed: Images whose <title_reference>is_public</title_reference> field is <title_reference>True</title_reference>, owned images and
                            shared images.</paragraph>
                        <paragraph>When the <title_reference>is_public</title_reference> parameter is set to <title_reference>False</title_reference> the following images will be
                            listed: Images (owned, shared, or non-owned) whose <title_reference>is_public</title_reference> field is <title_reference>False</title_reference>.</paragraph>
                        <paragraph>When the <title_reference>is_public</title_reference> parameter is set to <title_reference>None</title_reference> all images will be listed
                            irrespective of owner, shared status or the <title_reference>is_public</title_reference> field.</paragraph>
                    </list_item>
                </bullet_list>
                <note>
                    <paragraph>Use of the <title_reference>is_public</title_reference> parameter is restricted to admin users. For all other
                        users it will be ignored.</paragraph>
                </note>
            </section>
            <section ids="retrieve-image-metadata" names="retrieve\ image\ metadata">
                <title>Retrieve Image Metadata</title>
                <paragraph>We want to see detailed information for a specific virtual machine image
                    that the Glance server knows about.</paragraph>
                <paragraph>We have queried the Glance server for a list of images and the
                    data returned includes the <title_reference>uri</title_reference> field for each available image. This
                    <title_reference>uri</title_reference> field value contains the exact location needed to get the metadata
                    for a specific image.</paragraph>
                <paragraph>Continuing the example from above, in order to get metadata about the
                    first image returned, we can issue a <literal>HEAD</literal> request to the Glance
                    server for the image’s URI.</paragraph>
                <paragraph>We issue a <literal>HEAD</literal> request to
                    <literal>http://glance.openstack.example.org/v1/images/71c675ab-d94f-49cd-a114-e12490b328d9</literal> to
                    retrieve complete metadata for that image. The metadata is returned as a
                    set of HTTP headers that begin with the prefix <literal>x-image-meta-</literal>. The
                    following shows an example of the HTTP headers returned from the above
                    <literal>HEAD</literal> request:</paragraph>
                <literal_block xml:space="preserve">x-image-meta-uri              http://glance.openstack.example.org/v1/images/71c675ab-d94f-49cd-a114-e12490b328d9
x-image-meta-name             Ubuntu 10.04 Plain 5GB
x-image-meta-disk_format      vhd
x-image-meta-container_format ovf
x-image-meta-size             5368709120
x-image-meta-checksum         c2e5db72bd7fd153f53ede5da5a06de3
x-image-meta-created_at       2010-02-03 09:34:01
x-image-meta-updated_at       2010-02-03 09:34:01
x-image-meta-deleted_at
x-image-meta-status           available
x-image-meta-is_public        true
x-image-meta-min_ram          256
x-image-meta-min_disk         0
x-image-meta-owner            null
x-image-meta-property-distro  Ubuntu 10.04 LTS</literal_block>
                <note>
                    <paragraph>All timestamps returned are in UTC.</paragraph>
                    <paragraph>The <title_reference>x-image-meta-updated_at</title_reference> timestamp is the timestamp when an
                        image’s metadata was last updated, not its image data, as all
                        image data is immutable once stored in Glance.</paragraph>
                    <paragraph>There may be multiple headers that begin with the prefix
                        <title_reference>x-image-meta-property-</title_reference>. These headers are free-form key/value pairs
                        that have been saved with the image metadata. The key is the string
                        after <title_reference>x-image-meta-property-</title_reference> and the value is the value of the header.</paragraph>
                    <paragraph>The response’s <title_reference>ETag</title_reference> header will always be equal to the
                        <title_reference>x-image-meta-checksum</title_reference> value.</paragraph>
                    <paragraph>The response’s <title_reference>x-image-meta-is_public</title_reference> value is a boolean indicating
                        whether the image is publicly available.</paragraph>
                    <paragraph>The response’s <title_reference>x-image-meta-owner</title_reference> value is a string which may either
                        be null or which will indicate the owner of the image.</paragraph>
                </note>
            </section>
            <section ids="retrieve-raw-image-data" names="retrieve\ raw\ image\ data">
                <title>Retrieve Raw Image Data</title>
                <paragraph>We want to retrieve that actual raw data for a specific virtual machine image
                    that the Glance server knows about.</paragraph>
                <paragraph>We have queried the Glance server for a list of images and the
                    data returned includes the <title_reference>uri</title_reference> field for each available image. This
                    <title_reference>uri</title_reference> field value contains the exact location needed to get the metadata
                    for a specific image.</paragraph>
                <paragraph>Continuing the example from above, in order to get metadata about the
                    first image returned, we can issue a <literal>HEAD</literal> request to the Glance
                    server for the image’s URI.</paragraph>
                <paragraph>We issue a <literal>GET</literal> request to
                    <literal>http://glance.openstack.example.org/v1/images/71c675ab-d94f-49cd-a114-e12490b328d9</literal> to
                    retrieve metadata for that image as well as the image itself encoded
                    into the response body.</paragraph>
                <paragraph>The metadata is returned as a set of HTTP headers that begin with the
                    prefix <literal>x-image-meta-</literal>. The following shows an example of the HTTP headers
                    returned from the above <literal>GET</literal> request:</paragraph>
                <literal_block xml:space="preserve">x-image-meta-uri              http://glance.openstack.example.org/v1/images/71c675ab-d94f-49cd-a114-e12490b328d9
x-image-meta-name             Ubuntu 10.04 Plain 5GB
x-image-meta-disk_format      vhd
x-image-meta-container_format ovf
x-image-meta-size             5368709120
x-image-meta-checksum         c2e5db72bd7fd153f53ede5da5a06de3
x-image-meta-created_at       2010-02-03 09:34:01
x-image-meta-updated_at       2010-02-03 09:34:01
x-image-meta-deleted_at
x-image-meta-status           available
x-image-meta-is_public        true
x-image-meta-min_ram          256
x-image-meta-min_disk         5
x-image-meta-owner            null
x-image-meta-property-distro  Ubuntu 10.04 LTS</literal_block>
                <note>
                    <paragraph>All timestamps returned are in UTC.</paragraph>
                    <paragraph>The <title_reference>x-image-meta-updated_at</title_reference> timestamp is the timestamp when an
                        image’s metadata was last updated, not its image data, as all
                        image data is immutable once stored in Glance.</paragraph>
                    <paragraph>There may be multiple headers that begin with the prefix
                        <title_reference>x-image-meta-property-</title_reference>. These headers are free-form key/value pairs
                        that have been saved with the image metadata. The key is the string
                        after <title_reference>x-image-meta-property-</title_reference> and the value is the value of the header.</paragraph>
                    <paragraph>The response’s <title_reference>Content-Length</title_reference> header shall be equal to the value of
                        the <title_reference>x-image-meta-size</title_reference> header.</paragraph>
                    <paragraph>The response’s <title_reference>ETag</title_reference> header will always be equal to the
                        <title_reference>x-image-meta-checksum</title_reference> value.</paragraph>
                    <paragraph>The response’s <title_reference>x-image-meta-is_public</title_reference> value is a boolean indicating
                        whether the image is publicly available.</paragraph>
                    <paragraph>The response’s <title_reference>x-image-meta-owner</title_reference> value is a string which may either
                        be null or which will indicate the owner of the image.</paragraph>
                    <paragraph>The image data itself will be the body of the HTTP response returned
                        from the request, which will have content-type of
                        <title_reference>application/octet-stream</title_reference>.</paragraph>
                </note>
            </section>
            <section ids="add-a-new-image" names="add\ a\ new\ image">
                <title>Add a New Image</title>
                <paragraph>We have created a new virtual machine image in some way (created a
                    “golden image” or snapshotted/backed up an existing image) and we
                    wish to do two things:</paragraph>
                <block_quote>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>Store the disk image data in Glance</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Store metadata about this image in Glance</paragraph>
                        </list_item>
                    </bullet_list>
                </block_quote>
                <paragraph>We can do the above two activities in a single call to the Glance API.
                    Assuming, like in the examples above, that a Glance API server is running
                    at <literal>http://glance.openstack.example.org</literal>, we issue a <literal>POST</literal> request to add an image to
                    Glance:</paragraph>
                <literal_block xml:space="preserve">POST http://glance.openstack.example.org/v1/images</literal_block>
                <paragraph>The metadata about the image is sent to Glance in HTTP headers. The body
                    of the HTTP request to the Glance API will be the MIME-encoded disk
                    image data.</paragraph>
            </section>
            <section ids="reserve-a-new-image" names="reserve\ a\ new\ image">
                <title>Reserve a New Image</title>
                <paragraph>We can also perform the activities described in <reference name="Add a New Image" refid="add-a-new-image">Add a New Image</reference> using two
                    separate calls to the Image API; the first to register the image metadata, and
                    the second to add the image disk data. This is known as “reserving” an image.</paragraph>
                <paragraph>The first call should be a <literal>POST</literal> to <literal>http://glance.openstack.example.org/v1/images</literal>,
                    which will result in a new image id being registered with a status of
                    <literal>queued</literal>:</paragraph>
                <literal_block xml:space="preserve">{'image':
 {'status': 'queued',
  'id': '71c675ab-d94f-49cd-a114-e12490b328d9',
  ...}
 ...}</literal_block>
                <paragraph>The image data can then be added using a <literal>PUT</literal> to
                    <literal>http://glance.openstack.example.org/v1/images/71c675ab-d94f-49cd-a114-e12490b328d9</literal>.
                    The image status will then be set to <literal>active</literal> by Glance.</paragraph>
                <paragraph><strong>Image Metadata in HTTP Headers</strong></paragraph>
                <paragraph>Glance will view as image metadata any HTTP header that it receives in a
                    <literal>POST</literal> request where the header key is prefixed with the strings
                    <literal>x-image-meta-</literal> and <literal>x-image-meta-property-</literal>.</paragraph>
                <paragraph>The list of metadata headers that Glance accepts are listed below.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><literal>x-image-meta-name</literal></paragraph>
                        <paragraph>This header is required, unless reserving an image. Its value should be the
                            name of the image.</paragraph>
                        <paragraph>Note that the name of an image <emphasis>is not unique to a Glance node</emphasis>. It
                            would be an unrealistic expectation of users to know all the unique
                            names of all other user’s images.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>x-image-meta-id</literal></paragraph>
                        <paragraph>This header is optional.</paragraph>
                        <paragraph>When present, Glance will use the supplied identifier for the image.
                            If the identifier already exists in that Glance node, then a
                            <strong>409 Conflict</strong> will be returned by Glance. The value of the header
                            must be a uuid in hexadecimal string notation
                            (that is 71c675ab-d94f-49cd-a114-e12490b328d9).</paragraph>
                        <paragraph>When this header is <emphasis>not</emphasis> present, Glance will generate an identifier
                            for the image and return this identifier in the response (see below).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>x-image-meta-store</literal></paragraph>
                        <paragraph>This header is optional. Valid values are one of <literal>file</literal>, <literal>rbd</literal>,
                            <literal>swift</literal>, <literal>cinder</literal>, <literal>sheepdog</literal> or <literal>vsphere</literal>.</paragraph>
                        <paragraph>When present, Glance will attempt to store the disk image data in the
                            backing store indicated by the value of the header. If the Glance node
                            does not support the backing store, Glance will return a <strong>400 Bad Request</strong>.</paragraph>
                        <paragraph>When not present, Glance will store the disk image data in the backing
                            store that is marked as default. See the configuration option <literal>default_store</literal>
                            for more information.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>x-image-meta-disk_format</literal></paragraph>
                        <paragraph>This header is required, unless reserving an image. Valid values are one of
                            <literal>aki</literal>, <literal>ari</literal>, <literal>ami</literal>, <literal>raw</literal>, <literal>iso</literal>, <literal>vhd</literal>, <literal>vhdx</literal>, <literal>vdi</literal>,
                            <literal>qcow2</literal>, <literal>vmdk</literal> or <literal>ploop</literal>.</paragraph>
                        <paragraph>For more information, see <reference internal="True" refuri="formats#formats"><inline classes="std std-ref">Disk and Container Formats</inline></reference>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>x-image-meta-container_format</literal></paragraph>
                        <paragraph>This header is required, unless reserving an image. Valid values are one of
                            <literal>aki</literal>, <literal>ari</literal>, <literal>ami</literal>, <literal>bare</literal>, <literal>ova</literal>, <literal>ovf</literal>, or <literal>docker</literal>.</paragraph>
                        <paragraph>For more information, see <reference internal="True" refuri="formats#formats"><inline classes="std std-ref">Disk and Container Formats</inline></reference>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>x-image-meta-size</literal></paragraph>
                        <paragraph>This header is optional.</paragraph>
                        <paragraph>When present, Glance assumes that the expected size of the request body
                            will be the value of this header. If the length in bytes of the request
                            body <emphasis>does not match</emphasis> the value of this header, Glance will return a
                            <strong>400 Bad Request</strong>.</paragraph>
                        <paragraph>When not present, Glance will calculate the image’s size based on the size
                            of the request body.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>x-image-meta-checksum</literal></paragraph>
                        <paragraph>This header is optional. When present, it specifies the <strong>MD5</strong> checksum
                            of the image file data.</paragraph>
                        <paragraph>When present, Glance will verify the checksum generated from the back-end
                            store while storing your image against this value and return a
                            <strong>400 Bad Request</strong> if the values do not match.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>x-image-meta-is_public</literal></paragraph>
                        <paragraph>This header is optional.</paragraph>
                        <paragraph>When Glance finds the string “true” (case-insensitive), the image is marked as
                            a public one, meaning that any user may view its metadata and may read
                            the disk image from Glance.</paragraph>
                        <paragraph>When not present, the image is assumed to be <emphasis>not public</emphasis> and owned by
                            a user.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>x-image-meta-min_ram</literal></paragraph>
                        <paragraph>This header is optional. When present, it specifies the minimum amount of
                            RAM in megabytes required to run this image on a server.</paragraph>
                        <paragraph>When not present, the image is assumed to have a minimum RAM requirement of 0.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>x-image-meta-min_disk</literal></paragraph>
                        <paragraph>This header is optional. When present, it specifies the expected minimum disk
                            space in gigabytes required to run this image on a server.</paragraph>
                        <paragraph>When not present, the image is assumed to have a minimum disk space
                            requirement of 0.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>x-image-meta-owner</literal></paragraph>
                        <paragraph>This header is optional and only meaningful for admins.</paragraph>
                        <paragraph>Glance normally sets the owner of an image to be the tenant or user
                            (depending on the “owner_is_tenant” configuration option) of the
                            authenticated user issuing the request. However, if the authenticated user
                            has the Admin role, this default may be overridden by setting this header to
                            null or to a string identifying the owner of the image.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>x-image-meta-property-*</literal></paragraph>
                        <paragraph>When Glance receives any HTTP header whose key begins with the string prefix
                            <literal>x-image-meta-property-</literal>, Glance adds the key and value to a set of custom,
                            free-form image properties stored with the image. The key is a
                            lower-cased string following the prefix <literal>x-image-meta-property-</literal> with dashes
                            and punctuation replaced with underscores.</paragraph>
                        <paragraph>For example, if the following HTTP header were sent:</paragraph>
                        <literal_block xml:space="preserve">x-image-meta-property-distro  Ubuntu 10.10</literal_block>
                        <paragraph>then a key/value pair of “distro”/”Ubuntu 10.10” will be stored with the
                            image in Glance.</paragraph>
                        <paragraph>There is no limit on the number of free-form key/value attributes that can
                            be attached to the image. However, keep in mind that the 8K limit on the
                            size of all the HTTP headers sent in a request will effectively limit the
                            number of image properties.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="update-an-image" names="update\ an\ image">
                <title>Update an Image</title>
                <paragraph>Glance will consider any HTTP header that it receives in a <literal>PUT</literal> request
                    as an instance of image metadata. In this case, the header key should be
                    prefixed with the strings <literal>x-image-meta-</literal> and <literal>x-image-meta-property-</literal>.</paragraph>
                <paragraph>If an image was previously reserved, and thus is in the <literal>queued</literal> state, then
                    image data can be added by including it as the request body. If the image
                    already has data associated with it (for example, it is not in the <literal>queued</literal>
                    state), then including a request body will result in a <strong>409 Conflict</strong>
                    exception.</paragraph>
                <paragraph>On success, the <literal>PUT</literal> request will return the image metadata encoded as HTTP
                    headers.</paragraph>
                <paragraph>See more about image statuses here: <reference internal="True" refuri="statuses#image-statuses"><inline classes="std std-ref">Image Statuses</inline></reference></paragraph>
            </section>
            <section ids="list-image-memberships" names="list\ image\ memberships">
                <title>List Image Memberships</title>
                <paragraph>We want to see a list of the other system tenants (or users, if
                    “owner_is_tenant” is False) that may access a given virtual machine image that
                    the Glance server knows about. We take the <title_reference>uri</title_reference> field of the image data,
                    append <literal>/members</literal> to it, and issue a <literal>GET</literal> request on the resulting URL.</paragraph>
                <paragraph>Continuing from the example above, in order to get the memberships for the
                    first image returned, we can issue a <literal>GET</literal> request to the Glance
                    server for
                    <literal>http://glance.openstack.example.org/v1/images/71c675ab-d94f-49cd-a114-e12490b328d9/members</literal>.
                    And we will get back JSON data such as the following:</paragraph>
                <literal_block xml:space="preserve">{'members': [
 {'member_id': 'tenant1',
  'can_share': false}
 ...]}</literal_block>
                <paragraph>The <title_reference>member_id</title_reference> field identifies a tenant with which the image is shared. If
                    that tenant is authorized to further share the image, the <title_reference>can_share</title_reference> field is
                    <title_reference>true</title_reference>.</paragraph>
            </section>
            <section ids="list-shared-images" names="list\ shared\ images">
                <title>List Shared Images</title>
                <paragraph>We want to see a list of images which are shared with a given tenant. We issue
                    a <literal>GET</literal> request to <literal>http://glance.openstack.example.org/v1/shared-images/tenant1</literal>. We
                    will get back JSON data such as the following:</paragraph>
                <literal_block xml:space="preserve">{'shared_images': [
 {'image_id': '71c675ab-d94f-49cd-a114-e12490b328d9',
  'can_share': false}
 ...]}</literal_block>
                <paragraph>The <title_reference>image_id</title_reference> field identifies an image shared with the tenant named by
                    <emphasis>member_id</emphasis>. If the tenant is authorized to further share the image, the
                    <title_reference>can_share</title_reference> field is <title_reference>true</title_reference>.</paragraph>
            </section>
            <section ids="add-a-member-to-an-image" names="add\ a\ member\ to\ an\ image">
                <title>Add a Member to an Image</title>
                <paragraph>We want to authorize a tenant to access a private image. We issue a <literal>PUT</literal>
                    request to
                    <literal>http://glance.openstack.example.org/v1/images/71c675ab-d94f-49cd-a114-e12490b328d9/members/tenant1</literal>.
                    With no body, this will add the membership to the image, leaving existing
                    memberships unmodified and defaulting new memberships to have <title_reference>can_share</title_reference>
                    set to <title_reference>false</title_reference>. We may also optionally attach a body of the following form:</paragraph>
                <literal_block xml:space="preserve">{'member':
 {'can_share': true}
}</literal_block>
                <paragraph>If such a body is provided, both existing and new memberships will have
                    <title_reference>can_share</title_reference> set to the provided value (either <title_reference>true</title_reference> or <title_reference>false</title_reference>). This query
                    will return a 204 (“No Content”) status code.</paragraph>
            </section>
            <section ids="remove-a-member-from-an-image" names="remove\ a\ member\ from\ an\ image">
                <title>Remove a Member from an Image</title>
                <paragraph>We want to revoke a tenant’s right to access a private image. We issue a
                    <literal>DELETE</literal> request to <literal>http://glance.openstack.example.org/v1/images/1/members/tenant1</literal>.
                    This query will return a 204 (“No Content”) status code.</paragraph>
            </section>
            <section ids="replace-a-membership-list-for-an-image" names="replace\ a\ membership\ list\ for\ an\ image">
                <title>Replace a Membership List for an Image</title>
                <paragraph>The full membership list for a given image may be replaced. We issue a <literal>PUT</literal>
                    request to
                    <literal>http://glance.openstack.example.org/v1/images/71c675ab-d94f-49cd-a114-e12490b328d9/members</literal>
                    with a body of the following form:</paragraph>
                <literal_block xml:space="preserve">{'memberships': [
 {'member_id': 'tenant1',
  'can_share': false}
 ...]}</literal_block>
                <paragraph>All existing memberships which are not named in the replacement body are
                    removed, and those which are named have their <title_reference>can_share</title_reference> settings changed as
                    specified. (The <title_reference>can_share</title_reference> setting may be omitted, which will cause that
                    setting to remain unchanged in the existing memberships.) All new memberships
                    will be created, with <title_reference>can_share</title_reference> defaulting to <title_reference>false</title_reference> unless it is specified
                    otherwise.</paragraph>
            </section>
        </section>
        <section ids="image-membership-changes-in-version-2-0" names="image\ membership\ changes\ in\ version\ 2.0">
            <title>Image Membership Changes in Version 2.0</title>
            <paragraph>Version 2.0 of the Images API eliminates the <literal>can_share</literal> attribute of image
                membership. In the version 2.0 model, image sharing is not transitive.</paragraph>
            <paragraph>In version 2.0, image members have a <literal>status</literal> attribute that reflects
                how the image should be treated with respect to that image member’s image-list.</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>The <literal>status</literal> attribute may have one of three values: <literal>pending</literal>,
                        <literal>accepted</literal>, or <literal>rejected</literal>.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>By default, only those shared images with status <literal>accepted</literal> are included in
                        an image member’s image-list.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Only an image member may change his/her own membership status.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Only an image owner may create members on an image. The status of a newly
                        created image member is <literal>pending</literal>. The image owner cannot change the
                        status of a member.</paragraph>
                </list_item>
            </bullet_list>
            <section ids="distinctions-from-version-1-x-api-calls" names="distinctions\ from\ version\ 1.x\ api\ calls">
                <title>Distinctions from Version 1.x API Calls</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>The response to a request to list the members of an image has changed.</paragraph>
                        <paragraph>call: <literal>GET</literal> on <literal>/v2/images/{imageId}/members</literal></paragraph>
                        <paragraph>response: see the JSON schema at <literal>/v2/schemas/members</literal></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The request body in the call to create an image member has changed.</paragraph>
                        <paragraph>call: <literal>POST</literal> to <literal>/v2/images/{imageId}/members</literal></paragraph>
                        <paragraph>request body:</paragraph>
                        <literal_block xml:space="preserve">{ "member": "&lt;MEMBER_ID&gt;" }</literal_block>
                        <paragraph>where the {memberId} is the tenant ID of the image member.</paragraph>
                        <paragraph>The member status of a newly created image member is <literal>pending</literal>.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="new-api-calls" names="new\ api\ calls">
                <title>New API Calls</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Change the status of an image member</paragraph>
                        <paragraph>call: <literal>PUT</literal> on  <literal>/v2/images/{imageId}/members/{memberId}</literal></paragraph>
                        <paragraph>request body:</paragraph>
                        <literal_block xml:space="preserve">{ "status": "&lt;STATUS_VALUE&gt;" }</literal_block>
                        <paragraph>where &lt;STATUS_VALUE&gt; is <literal>pending</literal>, <literal>accepted</literal>, or <literal>rejected</literal>.
                            The {memberId} is the tenant ID of the image member.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
        </section>
        <section ids="images-v2-tasks-api" names="images\ v2\ tasks\ api">
            <title>Images v2 Tasks API</title>
            <paragraph>Version 2 of the OpenStack Images API introduces a Task resource that is used
                to create and monitor long-running asynchronous image-related processes.  See
                the <reference internal="True" refuri="../admin/tasks#tasks"><inline classes="std std-ref">Tasks</inline></reference> section of the Glance documentation for more
                information.</paragraph>
            <paragraph>The following Task calls are available:</paragraph>
            <section ids="create-a-task" names="create\ a\ task">
                <title>Create a Task</title>
                <paragraph>A user wants to initiate a task.  The user issues a <literal>POST</literal> request to
                    <literal>/v2/tasks</literal>.  The request body is of Content-type <literal>application/json</literal> and
                    must contain the following fields:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><literal>type</literal>: a string specified by the enumeration defined in the Task schema</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>input</literal>: a JSON object.  The content is defined by the cloud provider who
                            has exposed the endpoint being contacted</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>The response is a Task entity as defined by the Task schema.  It includes an
                    <literal>id</literal> field that can be used in a subsequent call to poll the task for status
                    changes.</paragraph>
                <paragraph>A task is created in <literal>pending</literal> status.</paragraph>
            </section>
            <section ids="show-a-task" names="show\ a\ task">
                <title>Show a Task</title>
                <paragraph>A user wants to see detailed information about a task the user owns.  The user
                    issues a <literal>GET</literal> request to <literal>/v2/tasks/{taskId}</literal>.</paragraph>
                <paragraph>The response is in <literal>application/json</literal> format.  The exact structure is given
                    by the task schema located at <literal>/v2/schemas/task</literal>.</paragraph>
            </section>
            <section ids="list-tasks" names="list\ tasks">
                <title>List Tasks</title>
                <paragraph>A user wants to see what tasks have been created in his or her project.  The
                    user issues a <literal>GET</literal> request to <literal>/v2/tasks</literal>.</paragraph>
                <paragraph>The response is in <literal>application/json</literal> format.  The exact structure is given
                    by the task schema located at <literal>/v2/schemas/tasks</literal>.</paragraph>
                <paragraph>Note that, as indicated by the schema, the list of tasks is provided in a
                    sparse format.  To see more information about a particular task in the list,
                    the user would use the show task call described above.</paragraph>
            </section>
            <section ids="filtering-and-sorting-the-tasks-list" names="filtering\ and\ sorting\ the\ tasks\ list">
                <title>Filtering and Sorting the Tasks List</title>
                <paragraph>The <literal>GET /v2/tasks</literal> request takes query parameters that server to filter the
                    returned list of tasks.  The following list details these query parameters.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><literal>status={status}</literal></paragraph>
                        <paragraph>Filters the list to display only those tasks in the specified status.  See
                            the task schema or the <reference internal="True" refuri="statuses#task-statuses"><inline classes="std std-ref">Task Statuses</inline></reference> section of this
                            documentation for the legal values to use for <literal>{status}</literal>.</paragraph>
                        <paragraph>For example, a request to <literal>GET /v2/tasks?status=pending</literal> would return only
                            those tasks whose current status is <literal>pending</literal>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>type={type}</literal></paragraph>
                        <paragraph>Filters the list to display only those tasks of the specified type.  See the
                            enumeration defined in the task schema for the legal values to use for
                            <literal>{type}</literal>.</paragraph>
                        <paragraph>For example, a request to <literal>GET /v2/tasks?type=import</literal> would return only
                            import tasks.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>sort_dir={direction}</literal></paragraph>
                        <paragraph>Sorts the list of tasks according to <literal>updated_at</literal> datetime.  Legal values
                            are <literal>asc</literal> (ascending) and <literal>desc</literal> (descending).  By default, the task list
                            is sorted by <literal>created_at</literal> time in descending chronological order.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
        </section>
        <section ids="api-message-localization" names="api\ message\ localization">
            <title>API Message Localization</title>
            <paragraph>Glance supports HTTP message localization. For example, an HTTP client can
                receive API messages in Chinese even if the locale language of the server is
                English.</paragraph>
            <section ids="how-to-use-it" names="how\ to\ use\ it">
                <title>How to use it</title>
                <paragraph>To receive localized API messages, the HTTP client needs to specify the
                    <strong>Accept-Language</strong> header to indicate the language that will translate the
                    message. For more information about Accept-Language, please refer to <reference refuri="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html</reference></paragraph>
                <paragraph>A typical curl API request will be like below:</paragraph>
                <literal_block xml:space="preserve">curl -i -X GET -H 'Accept-Language: zh' -H 'Content-Type: application/json'
http://glance.openstack.example.org/v2/images/aaa</literal_block>
                <paragraph>Then the response will be like the following:</paragraph>
                <literal_block xml:space="preserve">HTTP/1.1 404 Not Found
Content-Length: 234
Content-Type: text/html; charset=UTF-8
X-Openstack-Request-Id: req-54d403a0-064e-4544-8faf-4aeef086f45a
Date: Sat, 22 Feb 2014 06:26:26 GMT

&lt;html&gt;
&lt;head&gt;
&lt;title&gt;404 Not Found&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;404 Not Found&lt;/h1&gt;
&amp;#25214;&amp;#19981;&amp;#21040;&amp;#20219;&amp;#20309;&amp;#20855;&amp;#26377;&amp;#26631;&amp;#35782; aaa &amp;#30340;&amp;#26144;&amp;#20687;&lt;br /&gt;&lt;br /&gt;
&lt;/body&gt;
&lt;/html&gt;</literal_block>
                <note>
                    <paragraph>Make sure to have a language package under /usr/share/locale-langpack/ on
                        the target Glance server.</paragraph>
                </note>
            </section>
        </section>
    </section>
</document>
