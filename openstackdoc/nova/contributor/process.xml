<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/nova/doc/source/contributor/process.rst">
    <comment xml:space="preserve">Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.</comment>
    <target refid="process"></target>
    <section ids="nova-team-process process" names="nova\ team\ process process">
        <title>Nova team process</title>
        <paragraph>Nova is always evolving its processes, but it's important to explain why we
            have them: so we can all work to ensure that the interactions we need to
            happen do happen. The process exists to make productive communication between
            all members of our community easier.</paragraph>
        <section ids="openstack-wide-patterns" names="openstack\ wide\ patterns">
            <title>OpenStack Wide Patterns</title>
            <paragraph>Nova follows most of the generally adopted norms for OpenStack projects.
                You can get more details here:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph><reference refuri="http://docs.openstack.org/infra/manual/developers.html">http://docs.openstack.org/infra/manual/developers.html</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference refuri="http://docs.openstack.org/project-team-guide/">http://docs.openstack.org/project-team-guide/</reference></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>If you are new to Nova, please read this first: <reference internal="True" refuri="how-to-get-involved#getting-involved"><inline classes="std std-ref">How to get (more) involved with Nova</inline></reference>.</paragraph>
        </section>
        <section ids="dates-overview" names="dates\ overview">
            <title>Dates overview</title>
            <paragraph>For Pike, please see:
                <reference refuri="https://wiki.openstack.org/wiki/Nova/Pike_Release_Schedule">https://wiki.openstack.org/wiki/Nova/Pike_Release_Schedule</reference></paragraph>
            <comment xml:space="preserve">note: Throughout this document any link which references the name of a
release cycle in the link can usually be changed to the name of the
current cycle to get up to date information.</comment>
            <section ids="feature-freeze" names="feature\ freeze">
                <title>Feature Freeze</title>
                <paragraph>Feature freeze primarily provides a window of time to help the horizontal
                    teams prepare their items for release, while giving developers time to
                    focus on stabilising what is currently in master, and encouraging users
                    and packagers to perform tests (automated, and manual) on the release, to
                    spot any major bugs.</paragraph>
                <paragraph>The Nova release process is aligned with the <reference name="development cycle schedule" refuri="http://docs.openstack.org/project-team-guide/release-management.html#typical-development-cycle-schedule">development cycle schedule</reference><target ids="development-cycle-schedule" names="development\ cycle\ schedule" refuri="http://docs.openstack.org/project-team-guide/release-management.html#typical-development-cycle-schedule"></target>
                    used by many OpenStack projects, including the following steps.</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Feature Proposal Freeze</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>make sure all code is up for review</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>so we can optimise for completed features, not lots of half
                                    completed features</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>Feature Freeze</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>make sure all feature code is merged</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>String Freeze</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>give translators time to translate all our strings</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Note: debug logs are no longer translated</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>Dependency Freeze</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>time to co-ordinate the final list of dependencies, and give packagers
                                    time to package them</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>generally it is also quite destabilising to take upgrades (beyond
                                    bug fixes) this late</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                </bullet_list>
                <paragraph>As with all processes here, there are exceptions. The exceptions at
                    this stage need to be discussed with the horizontal teams that might be
                    affected by changes beyond this point, and as such are discussed with
                    one of the OpenStack release managers.</paragraph>
            </section>
            <section ids="spec-and-blueprint-approval-freeze" names="spec\ and\ blueprint\ approval\ freeze">
                <title>Spec and Blueprint Approval Freeze</title>
                <paragraph>This is a (mostly) Nova specific process.</paragraph>
                <paragraph>Why we have a Spec Freeze:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>specs take a long time to review and reviewing specs throughout the cycle
                            distracts from code reviews</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>keeping specs "open" and being slow at reviewing them (or just
                            ignoring them) annoys the spec submitters</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>we generally have more code submitted that we can review, this time
                            bounding is a useful way to limit the number of submissions</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>By the freeze date, we expect all blueprints that will be approved for the
                    cycle to be listed on launchpad and all relevant specs to be merged. For Pike,
                    blueprints can be found at <reference refuri="https://blueprints.launchpad.net/nova/pike">https://blueprints.launchpad.net/nova/pike</reference> and
                    specs at
                    <reference refuri="https://specs.openstack.org/openstack/nova-specs/specs/pike/index.html">https://specs.openstack.org/openstack/nova-specs/specs/pike/index.html</reference></paragraph>
                <paragraph>Starting with Liberty, we are keeping a backlog open for submission at all
                    times. Note: the focus is on accepting and agreeing problem statements
                    as being in scope, rather than queueing up work items for the next
                    release. We are still working on a new lightweight process to get out of
                    the backlog and approved for a particular release. For more details on
                    backlog specs, please see:
                    <reference refuri="http://specs.openstack.org/openstack/nova-specs/specs/backlog/index.html">http://specs.openstack.org/openstack/nova-specs/specs/backlog/index.html</reference></paragraph>
                <paragraph>There can be exceptions, usually it's an urgent feature request that
                    comes up after the initial deadline. These will generally be discussed
                    at the weekly Nova meeting, by adding the spec or blueprint to discuss
                    in the appropriate place in the meeting agenda here (ideally make
                    yourself available to discuss the blueprint, or alternatively make your
                    case on the ML before the meeting):
                    <reference refuri="https://wiki.openstack.org/wiki/Meetings/Nova#Agenda_for_next_meeting">https://wiki.openstack.org/wiki/Meetings/Nova#Agenda_for_next_meeting</reference></paragraph>
            </section>
            <section ids="non-priority-feature-freeze" names="non-priority\ feature\ freeze">
                <title>Non-priority Feature Freeze</title>
                <paragraph>This is a Nova specific process.</paragraph>
                <paragraph>This only applies to low priority blueprints in this list:
                    <reference refuri="https://blueprints.launchpad.net/nova/pike">https://blueprints.launchpad.net/nova/pike</reference></paragraph>
                <paragraph>We currently have a very finite amount of review bandwidth. In order to
                    make code review time for the agreed community wide priorities, we have
                    to not do some other things. In each cycle, milestones are used to bound
                    when certain types of work will be active and reviewed and to avoid crushing
                    the gate with too much code near the end of the cycle.</paragraph>
                <paragraph>For example, in the Liberty cycle, we reserved the liberty-3 milestone for
                    priority features and bug fixes and did not merge any non-priority things
                    during liberty-3. This meant that liberty-2 was the "Feature Freeze" for
                    blueprints that were not a priority for the Liberty cycle.</paragraph>
                <paragraph>You can see the list of priorities for each release:
                    <reference refuri="http://specs.openstack.org/openstack/nova-specs/#priorities">http://specs.openstack.org/openstack/nova-specs/#priorities</reference></paragraph>
                <paragraph>For things that are very close to merging, it's possible to request an
                    exception for one week after the freeze date, given the patches get
                    enough +2s from the core team to get the code merged. But we expect this
                    list to be zero, if everything goes to plan (no massive gate failures,
                    etc). For history of the process see:
                    <reference refuri="http://lists.openstack.org/pipermail/openstack-dev/2015-July/070920.html">http://lists.openstack.org/pipermail/openstack-dev/2015-July/070920.html</reference></paragraph>
                <paragraph>Exception process:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Please add request in here:
                            <reference refuri="https://etherpad.openstack.org/p/pike-nova-non-priority-feature-freeze">https://etherpad.openstack.org/p/pike-nova-non-priority-feature-freeze</reference>
                            (ideally with core reviewers to sponsor your patch, normally the
                            folks who have already viewed those patches)</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>make sure you make your request before the end of the feature freeze
                            exception period</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>nova-drivers will meet to decide what gets an exception (for some history
                            see:
                            <reference refuri="http://lists.openstack.org/pipermail/openstack-dev/2015-February/056208.html">http://lists.openstack.org/pipermail/openstack-dev/2015-February/056208.html</reference>)</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>an initial list of exceptions (probably just a PTL compiled list at
                            that point) will be available for discussion during the next Nova meeting</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>the aim is to merge the code for all exceptions early in the following week</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Alternatives:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>It was hoped to make this a continuous process using "slots" to
                            control what gets reviewed, but this was rejected by the community
                            when it was last discussed. There is hope this can be resurrected to
                            avoid the "lumpy" nature of this process.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Currently the runways/kanban ideas are blocked on us adopting
                            something like phabricator that could support such workflows</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="string-freeze" names="string\ freeze">
                <title>String Freeze</title>
                <paragraph>String Freeze provides an opportunity for translators to translate user-visible
                    messages to a variety of languages. By not changing strings after the date of
                    the string freeze, the job of the translators is made a bit easier. For more
                    information on string and other OpenStack-wide release processes see <reference name="the release management docs" refuri="http://docs.openstack.org/project-team-guide/release-management.html">the
                        release management docs</reference><target ids="the-release-management-docs" names="the\ release\ management\ docs" refuri="http://docs.openstack.org/project-team-guide/release-management.html"></target>.</paragraph>
            </section>
        </section>
        <section ids="how-do-i-get-my-code-merged" names="how\ do\ i\ get\ my\ code\ merged?">
            <title>How do I get my code merged?</title>
            <paragraph>OK, so you are new to Nova, and you have been given a feature to
                implement. How do I make that happen?</paragraph>
            <paragraph>You can get most of your questions answered here:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference refuri="http://docs.openstack.org/infra/manual/developers.html">http://docs.openstack.org/infra/manual/developers.html</reference></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>But let's put a Nova specific twist on things...</paragraph>
            <section ids="overview" names="overview">
                <title>Overview</title>
                <image alt="Flow chart showing the Nova bug/feature process" candidates="{'*': u'_static/images/nova-spec-process.svg'}" uri="_static/images/nova-spec-process.svg"></image>
            </section>
            <section ids="where-do-you-track-bugs" names="where\ do\ you\ track\ bugs?">
                <title>Where do you track bugs?</title>
                <paragraph>We track bugs here:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference refuri="http://bugs.launchpad.net/nova">http://bugs.launchpad.net/nova</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>If you fix an issue, please raise a bug so others who spot that issue
                    can find the fix you kindly created for them.</paragraph>
                <paragraph>Also before submitting your patch it's worth checking to see if someone
                    has already fixed it for you (Launchpad helps you with that, at little,
                    when you create the bug report).</paragraph>
            </section>
            <section ids="when-do-i-need-a-blueprint-vs-a-spec" names="when\ do\ i\ need\ a\ blueprint\ vs\ a\ spec?">
                <title>When do I need a blueprint vs a spec?</title>
                <paragraph>For more details see:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference refuri="http://docs.openstack.org/developer/nova/blueprints.html">http://docs.openstack.org/developer/nova/blueprints.html</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>To understand this question, we need to understand why blueprints and
                    specs are useful.</paragraph>
                <paragraph>But here is the rough idea:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>if it needs a spec, it will need a blueprint.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>if it's an API change, it needs a spec.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>if it's a single small patch that touches a small amount of code,
                            with limited deployer and doc impact, it probably doesn't need a
                            spec.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>If you are unsure, please ask johnthetubaguy on IRC, or one of the other
                    nova-drivers.</paragraph>
            </section>
            <section ids="how-do-i-get-my-blueprint-approved" names="how\ do\ i\ get\ my\ blueprint\ approved?">
                <title>How do I get my blueprint approved?</title>
                <paragraph>So you need your blueprint approved? Here is how:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>if you don't need a spec, please add a link to your blueprint to the
                            agenda for the next nova meeting:
                            <reference refuri="https://wiki.openstack.org/wiki/Meetings/Nova">https://wiki.openstack.org/wiki/Meetings/Nova</reference></paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>be sure your blueprint description has enough context for the
                                    review in that meeting.</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>if you need a spec, then please submit a nova-spec for review, see:
                            <reference refuri="http://docs.openstack.org/infra/manual/developers.html">http://docs.openstack.org/infra/manual/developers.html</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Got any more questions? Contact johnthetubaguy or one of the other
                    nova-specs-core who are awake at the same time as you. IRC is best as
                    you will often get an immediate response, if they are too busy send
                    him/her an email.</paragraph>
            </section>
            <section ids="how-do-i-get-a-procedural-2-removed-from-my-patch" names="how\ do\ i\ get\ a\ procedural\ -2\ removed\ from\ my\ patch?">
                <title>How do I get a procedural -2 removed from my patch?</title>
                <paragraph>When feature freeze hits, any patches for blueprints that are still in review
                    get a procedural -2 to stop them merging. In Nova a blueprint is only approved
                    for a single release. To have the -2 removed, you need to get the blueprint
                    approved for the current release (see <reference name="How do I get my blueprint approved?" refid="how-do-i-get-my-blueprint-approved">How do I get my blueprint approved?</reference>).</paragraph>
            </section>
            <section ids="why-are-the-reviewers-being-mean-to-me" names="why\ are\ the\ reviewers\ being\ mean\ to\ me?">
                <title>Why are the reviewers being mean to me?</title>
                <paragraph>Code reviews take intense concentration and a lot of time. This tends to
                    lead to terse responses with very little preamble or nicety. That said,
                    there's no excuse for being actively rude or mean. OpenStack has a Code
                    of Conduct (<reference refuri="https://www.openstack.org/legal/community-code-of-conduct/">https://www.openstack.org/legal/community-code-of-conduct/</reference>)
                    and if you feel this has been breached please raise the matter
                    privately. Either with the relevant parties, the PTL or failing those,
                    the OpenStack Foundation.</paragraph>
                <paragraph>That said, there are many objective reasons for applying a -1 or -2 to a
                    patch:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Firstly and simply, patches must address their intended purpose
                            successfully.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Patches must not have negative side-effects like wiping the database
                            or causing a functional regression. Usually removing anything,
                            however tiny, requires a deprecation warning be issued for a cycle.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Code must be maintainable, that is it must adhere to coding standards
                            and be as readable as possible for an average OpenStack developer
                            (we acknowledge that this person is not easy to define).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Patches must respect the direction of the project, for example they
                            should not make approved specs substantially more difficult to
                            implement.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Release coordinators need the correct process to be followed so scope
                            can be tracked accurately. Bug fixes require bugs, features require
                            blueprints and all but the simplest features require specs. If there
                            is a blueprint, it must be approved for the release/milestone the
                            patch is attempting to merge into.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Please particularly bear in mind that a -2 does not mean "never ever"
                    nor does it mean "your idea is bad and you are dumb". It simply means
                    "do not merge today". You may need to wait some time, rethink your
                    approach or even revisit the problem definition but there is almost
                    always some way forward. The core who applied the -2 should tell you
                    what you need to do.</paragraph>
            </section>
            <section ids="my-code-review-seems-stuck-what-can-i-do" names="my\ code\ review\ seems\ stuck,\ what\ can\ i\ do?">
                <title>My code review seems stuck, what can I do?</title>
                <paragraph>First and foremost - address any -1s and -2s! The review load on Nova is
                    high enough that patches with negative reviews often get filtered out
                    entirely. A few tips:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Be precise. Ensure you're not talking at cross purposes.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Try to understand where the reviewer is coming from. They may have a
                            very different perspective and/or use-case to you.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>If you don't understand the problem, ask them to explain - this is
                            common and helpful behaviour.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Be positive. Everyone's patches have issues, including core
                            reviewers. No-one cares once the issues are fixed.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Try not to flip-flop. When two reviewers are pulling you in different
                            directions, stop pushing code and negotiate the best way forward.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>If the reviewer does not respond to replies left on the patchset,
                            reach out to them on IRC or email. If they still don't respond, you
                            can try to ask their colleagues if they're on holiday (or simply
                            wait). Finally, you can ask for mediation in the Nova meeting by
                            adding it to the agenda
                            (<reference refuri="https://wiki.openstack.org/wiki/Meetings/Nova">https://wiki.openstack.org/wiki/Meetings/Nova</reference>). This is also what
                            you should do if you are unable to negotiate a resolution to an
                            issue.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Secondly, Nova is a big project, be aware of the average wait times:
                    <reference refuri="http://russellbryant.net/openstack-stats/nova-openreviews.html">http://russellbryant.net/openstack-stats/nova-openreviews.html</reference></paragraph>
                <paragraph>Eventually you should get some +1s from people working through the
                    review queue. Expect to get -1s as well. You can ask for reviews within
                    your company, 1-2 are useful (not more), especially if those reviewers
                    are known to give good reviews. You can spend some time while you wait
                    reviewing other people's code - they may reciprocate and you may learn
                    something (<reference internal="True" refuri="how-to-get-involved#why-plus1"><inline classes="std std-ref">Why do code reviews when I'm not core?</inline></reference>).</paragraph>
                <paragraph>If you've waited an appropriate amount of time and you haven't had any
                    +1s, you can ask on IRC for reviews. Please don't ask for core review
                    straight away, especially not directly (IRC or email). Core reviewer
                    time is very valuable and gaining some +1s is a good way to show your
                    patch meets basic quality standards.</paragraph>
                <paragraph>Once you have a few +1s, be patient. Remember the average wait times.
                    You can ask for reviews each week in IRC, it helps to ask when cores are
                    awake.</paragraph>
                <section ids="bugs" names="bugs">
                    <title>Bugs</title>
                    <paragraph>It helps to apply correct tracking information.</paragraph>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph>Put "Closes-Bug", "Partial-Bug" or "Related-Bug" in the commit
                                message tags as necessary.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>If you have to raise a bug in Launchpad first, do it - this helps
                                someone else find your fix.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Make sure the bug has the correct priority and tag set:
                                <reference refuri="https://wiki.openstack.org/wiki/Nova/BugTriage#Step_2:_Triage_Tagged_Bugs">https://wiki.openstack.org/wiki/Nova/BugTriage#Step_2:_Triage_Tagged_Bugs</reference></paragraph>
                        </list_item>
                    </bullet_list>
                </section>
                <section ids="features" names="features">
                    <title>Features</title>
                    <paragraph>Again, it helps to apply correct tracking information. For
                        blueprint-only features:</paragraph>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph>Put your blueprint in the commit message, EG "blueprint
                                simple-feature".</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Mark the blueprint as NeedsCodeReview if you are finished.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Maintain the whiteboard on the blueprint so it's easy to understand
                                which patches need reviews.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Use a single topic for all related patches. All patches for one
                                blueprint should share a topic.</paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph>For blueprint and spec features, do everything for blueprint-only
                        features and also:</paragraph>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph>If it's a project or subteam priority, add it to:
                                <reference refuri="https://etherpad.openstack.org/p/pike-nova-priorities-tracking">https://etherpad.openstack.org/p/pike-nova-priorities-tracking</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Ensure your spec is approved for the current release cycle.</paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph>If your code is a project or subteam priority, the cores interested in
                        that priority might not mind a ping after it has sat with +1s for a
                        week. If you abuse this privilege, you'll lose respect.</paragraph>
                    <paragraph>If it's not a priority, your blueprint/spec has been approved for the
                        cycle and you have been patient, you can raise it during the Nova
                        meeting. The outcome may be that your spec gets unapproved for the
                        cycle, so that priority items can take focus. If this happens to you,
                        sorry - it should not have been approved in the first place, Nova team
                        bit off more than they could chew, it is their mistake not yours. You
                        can re-propose it for the next cycle.</paragraph>
                    <paragraph>If it's not a priority and your spec has not been approved, your code
                        will not merge this cycle. Please re-propose your spec for the next
                        cycle.</paragraph>
                </section>
            </section>
        </section>
        <section ids="nova-process-mission" names="nova\ process\ mission">
            <title>Nova Process Mission</title>
            <paragraph>This section takes a high level look at the guiding principles behind
                the Nova process.</paragraph>
            <section ids="open" names="open">
                <title>Open</title>
                <paragraph>Our mission is to have:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Open Source</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Open Design</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Open Development</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Open Community</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>We have to work out how to keep communication open in all areas. We need
                    to be welcoming and mentor new people, and make it easy for them to
                    pickup the knowledge they need to get involved with OpenStack. For more
                    info on Open, please see: <reference refuri="https://wiki.openstack.org/wiki/Open">https://wiki.openstack.org/wiki/Open</reference></paragraph>
            </section>
            <section ids="interoperable-api-supporting-a-vibrant-ecosystem" names="interoperable\ api,\ supporting\ a\ vibrant\ ecosystem">
                <title>Interoperable API, supporting a vibrant ecosystem</title>
                <paragraph>An interoperable API that gives users on-demand access to compute
                    resources is at the heart of Nova's mission:
                    <reference refuri="http://docs.openstack.org/developer/nova/project_scope.html#mission">http://docs.openstack.org/developer/nova/project_scope.html#mission</reference></paragraph>
                <paragraph>Nova has a vibrant ecosystem of tools built on top of the current Nova
                    API. All features should be designed to work with all technology
                    combinations, so the feature can be adopted by our ecosystem. If a new
                    feature is not adopted by the ecosystem, it will make it hard for your
                    users to make use of those features, defeating most of the reason to add
                    the feature in the first place. The microversion system allows users to
                    isolate themselves</paragraph>
                <paragraph>This is a very different aim to being "pluggable" or wanting to expose
                    all capabilities to end users. At the same time, it is not just a
                    "lowest common denominator" set of APIs. It should be discoverable which
                    features are available, and while no implementation details should leak
                    to the end users, purely admin concepts may need to understand
                    technology specific details that back the interoperable and more
                    abstract concepts that are exposed to the end user. This is a hard goal,
                    and one area we currently don't do well is isolating image creators from
                    these technology specific details.</paragraph>
            </section>
            <section ids="smooth-upgrades" names="smooth\ upgrades">
                <title>Smooth Upgrades</title>
                <paragraph>As part of our mission for a vibrant ecosystem around our APIs, we want
                    to make it easy for those deploying Nova to upgrade with minimal impact
                    to their users. Here is the scope of Nova's upgrade support:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>upgrade from any commit, to any future commit, within the same major
                            release</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>only support upgrades between N and N+1 major versions, to reduce
                            technical debt relating to upgrades</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Here are some of the things we require developers to do, to help with
                    upgrades:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>when replacing an existing feature or configuration option, make it
                            clear how to transition to any replacement</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>deprecate configuration options and features before removing them</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>i.e. continue to support and test features for at least one
                                    release before they are removed</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>this gives time for operator feedback on any removals</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>End User API will always be kept backwards compatible</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="interaction-goals" names="interaction\ goals">
                <title>Interaction goals</title>
                <paragraph>When thinking about the importance of process, we should take a look at:
                    <reference refuri="http://agilemanifesto.org">http://agilemanifesto.org</reference></paragraph>
                <paragraph>With that in mind, let's look at how we want different members of the
                    community to interact. Let's start with looking at issues we have tried
                    to resolve in the past (currently in no particular order). We must:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>have a way for everyone to review blueprints and designs, including
                            allowing for input from operators and all types of users (keep it
                            open)</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>take care to not expand Nova's scope any more than absolutely
                            necessary</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>ensure we get sufficient focus on the core of Nova so that we can
                            maintain or improve the stability and flexibility of the overall
                            codebase</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>support any API we release approximately forever. We currently
                            release every commit, so we're motivated to get the API right the first
                            time</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>avoid low priority blueprints that slow work on high priority work,
                            without blocking those forever</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>focus on a consistent experience for our users, rather than ease of
                            development</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>optimise for completed blueprints, rather than more half completed
                            blueprints, so we get maximum value for our users out of our review
                            bandwidth</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>focus efforts on a subset of patches to allow our core reviewers to
                            be more productive</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>set realistic expectations on what can be reviewed in a particular
                            cycle, to avoid sitting in an expensive rebase loop</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>be aware of users that do not work on the project full time</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>be aware of users that are only able to work on the project at
                            certain times that may not align with the overall community cadence</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>discuss designs for non-trivial work before implementing it, to avoid
                            the expense of late-breaking design issues</paragraph>
                    </list_item>
                </bullet_list>
            </section>
        </section>
        <section ids="faqs" names="faqs">
            <title>FAQs</title>
            <section ids="why-bother-with-all-this-process" names="why\ bother\ with\ all\ this\ process?">
                <title>Why bother with all this process?</title>
                <paragraph>We are a large community, spread across multiple timezones, working with
                    several horizontal teams. Good communication is a challenge and the
                    processes we have are mostly there to try and help fix some
                    communication challenges.</paragraph>
                <paragraph>If you have a problem with a process, please engage with the community,
                    discover the reasons behind our current process, and help fix the issues
                    you are experiencing.</paragraph>
            </section>
            <section ids="why-don-t-you-remove-old-process" names="why\ don't\ you\ remove\ old\ process?">
                <title>Why don't you remove old process?</title>
                <paragraph>We do! For example, in Liberty we stopped trying to predict the
                    milestones when a feature will land.</paragraph>
                <paragraph>As we evolve, it is important to unlearn new habits and explore if
                    things get better if we choose to optimise for a different set of
                    issues.</paragraph>
            </section>
            <section ids="why-are-specs-useful" names="why\ are\ specs\ useful?">
                <title>Why are specs useful?</title>
                <paragraph>Spec reviews allow anyone to step up and contribute to reviews, just
                    like with code. Before we used gerrit, it was a very messy review
                    process, that felt very "closed" to most people involved in that
                    process.</paragraph>
                <paragraph>As Nova has grown in size, it can be hard to work out how to modify Nova
                    to meet your needs. Specs are a great way of having that discussion with
                    the wider Nova community.</paragraph>
                <paragraph>For Nova to be a success, we need to ensure we don't break our existing
                    users. The spec template helps focus the mind on the impact your change
                    might have on existing users and gives an opportunity to discuss the
                    best way to deal with those issues.</paragraph>
                <paragraph>However, there are some pitfalls with the process. Here are some top
                    tips to avoid them:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>keep it simple. Shorter, simpler, more decomposed specs are quicker
                            to review and merge much quicker (just like code patches).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>specs can help with documentation but they are only intended to
                            document the design discussion rather than document the final code.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>don't add details that are best reviewed in code, it's better to
                            leave those things for the code review.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="if-we-have-specs-why-still-have-blueprints" names="if\ we\ have\ specs,\ why\ still\ have\ blueprints?">
                <title>If we have specs, why still have blueprints?</title>
                <paragraph>We use specs to record the design agreement, we use blueprints to track
                    progress on the implementation of the spec.</paragraph>
                <paragraph>Currently, in Nova, specs are only approved for one release, and must be
                    re-submitted for each release you want to merge the spec, although that
                    is currently under review.</paragraph>
            </section>
            <section ids="why-do-we-have-priorities" names="why\ do\ we\ have\ priorities?">
                <title>Why do we have priorities?</title>
                <paragraph>To be clear, there is no "nova dev team manager", we are an open team of
                    professional software developers, that all work for a variety of (mostly
                    competing) companies that collaborate to ensure the Nova project is a
                    success.</paragraph>
                <paragraph>Over time, a lot of technical debt has accumulated, because there was a
                    lack of collective ownership to solve those cross-cutting concerns.
                    Before the Kilo release, it was noted that progress felt much slower,
                    because we were unable to get appropriate attention on the architectural
                    evolution of Nova. This was important, partly for major concerns like
                    upgrades and stability. We agreed it's something we all care about and
                    it needs to be given priority to ensure that these things get fixed.</paragraph>
                <paragraph>Since Kilo, priorities have been discussed at the summit. This turns in
                    to a spec review which eventually means we get a list of priorities
                    here: <reference refuri="http://specs.openstack.org/openstack/nova-specs/#priorities">http://specs.openstack.org/openstack/nova-specs/#priorities</reference></paragraph>
                <paragraph>Allocating our finite review bandwidth to these efforts means we have to
                    limit the reviews we do on non-priority items. This is mostly why we now
                    have the non-priority Feature Freeze. For more on this, see below.</paragraph>
                <paragraph>Blocking a priority effort is one of the few widely acceptable reasons
                    to block someone adding a feature. One of the great advantages of being
                    more explicit about that relationship is that people can step up to help
                    review and/or implement the work that is needed to unblock the feature
                    they want to get landed. This is a key part of being an Open community.</paragraph>
            </section>
            <section ids="why-is-there-a-feature-freeze-and-string-freeze-in-nova" names="why\ is\ there\ a\ feature\ freeze\ (and\ string\ freeze)\ in\ nova?">
                <title>Why is there a Feature Freeze (and String Freeze) in Nova?</title>
                <paragraph>The main reason Nova has a feature freeze is that it allows people
                    working on docs and translations to sync up with the latest code.
                    Traditionally this happens at the same time across multiple projects, so
                    the docs are synced between what used to be called the "integrated
                    release".</paragraph>
                <paragraph>We also use this time period as an excuse to focus our development
                    efforts on bug fixes, ideally lower risk bug fixes, and improving test
                    coverage.</paragraph>
                <paragraph>In theory, with a waterfall hat on, this would be a time for testing and
                    stabilisation of the product. In Nova we have a much stronger focus on
                    keeping every commit stable, by making use of extensive continuous
                    testing. In reality, we frequently see the biggest influx of fixes in
                    the few weeks after the release, as distributions do final testing of
                    the released code.</paragraph>
                <paragraph>It is hoped that the work on Feature Classification will lead us to
                    better understand the levels of testing of different Nova features, so
                    we will be able to reduce and dependency between Feature Freeze and
                    regression testing. It is also likely that the move away from
                    "integrated" releases will help find a more developer friendly approach
                    to keep the docs and translations in sync.</paragraph>
            </section>
            <section ids="why-is-there-a-non-priority-feature-freeze-in-nova" names="why\ is\ there\ a\ non-priority\ feature\ freeze\ in\ nova?">
                <title>Why is there a non-priority Feature Freeze in Nova?</title>
                <paragraph>We have already discussed why we have priority features.</paragraph>
                <paragraph>The rate at which code can be merged to Nova is primarily constrained by
                    the amount of time able to be spent reviewing code. Given this,
                    earmarking review time for priority items means depriving it from
                    non-priority items.</paragraph>
                <paragraph>The simplest way to make space for the priority features is to stop
                    reviewing and merging non-priority features for a whole milestone. The
                    idea being developers should focus on bug fixes and priority features
                    during that milestone, rather than working on non-priority features.</paragraph>
                <paragraph>A known limitation of this approach is developer frustration. Many
                    developers are not being given permission to review code, work on bug
                    fixes or work on priority features, and so feel very unproductive
                    upstream. An alternative approach of "slots" or "runways" has been
                    considered, that uses a kanban style approach to regulate the influx of
                    work onto the review queue. We are yet to get agreement on a more
                    balanced approach, so the existing system is being continued to ensure
                    priority items are more likely to get the attention they require.</paragraph>
            </section>
            <section ids="why-do-you-still-use-launchpad" names="why\ do\ you\ still\ use\ launchpad?">
                <title>Why do you still use Launchpad?</title>
                <paragraph>We are actively looking for an alternative to Launchpad's bugs and
                    blueprints.</paragraph>
                <paragraph>Originally the idea was to create Storyboard. However development
                    stalled for a while so interest waned. The project has become more active
                    recently so it may be worth looking again:
                    <reference refuri="https://storyboard.openstack.org/#!/page/about">https://storyboard.openstack.org/#!/page/about</reference></paragraph>
            </section>
            <section ids="when-should-i-submit-my-spec" names="when\ should\ i\ submit\ my\ spec?">
                <title>When should I submit my spec?</title>
                <paragraph>Ideally we want to get all specs for a release merged before the summit.
                    For things that we can't get agreement on, we can then discuss those at
                    the summit. There will always be ideas that come up at the summit and
                    need to be finalised after the summit. This causes a rush which is best
                    avoided.</paragraph>
            </section>
            <section ids="how-can-i-get-my-code-merged-faster" names="how\ can\ i\ get\ my\ code\ merged\ faster?">
                <title>How can I get my code merged faster?</title>
                <paragraph>So no-one is coming to review your code, how do you speed up that
                    process?</paragraph>
                <paragraph>Firstly, make sure you are following the above process. If it's a
                    feature, make sure you have an approved blueprint. If it's a bug, make
                    sure it is triaged, has its priority set correctly, it has the correct
                    bug tag and is marked as in progress. If the blueprint has all the code
                    up for review, change it from Started into NeedsCodeReview so people
                    know only reviews are blocking you, make sure it hasn't accidentally got
                    marked as implemented.</paragraph>
                <paragraph>Secondly, if you have a negative review (-1 or -2) and you responded to
                    that in a comment or uploading a new change with some updates, but that
                    reviewer hasn't come back for over a week, it's probably a good time to
                    reach out to the reviewer on IRC (or via email) to see if they could
                    look again now you have addressed their comments. If you can't get
                    agreement, and your review gets stuck (i.e. requires mediation), you can
                    raise your patch during the Nova meeting and we will try to resolve any
                    disagreement.</paragraph>
                <paragraph>Thirdly, is it in merge conflict with master or are any of the CI tests
                    failing? Particularly any third-party CI tests that are relevant to the
                    code you are changing. If you're fixing something that only occasionally
                    failed before, maybe recheck a few times to prove the tests stay
                    passing. Without green tests, reviewers tend to move on and look at the
                    other patches that have the tests passing.</paragraph>
                <paragraph>OK, so you have followed all the process (i.e. your patches are getting
                    advertised via the project's tracking mechanisms), and your patches
                    either have no reviews, or only positive reviews. Now what?</paragraph>
                <paragraph>Have you considered reviewing other people's patches? Firstly,
                    participating in the review process is the best way for you to
                    understand what reviewers are wanting to see in the code you are
                    submitting. As you get more practiced at reviewing it will help you to
                    write "merge-ready" code. Secondly, if you help review other peoples
                    code and help get their patches ready for the core reviewers to add a
                    +2, it will free up a lot of non-core and core reviewer time, so they
                    are more likely to get time to review your code. For more details,
                    please see: <reference internal="True" refuri="how-to-get-involved#why-plus1"><inline classes="std std-ref">Why do code reviews when I'm not core?</inline></reference></paragraph>
                <paragraph>Please note, I am not recommending you go to ask people on IRC or via
                    email for reviews. Please try to get your code reviewed using the above
                    process first. In many cases multiple direct pings generate frustration
                    on both sides and that tends to be counter productive.</paragraph>
                <paragraph>Now you have got your code merged, lets make sure you don't need to fix
                    this bug again. The fact the bug exists means there is a gap in our
                    testing. Your patch should have included some good unit tests to stop
                    the bug coming back. But don't stop there, maybe its time to add tempest
                    tests, to make sure your use case keeps working? Maybe you need to set
                    up a third party CI so your combination of drivers will keep working?
                    Getting that extra testing in place should stop a whole heap of bugs,
                    again giving reviewers more time to get to the issues or features you
                    want to add in the future.</paragraph>
            </section>
        </section>
        <section ids="process-evolution-ideas" names="process\ evolution\ ideas">
            <title>Process Evolution Ideas</title>
            <paragraph>We are always evolving our process as we try to improve and adapt to the
                changing shape of the community. Here we discuss some of the ideas,
                along with their pros and cons.</paragraph>
            <section ids="splitting-out-the-virt-drivers-or-other-bits-of-code" names="splitting\ out\ the\ virt\ drivers\ (or\ other\ bits\ of\ code)">
                <title>Splitting out the virt drivers (or other bits of code)</title>
                <paragraph>Currently, Nova doesn't have strong enough interfaces to split out the
                    virt drivers, scheduler or REST API. This is seen as the key blocker.
                    Let's look at both sides of the debate here.</paragraph>
                <paragraph>Reasons for the split:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>can have separate core teams for each repo</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>this leads to quicker turn around times, largely due to focused
                                    teams</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>splitting out things from core means less knowledge required to
                            become core in a specific area</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Reasons against the split:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>loss of interoperability between drivers</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>this is a core part of Nova's mission, to have a single API across
                                    all deployments, and a strong ecosystem of tools and apps built on
                                    that</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>we can overcome some of this with stronger interfaces and
                                    functional tests</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>new features often need changes in the API and virt driver anyway</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>the new "depends-on" can make these cross-repo dependencies easier</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>loss of code style consistency across the code base</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>fear of fragmenting the nova community, leaving few to work on the
                            core of the project</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>could work in subteams within the main tree</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>TODO - need to complete analysis</paragraph>
            </section>
            <section ids="subteam-recommendation-as-a-2" names="subteam\ recommendation\ as\ a\ +2">
                <title>Subteam recommendation as a +2</title>
                <paragraph>There are groups of people with great knowledge of particular bits of
                    the code base. It may be a good idea to give their recommendation of a
                    merge greater strength. In addition, having the subteam focus review efforts
                    on a subset of patches should help concentrate the nova-core reviews they
                    get, and increase the velocity of getting code merged.</paragraph>
                <paragraph>The first part is for subgroups to show they can do a great job of
                    recommending patches. This is starting in here:
                    <reference refuri="https://etherpad.openstack.org/p/pike-nova-priorities-tracking">https://etherpad.openstack.org/p/pike-nova-priorities-tracking</reference></paragraph>
                <paragraph>Ideally this would be done with gerrit user "tags" rather than an
                    etherpad. There are some investigations by sdague in how feasible it
                    would be to add tags to gerrit.</paragraph>
            </section>
            <section ids="stop-having-to-submit-a-spec-for-each-release" names="stop\ having\ to\ submit\ a\ spec\ for\ each\ release">
                <title>Stop having to submit a spec for each release</title>
                <paragraph>As mentioned above, we use blueprints for tracking, and specs to record
                    design decisions. Targeting specs to a specific release is a heavyweight
                    solution and blurs the lines between specs and blueprints. At the same
                    time, we don't want to lose the opportunity to revise existing
                    blueprints. Maybe there is a better balance?</paragraph>
                <paragraph>What about this kind of process:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>backlog has these folders:</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>backlog/incomplete - merge a partial spec</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>backlog/complete - merge complete specs (remove tracking details,
                                    such as assignee part of the template)</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>?? backlog/expired - specs are moved here from incomplete or
                                    complete when no longer seem to be given attention (after 1 year,
                                    by default)</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>/implemented - when a spec is complete it gets moved into the
                                    release directory and possibly updated to reflect what actually
                                    happened</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>there will no longer be a per-release approved spec list</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                </bullet_list>
                <paragraph>To get your blueprint approved:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>add it to the next nova meeting</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>if a spec is required, update the URL to point to the spec merged
                                    in a spec to the blueprint</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>ensure there is an assignee in the blueprint</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>a day before the meeting, a note is sent to the ML to review the list
                            before the meeting</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>discuss any final objections in the nova-meeting</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>this may result in a request to refine the spec, if things have
                                    changed since it was merged</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>trivial cases can be approved in advance by a nova-driver, so not all
                            folks need to go through the meeting</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>This still needs more thought, but should decouple the spec review from
                    the release process. It is also more compatible with a runway style
                    system, that might be less focused on milestones.</paragraph>
            </section>
            <section ids="runways" names="runways">
                <title>Runways</title>
                <paragraph>Runways are a form of Kanban, where we look at optimising the flow
                    through the system, by ensuring we focus our efforts on reviewing a
                    specific subset of patches.</paragraph>
                <paragraph>The idea goes something like this:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>define some states, such as: design backlog, design review, code
                            backlog, code review, test+doc backlog, complete</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>blueprints must be in one of the above state</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>large or high priority bugs may also occupy a code review slot</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>core reviewer member moves item between the slots</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>must not violate the rules on the number of items in each state</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>states have a limited number of slots, to ensure focus</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>certain percentage of slots are dedicated to priorities, depending
                                    on point in the cycle, and the type of the cycle, etc</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                </bullet_list>
                <paragraph>Reasons for:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>more focused review effort, get more things merged more quickly</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>more upfront about when your code is likely to get reviewed</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>smooth out current "lumpy" non-priority feature freeze system</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Reasons against:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>feels like more process overhead</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>control is too centralised</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="replacing-milestones-with-semver-releases" names="replacing\ milestones\ with\ semver\ releases">
                <title>Replacing Milestones with SemVer Releases</title>
                <paragraph>You can deploy any commit of Nova and upgrade to a later commit in that
                    same release. Making our milestones versioned more like an official
                    release would help signal to our users that people can use the
                    milestones in production, and get a level of upgrade support.</paragraph>
                <paragraph>It could go something like this:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>14.0.0 is milestone 1</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>14.0.1 is milestone 2 (maybe, because we add features, it should be
                            14.1.0?)</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>14.0.2 is milestone 3</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>we might do other releases (once a critical bug is fixed?), as it
                            makes sense, but we will always be the time bound ones</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>14.0.3 two weeks after milestone 3, adds only bug fixes (and updates
                            to RPC versions?)</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>maybe a stable branch is created at this point?</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>14.1.0 adds updated translations and co-ordinated docs</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>this is released from the stable branch?</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>15.0.0 is the next milestone, in the following cycle</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>not the bump of the major version to signal an upgrade
                                    incompatibility with 13.x</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                </bullet_list>
                <paragraph>We are currently watching Ironic to see how their use of semver goes,
                    and see what lessons need to be learnt before we look to maybe apply
                    this technique during M.</paragraph>
            </section>
            <section ids="feature-classification" names="feature\ classification">
                <title>Feature Classification</title>
                <paragraph>This is a look at moving forward this effort:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference refuri="http://docs.openstack.org/developer/nova/support-matrix.html">http://docs.openstack.org/developer/nova/support-matrix.html</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>The things we need to cover:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>note what is tested, and how often that test passes (via 3rd party
                            CI, or otherwise)</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>link to current test results for stable and master (time since
                                    last pass, recent pass rate, etc)</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>TODO - sync with jogo on his third party CI audit and getting
                                    trends, ask infra</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>include experimental features (untested feature)</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>get better at the impact of volume drivers and network drivers on
                            available features (not just hypervisor drivers)</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Main benefits:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>users get a clear picture of what is known to work</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>be clear about when experimental features are removed, if no tests
                            are added</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>allows a way to add experimental things into Nova, and track either
                            their removal or maturation</paragraph>
                    </list_item>
                </bullet_list>
            </section>
        </section>
    </section>
</document>
