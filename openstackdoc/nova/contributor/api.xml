<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/nova/doc/source/contributor/api.rst">
    <section ids="extending-the-api" names="extending\ the\ api">
        <title>Extending the API</title>
        <section ids="background" names="background">
            <title>Background</title>
            <paragraph>Nova has v2.1 API frameworks which supports microversions.</paragraph>
            <paragraph>This document covers how to add API for the v2.1 API framework. A
                <reference internal="True" refuri="microversions"><inline classes="doc">microversions specific document</inline></reference> covers the details
                around what is required for the microversions part.</paragraph>
            <paragraph>The v2.1 API framework is under <literal>nova/api</literal> and each API is implemented in
                <literal>nova/api/openstack/compute</literal>.</paragraph>
            <paragraph>Note that any change to the Nova API to be merged will first require a
                spec be approved first. See <reference name="here" refuri="https://github.com/openstack/nova-specs">here</reference><target ids="here" names="here" refuri="https://github.com/openstack/nova-specs"></target>
                for the appropriate repository. For guidance on the design of the API
                please refer to the <reference name="OpenStack API WG" refuri="https://wiki.openstack.org/wiki/API_Working_Group">OpenStack API WG</reference><target ids="openstack-api-wg" names="openstack\ api\ wg" refuri="https://wiki.openstack.org/wiki/API_Working_Group"></target></paragraph>
        </section>
        <section ids="basic-api-controller" names="basic\ api\ controller">
            <title>Basic API Controller</title>
            <paragraph>API controller includes the implementation of API methods for a resource.</paragraph>
            <paragraph>A very basic controller of a v2.1 API:</paragraph>
            <literal_block xml:space="preserve">"""Basic Controller"""

from nova.api.openstack.compute.schemas import xyz
from nova.api.openstack import extensions
from nova.api.openstack import wsgi
from nova.api import validation

class BasicController(wsgi.Controller):

    # Define support for GET on a collection
    def index(self, req):
        data = {'param': 'val'}
        return data

    # Define support for POST on a collection
    @extensions.expected_errors((400, 409))
    @validation.schema(xyz.create)
    @wsgi.response(201)
    def create(self, req, body):
        write_body_here = ok
        return response_body

    # Defining support for other RESTFul methods based on resouce.</literal_block>
            <paragraph>See <reference name="servers.py for ref" refuri="http://git.openstack.org/cgit/openstack/nova/tree/nova/nova/api/openstack/compute/servers.py">servers.py for ref</reference><target ids="servers-py-for-ref" names="servers.py\ for\ ref" refuri="http://git.openstack.org/cgit/openstack/nova/tree/nova/nova/api/openstack/compute/servers.py"></target>.</paragraph>
            <paragraph>All of the controller modules should live in the <literal>nova/api/openstack/compute</literal> directory.</paragraph>
            <section ids="url-mapping-to-api" names="url\ mapping\ to\ api">
                <title>URL Mapping to API</title>
                <paragraph>The URL mapping is based on the plain list which routes the API request to
                    appropriate controller and method. Each API needs to add its route information
                    in <literal>nova/api/openstack/compute/routes.py</literal>.</paragraph>
                <paragraph>A basic skeleton of URL mapping in routers.py:</paragraph>
                <literal_block xml:space="preserve">"""URL Mapping Router List"""

import functools

import nova.api.openstack
from nova.api.openstack.compute import basic_api

# Create a controller object
basic_controller = functools.partial(
    _create_controller, basic_api.BasicController, [], [])

# Routing list structure:
# (
#     ('Route path': {
#         'HTTP method: [
#             'Controller',
#             'The method of controller is used to handle this route'
#         ],
#         ...
#     }),
#     ...
# )
ROUTE_LIST = (
    .
    .
    .
    ('/basic', {
        'GET': [basic_controller, 'index'],
        'POST': [basic_controller, 'create']
    }),
    .
    .
    .
)</literal_block>
                <paragraph>Complete routing list can be found in <reference name="routes.py" refuri="https://git.openstack.org/cgit/openstack/nova/tree/nova/api/openstack/compute/routes.py">routes.py</reference><target ids="routes-py" names="routes.py" refuri="https://git.openstack.org/cgit/openstack/nova/tree/nova/api/openstack/compute/routes.py"></target>.</paragraph>
            </section>
            <section ids="policy" names="policy">
                <title>Policy</title>
                <paragraph>Policy (permission) is defined <literal>etc/nova/policy.json</literal>. Implementation of policy
                    is changing a bit at the moment. Will add more to this document or reference
                    another one in the future. Also look at the authorize call in controller currently merged.</paragraph>
            </section>
            <section ids="modularity" names="modularity">
                <title>Modularity</title>
                <paragraph>The Nova REST API is separated into different controllers in the directory
                    'nova/api/openstack/compute/'</paragraph>
                <paragraph>Because microversions are supported in the Nova REST API, the API can be
                    extended without any new controller. But for code readability, the Nova REST API
                    code still needs modularity. Here are rules for how to separate modules:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>You are adding a new resource
                            The new resource should be in standalone module. There isn't any reason to
                            put different resources in a single module.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Add sub-resource for existing resource
                            To prevent an existing resource module becoming over-inflated, the
                            sub-resource should be implemented in a separate module.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Add extended attributes for existing resource
                            In normally, the extended attributes is part of existing resource's data
                            model too. So this can be added into existing resource module directly and
                            lightly.
                            To avoid namespace complexity, we should avoid to add extended attributes
                            in existing extended models. New extended attributes needn't any namespace
                            prefix anymore.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="json-schema" names="json-schema">
                <title>JSON-Schema</title>
                <paragraph>The v2.1 API validates a REST request body with JSON-Schema library.
                    Valid body formats are defined with JSON-Schema in the directory
                    'nova/api/openstack/compute/schemas'. Each definition is used at the
                    corresponding method with the <literal>validation.schema</literal> decorator like:</paragraph>
                <literal_block xml:space="preserve">@validation.schema(schema.update_something)
def update(self, req, id, body):
    ....</literal_block>
                <paragraph>Similarly to controller modularity, JSON-Schema definitions can be added
                    in same or separate JSON-Schema module.</paragraph>
                <paragraph>The following are the combinations of extensible API and method name
                    which returns additional JSON-Schema parameters:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Create a server API  - get_server_create_schema()</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>For example, keypairs extension(Keypairs class) contains the method
                    get_server_create_schema() which returns:</paragraph>
                <literal_block xml:space="preserve">{
    'key_name': parameter_types.name,
}</literal_block>
                <paragraph>then the parameter key_name is allowed on Create a server API.</paragraph>
                <note>
                    <paragraph>Currently only create schema are implemented in modular way.
                        Final goal is to merge them all and define the concluded
                        process in this doc.</paragraph>
                </note>
                <paragraph>These are essentially hooks into the servers controller which allow other
                    controller to modify behaviour without having to modify servers.py. In
                    the past not having this capability led to very large chunks of
                    unrelated code being added to servers.py which was difficult to
                    maintain.</paragraph>
            </section>
        </section>
        <section ids="unit-tests" names="unit\ tests">
            <title>Unit Tests</title>
            <paragraph>Should write something more here. But you need to have
                both unit and functional tests.</paragraph>
        </section>
        <section ids="functional-tests-and-api-samples" names="functional\ tests\ and\ api\ samples">
            <title>Functional tests and API Samples</title>
            <paragraph>Should write something here</paragraph>
        </section>
        <section ids="commit-message-tags" names="commit\ message\ tags">
            <title>Commit message tags</title>
            <paragraph>Please ensure you add the <literal>DocImpact</literal> tag along with a short
                description for any API change.</paragraph>
        </section>
    </section>
</document>
