<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/nova/doc/source/contributor/testing.rst">
    <comment xml:space="preserve">Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.</comment>
    <section ids="test-strategy" names="test\ strategy">
        <title>Test Strategy</title>
        <paragraph>A key part of the "four opens" is ensuring the OpenStack delivers well-tested
            and usable software. For more details see:
            <reference refuri="http://docs.openstack.org/project-team-guide/introduction.html#the-four-opens">http://docs.openstack.org/project-team-guide/introduction.html#the-four-opens</reference></paragraph>
        <paragraph>Experience has shown that untested features are frequently broken, in part
            due to the velocity of upstream changes. As we aim to ensure we keep all
            features working across upgrades, we must aim to test all features.</paragraph>
        <section ids="reporting-test-coverage" names="reporting\ test\ coverage">
            <title>Reporting Test Coverage</title>
            <paragraph>For details on plans to report the current test coverage, refer to
                <reference internal="True" refuri="../user/feature-classification"><inline classes="doc">Feature Classification</inline></reference>.</paragraph>
        </section>
        <section ids="running-tests-and-reporting-results" names="running\ tests\ and\ reporting\ results">
            <title>Running tests and reporting results</title>
            <section ids="voting-in-gerrit" names="voting\ in\ gerrit">
                <title>Voting in Gerrit</title>
                <paragraph>On every review in gerrit, check tests are run on very patch set, and are
                    able to report a +1 or -1 vote.
                    For more details, please see:
                    <reference refuri="http://docs.openstack.org/infra/manual/developers.html#automated-testing">http://docs.openstack.org/infra/manual/developers.html#automated-testing</reference></paragraph>
                <paragraph>Before merging any code, there is an integrate gate test queue, to ensure
                    master is always passing all tests.
                    For more details, please see:
                    <reference refuri="http://docs.openstack.org/infra/zuul/gating.html">http://docs.openstack.org/infra/zuul/gating.html</reference></paragraph>
            </section>
            <section ids="infra-vs-third-party" names="infra\ vs\ third-party">
                <title>Infra vs Third-Party</title>
                <paragraph>Tests that use fully open source components are generally run by the
                    OpenStack Infra teams. Test setups that use non-open technology must
                    be run outside of that infrastructure, but should still report their
                    results upstream.</paragraph>
                <paragraph>For more details, please see:
                    <reference refuri="http://docs.openstack.org/infra/system-config/third_party.html">http://docs.openstack.org/infra/system-config/third_party.html</reference></paragraph>
            </section>
            <section ids="ad-hoc-testing" names="ad-hoc\ testing">
                <title>Ad-hoc testing</title>
                <paragraph>It is particularly common for people to run ad-hoc tests on each released
                    milestone, such as RC1, to stop regressions.
                    While these efforts can help stabilize the release, as a community we have a
                    much stronger preference for continuous integration testing. Partly this is
                    because we encourage users to deploy master, and we generally have to assume
                    that any upstream commit may already been deployed in production.</paragraph>
            </section>
        </section>
        <section ids="types-of-tests" names="types\ of\ tests">
            <title>Types of tests</title>
            <section ids="unit-tests" names="unit\ tests">
                <title>Unit tests</title>
                <paragraph>Unit tests help document and enforce the contract for each component.
                    Without good unit test coverage it is hard to continue to quickly evolve the
                    codebase.
                    The correct level of unit test coverage is very subjective, and as such we are
                    not aiming for a particular percentage of coverage, rather we are aiming for
                    good coverage.
                    Generally, every code change should have a related unit test:
                    <reference refuri="http://docs.openstack.org/developer/hacking/#creating-unit-tests">http://docs.openstack.org/developer/hacking/#creating-unit-tests</reference></paragraph>
            </section>
            <section ids="integration-tests" names="integration\ tests">
                <title>Integration tests</title>
                <paragraph>Today, our integration tests involve running the Tempest test suite on a
                    variety of Nova deployment scenarios.</paragraph>
                <paragraph>In addition, we have third parties running the tests on their preferred Nova
                    deployment scenario.</paragraph>
            </section>
            <section ids="functional-tests" names="functional\ tests">
                <title>Functional tests</title>
                <paragraph>Nova has a set of in-tree functional tests that focus on things that are out
                    of scope for tempest testing and unit testing.
                    Tempest tests run against a full live OpenStack deployment, generally deployed
                    using devstack. At the other extreme, unit tests typically use mock to test a
                    unit of code in isolation.
                    Functional tests don't run an entire stack, they are isolated to nova code,
                    and have no reliance on external services. They do have a WSGI app, nova
                    services and a database, with minimal stubbing of nova internals.</paragraph>
            </section>
            <section ids="interoperability-tests" names="interoperability\ tests">
                <title>Interoperability tests</title>
                <paragraph>The DefCore committee maintains a list that contains a subset of Tempest tests.
                    These are used to verify if a particular Nova deployment's API responds as
                    expected. For more details, see: <reference refuri="https://github.com/openstack/defcore">https://github.com/openstack/defcore</reference></paragraph>
            </section>
        </section>
    </section>
</document>
