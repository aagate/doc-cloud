<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/nova/doc/source/contributor/testing/libvirt-numa.rst">
    <section ids="testing-numa-related-hardware-setup-with-libvirt" names="testing\ numa\ related\ hardware\ setup\ with\ libvirt">
        <title>Testing NUMA related hardware setup with libvirt</title>
        <paragraph>This page describes how to test the libvirt driver's handling of the NUMA
            placement, large page allocation and CPU pinning features. It relies on setting
            up a virtual machine as the test environment and requires support for nested
            virtualization since plain QEMU is not sufficiently functional. The virtual
            machine will itself be given NUMA topology, so it can then act as a virtual
            "host" for testing purposes.</paragraph>
        <section ids="provisioning-a-virtual-machine-for-testing" names="provisioning\ a\ virtual\ machine\ for\ testing">
            <title>Provisioning a virtual machine for testing</title>
            <paragraph>The entire test process will take place inside a large virtual machine running
                Fedora 24. The instructions should work for any other Linux distribution which
                includes libvirt &gt;= 1.2.9 and QEMU &gt;= 2.1.2</paragraph>
            <paragraph>The tests will require support for nested KVM, which is not enabled by default
                on hypervisor hosts. It must be explicitly turned on in the host when loading
                the kvm-intel/kvm-amd kernel modules.</paragraph>
            <paragraph>On Intel hosts verify it with</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve"># cat /sys/module/kvm_intel/parameters/nested
N

# rmmod kvm-intel
# echo "options kvm-intel nested=y" &gt; /etc/modprobe.d/dist.conf
# modprobe kvm-intel

# cat /sys/module/kvm_intel/parameters/nested
Y</literal_block>
            <paragraph>While on AMD hosts verify it with</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve"># cat /sys/module/kvm_amd/parameters/nested
0

# rmmod kvm-amd
# echo "options kvm-amd nested=1" &gt; /etc/modprobe.d/dist.conf
# modprobe kvm-amd

# cat /sys/module/kvm_amd/parameters/nested
1</literal_block>
            <paragraph>The virt-install command below shows how to provision a basic Fedora 24 x86_64
                guest with 8 virtual CPUs, 8 GB of RAM and 20 GB of disk space:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve"># cd /var/lib/libvirt/images
# wget https://download.fedoraproject.org/pub/fedora/linux/releases/24/Server/x86_64/iso/Fedora-Server-netinst-x86_64-24-1.2.iso

# virt-install \
   --name f24x86_64 \
   --ram 8000 \
   --vcpus 8 \
   --file /var/lib/libvirt/images/f24x86_64.img \
   --file-size 20
   --cdrom /var/lib/libvirt/images/Fedora-Server-netinst-x86_64-24-1.2.iso \
   --os-variant fedora23</literal_block>
            <paragraph>When the virt-viewer application displays the installer, follow the defaults
                for the installation with a couple of exceptions:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>The automatic disk partition setup can be optionally tweaked to reduce the
                        swap space allocated. No more than 500MB is required, free'ing up an extra
                        1.5 GB for the root disk</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Select "Minimal install" when asked for the installation type since a desktop
                        environment is not required</paragraph>
                </list_item>
                <list_item>
                    <paragraph>When creating a user account be sure to select the option "Make this user
                        administrator" so it gets 'sudo' rights</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Once the installation process has completed, the virtual machine will reboot
                into the final operating system. It is now ready to deploy an OpenStack
                development environment.</paragraph>
        </section>
        <section ids="setting-up-a-devstack-environment" names="setting\ up\ a\ devstack\ environment">
            <title>Setting up a devstack environment</title>
            <paragraph>For later ease of use, copy your SSH public key into the virtual machine:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve"># ssh-copy-id  &lt;IP of VM&gt;</literal_block>
            <paragraph>Now login to the virtual machine:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve"># ssh &lt;IP of VM&gt;</literal_block>
            <paragraph>The Fedora minimal install does not contain git. Install git and clone the
                devstack repo:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">$ sudo dnf -y install git
$ git clone git://github.com/openstack-dev/devstack.git
$ cd devstack</literal_block>
            <paragraph>At this point a fairly standard devstack setup can be done with one exception:
                we should enable the <literal>NUMATopologyFilter</literal> filter, which we will use later.
                For example:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">$ cat &gt;&gt;local.conf &lt;&lt;EOF
[[local|localrc]]
DATA_DIR=$DEST/data
SERVICE_DIR=$DEST/status

LOGFILE=$DATA_DIR/logs/stack.log
SCREEN_LOGDIR=$DATA_DIR/logs
VERBOSE=True

disable_service n-net
enable_service neutron q-svc q-dhcp q-l3 q-meta q-agt

MYSQL_PASSWORD=123456
DATABASE_PASSWORD=123456
SERVICE_TOKEN=123456
SERVICE_PASSWORD=123456
ADMIN_PASSWORD=123456
RABBIT_PASSWORD=123456

[[post-config|$NOVA_CONF]]
[DEFAULT]
firewall_driver=nova.virt.firewall.NoopFirewallDriver

[filter_scheduler]
enabled_filters=RamFilter,ComputeFilter,AvailabilityZoneFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,PciPassthroughFilter,NUMATopologyFilter
EOF
$ FORCE=yes ./stack.sh</literal_block>
            <paragraph>Unfortunately while devstack starts various system services and changes various
                system settings it doesn't make the changes persistent. Fix that now to avoid
                later surprises after reboots:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">$ sudo systemctl enable mariadb.service
$ sudo systemctl enable rabbitmq-server.service
$ sudo systemctl enable httpd.service

$ sudo vi /etc/sysconfig/selinux
SELINUX=permissive</literal_block>
        </section>
        <section ids="testing-basis-non-numa-usage" names="testing\ basis\ non-numa\ usage">
            <title>Testing basis non-NUMA usage</title>
            <paragraph>First to confirm we've not done anything unusual to the traditional operation
                of nova libvirt guests boot a tiny instance:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">$ . openrc admin
$ openstack server create --image cirros-0.3.4-x86_64-uec --flavor m1.tiny \
    cirros1</literal_block>
            <paragraph>The host will be reporting NUMA topology, but there should only be a single
                NUMA cell this point. We can validate this by querying the nova database. For
                example (with object versioning fields removed):</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">$ mysql -u root -p123456 nova
MariaDB [nova]&gt; select numa_topology from compute_nodes;
+----------------------------------------------------------------------------+
| numa_topology                                                              |
+----------------------------------------------------------------------------+
| {
|     "nova_object.name": "NUMATopology",
|     "nova_object.data": {
|         "cells": [{
|                 "nova_object.name": "NUMACell",
|                 "nova_object.data": {
|                     "cpu_usage": 0,
|                     "memory_usage": 0,
|                     "cpuset": [0, 1, 2, 3, 4, 5, 6, 7],
|                     "pinned_cpus": [],
|                     "siblings": [],
|                     "memory": 7793,
|                     "mempages": [
|                         {
|                             "nova_object.name": "NUMAPagesTopology",
|                             "nova_object.data": {
|                                 "used": 0,
|                                 "total": 987430,
|                                 "reserved":0,
|                                 "size_kb": 4
|                             },
|                         },
|                         {
|                             "nova_object.name": "NUMAPagesTopology",
|                             "nova_object.data": {
|                                 "used": 0,
|                                 "total": 0,
|                                 "reserved":0,
|                                 "size_kb": 2048
|                             },
|                         },
|                         {
|                             "nova_object.name": "NUMAPagesTopology",
|                             "nova_object.data": {
|                                 "used": 0,
|                                 "total": 0,
|                                 "reserved": 0,
|                                 "size_kb": 1048576
|                             },
|                         }
|                     ],
|                     "id": 0
|                 },
|             },
|         ]
|     },
| }
+----------------------------------------------------------------------------+</literal_block>
            <paragraph>Meanwhile, the guest instance should not have any NUMA configuration recorded:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">MariaDB [nova]&gt; select numa_topology from instance_extra;
+---------------+
| numa_topology |
+---------------+
| NULL          |
+---------------+</literal_block>
        </section>
        <section ids="reconfiguring-the-test-instance-to-have-numa-topology" names="reconfiguring\ the\ test\ instance\ to\ have\ numa\ topology">
            <title>Reconfiguring the test instance to have NUMA topology</title>
            <paragraph>Now that devstack is proved operational, it is time to configure some NUMA
                topology for the test VM, so that it can be used to verify the OpenStack NUMA
                support. To do the changes, the VM instance that is running devstack must be
                shut down:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">$ sudo shutdown -h now</literal_block>
            <paragraph>And now back on the physical host edit the guest config as root:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">$ sudo virsh edit f21x86_64</literal_block>
            <paragraph>The first thing is to change the <title_reference>&lt;cpu&gt;</title_reference> block to do passthrough of the host
                CPU. In particular this exposes the "SVM" or "VMX" feature bits to the guest so
                that "Nested KVM" can work. At the same time we want to define the NUMA
                topology of the guest. To make things interesting we're going to give the guest
                an asymmetric topology with 4 CPUS and 4 GBs of RAM in the first NUMA node and
                2 CPUs and 2 GB of RAM in the second and third NUMA nodes. So modify the guest
                XML to include the following CPU XML:</paragraph>
            <literal_block highlight_args="{}" language="xml" linenos="False" xml:space="preserve">&lt;cpu mode='host-passthrough'&gt;
  &lt;numa&gt;
    &lt;cell id='0' cpus='0-3' memory='4096000'/&gt;
    &lt;cell id='1' cpus='4-5' memory='2048000'/&gt;
    &lt;cell id='2' cpus='6-7' memory='2048000'/&gt;
  &lt;/numa&gt;
&lt;/cpu&gt;</literal_block>
            <paragraph>Now start the guest again:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve"># virsh start f24x86_64</literal_block>
            <paragraph>...and login back in:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve"># ssh &lt;IP of VM&gt;</literal_block>
            <paragraph>Before starting OpenStack services again, it is necessary to explicitly set the
                libvirt virtualization type to KVM, so that guests can take advantage of nested
                KVM:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">$ sudo sed -i 's/virt_type = qemu/virt_type = kvm/g' /etc/nova/nova.conf</literal_block>
            <paragraph>With that done, OpenStack can be started again:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">$ cd devstack
$ ./stack.sh</literal_block>
            <paragraph>The first thing is to check that the compute node picked up the new NUMA
                topology setup for the guest:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">$ mysql -u root -p123456 nova
MariaDB [nova]&gt; select numa_topology from compute_nodes;
+----------------------------------------------------------------------------+
| numa_topology                                                              |
+----------------------------------------------------------------------------+
| {
|     "nova_object.name": "NUMATopology",
|     "nova_object.data": {
|         "cells": [
|             {
|                 "nova_object.name": "NUMACell",
|                 "nova_object.data": {
|                     "cpu_usage": 0,
|                     "memory_usage": 0,
|                     "cpuset": [0, 1, 2, 3],
|                     "pinned_cpus": [],
|                     "siblings": [],
|                     "memory": 3856,
|                     "mempages": [
|                         {
|                             "nova_object.name": "NUMAPagesTopology",
|                             "nova_object.data": {
|                                 "used": 0,
|                                 "total": 987231,
|                                 "reserved": 0,
|                                 "size_kb": 4
|                             },
|                         },
|                         {
|                             "nova_object.name": "NUMAPagesTopology",
|                             "nova_object.data": {
|                                 "used": 0,
|                                 "total": 0,
|                                 "reserved": 0,
|                                 "size_kb": 2048
|                             },
|                         },
|                         {
|                             "nova_object.name": "NUMAPagesTopology",
|                             "nova_object.data": {
|                                 "used": 0,
|                                 "total": 0,
|                                 "reserved": 0,
|                                 "size_kb": 1048576
|                             },
|                         }
|                     ],
|                     "id": 0
|                 },
|             },
|             {
|                 "nova_object.name": "NUMACell",
|                 "nova_object.data": {
|                     "cpu_usage": 0,
|                     "memory_usage": 0,
|                     "cpuset": [4, 5],
|                     "pinned_cpus": [],
|                     "siblings": [],
|                     "memory": 1969,
|                     "mempages": [
|                         {
|                             "nova_object.name": "NUMAPagesTopology",
|                             "nova_object.data": {
|                                 "used": 0,
|                                 "total": 504202,
|                                 "reserved": 0,
|                                 "size_kb": 4
|                             },
|                         },
|                         {
|                             "nova_object.name": "NUMAPagesTopology",
|                             "nova_object.data": {
|                                 "used": 0,
|                                 "total": 0,
|                                 "reserved": 0,
|                                 "size_kb": 2048
|                             },
|                         },
|                         {
|                             "nova_object.name": "NUMAPagesTopology",
|                             "nova_object.data": {
|                                 "used": 0,
|                                 "total": 0,
|                                 "reserved": 0,
|                                 "size_kb": 1048576
|                             },
|                         }
|                     ],
|                     "id": 1
|                 },
|             },
|             {
|                 "nova_object.name": "NUMACell",
|                 "nova_object.data": {
|                     "cpu_usage": 0,
|                     "memory_usage": 0,
|                     "cpuset": [6, 7],
|                     "pinned_cpus": [],
|                     "siblings": [],
|                     "memory": 1967,
|                     "mempages": [
|                         {
|                             "nova_object.name": "NUMAPagesTopology",
|                             "nova_object.data": {
|                                 "used": 0,
|                                 "total": 503565,
|                                 "reserved": 0,
|                                 "size_kb": 4
|                             },
|                         },
|                         {
|                             "nova_object.name": "NUMAPagesTopology",
|                             "nova_object.data": {
|                                 "used": 0,
|                                 "total": 0,
|                                 "reserved": 0,
|                                 "size_kb": 2048
|                             },
|                         },
|                         {
|                             "nova_object.name": "NUMAPagesTopology",
|                             "nova_object.data": {
|                                 "used": 0,
|                                 "total": 0,
|                                 "reserved": 0,
|                                 "size_kb": 1048576
|                             },
|                         }
|                     ],
|                     "id": 2
|                 },
|             }
|         ]
|     },
| }
+----------------------------------------------------------------------------+</literal_block>
            <paragraph>This indeed shows that there are now 3 NUMA nodes for the "host" machine, the
                first with 4 GB of RAM and 4 CPUs, and others with 2 GB of RAM and 2 CPUs each.</paragraph>
        </section>
        <section ids="testing-instance-boot-with-no-numa-topology-requested" names="testing\ instance\ boot\ with\ no\ numa\ topology\ requested">
            <title>Testing instance boot with no NUMA topology requested</title>
            <paragraph>For the sake of backwards compatibility, if the NUMA filter is enabled, but the
                flavor/image does not have any NUMA settings requested, it should be assumed
                that the guest will have a single NUMA node. The guest should be locked to a
                single host NUMA node too. Boot a guest with the <title_reference>m1.tiny</title_reference> flavor to test this
                condition:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">$ . openrc admin admin
$ openstack server create --image cirros-0.3.4-x86_64-uec --flavor m1.tiny \
    cirros1</literal_block>
            <paragraph>Now look at the libvirt guest XML:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">$ sudo virsh list
 Id    Name                           State
----------------------------------------------------
 1     instance-00000001              running
$ sudo virsh dumpxml instance-00000001
...
&lt;vcpu placement='static'&gt;1&lt;/vcpu&gt;
...</literal_block>
            <paragraph>This example shows that there is no explicit NUMA topology listed in the guest
                XML.</paragraph>
        </section>
        <section ids="testing-instance-boot-with-1-numa-cell-requested" names="testing\ instance\ boot\ with\ 1\ numa\ cell\ requested">
            <title>Testing instance boot with 1 NUMA cell requested</title>
            <paragraph>Moving forward a little, explicitly tell nova that the NUMA topology for the
                guest should have a single NUMA node. This should operate in an identical
                manner to the default behavior where no NUMA policy is set. To define the
                topology we will create a new flavor:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">$ openstack flavor create --ram 1024 --disk 1 --vcpus 4 m1.numa
$ openstack flavor set --property hw:numa_nodes=1 m1.numa
$ openstack flavor show m1.numa</literal_block>
            <paragraph>Now boot the guest using this new flavor:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">$ openstack server create --image cirros-0.3.4-x86_64-uec --flavor m1.numa \
    cirros2</literal_block>
            <paragraph>Looking at the resulting guest XML from libvirt:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">$ sudo virsh list
 Id    Name                           State
----------------------------------------------------
 1     instance-00000001              running
 2     instance-00000002              running
$ sudo virsh dumpxml instance-00000002
...
&lt;vcpu placement='static'&gt;4&lt;/vcpu&gt;
&lt;cputune&gt;
  &lt;vcpupin vcpu='0' cpuset='0-3'/&gt;
  &lt;vcpupin vcpu='1' cpuset='0-3'/&gt;
  &lt;vcpupin vcpu='2' cpuset='0-3'/&gt;
  &lt;vcpupin vcpu='3' cpuset='0-3'/&gt;
  &lt;emulatorpin cpuset='0-3'/&gt;
&lt;/cputune&gt;
...
&lt;cpu&gt;
  &lt;topology sockets='4' cores='1' threads='1'/&gt;
  &lt;numa&gt;
    &lt;cell id='0' cpus='0-3' memory='1048576'/&gt;
  &lt;/numa&gt;
&lt;/cpu&gt;
...
&lt;numatune&gt;
  &lt;memory mode='strict' nodeset='0'/&gt;
  &lt;memnode cellid='0' mode='strict' nodeset='0'/&gt;
&lt;/numatune&gt;</literal_block>
            <paragraph>The XML shows:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Each guest CPU has been pinned to the physical CPUs associated with a
                        particular NUMA node</paragraph>
                </list_item>
                <list_item>
                    <paragraph>The emulator threads have been pinned to the union of all physical CPUs in
                        the host NUMA node that the guest is placed on</paragraph>
                </list_item>
                <list_item>
                    <paragraph>The guest has been given a virtual NUMA topology with a single node holding
                        all RAM and CPUs</paragraph>
                </list_item>
                <list_item>
                    <paragraph>The guest NUMA node has been strictly pinned to a host NUMA node.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>As a further sanity test, check what nova recorded for the instance in the
                database. This should match the <literal>&lt;numatune&gt;</literal> information:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">$ mysql -u root -p123456 nova
MariaDB [nova]&gt; select numa_topology from instance_extra;
+----------------------------------------------------------------------------+
| numa_topology                                                              |
+----------------------------------------------------------------------------+
| {
|     "nova_object.name": "InstanceNUMATopology",
|     "nova_object.data": {
|         "cells": [
|             {
|                 "nova_object.name": "InstanceNUMACell",
|                 "nova_object.data": {
|                     "pagesize": null,
|                     "cpu_topology": null,
|                     "cpuset": [0, 1, 2, 3],
|                     "cpu_policy": null,
|                     "memory": 1024,
|                     "cpu_pinning_raw": null,
|                     "id": 0,
|                     "cpu_thread_policy": null
|                 },
|             }
|         ]
|     },
| }
+----------------------------------------------------------------------------+</literal_block>
            <paragraph>Delete this instance:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">$ openstack server delete cirros2</literal_block>
        </section>
        <section ids="testing-instance-boot-with-2-numa-cells-requested" names="testing\ instance\ boot\ with\ 2\ numa\ cells\ requested">
            <title>Testing instance boot with 2 NUMA cells requested</title>
            <paragraph>Now getting more advanced we tell nova that the guest will have two NUMA nodes.
                To define the topology we will change the previously defined flavor:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">$ openstack flavor set --property hw:numa_nodes=2 m1.numa
$ openstack flavor show m1.numa</literal_block>
            <paragraph>Now boot the guest using this changed flavor:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">$ openstack server create --image cirros-0.3.4-x86_64-uec --flavor m1.numa \
    cirros2</literal_block>
            <paragraph>Looking at the resulting guest XML from libvirt:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">$ sudo virsh list
 Id    Name                           State
----------------------------------------------------
 1     instance-00000001              running
 3     instance-00000003              running
$ sudo virsh dumpxml instance-00000003
...
&lt;vcpu placement='static'&gt;4&lt;/vcpu&gt;
&lt;cputune&gt;
  &lt;vcpupin vcpu='0' cpuset='0-3'/&gt;
  &lt;vcpupin vcpu='1' cpuset='0-3'/&gt;
  &lt;vcpupin vcpu='2' cpuset='4-5'/&gt;
  &lt;vcpupin vcpu='3' cpuset='4-5'/&gt;
  &lt;emulatorpin cpuset='0-5'/&gt;
&lt;/cputune&gt;
...
&lt;cpu&gt;
  &lt;topology sockets='4' cores='1' threads='1'/&gt;
  &lt;numa&gt;
    &lt;cell id='0' cpus='0-1' memory='524288'/&gt;
    &lt;cell id='1' cpus='2-3' memory='524288'/&gt;
  &lt;/numa&gt;
&lt;/cpu&gt;
...
&lt;numatune&gt;
  &lt;memory mode='strict' nodeset='0-1'/&gt;
  &lt;memnode cellid='0' mode='strict' nodeset='0'/&gt;
  &lt;memnode cellid='1' mode='strict' nodeset='1'/&gt;
&lt;/numatune&gt;</literal_block>
            <paragraph>The XML shows:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Each guest CPU has been pinned to the physical CPUs associated with
                        particular NUMA nodes</paragraph>
                </list_item>
                <list_item>
                    <paragraph>The emulator threads have been pinned to the union of all physical CPUs in
                        the host NUMA nodes that the guest is placed on</paragraph>
                </list_item>
                <list_item>
                    <paragraph>The guest has been given a virtual NUMA topology with two nodes, each holding
                        half the RAM and CPUs</paragraph>
                </list_item>
                <list_item>
                    <paragraph>The guest NUMA nodes have been strictly pinned to different host NUMA node</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>As a further sanity test, check what nova recorded for the instance in the
                database. This should match the <literal>&lt;numatune&gt;</literal> information:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">MariaDB [nova]&gt; select numa_topology from instance_extra;
+----------------------------------------------------------------------------+
| numa_topology                                                              |
+----------------------------------------------------------------------------+
| {
|     "nova_object.name": "InstanceNUMATopology",
|     "nova_object.data": {
|         "cells": [
|             {
|                 "nova_object.name": "InstanceNUMACell",
|                 "nova_object.data": {
|                     "pagesize": null,
|                     "cpu_topology": null,
|                     "cpuset": [0, 1],
|                     "cpu_policy": null,
|                     "memory": 512,
|                     "cpu_pinning_raw": null,
|                     "id": 0,
|                     "cpu_thread_policy": null
|                 },
|             },
|             {
|                 "nova_object.name": "InstanceNUMACell",
|                 "nova_object.data": {
|                     "pagesize": null,
|                     "cpu_topology": null,
|                     "cpuset": [2, 3],
|                     "cpu_policy": null,
|                     "memory": 512,
|                     "cpu_pinning_raw": null,
|                     "id": 1,
|                     "cpu_thread_policy": null
|                 },
|             }
|         ]
|     },
| }
+----------------------------------------------------------------------------+</literal_block>
        </section>
    </section>
</document>
