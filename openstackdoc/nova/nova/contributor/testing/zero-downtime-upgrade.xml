<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/nova/doc/source/contributor/testing/zero-downtime-upgrade.rst">
    <section ids="testing-zero-downtime-upgrade-process" names="testing\ zero\ downtime\ upgrade\ process">
        <title>Testing Zero Downtime Upgrade Process</title>
        <paragraph>Zero Downtime upgrade eliminates any disruption to nova API service
            during upgrade.</paragraph>
        <paragraph>Nova API services are upgraded at the end. The basic idea of the zero downtime
            upgrade process is to have the connections drain from the old API before
            being upgraded. In this process, new connections go to the new API nodes
            while old connections slowly drain from the old nodes. This ensures that the
            user sees the max_supported API version as a monotonically increasing number.
            There might be some performance degradation during the process due to slow
            HTTP responses and delayed request handling, but there is no API downtime.</paragraph>
        <paragraph>This page describes how to test the zero downtime upgrade process.</paragraph>
        <section ids="environment" names="environment">
            <title>Environment</title>
            <bullet_list bullet="*">
                <list_item>
                    <definition_list>
                        <definition_list_item>
                            <term>Multinode devstack environment with 2 nodes:</term>
                            <definition>
                                <bullet_list bullet="*">
                                    <list_item>
                                        <paragraph>controller  - All services (N release)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>compute-api - Only n-cpu and n-api services (N release)</paragraph>
                                    </list_item>
                                </bullet_list>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                </list_item>
                <list_item>
                    <paragraph>Highly available load balancer (HAProxy) on top of the n-api services.
                        This is required for zero downtime upgrade as it allows one n-api service
                        to run while we upgrade the other. See instructions to setup HAProxy below.</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="instructions-to-setup-haproxy" names="instructions\ to\ setup\ haproxy">
            <title>Instructions to setup HAProxy</title>
            <paragraph>Install HAProxy and Keepalived on both nodes.</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve"># apt-get install haproxy keepalived</literal_block>
            <paragraph>Let the kernel know that we intend to bind additional IP addresses that
                won't be defined in the interfaces file. To do this, edit <literal>/etc/sysctl.conf</literal>
                and add the following line:</paragraph>
            <literal_block highlight_args="{}" language="INI" linenos="False" xml:space="preserve">net.ipv4.ip_nonlocal_bind=1</literal_block>
            <paragraph>Make this take effect without rebooting.</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve"># sysctl -p</literal_block>
            <paragraph>Configure HAProxy to add backend servers and assign virtual IP to the frontend.
                On both nodes add the below HAProxy config:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve"># cd /etc/haproxy
# cat &gt;&gt; haproxy.cfg &lt;&lt;EOF

   global
      chroot /var/lib/haproxy
      user haproxy
      group haproxy
      daemon
      log 192.168.0.88 local0
      pidfile  /var/run/haproxy.pid
      stats socket /var/run/haproxy.sock mode 600 level admin
      stats timeout 2m
      maxconn 4000

   defaults
      log  global
      maxconn  8000
      mode  http
      option  redispatch
      retries  3
      stats  enable
      timeout  http-request 10s
      timeout  queue 1m
      timeout  connect 10s
      timeout  client 1m
      timeout  server 1m
      timeout  check 10s

   frontend nova-api-vip
      bind 192.168.0.95:8282             &lt;&lt;ha proxy virtual ip&gt;&gt;
      default_backend nova-api

   backend nova-api
      balance  roundrobin
      option  tcplog
      server  controller 192.168.0.88:8774  check
      server  apicomp  192.168.0.89:8774  check

  EOF</literal_block>
            <note>
                <paragraph>Just change the IP for log in the global section on each node.</paragraph>
            </note>
            <paragraph>On both nodes add <literal>keepalived.conf</literal>:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve"># cd /etc/keepalived
# cat &gt;&gt; keepalived.conf &lt;&lt;EOF

   global_defs {
      router_id controller
   }
   vrrp_script haproxy {
      script "killall -0 haproxy"
      interval 2
      weight 2
   }
   vrrp_instance 50 {
      virtual_router_id 50
      advert_int 1
      priority 101
      state MASTER
      interface eth0
      virtual_ipaddress {
         192.168.0.95 dev eth0
      }
      track_script {
         haproxy
      }
   }

 EOF</literal_block>
            <note>
                <paragraph>Change priority on node2 to 100 ( or vice-versa). Add HAProxy virtual IP.</paragraph>
            </note>
            <paragraph>Restart keepalived service.</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve"># service keepalived restart</literal_block>
            <paragraph>Add <literal>ENABLED=1</literal> in <literal>/etc/default/haproxy</literal> and then restart HAProxy service.</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve"># service haproxy restart</literal_block>
            <paragraph>When both the services have restarted, node with the highest priority for keepalived
                claims the virtual IP. You can check which node claimed the virtual IP using:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve"># ip a</literal_block>
        </section>
        <section ids="zero-downtime-upgrade-process" names="zero\ downtime\ upgrade\ process">
            <title>Zero Downtime upgrade process</title>
            <paragraph>General rolling upgrade process:
                <reference refuri="http://docs.openstack.org/developer/nova/upgrade.html#minimal-downtime-upgrade-process">http://docs.openstack.org/developer/nova/upgrade.html#minimal-downtime-upgrade-process</reference></paragraph>
            <section ids="before-upgrade" names="before\ upgrade">
                <title>Before Upgrade</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Change nova-api endpoint in keystone to point to the HAProxy virtual IP.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Run tempest tests</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Check if n-api services on both nodes are serving the requests.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="before-maintenance-window" names="before\ maintenance\ window">
                <title>Before maintenance window</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Start the upgrade process with controller node.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Follow the steps from the general rolling upgrade process to install new code and sync the
                            db for schema changes.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="during-maintenance-window" names="during\ maintenance\ window">
                <title>During maintenance window</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Set compute option in upgrade_levels to auto in <literal>nova.conf</literal>.</paragraph>
                        <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">[upgrade_levels]
compute = auto</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Starting with n-cond restart all services except n-api and n-cpu.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>In small batches gracefully shutdown nova-cpu, then start n-cpu service
                            with new version of the code.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Run tempest tests.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Drain connections on n-api while the tempest tests are running.
                            HAProxy allows you to drain the connections by setting weight to zero:</paragraph>
                        <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve"># echo "set weight nova-api/&lt;&lt;server&gt;&gt; 0" | sudo socat /var/run/haproxy.sock stdio</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>OR disable service using:</paragraph>
                        <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve"># echo "disable server nova-api/&lt;&lt;server&gt;&gt;" | sudo socat /var/run/haproxy.sock stdio</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>This allows the current node to complete all the pending requests. When this
                            is being upgraded, other api node serves the requests. This way we can
                            achieve zero downtime.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Restart n-api service and enable n-api using the command:</paragraph>
                        <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve"># echo "enable server nova-api/&lt;&lt;server&gt;&gt;" | sudo socat /var/run/haproxy.sock stdio</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Drain connections from other old api node in the same way and upgrade.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>No tempest tests should fail since there is no API downtime.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="after-maintenance-window" names="after\ maintenance\ window">
                <title>After maintenance window</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Follow the steps from general rolling upgrade process to clear any cached
                            service version data and complete all online data migrations.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
        </section>
    </section>
</document>
