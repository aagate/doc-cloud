<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/nova/doc/source/contributor/development-environment.rst">
    <comment xml:space="preserve">Copyright 2010-2011 United States Government as represented by the
Administrator of the National Aeronautics and Space Administration.
All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.</comment>
    <section ids="development-quickstart" names="development\ quickstart">
        <title>Development Quickstart</title>
        <paragraph>This page describes how to setup and use a working Python development
            environment that can be used in developing nova on Ubuntu, Fedora or
            Mac OS X. These instructions assume you're already familiar with git.</paragraph>
        <paragraph>Following these instructions will allow you to build the documentation
            and run the nova unit tests. If you want to be able to run nova (i.e.,
            launch VM instances), you will also need to --- either manually or by
            letting DevStack do it for you --- install libvirt and at least one of
            the <reference name="supported hypervisors" refuri="http://wiki.openstack.org/HypervisorSupportMatrix">supported hypervisors</reference>. Running nova is currently only supported
            on Linux, although you can run the unit tests on Mac OS X.</paragraph>
        <target ids="supported-hypervisors" names="supported\ hypervisors" refuri="http://wiki.openstack.org/HypervisorSupportMatrix"></target>
        <note>
            <paragraph>For how to contribute to Nova, see
                <reference name="HowToContribute" refuri="http://docs.openstack.org/infra/manual/developers.html">HowToContribute</reference>.
                Nova uses the Gerrit code review system, <reference name="GerritWorkflow" refuri="http://docs.openstack.org/infra/manual/developers.html#development-workflow">GerritWorkflow</reference>.</paragraph>
        </note>
        <target ids="gerritworkflow" names="gerritworkflow" refuri="http://docs.openstack.org/infra/manual/developers.html#development-workflow"></target>
        <target ids="howtocontribute" names="howtocontribute" refuri="http://docs.openstack.org/infra/manual/developers.html"></target>
        <target ids="docs-openstack-org" names="docs.openstack.org" refuri="http://docs.openstack.org"></target>
        <section ids="setup" names="setup">
            <title>Setup</title>
            <paragraph>There are two ways to create a development environment: using
                DevStack, or explicitly installing and cloning just what you need.</paragraph>
            <section ids="using-devstack" names="using\ devstack">
                <title>Using DevStack</title>
                <paragraph>See <reference name="Devstack" refuri="http://docs.openstack.org/developer/devstack/">Devstack</reference> Documentation. If you would like to use Vagrant, there is a <reference name="Vagrant" refuri="https://github.com/openstack-dev/devstack-vagrant/blob/master/README.md">Vagrant</reference> for DevStack.</paragraph>
                <target ids="devstack" names="devstack" refuri="http://docs.openstack.org/developer/devstack/"></target>
                <target ids="vagrant" names="vagrant" refuri="https://github.com/openstack-dev/devstack-vagrant/blob/master/README.md"></target>
                <comment xml:space="preserve">Until the vagrant markdown documents are rendered somewhere on .openstack.org, linking to github</comment>
            </section>
            <section ids="explicit-install-clone" names="explicit\ install/clone">
                <title>Explicit Install/Clone</title>
                <paragraph>DevStack installs a complete OpenStack environment.  Alternatively,
                    you can explicitly install and clone just what you need for Nova
                    development.</paragraph>
                <section ids="getting-the-code" names="getting\ the\ code">
                    <title>Getting the code</title>
                    <paragraph>Grab the code from git:</paragraph>
                    <literal_block xml:space="preserve">git clone https://git.openstack.org/openstack/nova
cd nova</literal_block>
                </section>
                <section ids="linux-systems" names="linux\ systems">
                    <title>Linux Systems</title>
                    <paragraph>The first step of this process is to install the system (not Python)
                        packages that are required. Following are instructions on how to do
                        this on Linux and on the Mac.</paragraph>
                    <note>
                        <paragraph>This section is tested for Nova on Ubuntu (14.04-64) and
                            Fedora-based (RHEL 6.1) distributions. Feel free to add notes and
                            change according to your experiences or operating system.</paragraph>
                    </note>
                    <paragraph>Install the prerequisite packages listed in the <literal>bindep.txt</literal>
                        file.</paragraph>
                    <paragraph>On Debian-based distributions (e.g., Debian/Mint/Ubuntu):</paragraph>
                    <literal_block xml:space="preserve">sudo apt-get install python-pip
sudo pip install tox
tox -e bindep
sudo apt-get install &lt;indicated missing package names&gt;</literal_block>
                    <paragraph>On Fedora-based distributions (e.g., Fedora/RHEL/CentOS/Scientific Linux):</paragraph>
                    <literal_block xml:space="preserve">sudo yum install python-pip
sudo pip install tox
tox -e bindep
sudo yum install &lt;indicated missing package names&gt;</literal_block>
                    <paragraph>On openSUSE-based distributions (SLES 12, openSUSE Leap 42.1 or Tumbleweed):</paragraph>
                    <literal_block xml:space="preserve">sudo zypper in python-pip
sudo pip install tox
tox -e bindep
sudo zypper in &lt;indicated missing package names&gt;</literal_block>
                </section>
                <section ids="mac-os-x-systems" names="mac\ os\ x\ systems">
                    <title>Mac OS X Systems</title>
                    <paragraph>Install virtualenv:</paragraph>
                    <literal_block xml:space="preserve">sudo easy_install virtualenv</literal_block>
                    <paragraph>Check the version of OpenSSL you have installed:</paragraph>
                    <literal_block xml:space="preserve">openssl version</literal_block>
                    <paragraph>The stock version of OpenSSL that ships with Mac OS X 10.6 (OpenSSL 0.9.8l)
                        or Mac OS X 10.7 (OpenSSL 0.9.8r) or Mac OS X  10.10.3 (OpenSSL 0.9.8zc) works
                        fine with nova. OpenSSL versions from brew like OpenSSL 1.0.1k work fine
                        as well.</paragraph>
                </section>
            </section>
        </section>
        <section ids="building-the-documentation" names="building\ the\ documentation">
            <title>Building the Documentation</title>
            <paragraph>Install the prerequisite packages: graphviz</paragraph>
            <paragraph>To do a full documentation build, issue the following command while
                the nova directory is current.</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">tox -edocs</literal_block>
            <paragraph>That will create a Python virtual environment, install the needed
                Python prerequisites in that environment, and build all the
                documentation in that environment.</paragraph>
        </section>
        <section ids="running-unit-tests" names="running\ unit\ tests">
            <title>Running unit tests</title>
            <paragraph>See <reference name="Running Python Unit Tests" refuri="http://docs.openstack.org/infra/manual/python.html#running-python-unit-tests">Running Python Unit Tests</reference>.</paragraph>
            <target ids="running-python-unit-tests" names="running\ python\ unit\ tests" refuri="http://docs.openstack.org/infra/manual/python.html#running-python-unit-tests"></target>
            <paragraph>Note that some unit and functional tests use a database. See the file
                <literal>tools/test-setup.sh</literal> on how the databases are set up in the
                OpenStack CI environment and replicate it in your test environment.</paragraph>
        </section>
        <section ids="using-a-remote-debugger" names="using\ a\ remote\ debugger">
            <title>Using a remote debugger</title>
            <paragraph>Some modern IDE such as pycharm (commercial) or Eclipse (open source) support remote debugging.  In order to run nova with remote debugging, start the nova process
                with the following parameters
                --remote_debug-host &lt;host IP where the debugger is running&gt;
                --remote_debug-port &lt;port it is listening on&gt;</paragraph>
            <paragraph>Before you start your nova process, start the remote debugger using the instructions for that debugger.
                For pycharm - <reference refuri="http://blog.jetbrains.com/pycharm/2010/12/python-remote-debug-with-pycharm/">http://blog.jetbrains.com/pycharm/2010/12/python-remote-debug-with-pycharm/</reference>
                For Eclipse - <reference refuri="http://pydev.org/manual_adv_remote_debugger.html">http://pydev.org/manual_adv_remote_debugger.html</reference></paragraph>
            <paragraph>More detailed instructions are located here - <reference refuri="http://novaremotedebug.blogspot.com">http://novaremotedebug.blogspot.com</reference></paragraph>
        </section>
        <section ids="using-fake-computes-for-tests" names="using\ fake\ computes\ for\ tests">
            <title>Using fake computes for tests</title>
            <paragraph>The number of instances supported by fake computes is not limited by physical
                constraints. It allows you to perform stress tests on a deployment with few
                resources (typically a laptop). But you must avoid using scheduler filters
                limiting the number of instances per compute (like RamFilter, DiskFilter,
                AggregateCoreFilter), otherwise they will limit the number of instances per
                compute.</paragraph>
            <paragraph>Fake computes can also be used in multi hypervisor-type deployments in order to
                take advantage of fake and "real" computes during tests:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>create many fake instances for stress tests</paragraph>
                </list_item>
                <list_item>
                    <paragraph>create some "real" instances for functional tests</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Fake computes can be used for testing Nova itself but also applications on top
                of it.</paragraph>
        </section>
    </section>
</document>
