<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/nova/doc/source/user/placement.rst">
    <comment xml:space="preserve">Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.</comment>
    <section ids="placement-api" names="placement\ api">
        <title>Placement API</title>
        <section ids="overview" names="overview">
            <title>Overview</title>
            <paragraph>Nova introduced the placement API service in the 14.0.0 Newton release. This
                is a separate REST API stack and data model used to track resource provider
                inventories and usages, along with different classes of resources. For example,
                a resource provider can be a compute node, a shared storage pool, or an IP
                allocation pool. The placement service tracks the inventory and usage of each
                provider. For example, an instance created on a compute node may be a consumer
                of resources such as RAM and CPU from a compute node resource provider, disk
                from an external shared storage pool resource provider and IP addresses from
                an external IP pool resource provider.</paragraph>
            <paragraph>The types of resources consumed are tracked as <strong>classes</strong>. The service
                provides a set of standard resource classes (for example <title_reference>DISK_GB</title_reference>,
                <title_reference>MEMORY_MB</title_reference>, and <title_reference>VCPU</title_reference>) and provides the ability to define custom resource
                classes as needed.</paragraph>
            <paragraph>Each resource provider may also have a set of traits which describe qualitative
                aspects of the resource provider. Traits describe an aspect of a resource
                provider that cannot itself be consumed but a workload may wish to specify. For
                example, available disk may be solid state drives (SSD).</paragraph>
            <section dupnames="references" ids="references">
                <title>References</title>
                <paragraph>The following specifications represent the stages of design and development of
                    resource providers and the Placement service. Implementation details may have
                    changed or be partially complete at this time.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><reference name="Generic Resource Pools" refuri="https://specs.openstack.org/openstack/nova-specs/specs/newton/implemented/generic-resource-pools.html">Generic Resource Pools</reference><target ids="generic-resource-pools" names="generic\ resource\ pools" refuri="https://specs.openstack.org/openstack/nova-specs/specs/newton/implemented/generic-resource-pools.html"></target></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference name="Compute Node Inventory" refuri="https://specs.openstack.org/openstack/nova-specs/specs/newton/implemented/compute-node-inventory-newton.html">Compute Node Inventory</reference><target ids="compute-node-inventory" names="compute\ node\ inventory" refuri="https://specs.openstack.org/openstack/nova-specs/specs/newton/implemented/compute-node-inventory-newton.html"></target></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference name="Resource Provider Allocations" refuri="https://specs.openstack.org/openstack/nova-specs/specs/newton/implemented/resource-providers-allocations.html">Resource Provider Allocations</reference><target ids="resource-provider-allocations" names="resource\ provider\ allocations" refuri="https://specs.openstack.org/openstack/nova-specs/specs/newton/implemented/resource-providers-allocations.html"></target></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference name="Resource Provider Base Models" refuri="https://specs.openstack.org/openstack/nova-specs/specs/newton/implemented/resource-providers.html">Resource Provider Base Models</reference><target ids="resource-provider-base-models" names="resource\ provider\ base\ models" refuri="https://specs.openstack.org/openstack/nova-specs/specs/newton/implemented/resource-providers.html"></target></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference name="Nested Resource Providers" refuri="http://specs.openstack.org/openstack/nova-specs/specs/pike/approved/nested-resource-providers.html">Nested Resource Providers</reference><target ids="nested-resource-providers" names="nested\ resource\ providers" refuri="http://specs.openstack.org/openstack/nova-specs/specs/pike/approved/nested-resource-providers.html"></target></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference name="Custom Resource Classes" refuri="http://specs.openstack.org/openstack/nova-specs/specs/ocata/implemented/custom-resource-classes.html">Custom Resource Classes</reference><target ids="custom-resource-classes" names="custom\ resource\ classes" refuri="http://specs.openstack.org/openstack/nova-specs/specs/ocata/implemented/custom-resource-classes.html"></target></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference name="Scheduler Filters in DB" refuri="http://specs.openstack.org/openstack/nova-specs/specs/ocata/implemented/resource-providers-scheduler-db-filters.html">Scheduler Filters in DB</reference><target ids="scheduler-filters-in-db" names="scheduler\ filters\ in\ db" refuri="http://specs.openstack.org/openstack/nova-specs/specs/ocata/implemented/resource-providers-scheduler-db-filters.html"></target></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference name="Scheduler claiming resources to the Placement API" refuri="http://specs.openstack.org/openstack/nova-specs/specs/pike/approved/placement-claims.html">Scheduler claiming resources to the Placement API</reference><target ids="scheduler-claiming-resources-to-the-placement-api" names="scheduler\ claiming\ resources\ to\ the\ placement\ api" refuri="http://specs.openstack.org/openstack/nova-specs/specs/pike/approved/placement-claims.html"></target></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference name="The Traits API - Manage Traits with ResourceProvider" refuri="http://specs.openstack.org/openstack/nova-specs/specs/pike/approved/resource-provider-traits.html">The Traits API - Manage Traits with ResourceProvider</reference><target ids="the-traits-api-manage-traits-with-resourceprovider" names="the\ traits\ api\ -\ manage\ traits\ with\ resourceprovider" refuri="http://specs.openstack.org/openstack/nova-specs/specs/pike/approved/resource-provider-traits.html"></target></paragraph>
                    </list_item>
                </bullet_list>
            </section>
        </section>
        <section ids="deployment" names="deployment">
            <title>Deployment</title>
            <paragraph>The placement-api service must be deployed at some point after you have
                upgraded to the 14.0.0 Newton release but before you can upgrade to the 15.0.0
                Ocata release. This is so that the resource tracker in the nova-compute service
                can populate resource provider (compute node) inventory and allocation
                information which will be used by the nova-scheduler service in Ocata.</paragraph>
            <section ids="steps" names="steps">
                <title>Steps</title>
                <paragraph><strong>1. Deploy the API service</strong></paragraph>
                <paragraph>At this time the placement API code is still in Nova alongside the compute
                    REST API code (nova-api). So once you have upgraded nova-api to Newton you
                    already have the placement API code, you just need to install the service.
                    Nova provides a <literal>nova-placement-api</literal> WSGI script for running the service
                    with Apache.</paragraph>
                <note>
                    <paragraph>The placement API service is currently developed within Nova but
                        it is designed to be as separate as possible from the existing code so
                        that it can eventually be split into a separate project.</paragraph>
                </note>
                <paragraph><strong>2. Synchronize the database</strong></paragraph>
                <paragraph>In the Newton release the Nova <strong>api</strong> database is the only deployment
                    option for the placement API service and the resources it manages. After
                    upgrading the nova-api service for Newton and running the
                    <literal>nova-manage api_db sync</literal> command the placement tables will be created.</paragraph>
                <note>
                    <paragraph>There are plans to add the ability to run the placement service
                        with a separate <strong>placement</strong> database that would just have the tables
                        necessary for that service and not everything else that goes into the
                        Nova <strong>api</strong> database.</paragraph>
                </note>
                <paragraph><strong>3. Create accounts and update the service catalog</strong></paragraph>
                <paragraph>Create a <strong>placement</strong> service user with an <strong>admin</strong> role in Keystone.</paragraph>
                <paragraph>The placement API is a separate service and thus should be registered under
                    a <strong>placement</strong> service type in the service catalog as that is what the
                    resource tracker in the nova-compute node will use to look up the endpoint.</paragraph>
                <paragraph>Devstack sets up the placement service on the default HTTP port (80) with a
                    <literal>/placement</literal> prefix instead of using an independent port.</paragraph>
                <paragraph><strong>4. Configure and restart nova-compute services</strong></paragraph>
                <paragraph>The 14.0.0 Newton nova-compute service code will begin reporting resource
                    provider inventory and usage information as soon as the placement API
                    service is in place and can respond to requests via the endpoint registered
                    in the service catalog.</paragraph>
                <paragraph><literal>nova.conf</literal> on the compute nodes must be updated in the <literal>[placement]</literal>
                    group to contain credentials for making requests from nova-compute to the
                    placement-api service.</paragraph>
                <note>
                    <paragraph>After upgrading nova-compute code to Newton and restarting the
                        service, the nova-compute service will attempt to make a connection
                        to the placement API and if that is not yet available a warning will
                        be logged. The nova-compute service will keep attempting to connect
                        to the placement API, warning periodically on error until it is
                        successful. Keep in mind that Placement is optional in Newton, but
                        required in Ocata, so the placement service should be enabled before
                        upgrading to Ocata. nova.conf on the compute nodes will need to be
                        updated in the <literal>[placement]</literal> group for credentials to make requests
                        from nova-compute to the placement-api service.</paragraph>
                </note>
            </section>
            <section dupnames="references" ids="id1">
                <title>References</title>
                <paragraph>The following changes were made to devstack (from oldest to newest) to enable
                    the placement-api service and can serve as a guide for your own deployment.</paragraph>
                <paragraph><reference refuri="https://review.openstack.org/#/c/342362/">https://review.openstack.org/#/c/342362/</reference></paragraph>
                <paragraph><reference refuri="https://review.openstack.org/#/c/363335/">https://review.openstack.org/#/c/363335/</reference></paragraph>
                <paragraph><reference refuri="https://review.openstack.org/#/c/363724/">https://review.openstack.org/#/c/363724/</reference></paragraph>
            </section>
        </section>
        <section ids="upgrade-notes" names="upgrade\ notes">
            <title>Upgrade Notes</title>
            <paragraph>The follow sub-sections provide notes on upgrading to a given target release.</paragraph>
            <note>
                <paragraph>As a reminder, the <reference internal="True" refuri="../cli/nova-status"><inline classes="doc">nova-status upgrade check</inline></reference> tool
                    can be used to help determine the status of your deployment and how ready it
                    is to perform an upgrade.</paragraph>
            </note>
            <section ids="ocata-15-0-0" names="ocata\ (15.0.0)">
                <title>Ocata (15.0.0)</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>The <literal>nova-compute</literal> service will fail to start in Ocata unless the
                            <literal>[placement]</literal> section of nova.conf on the compute is configured. As
                            mentioned in the deployment steps above, the Placement service should be
                            deployed by this point so the computes can register and start reporting
                            inventory and allocation information. If the computes are deployed
                            and configured <title_reference>before</title_reference> the Placement service, they will continue to try
                            and reconnect in a loop so that you do not need to restart the nova-compute
                            process to talk to the Placement service after the compute is properly
                            configured.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The <literal>nova.scheduler.filter_scheduler.FilterScheduler</literal> in Ocata will
                            fallback to not using the Placement service as long as there are older
                            <literal>nova-compute</literal> services running in the deployment. This allows for rolling
                            upgrades of the computes to not affect scheduling for the FilterScheduler.
                            However, the fallback mechanism will be removed in the 16.0.0 Pike release
                            such that the scheduler will make decisions based on the Placement service
                            and the resource providers (compute nodes) registered there. This means if
                            the computes are not reporting into Placement by Pike, build requests will
                            fail with <strong>NoValidHost</strong> errors.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>While the FilterScheduler technically depends on the Placement service
                            in Ocata, if you deploy the Placement service <title_reference>after</title_reference> you upgrade the
                            <literal>nova-scheduler</literal> service to Ocata and restart it, things will still work.
                            The scheduler will gracefully handle the absence of the Placement service.
                            However, once all computes are upgraded, the scheduler not being able to make
                            requests to Placement will result in <strong>NoValidHost</strong> errors.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>It is currently possible to exclude the <literal>CoreFilter</literal>, <literal>RamFilter</literal> and
                            <literal>DiskFilter</literal> from the list of enabled FilterScheduler filters such that
                            scheduling decisions are not based on CPU, RAM or disk usage. Once all
                            computes are reporting into the Placement service, however, and the
                            FilterScheduler starts to use the Placement service for decisions, those
                            excluded filters are ignored and the scheduler will make requests based on
                            VCPU, MEMORY_MB and DISK_GB inventory. If you wish to effectively ignore
                            that type of resource for placement decisions, you will need to adjust the
                            corresponding <literal>cpu_allocation_ratio</literal>, <literal>ram_allocation_ratio</literal>, and/or
                            <literal>disk_allocation_ratio</literal> configuration options to be very high values, e.g.
                            9999.0.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Users of CellsV1 will need to deploy a placement per cell, matching
                            the scope and cardinality of the regular <literal>nova-scheduler</literal> process.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="pike-16-0-0" names="pike\ (16.0.0)">
                <title>Pike (16.0.0)</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>The <literal>nova.scheduler.filter_scheduler.FilterScheduler</literal> in Pike will
                            no longer fall back to not using the Placement Service, even if older
                            computes are running in the deployment.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The FilterScheduler now requests allocation candidates from the Placement
                            service during scheduling. The allocation candidates information was
                            introduced in the Placement API 1.10 microversion, so you should upgrade the
                            placement service <strong>before</strong> the Nova scheduler service so that the scheduler
                            can take advantage of the allocation candidate information.</paragraph>
                        <paragraph>The scheduler gets the allocation candidates from the placement API and
                            uses those to get the compute nodes, which come from the cell(s). The
                            compute nodes are passed through the enabled scheduler filters and weighers.
                            The scheduler then iterates over this filtered and weighed list of hosts and
                            attempts to claim resources in the placement API for each instance in the
                            request. Claiming resources involves finding an allocation candidate that
                            contains an allocation against the selected host's UUID and asking the
                            placement API to allocate the requested instance resources. We continue
                            performing this claim request until success or we run out of allocation
                            candidates, resulting in a NoValidHost error.</paragraph>
                        <paragraph>For a move operation, such as migration, allocations are made in Placement
                            against both the source and destination compute node. Once the
                            move operation is complete, the resource tracker in the <emphasis>nova-compute</emphasis>
                            service will adjust the allocations in Placement appropriately.</paragraph>
                        <paragraph>For a resize to the same host, allocations are summed on the single compute
                            node. This could pose a problem if the compute node has limited capacity.
                            Since resizing to the same host is disabled by default, and generally only
                            used in testing, this is mentioned for completeness but should not be a
                            concern for production deployments.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
        </section>
        <section dupnames="rest\ api" ids="rest-api">
            <title>REST API</title>
            <paragraph>The placement API service has its own <reference name="REST API" refuri="https://developer.openstack.org/api-ref/placement/">REST API</reference> and data model.  One
                can get a sample of the REST API via the functional test <reference name="gabbits" refuri="http://git.openstack.org/cgit/openstack/nova/tree/nova/tests/functional/api/openstack/placement/gabbits">gabbits</reference>.</paragraph>
            <target ids="id2" names="rest\ api" refuri="https://developer.openstack.org/api-ref/placement/"></target>
            <target ids="gabbits" names="gabbits" refuri="http://git.openstack.org/cgit/openstack/nova/tree/nova/tests/functional/api/openstack/placement/gabbits"></target>
            <section ids="microversions" names="microversions">
                <title>Microversions</title>
                <paragraph>The placement API uses microversions for making incremental changes to the
                    API which client requests must opt into.</paragraph>
                <paragraph>It is especially important to keep in mind that nova-compute is a client of
                    the placement REST API and based on how Nova supports rolling upgrades the
                    nova-compute service could be Newton level code making requests to an Ocata
                    placement API, and vice-versa, an Ocata compute service in a cells v2 cell
                    could be making requests to a Newton placement API.</paragraph>
            </section>
            <section ids="rest-api-version-history" names="rest\ api\ version\ history">
                <title>REST API Version History</title>
                <paragraph>This documents the changes made to the REST API with every
                    microversion change. The description for each version should be a
                    verbose one which has enough information to be suitable for use in
                    user documentation.</paragraph>
                <section ids="maximum-in-newton" names="1.0\ (maximum\ in\ newton)">
                    <title>1.0 (Maximum in Newton)</title>
                    <paragraph>This is the initial version of the placement REST API that was released in
                        Nova 14.0.0 (Newton). This contains the following routes:</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>/resource_providers</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>/resource_providers/allocations</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>/resource_providers/inventories</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>/resource_providers/usages</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>/allocations</paragraph>
                        </list_item>
                    </bullet_list>
                </section>
                <section ids="resource-provider-aggregates" names="1.1\ resource\ provider\ aggregates">
                    <title>1.1 Resource provider aggregates</title>
                    <paragraph>The 1.1 version adds support for associating aggregates with
                        resource providers with <literal>GET</literal> and <literal>PUT</literal> methods on one new
                        route:</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>/resource_providers/{uuid}/aggregates</paragraph>
                        </list_item>
                    </bullet_list>
                </section>
                <section ids="id3" names="1.2\ custom\ resource\ classes">
                    <title>1.2 Custom resource classes</title>
                    <paragraph>Placement API version 1.2 adds basic operations allowing an admin to create,
                        list and delete custom resource classes.</paragraph>
                    <paragraph>The following new routes are added:</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>GET /resource_classes: return all resource classes</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>POST /resource_classes: create a new custom resource class</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>PUT /resource_classes/{name}: update name of custom resource class</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>DELETE /resource_classes/{name}: deletes a custom resource class</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>GET /resource_classes/{name}: get a single resource class</paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph>Custom resource classes must begin with the prefix "CUSTOM_" and contain only
                        the letters A through Z, the numbers 0 through 9 and the underscore "_"
                        character.</paragraph>
                </section>
                <section ids="member-of-query-parameter" names="1.3\ member_of\ query\ parameter">
                    <title>1.3 member_of query parameter</title>
                    <paragraph>Version 1.3 adds support for listing resource providers that are members of
                        any of the list of aggregates provided using a <literal>member_of</literal> query parameter:</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>/resource_providers?member_of=in:{agg1_uuid},{agg2_uuid},{agg3_uuid}</paragraph>
                        </list_item>
                    </bullet_list>
                </section>
                <section ids="filter-resource-providers-by-requested-resource-capacity-maximum-in-ocata" names="1.4\ filter\ resource\ providers\ by\ requested\ resource\ capacity\ (maximum\ in\ ocata)">
                    <title>1.4 Filter resource providers by requested resource capacity (Maximum in Ocata)</title>
                    <paragraph>The 1.4 version adds support for querying resource providers that have the
                        ability to serve a requested set of resources. A new "resources" query string
                        parameter is now accepted to the <title_reference>GET /resource_providers</title_reference> API call. This
                        parameter indicates the requested amounts of various resources that a provider
                        must have the capacity to serve. The "resources" query string parameter takes
                        the form:</paragraph>
                    <paragraph><literal>?resources=$RESOURCE_CLASS_NAME:$AMOUNT,$RESOURCE_CLASS_NAME:$AMOUNT</literal></paragraph>
                    <paragraph>For instance, if the user wishes to see resource providers that can service a
                        request for 2 vCPUs, 1024 MB of RAM and 50 GB of disk space, the user can issue
                        a request to:</paragraph>
                    <paragraph><title_reference>GET /resource_providers?resources=VCPU:2,MEMORY_MB:1024,DISK_GB:50</title_reference></paragraph>
                    <paragraph>If the resource class does not exist, then it will return a HTTP 400.</paragraph>
                    <note>
                        <paragraph>The resources filtering is also based on the <title_reference>min_unit</title_reference>, <title_reference>max_unit</title_reference>
                            and <title_reference>step_size</title_reference> of the inventory record. For example, if the <title_reference>max_unit</title_reference> is
                            512 for the DISK_GB inventory for a particular resource provider and a
                            GET request is made for <title_reference>DISK_GB:1024</title_reference>, that resource provider will not be
                            returned. The <title_reference>min_unit</title_reference> is the minimum amount of resource that can be
                            requested for a given inventory and resource provider. The <title_reference>step_size</title_reference> is
                            the increment of resource that can be requested for a given resource on a
                            given provider.</paragraph>
                    </note>
                </section>
                <section ids="delete-all-inventory-for-a-resource-provider" names="1.5\ delete\ all\ inventory\ for\ a\ resource\ provider">
                    <title>1.5 DELETE all inventory for a resource provider</title>
                    <paragraph>Placement API version 1.5 adds DELETE method for deleting all inventory for a
                        resource provider. The following new method is supported:</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>DELETE /resource_providers/{uuid}/inventories</paragraph>
                        </list_item>
                    </bullet_list>
                </section>
                <section ids="traits-api" names="1.6\ traits\ api">
                    <title>1.6 Traits API</title>
                    <paragraph>The 1.6 version adds basic operations allowing an admin to create, list, and
                        delete custom traits, also adds basic operations allowing an admin to attach
                        traits to a resource provider.</paragraph>
                    <paragraph>The following new routes are added:</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>GET /traits: Returns all resource classes.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>PUT /traits/{name}: To insert a single custom trait.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>GET /traits/{name}: To check if a trait name exists.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>DELETE /traits/{name}: To delete the specified trait.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>GET /resource_providers/{uuid}/traits: a list of traits associated
                                with a specific resource provider</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>PUT /resource_providers/{uuid}/traits: Set all the traits for a
                                specific resource provider</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>DELETE /resource_providers/{uuid}/traits: Remove any existing trait
                                associations for a specific resource provider</paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph>Custom traits must begin with the prefix "CUSTOM_" and contain only
                        the letters A through Z, the numbers 0 through 9 and the underscore "_"
                        character.</paragraph>
                </section>
                <section ids="idempotent-put-resource-classes-name" names="1.7\ idempotent\ put\ /resource_classes/{name}">
                    <title>1.7 Idempotent PUT /resource_classes/{name}</title>
                    <paragraph>The 1.7 version changes handling of <title_reference>PUT /resource_classes/{name}</title_reference> to be a
                        create or verification of the resource class with <title_reference>{name}</title_reference>. If the resource
                        class is a custom resource class and does not already exist it will be created
                        and a <literal>201</literal> response code returned. If the class already exists the response
                        code will be <literal>204</literal>. This makes it possible to check or create a resource
                        class in one request.</paragraph>
                </section>
                <section ids="require-placement-project-id-user-id-in-put-allocations" names="1.8\ require\ placement\ 'project_id',\ 'user_id'\ in\ put\ /allocations">
                    <title>1.8 Require placement 'project_id', 'user_id' in PUT /allocations</title>
                    <paragraph>The 1.8 version adds <literal>project_id</literal> and <literal>user_id</literal> required request parameters
                        to <literal>PUT /allocations</literal>.</paragraph>
                </section>
                <section ids="add-get-usages" names="1.9\ add\ get\ /usages">
                    <title>1.9 Add GET /usages</title>
                    <paragraph>The 1.9 version adds usages that can be queried by a project or project/user.</paragraph>
                    <paragraph>The following new routes are added:</paragraph>
                    <paragraph><literal>GET /usages?project_id=&lt;project_id&gt;</literal></paragraph>
                    <block_quote>
                        <paragraph>Returns all usages for a given project.</paragraph>
                    </block_quote>
                    <paragraph><literal>GET /usages?project_id=&lt;project_id&gt;&amp;user_id=&lt;user_id&gt;</literal></paragraph>
                    <block_quote>
                        <paragraph>Returns all usages for a given project and user.</paragraph>
                    </block_quote>
                </section>
                <section ids="allocation-candidates" names="1.10\ allocation\ candidates">
                    <title>1.10 Allocation candidates</title>
                    <paragraph>The 1.10 version brings a new REST resource endpoint for getting a list of
                        allocation candidates. Allocation candidates are collections of possible
                        allocations against resource providers that can satisfy a particular request
                        for resources.</paragraph>
                </section>
            </section>
        </section>
    </section>
</document>
