<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/nova/doc/source/reference/services.rst">
    <comment xml:space="preserve">Copyright 2010-2011 United States Government as represented by the
Administrator of the National Aeronautics and Space Administration.
All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.</comment>
    <target refid="service-manager-driver"></target>
    <section ids="services-managers-and-drivers service-manager-driver" names="services,\ managers\ and\ drivers service_manager_driver">
        <title>Services, Managers and Drivers</title>
        <paragraph>The responsibilities of Services, Managers, and Drivers, can be a bit confusing to people that are new to nova.  This document attempts to outline the division of responsibilities to make understanding the system a little bit easier.</paragraph>
        <paragraph>Currently, Managers and Drivers are specified by flags and loaded using utils.load_object().  This method allows for them to be implemented as singletons, classes, modules or objects.  As long as the path specified by the flag leads to an object (or a callable that returns an object) that responds to getattr, it should work as a manager or driver.</paragraph>
        <section ids="the-nova-service-module" names="the\ nova.service\ module">
            <title>The <literal classes="xref py py-mod">nova.service</literal> Module</title>
            <paragraph>Generic Node base class for all workers that run on hosts.</paragraph>
            <index entries=""></index>
            <desc desctype="class" domain="py" noindex="True" objtype="class">
                <desc_signature class="" first="False" fullname="Service" module="nova.service"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">Service</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">host</desc_parameter><desc_parameter xml:space="preserve">binary</desc_parameter><desc_parameter xml:space="preserve">topic</desc_parameter><desc_parameter xml:space="preserve">manager</desc_parameter><desc_parameter xml:space="preserve">report_interval=None</desc_parameter><desc_parameter xml:space="preserve">periodic_enable=None</desc_parameter><desc_parameter xml:space="preserve">periodic_fuzzy_delay=None</desc_parameter><desc_parameter xml:space="preserve">periodic_interval_max=None</desc_parameter><desc_parameter xml:space="preserve">*args</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">oslo_service.service.Service</literal></paragraph>
                    <paragraph>Service object for binaries running on hosts.</paragraph>
                    <paragraph>A service takes a manager and enables rpc by listening to queues based
                        on topic. It also periodically runs tasks on the manager and reports
                        its state to the database services table.</paragraph>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="Service" first="False" fullname="Service.basic_config_check" module="nova.service"><desc_name xml:space="preserve">basic_config_check</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Perform basic config checks before starting processing.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="classmethod" domain="py" noindex="True" objtype="classmethod">
                        <desc_signature class="Service" first="False" fullname="Service.create" module="nova.service"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">host=None</desc_parameter><desc_parameter xml:space="preserve">binary=None</desc_parameter><desc_parameter xml:space="preserve">topic=None</desc_parameter><desc_parameter xml:space="preserve">manager=None</desc_parameter><desc_parameter xml:space="preserve">report_interval=None</desc_parameter><desc_parameter xml:space="preserve">periodic_enable=None</desc_parameter><desc_parameter xml:space="preserve">periodic_fuzzy_delay=None</desc_parameter><desc_parameter xml:space="preserve">periodic_interval_max=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Instantiates class and passes back application object.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">host</literal_strong> -- defaults to CONF.host</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">binary</literal_strong> -- defaults to basename of executable</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">topic</literal_strong> -- defaults to bin_name - 'nova-' part</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">manager</literal_strong> -- defaults to CONF.&lt;topic&gt;_manager</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">report_interval</literal_strong> -- defaults to CONF.report_interval</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">periodic_enable</literal_strong> -- defaults to CONF.periodic_enable</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">periodic_fuzzy_delay</literal_strong> -- defaults to CONF.periodic_fuzzy_delay</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">periodic_interval_max</literal_strong> -- if set, the max time to wait between runs</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="Service" first="False" fullname="Service.kill" module="nova.service"><desc_name xml:space="preserve">kill</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Destroy the service object in the datastore.</paragraph>
                            <paragraph>NOTE: Although this method is not used anywhere else than tests, it is
                                convenient to have it here, so the tests might easily and in clean way
                                stop and remove the service_ref.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="Service" first="False" fullname="Service.periodic_tasks" module="nova.service"><desc_name xml:space="preserve">periodic_tasks</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">raise_on_error=False</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Tasks to be run at a periodic interval.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="Service" first="False" fullname="Service.reset" module="nova.service"><desc_name xml:space="preserve">reset</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="Service" first="False" fullname="Service.start" module="nova.service"><desc_name xml:space="preserve">start</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="Service" first="False" fullname="Service.stop" module="nova.service"><desc_name xml:space="preserve">stop</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="class" domain="py" noindex="True" objtype="class">
                <desc_signature class="" first="False" fullname="WSGIService" module="nova.service"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">WSGIService</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">loader=None</desc_parameter><desc_parameter xml:space="preserve">use_ssl=False</desc_parameter><desc_parameter xml:space="preserve">max_url_len=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">oslo_service.service.Service</literal></paragraph>
                    <paragraph>Provides ability to launch API from a 'paste' configuration.</paragraph>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="WSGIService" first="False" fullname="WSGIService.reset" module="nova.service"><desc_name xml:space="preserve">reset</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Reset server greenpool size to default and service version cache.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>None</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="WSGIService" first="False" fullname="WSGIService.start" module="nova.service"><desc_name xml:space="preserve">start</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Start serving this service using loaded configuration.</paragraph>
                            <paragraph>Also, retrieve updated port number in case '0' was passed in, which
                                indicates a random port should be used.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>None</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="WSGIService" first="False" fullname="WSGIService.stop" module="nova.service"><desc_name xml:space="preserve">stop</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Stop serving this API.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>None</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="WSGIService" first="False" fullname="WSGIService.wait" module="nova.service"><desc_name xml:space="preserve">wait</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Wait for the service to stop serving this API.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>None</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="function" domain="py" noindex="True" objtype="function">
                <desc_signature class="" first="False" fullname="assert_eventlet_uses_monotonic_clock" module="nova.service"><desc_name xml:space="preserve">assert_eventlet_uses_monotonic_clock</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                <desc_content>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="function" domain="py" noindex="True" objtype="function">
                <desc_signature class="" first="False" fullname="process_launcher" module="nova.service"><desc_name xml:space="preserve">process_launcher</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                <desc_content>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="function" domain="py" noindex="True" objtype="function">
                <desc_signature class="" first="False" fullname="serve" module="nova.service"><desc_name xml:space="preserve">serve</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">server</desc_parameter><desc_parameter xml:space="preserve">workers=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="function" domain="py" noindex="True" objtype="function">
                <desc_signature class="" first="False" fullname="setup_profiler" module="nova.service"><desc_name xml:space="preserve">setup_profiler</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">binary</desc_parameter><desc_parameter xml:space="preserve">host</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="function" domain="py" noindex="True" objtype="function">
                <desc_signature class="" first="False" fullname="wait" module="nova.service"><desc_name xml:space="preserve">wait</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                <desc_content>
                </desc_content>
            </desc>
        </section>
        <section ids="the-nova-manager-module" names="the\ nova.manager\ module">
            <title>The <literal classes="xref py py-mod">nova.manager</literal> Module</title>
            <paragraph>Base Manager class.</paragraph>
            <paragraph>Managers are responsible for a certain aspect of the system.  It is a logical
                grouping of code relating to a portion of the system.  In general other
                components should be using the manager to make changes to the components that
                it is responsible for.</paragraph>
            <paragraph>For example, other components that need to deal with volumes in some way,
                should do so by calling methods on the VolumeManager instead of directly
                changing fields in the database.  This allows us to keep all of the code
                relating to volumes in the same place.</paragraph>
            <paragraph>We have adopted a basic strategy of Smart managers and dumb data, which means
                rather than attaching methods to data objects, components should call manager
                methods that act on the data.</paragraph>
            <paragraph>Methods on managers that can be executed locally should be called directly. If
                a particular method must execute on a remote host, this should be done via rpc
                to the service that wraps the manager</paragraph>
            <paragraph>Managers should be responsible for most of the db access, and
                non-implementation specific data.  Anything implementation specific that can't
                be generalized should be done by the Driver.</paragraph>
            <paragraph>In general, we prefer to have one manager with multiple drivers for different
                implementations, but sometimes it makes sense to have multiple managers.  You
                can think of it this way: Abstract different overall strategies at the manager
                level(FlatNetwork vs VlanNetwork), and different implementations at the driver
                level(LinuxNetDriver vs CiscoNetDriver).</paragraph>
            <paragraph>Managers will often provide methods for initial setup of a host or periodic
                tasks to a wrapping service.</paragraph>
            <paragraph>This module provides Manager, a base class for managers.</paragraph>
            <index entries=""></index>
            <desc desctype="class" domain="py" noindex="True" objtype="class">
                <desc_signature class="" first="False" fullname="Manager" module="nova.manager"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">Manager</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">host=None</desc_parameter><desc_parameter xml:space="preserve">db_driver=None</desc_parameter><desc_parameter xml:space="preserve">service_name='undefined'</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">nova.db.base.Base</literal>, <literal classes="xref py py-class">nova.manager.PeriodicTasks</literal></paragraph>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="Manager" first="False" fullname="Manager.cleanup_host" module="nova.manager"><desc_name xml:space="preserve">cleanup_host</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Hook to do cleanup work when the service shuts down.</paragraph>
                            <paragraph>Child classes should override this method.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="Manager" first="False" fullname="Manager.init_host" module="nova.manager"><desc_name xml:space="preserve">init_host</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Hook to do additional manager initialization when one requests
                                the service be started.  This is called before any service record
                                is created.</paragraph>
                            <paragraph>Child classes should override this method.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="Manager" first="False" fullname="Manager.periodic_tasks" module="nova.manager"><desc_name xml:space="preserve">periodic_tasks</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">raise_on_error=False</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Tasks to be run at a periodic interval.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="Manager" first="False" fullname="Manager.post_start_hook" module="nova.manager"><desc_name xml:space="preserve">post_start_hook</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Hook to provide the manager the ability to do additional
                                start-up work immediately after a service creates RPC consumers
                                and starts 'running'.</paragraph>
                            <paragraph>Child classes should override this method.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="Manager" first="False" fullname="Manager.pre_start_hook" module="nova.manager"><desc_name xml:space="preserve">pre_start_hook</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Hook to provide the manager the ability to do additional
                                start-up work before any RPC queues/consumers are created. This is
                                called after other initialization has succeeded and a service
                                record is created.</paragraph>
                            <paragraph>Child classes should override this method.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries=""></index>
                    <desc desctype="method" domain="py" noindex="True" objtype="method">
                        <desc_signature class="Manager" first="False" fullname="Manager.reset" module="nova.manager"><desc_name xml:space="preserve">reset</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Hook called on SIGHUP to signal the manager to re-read any
                                dynamic configuration or do any reconfiguration tasks.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="class" domain="py" noindex="True" objtype="class">
                <desc_signature class="" first="False" fullname="ManagerMeta" module="nova.manager"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">ManagerMeta</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">names</desc_parameter><desc_parameter xml:space="preserve">bases</desc_parameter><desc_parameter xml:space="preserve">dict_</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">nova.profiler.NoopMeta</literal>, <literal classes="xref py py-class">oslo_service.periodic_task._PeriodicTasksMeta</literal></paragraph>
                    <paragraph>Metaclass to trace all children of a specific class.</paragraph>
                    <paragraph>This metaclass wraps every public method (not starting with _ or __)
                        of the class using it. All children classes of the class using ManagerMeta
                        will be profiled as well.</paragraph>
                    <paragraph>Adding this metaclass requires that the __trace_args__ attribute be added
                        to the class we want to modify. That attribute is a dictionary
                        with one mandatory key: "name". "name" defines the name
                        of the action to be traced (for example, wsgi, rpc, db).</paragraph>
                    <paragraph>The OSprofiler-based tracing, although, will only happen if profiler
                        instance was initiated somewhere before in the thread, that can only happen
                        if profiling is enabled in nova.conf and the API call to Nova API contained
                        specific headers.</paragraph>
                </desc_content>
            </desc>
            <index entries=""></index>
            <desc desctype="class" domain="py" noindex="True" objtype="class">
                <desc_signature class="" first="False" fullname="PeriodicTasks" module="nova.manager"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">PeriodicTasks</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">oslo_service.periodic_task.PeriodicTasks</literal></paragraph>
                </desc_content>
            </desc>
        </section>
        <section ids="implementation-specific-drivers" names="implementation-specific\ drivers">
            <title>Implementation-Specific Drivers</title>
            <paragraph>A manager will generally load a driver for some of its tasks. The driver is responsible for specific implementation details.  Anything running shell commands on a host, or dealing with other non-python code should probably be happening in a driver.</paragraph>
            <paragraph>Drivers should minimize touching the database, although it is currently acceptable for implementation specific data. This may be reconsidered at some point.</paragraph>
            <paragraph>It usually makes sense to define an Abstract Base Class for the specific driver (i.e. VolumeDriver), to define the methods that a different driver would need to implement.</paragraph>
        </section>
    </section>
</document>
