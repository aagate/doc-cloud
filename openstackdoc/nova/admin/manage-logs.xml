<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/nova/doc/source/admin/manage-logs.rst">
    <section ids="logging" names="logging">
        <title>Logging</title>
        <section ids="logging-module" names="logging\ module">
            <title>Logging module</title>
            <paragraph>Logging behavior can be changed by creating a configuration file. To specify
                the configuration file, add this line to the <literal>/etc/nova/nova.conf</literal> file:</paragraph>
            <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">log-config=/etc/nova/logging.conf</literal_block>
            <paragraph>To change the logging level, add <literal>DEBUG</literal>, <literal>INFO</literal>, <literal>WARNING</literal>, or <literal>ERROR</literal>
                as a parameter.</paragraph>
            <paragraph>The logging configuration file is an INI-style configuration file, which must
                contain a section called <literal>logger_nova</literal>. This controls the behavior of the
                logging facility in the <literal>nova-*</literal> services. For example:</paragraph>
            <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[logger_nova]
level = INFO
handlers = stderr
qualname = nova</literal_block>
            <paragraph>This example sets the debugging level to <literal>INFO</literal> (which is less verbose than
                the default <literal>DEBUG</literal> setting).</paragraph>
            <paragraph>For more about the logging configuration syntax, including the <literal>handlers</literal> and
                <literal>quaname</literal> variables, see the <reference name="Python documentation" refuri="https://docs.python.org/release/2.7/library/logging.html#configuration-file-format">Python documentation</reference>
                on logging configuration files.</paragraph>
            <paragraph>For an example of the <literal>logging.conf</literal> file with various defined handlers, see
                the <reference name="Example Configuration File for nova" refuri="https://docs.openstack.org/oslo.log/latest/admin/example_nova.html">Example Configuration File for nova</reference>.</paragraph>
        </section>
        <section ids="syslog" names="syslog">
            <title>Syslog</title>
            <paragraph>OpenStack Compute services can send logging information to syslog. This is
                useful if you want to use rsyslog to forward logs to a remote machine.
                Separately configure the Compute service (nova), the Identity service
                (keystone), the Image service (glance), and, if you are using it, the Block
                Storage service (cinder) to send log messages to syslog.  Open these
                configuration files:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>/etc/nova/nova.conf</literal></paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>/etc/keystone/keystone.conf</literal></paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>/etc/glance/glance-api.conf</literal></paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>/etc/glance/glance-registry.conf</literal></paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>/etc/cinder/cinder.conf</literal></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>In each configuration file, add these lines:</paragraph>
            <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">debug = False
use_syslog = True
syslog_log_facility = LOG_LOCAL0</literal_block>
            <paragraph>In addition to enabling syslog, these settings also turn off debugging output
                from the log.</paragraph>
            <note>
                <paragraph>Although this example uses the same local facility for each service
                    (<literal>LOG_LOCAL0</literal>, which corresponds to syslog facility <literal>LOCAL0</literal>), we
                    recommend that you configure a separate local facility for each service, as
                    this provides better isolation and more flexibility. For example, you can
                    capture logging information at different severity levels for different
                    services. syslog allows you to define up to eight local facilities,
                    <literal>LOCAL0, LOCAL1, ..., LOCAL7</literal>. For more information, see the syslog
                    documentation.</paragraph>
            </note>
        </section>
        <section ids="rsyslog" names="rsyslog">
            <title>Rsyslog</title>
            <paragraph>rsyslog is useful for setting up a centralized log server across multiple
                machines. This section briefly describe the configuration to set up an rsyslog
                server. A full treatment of rsyslog is beyond the scope of this book. This
                section assumes rsyslog has already been installed on your hosts (it is
                installed by default on most Linux distributions).</paragraph>
            <paragraph>This example provides a minimal configuration for <literal>/etc/rsyslog.conf</literal> on the
                log server host, which receives the log files</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve"># provides TCP syslog reception
$ModLoad imtcp
$InputTCPServerRun 1024</literal_block>
            <paragraph>Add a filter rule to <literal>/etc/rsyslog.conf</literal> which looks for a host name.  This
                example uses COMPUTE_01 as the compute host name:</paragraph>
            <literal_block highlight_args="{}" language="none" linenos="False" xml:space="preserve">:hostname, isequal, "COMPUTE_01" /mnt/rsyslog/logs/compute-01.log</literal_block>
            <paragraph>On each compute host, create a file named <literal>/etc/rsyslog.d/60-nova.conf</literal>, with
                the following content:</paragraph>
            <literal_block highlight_args="{}" language="none" linenos="False" xml:space="preserve"># prevent debug from dnsmasq with the daemon.none parameter
*.*;auth,authpriv.none,daemon.none,local0.none -/var/log/syslog
# Specify a log level of ERROR
local0.error    @@172.20.1.43:1024</literal_block>
            <paragraph>Once you have created the file, restart the <literal>rsyslog</literal> service. Error-level
                log messages on the compute hosts should now be sent to the log server.</paragraph>
        </section>
        <section ids="serial-console" names="serial\ console">
            <title>Serial console</title>
            <paragraph>The serial console provides a way to examine kernel output and other system
                messages during troubleshooting if the instance lacks network connectivity.</paragraph>
            <paragraph>Read-only access from server serial console is possible using the
                <literal>os-GetSerialOutput</literal> server action. Most cloud images enable this feature by
                default. For more information, see <reference internal="True" refuri="support-compute#compute-common-errors-and-fixes"><inline classes="std std-ref">Common errors and fixes for Compute</inline></reference>.</paragraph>
            <paragraph>OpenStack Juno and later supports read-write access using the serial console
                using the <literal>os-GetSerialConsole</literal> server action. This feature also requires a
                websocket client to access the serial console.</paragraph>
            <rubric>Configuring read-write serial console access</rubric>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>On a compute node, edit the <literal>/etc/nova/nova.conf</literal> file:</paragraph>
                    <paragraph>In the <literal>[serial_console]</literal> section, enable the serial console:</paragraph>
                    <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[serial_console]
# ...
enabled = true</literal_block>
                </list_item>
                <list_item>
                    <paragraph>In the <literal>[serial_console]</literal> section, configure the serial console proxy
                        similar to graphical console proxies:</paragraph>
                    <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[serial_console]
# ...
base_url = ws://controller:6083/
listen = 0.0.0.0
proxyclient_address = MANAGEMENT_INTERFACE_IP_ADDRESS</literal_block>
                    <paragraph>The <literal>base_url</literal> option specifies the base URL that clients receive from the
                        API upon requesting a serial console. Typically, this refers to the host
                        name of the controller node.</paragraph>
                    <paragraph>The <literal>listen</literal> option specifies the network interface nova-compute should
                        listen on for virtual console connections. Typically, 0.0.0.0 will enable
                        listening on all interfaces.</paragraph>
                    <paragraph>The <literal>proxyclient_address</literal> option specifies which network interface the
                        proxy should connect to. Typically, this refers to the IP address of the
                        management interface.</paragraph>
                    <paragraph>When you enable read-write serial console access, Compute will add serial
                        console information to the Libvirt XML file for the instance. For example:</paragraph>
                    <literal_block highlight_args="{}" language="xml" linenos="False" xml:space="preserve">&lt;console type='tcp'&gt;
  &lt;source mode='bind' host='127.0.0.1' service='10000'/&gt;
  &lt;protocol type='raw'/&gt;
  &lt;target type='serial' port='0'/&gt;
  &lt;alias name='serial0'/&gt;
&lt;/console&gt;</literal_block>
                </list_item>
            </enumerated_list>
            <rubric>Accessing the serial console on an instance</rubric>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>Use the <literal_strong classes="command">nova get-serial-proxy</literal_strong> command to retrieve the websocket
                        URL for the serial console on the instance:</paragraph>
                    <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ nova get-serial-proxy INSTANCE_NAME</literal_block>
                    <table classes="colwidths-given">
                        <tgroup cols="2">
                            <colspec colwidth="9"></colspec>
                            <colspec colwidth="65"></colspec>
                            <tbody>
                                <row>
                                    <entry>
                                        <paragraph>Type</paragraph>
                                    </entry>
                                    <entry>
                                        <paragraph>Url</paragraph>
                                    </entry>
                                </row>
                                <row>
                                    <entry>
                                        <paragraph>serial</paragraph>
                                    </entry>
                                    <entry>
                                        <paragraph>ws://127.0.0.1:6083/?token=18510769-71ad-4e5a-8348-4218b5613b3d</paragraph>
                                    </entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </table>
                    <paragraph>Alternatively, use the API directly:</paragraph>
                    <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ curl -i 'http://&lt;controller&gt;:8774/v2.1/&lt;tenant_uuid&gt;/servers/&lt;instance_uuid&gt;/action' \
  -X POST \
  -H "Accept: application/json" \
  -H "Content-Type: application/json" \
  -H "X-Auth-Project-Id: &lt;project_id&gt;" \
  -H "X-Auth-Token: &lt;auth_token&gt;" \
  -d '{"os-getSerialConsole": {"type": "serial"}}'</literal_block>
                </list_item>
                <list_item>
                    <paragraph>Use Python websocket with the URL to generate <literal>.send</literal>, <literal>.recv</literal>, and
                        <literal>.fileno</literal> methods for serial console access. For example:</paragraph>
                    <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">import websocket
ws = websocket.create_connection(
    'ws://127.0.0.1:6083/?token=18510769-71ad-4e5a-8348-4218b5613b3d',
    subprotocols=['binary', 'base64'])</literal_block>
                </list_item>
            </enumerated_list>
            <paragraph>Alternatively, use a <reference name="Python websocket client" refuri="https://github.com/larsks/novaconsole/">Python websocket client</reference>.</paragraph>
            <note>
                <paragraph>When you enable the serial console, typical instance logging using the
                    <literal_strong classes="command">nova console-log</literal_strong> command is disabled. Kernel output and other
                    system messages will not be visible unless you are actively viewing the
                    serial console.</paragraph>
            </note>
        </section>
    </section>
</document>
