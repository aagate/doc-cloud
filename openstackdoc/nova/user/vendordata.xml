<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/nova/doc/source/user/vendordata.rst">
    <section ids="vendordata" names="vendordata">
        <title>Vendordata</title>
        <paragraph>Nova presents configuration information to instances it starts via a mechanism
            called metadata. This metadata is made available via either a configdrive, or
            the metadata service. These mechanisms are widely used via helpers such as
            cloud-init to specify things like the root password the instance should use.
            There are three separate groups of people who need to be able to specify
            metadata for an instance.</paragraph>
        <section ids="user-provided-data" names="user\ provided\ data">
            <title>User provided data</title>
            <paragraph>The user who booted the instance can pass metadata to the instance in several
                ways. For authentication keypairs, the keypairs functionality of the Nova APIs
                can be used to upload a key and then specify that key during the Nova boot API
                request. For less structured data, a small opaque blob of data may be passed
                via the user-data feature of the Nova API. Examples of such unstructured data
                would be the puppet role that the instance should use, or the HTTP address of a
                server to fetch post-boot configuration information from.</paragraph>
        </section>
        <section ids="nova-provided-data" names="nova\ provided\ data">
            <title>Nova provided data</title>
            <paragraph>Nova itself needs to pass information to the instance via its internal
                implementation of the metadata system. Such information includes the network
                configuration for the instance, as well as the requested hostname for the
                instance. This happens by default and requires no configuration by the user or
                deployer.</paragraph>
        </section>
        <section ids="deployer-provided-data" names="deployer\ provided\ data">
            <title>Deployer provided data</title>
            <paragraph>There is however a third type of data. It is possible that the deployer of
                OpenStack needs to pass data to an instance. It is also possible that this data
                is not known to the user starting the instance. An example might be a
                cryptographic token to be used to register the instance with Active Directory
                post boot -- the user starting the instance should not have access to Active
                Directory to create this token, but the Nova deployment might have permissions
                to generate the token on the user's behalf.</paragraph>
            <paragraph>Nova supports a mechanism to add "vendordata" to the metadata handed to
                instances. This is done by loading named modules, which must appear in the nova
                source code. We provide two such modules:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>StaticJSON: a module which can include the contents of a static JSON file
                        loaded from disk. This can be used for things which don't change between
                        instances, such as the location of the corporate puppet server.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>DynamicJSON: a module which will make a request to an external REST service
                        to determine what metadata to add to an instance. This is how we recommend
                        you generate things like Active Directory tokens which change per instance.</paragraph>
                </list_item>
            </bullet_list>
        </section>
    </section>
    <section ids="tell-me-more-about-dynamicjson" names="tell\ me\ more\ about\ dynamicjson">
        <title>Tell me more about DynamicJSON</title>
        <paragraph>To use DynamicJSON, you configure it like this:</paragraph>
        <bullet_list bullet="-">
            <list_item>
                <paragraph>Add "DynamicJSON" to the vendordata_providers configuration option. This can
                    also include "StaticJSON" if you'd like.</paragraph>
            </list_item>
            <list_item>
                <paragraph>Specify the REST services to be contacted to generate metadata in the
                    vendordata_dynamic_targets configuration option. There can be more than one
                    of these, but note that they will be queried once per metadata request from
                    the instance, which can mean a fair bit of traffic depending on your
                    configuration and the configuration of the instance.</paragraph>
            </list_item>
        </bullet_list>
        <paragraph>The format for an entry in vendordata_dynamic_targets is like this:</paragraph>
        <block_quote>
            <paragraph>&lt;name&gt;@&lt;url&gt;</paragraph>
        </block_quote>
        <paragraph>Where name is a short string not including the '@' character, and where the
            URL can include a port number if so required. An example would be:</paragraph>
        <literal_block xml:space="preserve">testing@http://127.0.0.1:125</literal_block>
        <paragraph>Metadata fetched from this target will appear in the metadata service at a
            new file called vendordata2.json, with a path (either in the metadata service
            URL or in the configdrive) like this:</paragraph>
        <block_quote>
            <paragraph>openstack/2016-10-06/vendor_data2.json</paragraph>
        </block_quote>
        <paragraph>For each dynamic target, there will be an entry in the JSON file named after
            that target. For example:</paragraph>
        <literal_block xml:space="preserve">{
    "testing": {
        "value1": 1,
        "value2": 2,
        "value3": "three"
    }
}</literal_block>
        <paragraph>Do not specify the same name more than once. If you do, we will ignore
            subsequent uses of a previously used name.</paragraph>
        <paragraph>The following data is passed to your REST service as a JSON encoded POST:</paragraph>
        <table>
            <tgroup cols="2">
                <colspec colwidth="13"></colspec>
                <colspec colwidth="49"></colspec>
                <thead>
                    <row>
                        <entry>
                            <paragraph>Key</paragraph>
                        </entry>
                        <entry>
                            <paragraph>Description</paragraph>
                        </entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>
                            <paragraph>project-id</paragraph>
                        </entry>
                        <entry>
                            <paragraph>The ID of the project that owns this instance.</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph>instance-id</paragraph>
                        </entry>
                        <entry>
                            <paragraph>The UUID of this instance.</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph>image-id</paragraph>
                        </entry>
                        <entry>
                            <paragraph>The ID of the image used to boot this instance.</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph>user-data</paragraph>
                        </entry>
                        <entry>
                            <paragraph>As specified by the user at boot time.</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph>hostname</paragraph>
                        </entry>
                        <entry>
                            <paragraph>The hostname of the instance.</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph>metadata</paragraph>
                        </entry>
                        <entry>
                            <paragraph>As specified by the user at boot time.</paragraph>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </section>
    <section ids="deployment-considerations" names="deployment\ considerations">
        <title>Deployment considerations</title>
        <paragraph>Nova provides authentication to external metadata services in order to provide
            some level of certainty that the request came from nova. This is done by
            providing a service token with the request -- you can then just deploy your
            metadata service with the keystone authentication WSGI middleware. This is
            configured using the keystone authentication parameters in the
            <literal>vendordata_dynamic_auth</literal> configuration group.</paragraph>
    </section>
</document>
